{"config":{"lang":["en","de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Summary","text":"<p>In this repositories are all my summaries from ZHAW but also personal projects</p>"},{"location":"21HS/AN1/01_funktionen.html","title":"Summenzeichen","text":"<p>\\(\\sum\\limits_{k=1}^{5} 2\\cdot k\\)</p> <p>Das Summenzeichen ist eine Art For-Loop in Mathe.</p> <p>Folgendes Beispiel: \\(\\sum\\limits_{k=5}^{10} 2\\cdot k\\)   kann zu folgendem Code \u00fcbersetzt werden:</p> <pre><code>int sum = 0\nfor(int k = 5; k &lt;= 10; k++)\n    sum += 2*k;\n</code></pre> <p>Wichtig: Die obere Limite ist inklusiv. Im oberen Beispiel wird \\(2\\cdot k\\) also 6x ausgef\u00fchrt.</p>"},{"location":"21HS/AN1/01_funktionen.html#recheregeln","title":"Recheregeln","text":"<p>Mit den folgenden Recheregeln k\u00f6nnen Summen zusammengefasst oder aufgespalten werden</p> <ul> <li>\\(\\sum\\limits_{k=1}^5 (c\\cdot k) = c\\cdot \\sum\\limits_{k=1}^5 k\\) </li> <li>\\(\\sum\\limits_{k=1}^5 (2k + k^2) = \\sum\\limits_{k=1}^5 2k + \\sum\\limits_{k=1}^5 k^2\\) </li> <li>\\(\\sum\\limits_{k=1}^n k + \\sum\\limits_{k=n + 1}^m k = \\sum\\limits_{k=1}^m k\\) </li> <li>Achtung: \\(\\sum\\limits_{k=1}^5 (2k \\cdot k^2) \\neq (\\sum\\limits_{k=1}^5 2k) \\cdot (\\sum\\limits_{k=1}^5 k^2)\\) </li> </ul> <p>Ebenfalls ein n\u00fctzlicher Trick: \\(\\sum\\limits_{k=u}^n k = \\frac{(n-u+1)\\cdot (n + u)}{2}\\) </p> <p>In folgender Summe \\(\\sum\\limits_{k=2}^6 k\\)  k\u00f6nnen wir feststellen, dass wenn wir die k der Reihe nach zusammen rechnen, dass es immer \\(2+6 = 8\\) gibt.</p> Aufsteigende Reihe 2 3 4 5 6 Absteigende Reihe 6 5 4 3 2 Summe 8 8 8 8 8 <p>Alls k\u00f6nnen wir auch 5-mal 8 rechnen und dies durch 2 teilen, da wir sonst zwei Reihen miteinander verrechnen.</p>"},{"location":"21HS/AN1/02_polynome.html","title":"Polynome Division","text":"<p>Beispiel:</p> <ul> <li>\\((4x^5+6x^4-2x^3+x^2+5):(2x^2-x+3)\\) = ?</li> <li>Nun die f\u00fchrenden Potenzen dividieren: \\(4x^5:2x^2=2x^3\\) </li> <li>Dies ist nun der erste Term des resultats:</li> <li>Resultat: \\(2x^3+...\\)</li> <li>Nun muss das vom urspr\u00fcnglichen Polynom abgezogen werden. Daf\u00fcr \\(2x^3 \\cdot (2x^2-x+3)=4x^5-2x^3+6x^3\\)</li> <li>\\((4x^5+6x^4-2x^3+x^2+5) - (4x^5-2x^3+6x^3) = ()\\)</li> </ul>"},{"location":"21HS/AN1/03_Ableiten.html","title":"Ableiten","text":"<p>Fast an jede Funktion kann eine Tangente angelegt werden. Die Ableitung errechnet die Steilheit einer Tangente an jedem Ort.</p>"},{"location":"21HS/AN1/summaries/summary_2022_01_26.html","title":"AN Summary 26.01.2022","text":"<ul> <li>AN Summary 26.01.2022<ul> <li>Ableiten<ul> <li>Newton Verfahren</li> </ul> </li> <li>Integrieren</li> <li>Reihen &amp; Folgen</li> <li>Grenzwert<ul> <li>Stetigkeit<ul> <li>Nullstellen finden mit Stetigkeit</li> </ul> </li> </ul> </li> <li>Hornerschema</li> <li>Polynomdivision</li> <li>Extremwerte<ul> <li>Wendepunkte und Sattelpunkte<ul> <li>Fragen f\u00fcr die Kurvendiskussion</li> </ul> </li> </ul> </li> <li>Extremaufgaben</li> </ul> </li> </ul> Begriff Erkl\u00e4rung gerade Funktion Wenn der Graph achsensymmetrisch mit der y-Achse ist (wie bei \\(x^2\\)) ungerade Funktion Wenn der Graph punktsymmetrisch mit dem Nullpunkt ist (wie bei \\(x^3\\)) Komposition \\((g\\circ f)(x)=g(f(x))\\) Injektive Funktion Keine zwei \\(x\\) f\u00fchren zum selben \\(y\\). Von einer injektiven Funktion gibt es eine Umkehrfunktion. \\(\\sum^5_{k=1}a_k\\) Addiert \\(a_k\\) bis (inklusiv) \\(5\\): \\(a_1+a_2+a_3+a_4+a_5\\) \u00dcbliche Summenformeln \\(\\sum^n_{k=1}k=\\frac{n(n+1)}2\\)\\(\\sum^n_{k=1}k^2=\\frac{n(n+1)(2n+1)}6\\) Polynomfunktion \\(f(x)=a_n\\cdot x^n+a_{n-1}\\cdot x^{n-1}+..+a_1\\cdot x + a_0\\) Komposition \\((g\\circ f)(2)=g(f(2))\\) Funktion Mapt vom Definitionsbereich \\(D\\) zum Wertebereich \\(W\\) Mitternachtsformel \\(D=b^2-4ac\\) und \\(x=\\frac{-b\\pm \\sqrt D}{2a}\\)","tags":["summary","AN"]},{"location":"21HS/AN1/summaries/summary_2022_01_26.html#ableiten","title":"Ableiten","text":"Name Formel \\(x^k=k\\cdot x^{k-1}\\) Faktorregel \\((c\\cdot f)'(x)=c\\cdot f'(x)\\) Summenregel \\((f+g)'(x)=f'(x)+g'(x)\\) Produktregel \\((u\\cdot v)'(x)=u'(x)\\cdot v(x)+u(x)\\cdot v'(x)\\) Quotientenregel \\((\\frac u v)'(x)=\\frac{u'(x)\\cdot v(x)-u(x)\\cdot v'(x)}{v(x)^2}\\) Kettenregel \\((F\\circ u)'(x)=F'(x)\\cdot u'(x)\\) sin \\(sin(x)'=cos(x)\\) cos \\(cos(x)'=-sin(x)\\) \\(e^x\\) \\((e^x)'=e^x\\) \\((a^x)'\\) \\((a^x)'=a^x\\cdot \\ln(a)\\) \\(\\ln(x)'\\) \\(\\ln(x)'=\\frac 1 x\\) \\(\\log_a(x)'\\) \\(\\log_a(x)'=\\frac 1 {x\\cdot \\ln(a)}\\) Funktionsgleichung f\u00fcr Tangente \\(y(x)=f'(x_0)\\cdot (x-x_0)+f(x_0)\\) <p>Achtung: Nicht jede Funktion ist differenzierbar. Die Ableitung einer Funktion darf keine pl\u00f6tzliche Spr\u00fcnge machen</p>","tags":["summary","AN"]},{"location":"21HS/AN1/summaries/summary_2022_01_26.html#newton-verfahren","title":"Newton Verfahren","text":"<p>\\(x_{n+1}=x_n-\\frac{f(x_n)}{f'(x_n)}\\)</p>","tags":["summary","AN"]},{"location":"21HS/AN1/summaries/summary_2022_01_26.html#integrieren","title":"Integrieren","text":"<p>Ableiten: \\(a\\cdot x^n\\rightarrow \\frac{a}{n+1}\\cdot x^{n+1}\\)</p> <p>Schreibweise von Integral von der Fl\u00e4che zwischen \\([a;b]\\):  \\(\\int^b_a f(x) \\mathrm d x =F(b)-F(a)\\)$</p> <ul> <li>\\(\\int a^x \\mathrm d x =\\frac {a^x}{\\ln(a)} + C\\)</li> <li>\\(\\int \\ln(x)\\mathrm dx=x\\cdot \\ln(x)-x + C\\)</li> <li>\\(\\int \\log_a(x)\\mathrm dx=\\frac 1 {\\ln(a)}\\cdot (x \\cdot \\ln(x) -x) + C\\)</li> <li>\\(\\int \\sin(x)\\mathrm dx=-\\cos(x)+C\\)</li> <li>\\(\\int \\cos(x)\\mathrm dx=\\sin(x)+C\\)</li> <li>\\(\\int \\tan(x)\\mathrm dx = -\\ln |\\cos(x)|+C\\)</li> <li>\\(\\int u^{-1}\\mathrm dx=\\ln(|u|)\\)</li> </ul>","tags":["summary","AN"]},{"location":"21HS/AN1/summaries/summary_2022_01_26.html#reihen-folgen","title":"Reihen &amp; Folgen","text":"Name explizite Darstellung implizite Darstellung aufz\u00e4hlende Darstellung Arithmetische Folge \\(a_n=c+(n-1)\\cdot d\\) \\(a_1=c\\\\a_{n+1}=a_n+d\\) \\(c,c+d,c+2d,c+3d,...\\) Geometrische Folge \\(a_n=c\\cdot q^{n-1}\\) \\(a_1=c\\\\a_{n+1}=q\\cdot a_n\\) \\(c, c\\cdot q, c\\cdot q^2, c\\cdot q^3, ...\\) Harmonische Folge \\(a_n=\\frac 1 n\\) (nicht \u00fcblich) \\(1, \\frac 1 2, \\frac 1 3, \\frac 1 4, ...\\) Fibonacci-Folge (nicht elementar) \\(a_1=1, a_2=1\\\\a_{n+1}=a_n+a_{n+1}\\) \\(1, 1, 2, 3, 5, 8, ...\\) <ul> <li>Arithmetische Reihee</li> <li>\\(a_k=a_1+(k-1)\\cdot d\\)</li> <li>\\(s_n=n\\cdot a_1+\\frac{n(n-1)}2 \\cdot d\\)</li> <li>\\(\\sum^n_{k=0}(k^2)=\\frac{n(n+1)(2n+1)}{6}\\)</li> <li>\\(\\sum^n_{k=0}k=\\frac{n(n+1)}{2}\\)</li> <li>Strebt immer geben \\(\\infty\\) oder \\(-\\infty\\)</li> <li>Geometrische Reihe</li> <li>\\(a_n=q^{(k-1)}\\cdot a_1\\)</li> <li>\\(s_n=\\frac{a_1(q^n-1)}{q-1}\\)</li> <li>Wenn \\(|q|&lt;1\\) ist, dann ist der Grenzwert \\(\\frac {a_1}{1-q}\\)</li> </ul>","tags":["summary","AN"]},{"location":"21HS/AN1/summaries/summary_2022_01_26.html#grenzwert","title":"Grenzwert","text":"<ul> <li>\\(\\lim_{n\\to\\infty}(c\\cdot a_n)=c\\cdot \\lim_{n\\to \\infty} a_n\\)</li> <li>\\(\\lim_{n\\to \\infty}(a_n+b_n)=\\lim_{n\\to \\infty}=\\lim_{n\\to \\infty}a_n + \\lim_{n\\to \\infty} b_n\\)</li> <li>\\(\\lim_{n\\to \\infty}(a_b\\cdot b_n)=\\lim_{n\\to \\infty}a_b \\cdot \\lim_{n\\to \\infty} b_n\\)</li> <li>\\(\\lim_{n\\to \\infty}(\\frac {a_n} {b_n})=\\lim_{n\\to \\infty} a_n : \\lim_{n\\to \\infty}b_n\\)</li> <li>\\(\\lim_{n\\to\\infty}(\\sqrt a - \\sqrt b)=\\lim_{n\\to\\infty}(\\frac{(\\sqrt a-\\sqrt b)(\\sqrt a + \\sqrt b)}{\\sqrt a + \\sqrt b})=\\lim_{n\\to\\infty}(\\frac{a-b}{\\sqrt a + \\sqrt b})\\)</li> </ul> <p>Wenn man einen Bruch in einem \\(\\lim\\) hat, dann kann mit dem h\u00f6chsten \\(n^k\\) mit dem h\u00f6chsten \\(k\\) gek\u00fcrzt werden</p> <p>Beispiel:  $$ \\lim_{n\\to \\infty}=\\frac{3n^2+7n-3}{n^2+4n-11}=\\lim_{n\\to \\infty}\\frac{n^2(3+\\frac 7 n-\\frac 3 {n^2})}{n^2(1+\\frac 4 n - \\frac {11} {n^2})}\\rightarrow\\frac {3+0+0}{1+0+0}=\\frac 3 1 = 3 $$ </p> <p>Spezialfall: \\(\\lim_{n\\to\\infty}(1+\\frac 1 n)^n=e=2.718\\)  $$ \\text{Speziallfall: }\\lim_{n\\to\\infty}(1+\\frac 1 n)^n=e=2.718\\ \\text{Beispiel: } \\lim_{n\\to\\infty}(1+\\frac{9}{4n})^{-5n}\\ (1+\\frac{9}{4n})^{-5n}=(1+\\frac{9}{4n}\\cdot\\frac{\\frac 1 9}{\\frac 1 9})^{-5n}=(1+\\frac 1 {\\frac {4n} 9})^{-5n}\\=(1+\\frac 1 {\\frac {4n} 9})^{-5n\\cdot\\frac{\\frac{4n} 9}{\\frac{4n} 9}}=(1+\\frac 1 {\\frac {4n} 9})^{\\frac{4n} 9\\cdot \\frac{-5n}{\\frac{4n} 9}}=(1+\\frac 1 {\\frac {4n} 9})^{\\frac {4n} 9\\cdot \\frac{-45} 4}\\=((1+\\frac 1 {\\frac {4n} 9})^{\\frac{4n} 9})^{\\frac{-45} 4}=e^{\\frac{-45} 4} $$</p> Typ Funktionswert Beispiel Typ 1: Hebbare Definitionsl\u00fcckeDas Z\u00e4hler- und Nennerpolynom haben dieselbe Nullstelle. Diese kann gek\u00fcrzt werden Strebt gegen den gek\u00fcrzten Bruch Typ 2: PolstelleNur das Nennerpolynom hat die Nullstelle. Dies kann nicht gek\u00fcrzt werden Strebt gegen \\(\\infty\\) oder \\(-\\infty\\)","tags":["summary","AN"]},{"location":"21HS/AN1/summaries/summary_2022_01_26.html#stetigkeit","title":"Stetigkeit","text":"<p>Eine Funktion ist stetig, wenn man sie zeichnen kann, ohne den Stift abzusetetzen.  Eine stetige Funktion hat keine Spr\u00fcnge in der ersten Ableitung und keine Spr\u00fcnge in der eigentlichen Funktion.</p>","tags":["summary","AN"]},{"location":"21HS/AN1/summaries/summary_2022_01_26.html#nullstellen-finden-mit-stetigkeit","title":"Nullstellen finden mit Stetigkeit","text":"<ol> <li>Zwei Punkte, bei denen der Y-Wert ein verschiedenes Vorzeichen hat</li> <li>Den Mittelwert zischen den Punkten bilden</li> <li>Zu 1. gehen, aber diesem mit dem Mittelpunkt als Punkt, so dass die zwei P\u00fcnkte ein verschiedenes Vorzeichen haben</li> </ol>","tags":["summary","AN"]},{"location":"21HS/AN1/summaries/summary_2022_01_26.html#hornerschema","title":"Hornerschema","text":"<p>Die Werte (\\(b_n\\)), welche unter dem Strich stehen, sind die Koeffizenten f\u00fcr das \\(q(x)\\) in \\(f(x)=(x-x_0)\\cdot q(x)\\). In diesem fall also \\(q(x)=3x^3-8x^2+21x-49\\). Daf\u00fcr muss das Resultat/Rest 0 sein!</p>","tags":["summary","AN"]},{"location":"21HS/AN1/summaries/summary_2022_01_26.html#polynomdivision","title":"Polynomdivision","text":"","tags":["summary","AN"]},{"location":"21HS/AN1/summaries/summary_2022_01_26.html#extremwerte","title":"Extremwerte","text":"1. Ableitung 2. Ableitung Beschreibung Bild \\(f'(x)&gt;0\\) \\(f''(x_0)&gt;0\\) \\(f\\) macht eine Linkskurve nach oben bei \\((x_0, y_0)\\) \\(f'(x)&gt;0\\) \\(f''(x_0)&lt;0\\) \\(f\\) macht eine Rechtskurve nach oben bei \\((x_0, y_0)\\) \\(f'(x)&lt;0\\) \\(f''(x_0)&gt;0\\) \\(f\\) nmacht eine Linkskurve nach unten bei \\((x_0, y_0)\\) \\(f'(x)&lt;0\\) \\(f''(x_0)&lt;0\\) \\(f\\) macht eine Rechtskurve nach unten bei \\((x_0, y_0)\\) \\(f'(x)=0\\) \\(f''(x)&lt;0\\) \\(f\\) hat ein lokales Maximum bei \\((x_0, y_0)\\) \\(f'(x)=0\\) \\(f''(x)&gt;0\\) \\(f\\) hat ein lokales Minimum bei \\((x_0, y_0)\\) \\(x_0\\) heisst \\(f(x_0)\\) heisst \\((x_0, y_0)\\) heisst Maxiumum (relative) Maximalstelle (relatives) Maximum/Maximalwert (relativer) Hochpunkt Minimum (relative) Minimalstelle (relatives) Minimum/Minimalwert (relativer) Tiefpunkt Oberbegriff (relative) Extremalstelle (relatives) Extremum/Extremalwert (relativer) Extremalpunkt","tags":["summary","AN"]},{"location":"21HS/AN1/summaries/summary_2022_01_26.html#wendepunkte-und-sattelpunkte","title":"Wendepunkte und Sattelpunkte","text":"<p>Eine Wendepunkt, ist wenn eine Rechtskurve in eine Linkskurve,  oder umgekehrt, geht. Ein Spezialfall ist es, wenn \\(f'(x)=0\\) ist, dann spricht man von einem <code>Sattelpunkt</code>. </p> <p></p> <p>Wenn \\(f''(x_0)=0\\) und \\(f'''(x_0)\\neq 0\\) ist, dann ist es sicherlich einen <code>Wendepunkt</code>. </p> <p>Wenn zus\u00e4tzlich noch \\(f'(x_0)=0\\) gilt, dann ist es ein <code>Sattelpunkt</code></p>","tags":["summary","AN"]},{"location":"21HS/AN1/summaries/summary_2022_01_26.html#fragen-fur-die-kurvendiskussion","title":"Fragen f\u00fcr die Kurvendiskussion","text":"<ol> <li>Definitionsbereich?</li> <li>Symmetrieeigenschaften (gerade/ungerade), Periode?</li> <li>Schnittpunkte mit Achsen, Polstellen?</li> <li>Randpunkte, bzw. Verhalten, wenn \\(x\\) gegen die Grenzen des Definitionsbereichs strebt?</li> <li>Kandidaten f\u00fcr Extrema bestimmen und untersuchen</li> <li>Wendepunkte suchen</li> <li>Tabelle von Werten aufstellen (falls noch n\u00f6tig)</li> </ol>","tags":["summary","AN"]},{"location":"21HS/AN1/summaries/summary_2022_01_26.html#extremaufgaben","title":"Extremaufgaben","text":"<ol> <li>Zielgr\u00f6sse identifizieren</li> <li>Unabh\u00e4ngige Variable identifizieren</li> <li>Definitionsbereich bestimmen</li> <li>Zielgr\u00f6sse als Funktion mit unabh\u00e4ngigen Variabeln als Argument ausdr\u00fccken</li> <li>Relative Maxima/Minima bestimmen; Randpunkte auch ber\u00fcrcksichtigen!</li> <li>Welche relative Extrema sind auch absolute?</li> </ol>","tags":["summary","AN"]},{"location":"21HS/COM/01_Kernthemen-Austausch.html","title":"01 Kernthemen Austausch","text":"<p>\\(i\\cdot 2\\)</p> <p>1) Was sagen Ihnen die Begriffe Innovation und soziale Verantwortung spontan? Wie h\u00e4ngen diese Begriffe zusammen?</p> <ul> <li> <p>Invotion: </p> <ul> <li>Neuartiges denken/Out of the Box</li> <li>Kreativiti\u00e4t</li> </ul> </li> <li> <p>soziale Verantwortung:</p> <ul> <li>Morale einhalten</li> <li>Gesselschaft ber\u00fccksichtigen</li> </ul> </li> </ul> <p>Zusammenhang: Neue Ideen sollen moralisch vertretbar sein</p> <p>2) Wie haben Sie Kommunikation im Berufsleben bzw. in Ihrer Ausbildung erlebt? Welchen Stellenwert hat(te) Kommunikation in Ihrem beruflichen/ schulischen Umfeld?</p> <ul> <li>Informatiker:<ul> <li>Vortschritt abgleichen</li> <li>dokumentieren</li> <li>zwischenmenschlicher Austausch</li> </ul> </li> <li>Mediamatiker: <ul> <li>Viel Kommunikation erwartet</li> <li>Anderen Personen bei Problemen unterst\u00fctzten</li> <li>Interne-Abl\u00e4ufe diskutieren</li> </ul> </li> </ul> <p>3) Why is communication competence important in engineering?</p> <ul> <li>Engineering is almost never done alone. To be successful you have to comunicate with others and for that soft skills are vital</li> </ul> <p>4) What role does social responsibility play in engineering?</p> <ul> <li>You have to rely on others to complete your goal, so it is important to respect your colleagues and your colleagues you </li> </ul>"},{"location":"21HS/COM/02_Suchstrategien.html","title":"Suchbegriffe","text":"<p>Von einem Thema sollten die Kernbegriffe extrahiert werden.  Um die relevanten Suchergebnisse zu steigern, kann man zus\u00e4tzlich noch die folgenden Begriffe mit suchen: - Unterbegriffe - Oberbegriffe - Synonyme - Englische Begriffe</p>"},{"location":"21HS/COM/02_Suchstrategien.html#schneeballsystem","title":"Schneeballsystem","text":"<p>Das Schneeballsystem kann zum Einstatz kommen, wenn man eine Quelle gefunden hat.  In dieser sucht man referenzierte Quellen. Dies kann so lange wiederholt werden, bis man gen\u00fcgent Material hat.</p> <p>Ebenfalls k\u00f6nnte sich es lohnen eine vorw\u00e4rtsgerichtete Suche zu benutzen. In vielen Datenbank (unter anderem auch Google Scholar) kann man sehen, welche Artikel und B\u00fccher eine Quelle zitert haben. So findet man auch neuere Artikel.</p>"},{"location":"21HS/COM/02_Suchstrategien.html#suchinstrumente","title":"Suchinstrumente","text":"<p>Folgendes ist eine Liste von m\u00f6glichen Suchinstrumenten: - https://scholar.google.ch/  - https://zhaw.swisscovery.slsp.ch/discovery/search?vid=41SLSP_ZAW:ZHAW    - f\u00fcr E-Books VPN verwenden!!! - https://ieeexplore.ieee.org/Xplore/home.jsp  - Hier sind noch mehr DBs aufgelistet:  https://www.zhaw.ch/de/hochschulbibliothek/recherchehilfe-kurse/fachinformation-ingenieurwesen/ </p>"},{"location":"21HS/COM/03_Publikationstypen.html","title":"Monografie (eigenst\u00e4ndiges Buch)","text":"<p>Das Buch wurde \"nur\" von den angegebenen Authoren geschrieben und befasst ein Thema umfassend.</p>"},{"location":"21HS/COM/03_Publikationstypen.html#quellenangabe","title":"Quellenangabe","text":"<pre><code>D\u00f6ring, N., &amp; Bortz, J. (2016). Forschungsmethoden und Evaluation in den Sozial- und Humanwissenschaften (5. Aufl.). Springer. https://doi.org/10.1007/978-3-642-41089-5\n</code></pre>"},{"location":"21HS/COM/03_Publikationstypen.html#einzelne-kapitel-eines-sammelbandes","title":"einzelne Kapitel eines Sammelbandes","text":"<p>Ein Sammelband besteht aus mehreren Artikeln/Kapiteln von zum Teil unterschiedlichen Authoren. Der Herausgeber stellt die Kapitel zusammen. Es kann so mehrere Perspektiven auf ein Thema gegeben werden k\u00f6nnen.</p>"},{"location":"21HS/COM/03_Publikationstypen.html#quellenangabe_1","title":"Quellenangabe","text":"<pre><code>Gieselmann, A. (2015). Auf dem Weg zu nutzergerechten internetbasierten Interventionen: Welche Bed\u00fcrfnisse haben unsere Patienten1? In A. Weisbecker, M. Burmester, &amp; A. Schmidt (Hrsg.), Mensch und Computer 2015 \u2013 Workshopband (S. 133\u2013136). De Gruyter. https://doi.org/10.1515/9783110443905-018\n</code></pre>"},{"location":"21HS/COM/03_Publikationstypen.html#zeitschriftenartikel","title":"Zeitschriftenartikel","text":"<p>Zeitschriften erscheinen periodisch. Ihren Inhalt wird mit Hilfe von Peer-Reviews auf ihre Korrektheit \u00fcberpr\u00fcft.</p>"},{"location":"21HS/COM/03_Publikationstypen.html#quellenangabe_2","title":"Quellenangabe","text":"<p>Die Ausgabe muss erw\u00e4hnt sein (90(6))</p> <pre><code>Vlachakis, K., Beyer, A., &amp; Vayas, I. (2021). Tragverhalten von Fachwerkmasten aus Winkelprofilen. Stahlbau, 90(6), 425\u2013440. https://doi.org/10.1002/stab.202000059\n</code></pre>"},{"location":"21HS/COM/04_Wissenschaftilichen%20Text.html","title":"04 Wissenschaftilichen Text","text":"<ul> <li>Objektiv</li> <li>Quellen</li> <li>keine englische Abk\u00fcrzung (\"what is\" anstatt \"what's\", \"is not\" anstatt \"isn't\")</li> </ul>"},{"location":"21HS/COM/05_pitch.html","title":"CCC","text":"Letter Meaning C Concise C Comprehensive (Umfassend) C Crisp (sharp, intresting, grabling) <p>this is a tesr</p>"},{"location":"21HS/COM/05_pitch.html#tipps-for-presentationspitch","title":"Tipps for Presentations/Pitch","text":"<ul> <li>No:</li> <li>I think</li> <li>Do:</li> <li>Hands:<ul> <li>keep them infront of the body</li> <li>don't do large movements</li> <li>don't cross the arms or keep the hands in the pockets </li> </ul> </li> <li>do breaks (don't speak non stop)</li> <li>speak frealy</li> </ul>"},{"location":"21HS/COM/06_handout.html","title":"Kriterien","text":"<ul> <li>Wer ist die Zielgruppe?</li> <li>Text soll: Informativ, Objektiv und Sachlich</li> <li>keine Emotionen</li> <li>keine Umgangssprache</li> <li>Sachlich (nicht \"ist enorm gewachsen\", sondern \"ist um 20% gewachsen\")</li> <li>hohe Informationsdichte</li> <li>Bild</li> <li>Quellenangabe</li> <li>Im Vortrag Bild referenzieren (Auf Abbildung 1 sieht man...)</li> </ul>"},{"location":"21HS/COM/Presentation/Pitch%20v2.html","title":"Pitch v2","text":"<ul> <li> <p>Intro (Question and Hi)</p> </li> <li> <p>Hand-Off</p> </li> </ul> <p>Hi, </p> <p>Having access to the internet is vital for any modern society. With its vast storage of knowledge, it is a blessing for learning new things. For what you needed, a cooperation with financial backing, can be done by a teenager from his bedroom. It can bring different people together to fight in a bigger war and help companies turn a profit.</p> <p>But still, countless people have no or poor access to the internet. In America, a country with a relative high standard of living, 19 million people [1] still don't have broadband internet and those people mostly live in rural areas. Looking at the world population, the numbers look even worst. ITU estimates that in the world, only 38% in rural areas are able to go online, almost half that who live in urban houses [2].</p> <p>But this makes perfect sense. Building out the necessary infrastructure is a costly endevour and companies like a return on their investment. In big cities with a lot of customers, this is a fairly easy task, but tunneling an optical fiber for a couple of people on a remote settlement isn't cost-effective. For this reason, many people have to make due with just slow and expensive satellite internet.</p> <p>Our solution is to use low orbit satellites to provide fast, reliable and cheap internet to the masses. Because we use satellites, we don't have to build any large and costly structures on the ground from which only a few people can benefit. Instead, we'll launch a network of satellites which can provide internet to 7 billion people.</p> <p>You might ask, how this satellite internet differs from the previously mentioned slow and expensive ones. For one, we use satellites in low orbit. This brings the benefit\u00a0 that the connections can be much faster and more reliable due to the lower distance to the earth. </p> <p>Mr. Thalmann will now tell you more about our ground braking technology.</p> <p>We also use state-of-the-art technology in our satellites and antennas, like beam forming the signals to more easily reach the satellite from the antenna and waste less energy blasting unnecessary radiation in the sky.</p> <p>All this means is that you can buy an antenna, place it anywhere where it has unobstructed view of the sky and browse the World Wide Web to your heart's content.</p>"},{"location":"21HS/COM/Presentation/Pitch%20v2.html#sources","title":"Sources","text":"<p>[1] Eighth Broadband Progreszos Report | Federal Communications Commission</p> <p>[2] https://www.itu.int/en/ITU-D/Statistics/Dashboards/Pages/IFF.aspx</p> <p>[3] International Programs - Total Midyear Population for the World: 1950-2050 - U.S. Census Bureau</p> <p>[4] Web of Science - Digital Beam Forming in MRI</p> <p>[5] Web of Science - Digital Beam forming Algorithms for Radar Applications</p>"},{"location":"21HS/COM/Presentation/Pitch.html","title":"Pitch","text":"<ul> <li> <p>Intro (Question and Hi)</p> </li> <li> <p>Hand-Off</p> </li> <li></li> </ul> <p>Having access to the internet is vital for any modern society. With its vast storage of knowledge, it is a blessing for learning new things. For what you needed, a cooperation with financial backing, can be done by a teenager from his bedroom. It can bring different people together to fight in a bigger war and help companies turn a profit.</p> <p>But still, countless people have no or poor access to the internet. In America, a country with a relative high standard of living, 19 million people [1] still don't have broadband internet and those people mostly live in rural areas. Looking at the world population, the numbers look even worst. ITU estimates that in the world, only 38% in rural areas are able to go online, almost half that who live in urban houses [2].</p> <p>But this makes perfect sense. Building out the necessary infrastructure is a costly endevour and companies like a return on their investment. In big cities with a lot of customers, this is a fairly easy task, but tunneling an optical fiber for a couple of people on a remote settlement isn't cost-effective. For this reason, many people have to make due with just slow and expensive satellite internet.</p> <p>Our solution is to use low orbit satellites to provide fast, reliable and cheap internet to the masses. Because we use satellites, we don't have to build any large and costly structures on the ground from which only a few people can benefit. Instead, we'll launch a network of satellites which can provide internet to 7 billion people.</p> <p>You might ask, how this satellite internet differs from the previously mentioned slow and expensive ones. For one, we use satellites in low orbit. This brings the benefit\u00a0 that the connections can be much faster and more reliable due to the lower distance to the earth. We also use state-of-the-art technology in our satellites and antennas, like beam forming the signals to more easily reach the satellite from the antenna and waste less energy blasting unnecessary radiation in the sky.</p> <p>All this means is that you can buy an antenna, place it anywhere where it has unobstructed view of the sky and browse the World Wide Web to your heart's content.</p>"},{"location":"21HS/COM/Presentation/Pitch.html#sources","title":"Sources","text":"<p>[1] Eighth Broadband Progress Report | Federal Communications Commission</p> <p>[2] https://www.itu.int/en/ITU-D/Statistics/Dashboards/Pages/IFF.aspx</p> <p>[3] International Programs - Total Midyear Population for the World: 1950-2050 - U.S. Census Bureau</p> <p>[4] Web of Science - Digital Beam Forming in MRI</p> <p>[5] Web of Science - Digital Beam forming Algorithms for Radar Applications</p>"},{"location":"21HS/DB/00_Pr%C3%BCfung.html","title":"00 Pr\u00fcfung","text":"<ol> <li>Relationale Algebra (20 Punkte)  (Umbedingt zwischen Resultate anschreiben)</li> <li>Anfrage erstelle von Text oder umgekehrt</li> <li>Bags vs Relationen </li> <li>ER-Model aus einem Text erstellen (20 Punkte)</li> <li>Die verschiedenen Beziehungstypen (1-1, 1-m, m-m, ISA, ID) und wie sich die Schl\u00fcssel zusammen settzen</li> <li>3-gliedrige Beziehung</li> <li>Zusammen gesetzte Entit\u00e4t</li> <li>Relationen Modell</li> <li>Korrektes ER-Modell</li> <li>SQL Teil (20-30 Punkte)</li> <li>Beim Ausw\u00e4hlen, welche Insert Statements eingef\u00fcgt werden k\u00f6nnen --&gt; Schauen, ob jedes Statement mit den Daten von den vorherigen INSERT Statements immer noch funktioniert!</li> <li>Wissens Fragen (10)</li> <li>Beispiel:<ol> <li>was ist gut an einem Index? Was ist schlecht an einem Index?</li> <li>Was ist ACID? Lost Update, Dirty-Read...</li> <li>Welche Probleme (Dirty-Read, Non-Repeatable-Read, Phantom-Read) k\u00f6nnen tolliertiert werden?</li> <li>Was ist der Unterschied zwischen einem Trigger und einer Stored Proceedure?</li> </ol> </li> </ol> <p>Fragen:</p> <ol> <li>Sind die technischen Details von Indexen relevant? (B-Baum, D\u00fcnn vs dichter Index, ...)</li> </ol>"},{"location":"21HS/DB/01_Begriffe.html","title":"Begriffe","text":"<p>in Tabelle formatieren</p> Name Erkl\u00e4rung Beispiel Dom\u00e4ne Wertebereich Dom\u00e4ne von PLZ w\u00e4ren die Zahlen 0-9999 Attribute Eigenschaft / Spalte / besteht aus Name + Dom\u00e4ne Attributwert Feld z.\u00a0B. der Ort Tupel eine Zeile/Eintrag ein 3-er Tupel ist ein Tupel bestehend aus 3 Attribute <ul> <li>Format, Schema, Heading, Relationsvariable</li> <li>Relation -&gt; mehrere Spalten (auch von mehreren Tabellen)</li> <li>Schl\u00fcssel -&gt; Eindeutige M\u00f6glichkeit, einen Datensatz zu identifizieren</li> <li>Relation -&gt; Relationsenformat (Menge von Namen von Attributen) &amp; Auspr\u00e4gung </li> </ul> <p>Wichtig:</p> <ul> <li>In einem Modell gibt es NIE genau gleiche Zeilen</li> <li>In einem Format gibt es NIE zwei gleiche Attribute</li> <li>Die Reihenfolge der Zeilen (Tupel) und Spalten(Attribute(Attribute)) ist irrelevant</li> </ul>"},{"location":"21HS/DB/01_Begriffe.html#notation","title":"Notation","text":"<ul> <li>Tabellarisch</li> <li>{&lt;1, Meier, 19.4.2001&gt;, &lt;2, M\u00fcller, 23.5.2302&gt;}</li> </ul>"},{"location":"21HS/DB/01_Begriffe.html#schlussel","title":"Schl\u00fcssel","text":"<ul> <li>Prim\u00e4rschl\u00fcssel</li> <li>ein ausgew\u00e4hlter Schl\u00fcsselkandidat</li> <li>Fremdschl\u00fcssel</li> <li>Referenziert einen Prim\u00e4rschl\u00fcssel</li> </ul>"},{"location":"21HS/DB/01_Begriffe.html#primarschlussel-vs-unique-key","title":"Prim\u00e4rschl\u00fcssel vs Unique-Key","text":"<p>Es kann maximal ein Prim\u00e4rschl\u00fcssel pro Tabelle geben (einen zusammengesetzter Prim\u00e4rschl\u00fcssel ist immer noch ein Schl\u00fcssel). Zus\u00e4tzlich wird automatisch ein Index erstellt, so dass die DB eine Tupel schneller findet.</p>"},{"location":"21HS/DB/01_Begriffe.html#acid","title":"ACID","text":""},{"location":"21HS/DB/01_Begriffe.html#_1","title":"Begriffe","text":""},{"location":"21HS/DB/02_Grundoperation.html","title":"02 Grundoperation","text":"<p>Notation f\u00fcr das Format einer Relation: \\(R(A_1, A_2, ..., A_n)\\)</p> <p>Wenn die Werte selbst dargestellt weden, soll folgendes Format verwenden werden: {&lt;1, Meier, 19.4.2001&gt;, &lt;2, M\u00fcller, 23.5.2302&gt;}</p>"},{"location":"21HS/DB/02_Grundoperation.html#aquivalenz","title":"\u00c4quivalenz","text":"<p>Zwei Relationen sind \u00e4quivalent, wenn sich durch eine Umordnung beide Relationen darstellen lasst Die Reihenfolge der Tupeln ist irrelevant.</p> <p>Notation: \\(R_1 \\sim R_2\\)</p>"},{"location":"21HS/DB/02_Grundoperation.html#operation","title":"Operation","text":"<p>In der Mengenlehre werden Duplikate immer gleich entfernt. Ein SQL-Server typischerweise nicht</p>"},{"location":"21HS/DB/02_Grundoperation.html#entfernende-operatoren","title":"Entfernende Operatoren","text":""},{"location":"21HS/DB/02_Grundoperation.html#selektion","title":"Selektion","text":"<ul> <li>Symbol: \\(\\sigma\\); in SQL: WHERE</li> <li>\\(R' = \\sigma_{Selektionsbedingung}(R)\\)</li> <li>\\(\\sigma_A(\\sigma_B) = \\sigma_B(\\sigma_A)\\)</li> <li>Wenn die Bedinung immer falsch ist, wird eine leere Relation zur\u00fcck gegeben</li> <li>Wenn es ein Attribut in der Bedinung nicht gibt, ist der Ausdruck nicht berechenbar</li> <li>Entfernt Tupels, welche nicht dem Pr\u00e4dikat entsprechen</li> <li>Das Format der Relation \u00e4ndert sich nicht, ist aber eine neue Relation</li> <li>Beispiel:</li> <li>\\(\\sigma_{L\u00e4nge&gt;100}(Filme)\\) -&gt; Alle Filme, welche eine gr\u00f6ssere L\u00e4nge als 100 haben</li> <li>\\(\\sigma_{City = 'Z\u00fcrich' \\wedge Discount \\geq 0.15}(Customers)\\) -&gt; Finde alle Z\u00fcricher Kunden, die einen Rabatt von 15% oder mehr erhalten</li> </ul>"},{"location":"21HS/DB/02_Grundoperation.html#projektion","title":"Projektion","text":"<ul> <li>Symbol: \\(\\pi\\); in SQL: <code>SELECT</code></li> <li>\\(R'=\\pi_{Spalten}(R)\\)</li> <li>\\(\\pi_A(\\pi_B) \\neq \\pi_B(\\pi_A)\\)</li> <li>erzeugt eine neue Relation mit weniger Spalten</li> <li>!Duplikate in der neuen Relation werden entfernt!</li> <li>Gibt es das angegebenen Attribut nicht, ist dies ein Fehler und keine Relation wird zur\u00fcck gegeben</li> <li>Beispiel:</li> <li>\\(\\pi_{Titel, Jahr, L\u00e4nge}(Filme)\\) -&gt; Gibt eine neue Relation zur\u00fcck, mit den Attributen Titel, Jahr und L\u00e4nge</li> </ul> <p>Die Projektion kann erweitert werden, dass man zus\u00e4tzlich zu Attribute, auch Ausdr\u00fccke (wie \\(\\pi_{2\\cdot R.A+4\\to Z}(R)\\)) oder Konstante (wie \\(\\pi_{5 \\to S, A \\to B, C}(R)\\)) angegeben. Dies kommt dem <code>SELECT</code> Syntax von SQL n\u00e4her.</p>"},{"location":"21HS/DB/02_Grundoperation.html#umbenennung","title":"Umbenennung","text":"<ul> <li>Symbol: \\(\\rho\\); in SQL: <code>AS</code></li> <li>\\(\\rho_{S(C,D)}(R(A, B))=S(C, D)\\)</li> </ul>"},{"location":"21HS/DB/02_Grundoperation.html#produkt-operatoren","title":"Produkt-Operatoren","text":"<p>F\u00fcgt Attribute zusammen</p>"},{"location":"21HS/DB/02_Grundoperation.html#kartesisches-produkt-auch-cross-join","title":"Kartesisches Produkt (auch Cross-Join)","text":"<ul> <li>Symbol \\(R \\times S\\); SQL: <code>CROSS JOIN</code></li> <li>Kombiniert alle Tupples von R mit allen Tupples von S</li> </ul>"},{"location":"21HS/DB/02_Grundoperation.html#natural-join","title":"Natural Join","text":"<ul> <li>Symbol: \\(\\bowtie\\); Latex: \\bowtie; SQL: <code>NATURAL JOIN</code></li> <li>\\(R \\bowtie S\\) </li> <li>Die gleichen Attribute werden verglichen</li> <li>In SQL ist Join nicht kommuntativ (die Reihenfolge stimmt nicht)</li> <li>Wenn zwei Tabellen \"gejoint\" werden, welche keine gemeinsammen Attribute haben, wird das kartesische Produkt gebildet</li> </ul>"},{"location":"21HS/DB/02_Grundoperation.html#theta-join","title":"Theta-Join","text":"<ul> <li>Symbol: \\(\\bowtie_P\\)</li> <li>Ist eine Verallgemeinerung von einem Natural-Join, da bei diesem Join eine Bedingung angegeben werden k\u00f6nnen</li> <li>Beispiele:</li> <li>\\(\\bowtie_{P (A &gt; B \\wedge R.D = S.D)}\\)</li> </ul>"},{"location":"21HS/DB/02_Grundoperation.html#semi-join","title":"Semi-Join","text":"<p>Ein Semi-Join ist ein Natural-Join, auf welchen danach eine Projektion angewendet wurde: \\(\\pi_{r_1,...,r_n}(R_1 \\bowtie R_2)\\)</p>"},{"location":"21HS/DB/02_Grundoperation.html#left-outer-join","title":"Left-Outer-Join","text":"<p>Alle Resultate von der Relation auf der linken Seite werden \u00fcbernommen, selbst wenn es auf der rechten Seite kein Tuppel gibt, welches passt. In diesem Fall werden anstatt Werte <code>NULL</code> ausgegen.</p>"},{"location":"21HS/DB/02_Grundoperation.html#right-outer-join","title":"Right-Outer-Join","text":"<p>Es werden Alle Resultate von der Relation auf er rechten Seite \u00fcbernommen. Wenn es kein Tupel aus der linken Relation gibt, wird anstelle <code>NULL</code> ausgeggeben.</p>"},{"location":"21HS/DB/02_Grundoperation.html#full-outer-join","title":"Full-Outer-Join","text":"<p>Bei einem Full-Outer-Join werden alle Werte von beiden Relationen ausgegeben. Wenn auf der einen Seite kein passendes Tupel existiert, wird anstelle <code>NULL</code>  ausgegeben.</p>"},{"location":"21HS/DB/02_Grundoperation.html#mengen-operatoren","title":"Mengen Operatoren","text":"<ul> <li> <p>F\u00fcgt Tupels zusammen</p> </li> <li> <p>Bei allen Mengen-Operatoren m\u00fcssen die Relationen das gleiche Schema haben. Zudem werden die Duplikate immer heraus gefilteret.</p> </li> </ul>"},{"location":"21HS/DB/02_Grundoperation.html#vereinigung-cup","title":"Vereinigung (\\(\\cup\\))","text":"<ul> <li>Symbol: \\(\\cup\\); Latex: \\cup; SQL: <code>UNION</code></li> <li>Gibt alle Eintr\u00e4ge von beiden Mengen zur\u00fcck. Duplikate werden entfernt</li> <li>Beide Relationen, welche vereinigt werden, m\u00fcssen dasselbe Schema haben</li> </ul> <p>Wenn die Vereinigung in Bag-Algebra durchgef\u00fchrt wird, werden die Duplikate einer Tupel-Art der linken und rechten Seite gez\u00e4hlt und alle Duplikate dieser Tupel-Art von der Seite mit mehr Duplikaten genommen. Die doppelten Tupels der anderen Seite werden verworfen.</p>"},{"location":"21HS/DB/02_Grundoperation.html#bag-concatenation-sqcup","title":"Bag Concatenation (\\(\\sqcup\\))","text":"<p>Ist ebenfalls eine Vereinigung, die Behandlung von Duplikaten ist allerdings anderst als beim \\(\\cup\\) Operator. Es werden die Duplikaten von beiden Seiten genommen.</p>"},{"location":"21HS/DB/02_Grundoperation.html#durchschnitt-cap","title":"Durchschnitt (\\(\\cap\\))","text":"<ul> <li>Symbol: \\(\\cap\\); Latex: \\cap; SQL: <code>INTERSECT</code></li> <li>Gibt alle Eintr\u00e4ge zur\u00fcck, welche in beiden Mengen vorhanden ist</li> <li>Beide Relationen, welche durchschnitten werden, m\u00fcssen dasselbe Schema haben</li> </ul> <p>Wenn der Durchschnitt in Bag-Algebra durchgef\u00fchrt wird, werden die duplikate Tupels \u00fcbernommen, von denen es weniger gibt.</p>"},{"location":"21HS/DB/02_Grundoperation.html#differenz-setminus","title":"Differenz (\\(\\setminus\\))","text":"<ul> <li>Symbol: \\(R \\setminus S\\); SQL: <code>EXCEPT</code></li> <li>Gibt alle Tupels zur\u00fcck, welche in R sind, aber nicht S</li> <li>Beide Relationen, welche differenziert werden, m\u00fcssen dasselbe Schema haben</li> </ul> <p>Wenn die Differenz in Bag-Algebra durchgef\u00fchrt wird, werden die Duplikate eines Tupels der rechten Seite von der linken Seite abgezogen.</p>"},{"location":"21HS/DB/02_Grundoperation.html#duplikatelimitation-delta","title":"Duplikatelimitation (\\(\\delta\\))","text":"<p>Entfernt die Duplikate einer Relation. Dieser Operator wird nur verwendet, wenn mit Bags gerechnet werden.</p>"},{"location":"21HS/DB/02_Grundoperation.html#aggregationen","title":"Aggregationen","text":""},{"location":"21HS/DB/02_Grundoperation.html#gruppieren","title":"Gruppieren","text":"<ul> <li>Bildet Gruppen, auf welche die Aggregations-Funktion angewandt wird</li> </ul>"},{"location":"21HS/DB/03_Entity%20Relationship%20Diagram.html","title":"ER-Diagram","text":"<p>Ein Entit\u00e4ts-Typ (Tabelen-Schema) wird als Rechteck dargestellt. Die Entit\u00e4t davon w\u00e4re die Tabelle selbst, mit den eigentlichen Werten.</p> <p>Die Attribute werden in einem Oval dargestellt und mit dem Entit\u00e4ts-Typ verbunden. (Wie in einem Mindmap). Wenn ein Attribut ein Schl\u00fcssel ist, dann wird der Attributname unterstrichen.</p> <p>Ein Rombus wird zu einer Zwischentabelle. </p> <p>Es sollen umbedingt alle Null Werte vermieden werden</p>"},{"location":"21HS/DB/03_Entity%20Relationship%20Diagram.html#kardinalitaten","title":"Kardinalit\u00e4ten","text":"Zeichen Ausgeschrieben Erkl\u00e4rung m 0..m beliebig viele 1 0..1 Eine oder keine <p>Im unterem Beispiel kann eine Person eine Firma haben (1 -&gt; 0-1) und eine Firma kann mehrere Personen haben (m -&gt; 0-beliebig viele)</p> <p>In der folgenden Tabelle sieht man, welche Schl\u00fcssel in die Zwischentabelle m\u00fcssen, damit die Kardinalit\u00e4t eingehaltet wird.  Eine Schl\u00fcsselgruppe ist eine Gruppe von Schl\u00fcssel. Diese Gruppe muss eindeutig sein, da man mit einem Schl\u00fcssel ein Tupel identifizieren k\u00f6nnen muss. </p> <p>Bei einer 1-- &lt;&gt; --1 Beziehung, ist der Prim\u00e4rschl\u00fcssel die kleinste Menge von Attribute</p> Diagramm Schl\u00fcssel Beschreibung E 1 -- &lt;&gt; -- 1 F Schl\u00fcssel von E und F in seperaten Schl\u00fcsselgruppen E 1 -- &lt;&gt; -- m F Schl\u00fcssel von F E m -- &lt;&gt; -- 1 F Schl\u00fcssel von E E m -- &lt;&gt; -- m F Schl\u00fcssel von E und F in einer Schl\u00fcsselgruppe <p> Fname (Firma.Name) m\u00fcsste unterstrichen sein, da es ein  Schl\u00fcssel sein muss.</p> <p> Folgende Fakten kann man \u00fcber das obere Beispiel schreiben:</p> <ul> <li>Jede Empfehlung kommt von einem Lehrer und kann mehrere Bucher beinhalten</li> <li>Eine Zuordung ordnet mehreren Empfehlungen ein Fach zu</li> <li>Nutzung kann mehrere Klassen mit mehreren Zuordnungen verbinden</li> </ul> <p>Die Rechteck-Romben sind Zwischentabellen, welche aber auch referenziert werden und daher auch noch Identit\u00e4ten sind. Sie werden <code>Zusammengesetzte Entit\u00e4tstypen</code> genannt.</p>"},{"location":"21HS/DB/03_Entity%20Relationship%20Diagram.html#terziere-beziehung","title":"Terziere Beziehung","text":"x y z Schl\u00fcssel m m m {A1, A2, A3} m m 1 {A1, A2} m 1 m {A1, A3} m 1 1 {A1, A2}, 1 m m {A2, A3} 1 m 1 {A2, A1}, 1 1 m {A3, A1}, 1 1 1 {A1}, {A2}, {A3} <p>Ein Beispiel, wie oben, kann interpretiert werden als, pro Klasse und Buch (da beide ein <code>m</code> haben) gibt es h\u00f6chstens 1 Lehrer und Fach.</p>"},{"location":"21HS/DB/03_Entity%20Relationship%20Diagram.html#abhangig-und-unabhangige-typen","title":"Abh\u00e4ngig und Unabh\u00e4ngige Typen","text":"<p>Abh\u00e4ngig ist ein Identit\u00e4tstyp, wenn er auf eine andere Entit\u00e4t zeigt. Unabh\u00e4ngig ist er, wenn er f\u00fcr sich stehen k\u00f6nnte.</p>"},{"location":"21HS/DB/03_Entity%20Relationship%20Diagram.html#isa-abhangig","title":"ISA-Abh\u00e4ngig","text":"<p>ISA = Is A = Ist ein</p> <p>Im Beispiel: </p> <ul> <li>Ein Kunde kann ein Gesch\u00e4ftspartner</li> <li>Ein Liferant kann ein Gesch\u00e4ftspartner sein</li> </ul> <p>Der Schl\u00fcssel muss bei ISA Beziehungen nicht erweitert werden. Kunde kann nur G# brauchen, da es nicht mehrere Kunden gibt, welche auf denselben Gesch\u00e4ftspartner referenzieren.</p> <p></p>"},{"location":"21HS/DB/03_Entity%20Relationship%20Diagram.html#id-abhangig","title":"ID-Abh\u00e4ngig","text":"<p> Der Schl\u00fcssel von Physisches Buch muss erweitert werden und Ex# und ISBN beinhalten, da man sonst nicht auf ein einzelnes Physisches Buch referenzieren k\u00f6nnte, da es mehrere physische B\u00fccher auf ein logisches Buch geben k\u00f6nnen.</p>"},{"location":"21HS/DB/03_Entity%20Relationship%20Diagram.html#korrektes-er-diagramm","title":"Korrektes ER-Diagramm","text":"<p>Mit folgenden Regeln, wird ein korrektes ER-Diagramm erstellt:</p> <ol> <li> <p>Definiere die unabh\u00e4ngige Entit\u00e4ts-Typen (Tabellen, welche keine Fremdschl\u00fcssel besitzen)</p> </li> <li> <p>Definiere die Beziehungs-Typen (Rhomben), wenn mehr als eine unabh\u00e4ngige Entit\u00e4ts-Typen existiert.</p> </li> <li> <p>Definiere die Attribute und Schl\u00fcssel</p> </li> <li> <p>Wandle Beziehungstypen ind zusammengesetzte Entit\u00e4tstypen um, wenn n\u00f6tig</p> </li> <li> <p>Definiere die ID-Abh\u00e4nigen Entit\u00e4stypen (Pfeile mit ID)</p> </li> <li> <p>Definiere die ISA-Abh\u00e4nigen Entit\u00e4tstypen (Pfeile mit ISA)</p> </li> </ol>"},{"location":"21HS/DB/03_Entity%20Relationship%20Diagram.html#relationales-modell","title":"Relationales Modell","text":"<p>Entit\u00e4ten werden im Format \"Name(Schl\u00fcssel1, Attribute2)\" angegeben. Wenn ein Attribut unterstrichen ist, dann ist es ein Schl\u00fcssel. Die Reihenfolge sollte dieselbe sein, in welcher die Entit\u00e4ten erstellt wurden.</p>"},{"location":"21HS/DB/03_Entity%20Relationship%20Diagram.html#bcnf-boyce-codd-normal-form","title":"BCNF (Boyce-Codd Normal-Form)","text":""},{"location":"21HS/DB/04_SQL.html","title":"SQL","text":""},{"location":"21HS/DB/04_SQL.html#datentypen","title":"Datentypen","text":"Datentyp Erkl\u00e4rung CHAR(n)/Character(n) String mit einer fixen L\u00e4nge Char Varying(n)/VARCHAR(n) String, welcher beliebig Lang sein kann . Kann aber ein Limit haben TEXT String, mit beliebiger L\u00e4nge Int/INTEGER Ganzzahl REAL Fliesskomazahl NUMERIC(p, s)/DECIMAL(p, s) Festkomazahl. <code>p</code>\u00a0steht f\u00fcr die Stellen nach dem 0, <code>s</code>f\u00fcr die Stellen nach vor dem 0 INDEX Shortcut f\u00fcr"},{"location":"21HS/DB/04_SQL.html#domains","title":"Domains","text":"<p><pre><code>GENERATED BY DEFAULT AS IDENTITY\n</code></pre> Domains sind Typenalias.</p>"},{"location":"21HS/DB/04_SQL.html#domain-erstellen","title":"Domain erstellen","text":"<p><code>create domain &lt;name&gt; as &lt;datentyp&gt;</code></p> <p>Der Name ist der Name, welcher zuk\u00fcnfigt als Typ verwendet werden k\u00f6nnen, der Datentyp ist ein Typ, wie \"CHAR(10)\".</p>"},{"location":"21HS/DB/04_SQL.html#domain-loschen","title":"Domain L\u00f6schen","text":"<p>L\u00f6scht eine Domain</p> <p><code>drop domain &lt;name</code></p>"},{"location":"21HS/DB/04_SQL.html#schemas","title":"Schemas","text":""},{"location":"21HS/DB/04_SQL.html#schema-erstellen","title":"Schema Erstellen","text":"<p>Um eine neues Schema zuerstellen zu k\u00f6nnen:</p> <p><code>create schema &lt;name&gt; [authorization &lt;user&gt;]</code></p> <p>In Postgressql ist ein Schema ein Teil einer Datenbank. In MySQL diese Terme kann man gleich setzten.</p>"},{"location":"21HS/DB/04_SQL.html#schema-loschen","title":"Schema L\u00f6schen","text":"<p><code>drop schema &lt;name&gt; [cascade]</code></p> <p>L\u00f6scht das angegebene Schema</p> <ul> <li>\"casecade\" l\u00f6scht ohne nach zu fragen.</li> </ul>"},{"location":"21HS/DB/04_SQL.html#schema-auswahlen","title":"Schema ausw\u00e4hlen","text":"<p><code>use schema &lt;name&gt;</code></p> <p>Mit diesem Befehl wird ein Schema ausgew\u00e4hlt, dass f\u00fcr zuk\u00fcnfigite Befehle, wie <code>create table</code> ben\u00fctzt werden soll.</p>"},{"location":"21HS/DB/04_SQL.html#tabellen","title":"Tabellen","text":""},{"location":"21HS/DB/04_SQL.html#tabellen-erstellen","title":"Tabellen Erstellen","text":"<p>Um eine neue Tabelle erstellen zu k\u00f6nnen:</p> <p><code>create table &lt;tablename&gt; (&lt;columnName1&gt; &lt;columnTyp1&gt; &lt;optionen&gt; | table constraint, ...)</code> </p> <ul> <li>optionen</li> <li><code>NOT NULL</code> - Attribut kann nicht null sein (kann nicht benannt werden)</li> <li><code>DEFAULT (&lt;value&gt;)</code> - Setzt ein Default Wert</li> <li><code>CHECK (&lt;condition&gt;)</code> - Das Attribut muss die Kondition erf\u00fcllen</li> <li><code>PRRIMARY KEY</code> (impliziert <code>NOT NULL</code>) - Definiert ein Attribut als Primary Key</li> <li><code>UNIQUE</code> - Attribute muss einzigartig sein</li> <li>table constraint - Anstatt ein Attribut kann auch ein Table Constraint definiert werden: <code>[CONSTRAINT &lt;constraintName&gt;] &lt;optionen von oben&gt;</code></li> </ul>"},{"location":"21HS/DB/04_SQL.html#tabelle-kopieren","title":"Tabelle Kopieren","text":"<p>Wenn man das Schema (ohne Constraints) kopieren m\u00f6chte, kann man folgenden Befehl ben\u00fctzten: <code>CREATE TABLE &lt;tablename&gt; LIKE &lt;table_copy_from&gt; [INCLUDING CONSTRAINTS]</code></p> <p>Mit <code>INCLUDING CONSTRAINTS</code> k\u00f6nnen auch die Constraints \u00fcbernommen werden.</p> <p>Um mit Daten eine neue Tabelle zu erstellen, kann man auch den folgenden Befehl ben\u00fctzten: <code>CREATE TABLE &lt;tablename&gt; AS (&lt;subquery&gt;)</code> . Dies erstellt eine neue Tabelle auf Basis der Subquery.</p> <p>Eine normale Tabelle kann nicht mit <code>update materialized view</code> geupdated werden.</p>"},{"location":"21HS/DB/04_SQL.html#tabellen-loschen","title":"Tabellen L\u00f6schen","text":"<p><code>drop table &lt;tablename&gt; [cascade]</code></p> <p>L\u00f6scht die angegebene Tabelle</p> <ul> <li>\"casecade\" l\u00f6scht ohne nach zu fragen.</li> </ul>"},{"location":"21HS/DB/04_SQL.html#tabellen-andern","title":"Tabellen \u00c4ndern","text":"<p><code>ALTER TABLE &lt;tableName&gt; ADD &lt;column|contraint&gt;</code></p> <p><code>ALTER TABLE &lt;tableName&gt; DROP (&lt;column&gt;|CONSTRAINT &lt;contraint&gt;) [CASCADE]</code></p> <p><code>ALTER TABLE &lt;tableName&gt; ALTER &lt;column&gt;|&lt;contraint&gt; [SET DEFAULT &lt;default_value&gt;]</code></p>"},{"location":"21HS/DB/04_SQL.html#constraints","title":"Constraints","text":""},{"location":"21HS/DB/04_SQL.html#arten","title":"Arten","text":"<ul> <li><code>NOT NULL</code> - Attribut kann nicht null sein (kann nicht benannt werden)</li> <li><code>DEFAULT (&lt;value&gt;)</code> - Setzt ein Default Wert</li> <li><code>CHECK (&lt;condition&gt;)</code> - Das Attribut muss die Kondition erf\u00fcllen</li> <li><code>PRRIMARY KEY [(&lt;spalte1&gt;, ...)]</code> (impliziert <code>NOT NULL</code> und <code>UNIQUE</code>) - Definiert ein oder mehrere  Attribute als Primary Key. (max 1 pro Tabelle)</li> <li><code>FOREIGN KEY &lt;spalte1&gt; REFERENCES &lt;table&gt; [&lt;spalte&gt;]</code> - erstellt ein Foreign Key</li> <li><code>UNIQUE [(&lt;spalte1&gt;, ...)]</code> - Attribute muss einzigartig sein</li> </ul> <p>Bei <code>FOREIGN KEY</code> kann zus\u00e4tzlich noch folgendes angegeben werden:</p> <ul> <li><code>ON UPDATE CASCADE</code>  - wenn der Primary Key ge\u00e4ndert wird, werden die Foreign Keys auch ge\u00e4ndert.</li> <li><code>ON DELETE CASCADE</code> - wenn der Primary Key gel\u00f6scht wird, werden Tupels, welche darauf referenzieren auch gel\u00f6scht.</li> </ul> <p>Beispiel: <pre><code>CREATE TABLE Player (\n    name VARCHAR(255),\n    club_name VARCHAR(255),\n    CONSTRAINT club_name_constraint FOREIGN KEY (club_name) REFERENCES Club (name) \n        ON UPDATE CASCADE ON DELETE CASCADE\n)\n</code></pre></p>"},{"location":"21HS/DB/04_SQL.html#daten-hinzufugen","title":"Daten Hinzuf\u00fcgen","text":"<p><code>INSERT INTO &lt;tabelle&gt; [(&lt;attribut1&gt;, ...)] VALUES (&lt;value1&gt;,...)</code></p> <p><code>INSERT INTO &lt;tabelle&gt; [(&lt;attribut1&gt;, ...)] (&lt;query&gt;)</code></p> <p>F\u00fcgt ein Tupel in eine Tabelle ein. Ebenfalls kann anstatt fixe Werte ein SELECT angegeben werden. In diesem Fall werden die Werte von der Query \u00fcbernommen</p>"},{"location":"21HS/DB/04_SQL.html#daten-updaten","title":"Daten Updaten","text":"<p><code>UPDATE &lt;tableName&gt; SET &lt;attribut1&gt; = &lt;value1&gt; , ... [WHERE &lt;condition&gt;]</code></p> <p>\u00c4ndert alle Tupels, bei welchen die Kondition zutrifft. Falls kein WHERE angegeben wurde, werden alle Tupels in der Spalte ge\u00e4ndert.</p>"},{"location":"21HS/DB/04_SQL.html#daten-abfragen","title":"Daten Abfragen","text":"<p><code>SELECT &lt;spalte1&gt;, ... FROM &lt;tabellen&gt; [WHERE &lt;condition&gt;] [GROUP BY &lt;spalte&gt;, ... [HAVING &lt;condition&gt;]] [ORDER BY &lt;column&gt; [ASC|DESC]] [LIMIT &lt;limit&gt;] [OFFSET &lt;start&gt;]</code></p> <ul> <li> <p>Als Spalte kann folgendes angegeben werden</p> </li> <li> <p>Spalten von Tabellen vom FROM-Teil </p> <ul> <li>Mathe/Funktionen mit spalten (z.B. saler * 1.2 + 1000 als spalte)</li> <li><code>DISTINCT &lt;spalte&gt;</code> - dies eliminiert Duplikate in der angegebenen Spalte</li> <li>'*' steht f\u00fcr alle Spalten vom FROM-Teil</li> <li>Konstante (z.B. 1)</li> <li>Aggregate Funktionen, wie <code>AVG(&lt;spalte&gt;)</code>, <code>SUM(&lt;spalte&gt;)</code>. Daf\u00fcr sollte aber auch <code>GROUP BY</code> spezifiziert sein</li> <li>Jede \"Spalte\" von dieser Liste kann mit <code>AS &lt;name&gt;</code> umbenennt werden</li> <li>Mit <code>EXTRACT (YEAR from &lt;spalte&gt;)</code> kann z.B. das Jahr von einem Datum extrahiert werden</li> <li>Mit <code>CASE WHEN &lt;condition&gt; THEN &lt;value1&gt; [WHEN &lt;condition&gt; THEN &lt;vallue2&gt;] ELSE &lt;valueN&gt; END</code> kann eine \"If\"-Bedinung gestallten werden</li> <li>Mit <code>COALESCE(&lt;args1&gt;, &lt;argN&gt;, ...)</code> wird das erste Argument zur\u00fcck geben, welches nicht Null ist</li> </ul> </li> <li> <p>Als tabellen kann folgendes geschrieben werden:</p> </li> <li> <p>Eine oder mehrere Tabellen. Wenn mehrere Tabellen definiert werden, wird das Kreuzprodukt gebildet</p> </li> <li> <p>Nach einer Tabelle kann ein Name angegeben werden (z.B. <code>BestellPosition BP</code> BestellPostion k\u00f6nnte in der Query als BP benutzt werden)</p> </li> <li> <p><code>&lt;tabelle&gt; CROSS JOIN &lt;tabelle&gt;</code> - bildet das Kreuzprodukt</p> </li> <li> <p><code>&lt;tabelle&gt; LEFT JOIN &lt;tabelle&gt;</code> - Alle Eintr\u00e4ge von der linken Seite werden \u00fcbernommen. Wenn keine Eintrag auf der rechten Seite gefunden wird, sind die entsprechenden Spalten <code>NULL</code></p> </li> <li> <p><code>&lt;tabelle&gt; RIGHT JOIN &lt;tabelle&gt;</code> - Alle Eintr\u00e4ge von der rechten Seite werden \u00fcbernommen. Die Spalten der linken Seite werden <code>NULL</code>, wenn kein Eintrag zu der rechten Seite gefunden wurde.</p> </li> <li> <p><code>&lt;tabelle&gt; OUTER JOIN &lt;tabelle&gt;</code> - LEFT und RIGHT JOIN kombiniert</p> </li> <li> <p><code>&lt;tabelle&gt; FULL OUTER JOIN &lt;tabelle&gt;</code> - </p> </li> <li> <p><code>&lt;tabelle NATURAL FULL OUTER JOIN &lt;tabelle&gt;</code> - </p> </li> <li> <p><code>&lt;tabelle&gt; [INNER] JOIN &lt;tabelle&gt;</code> - Liefert nur Resultate, welche auf beiden Tabellen einen Eintrag haben. Es gibt den alternativ Syntax <code>SELECT * FROM a, b WHERE a.x = b.x</code></p> </li> <li> <p><code>&lt;tabelle&gt; NATURAL JOIN &lt;tabelle&gt;</code> - Ist das Equivalente zu \\(\\bowtie\\). Es werden gemeinsame Attribute benutzt. Falls es keine gibt, wird ein Kreuzprodukt gebildet</p> </li> <li> <p>Subqueries - <code>&lt;subquery&gt; AS &lt;variable&gt;</code> Das <code>AS</code> weisst der Subquery einen Namen zu, welchen man wie als Tabellennamen benutzten kann</p> </li> <li> <p>conditions</p> </li> <li> <p><code>&lt;column&gt; LIKE &lt;likeStr&gt;</code> Like funktioniert \u00e4hlich, wie <code>=</code>, nur das <code>%</code> anstatt beliebiege Zeichen eingesetzt werden k\u00f6nnen und <code>_</code> als ein bestimmtes Zeichen. Dies funktioniert nur f\u00fcr Strings</p> </li> <li> <p><code>&lt;column&gt; BETWEEN &lt;start&gt; AND &lt;end&gt;</code> Findet alle Werte zwischen dem start und end (inklusiv start und end). Dies funktioniert auch mit Strings oder Daten</p> </li> <li> <p><code>&lt;column&gt; IS [NOT] NULL</code> - pr\u00fcft, ob ein Wert <code>NULL</code> ist</p> </li> <li> <p><code>&lt;&gt;</code> - steht f\u00fcr nicht gleich, wie != in den meisten Sprachen</p> </li> <li> <p><code>EXISTS (subquery)</code> - \u00fcberpr\u00fcft, ob die subquery etwas zur\u00fcck geliefert hat</p> </li> <li> <p><code>&lt;column&gt; IN (&lt;wert1&gt;, ...)</code> ODER <code>&lt;column&gt; IN (&lt;subquery&gt;)</code> - Stelltsicher, dass der Wert der Spalte in der Wertelist ist oder in der Subquery gefunden wird. Die Subquery muss eine Spalte zur\u00fcck geben oder der <code>&lt;column&gt;</code>-Teil muss ein Tupel sein (wie <code>(&lt;column1&gt;, &lt;column2&gt;, ...) IN (select &lt;column1&gt;, &lt;column2&gt;, ...) from ...</code>). Die Reihenfolge wird beachtet, nicht die Namen selbst! </p> </li> <li> <p><code>&lt;column&gt; NOT IN (&lt;wert1&gt;, ...)</code> oder <code>&lt;column&gt; NOT IN (&lt;subquery&gt;)</code> - Gleich wie <code>IN</code> nur, dass der Wert der Spalte nicht in der Werteliste oder Subquery vorkommen darf.</p> </li> <li> <p><code>ORDER BY</code></p> </li> <li> <p><code>ASC</code> - Aufsteigend (default)</p> </li> <li> <p><code>DESC</code> - Absteigend</p> </li> </ul>"},{"location":"21HS/DB/04_SQL.html#reihenfolge","title":"Reihenfolge","text":"<p>In der folgenden Reihenfolge werden SQL Queries abgearbeitet. Speziell wo <code>WHERE</code>und <code>HAVING</code> steht.</p> <ol> <li> <p>FROM</p> </li> <li> <p>WHERE</p> </li> <li> <p>GROUP BY</p> </li> <li> <p>HAVING</p> </li> <li> <p>SELECT</p> </li> <li> <p>ORDER BY</p> </li> </ol>"},{"location":"21HS/DB/04_SQL.html#aggregatsfunktionen","title":"Aggregatsfunktionen","text":"<p>SQL kennt folgende Aggregationsfunktionen <code>COUNT(&lt;spalte&gt;)</code>, <code>AVG(&lt;spalte&gt;)</code>, <code>SUM(&lt;spalte&gt;)</code>, <code>MIN(&lt;spalte&gt;)</code>, <code>MAX(&lt;spalte&gt;)</code></p> <p>(<code>AVG(&lt;splate&gt;)</code> ist nicht dasselbe, wie <code>SUM(&lt;spalte&gt;)/COUNT(&lt;spalte&gt;)</code>, da COUNT auch <code>NULL</code> Werte z\u00e4hlt)</p> <p>Die Aggregationsfunktionen operieren auf den Gruppen, welche von <code>GROUP BY</code> erstellt wurde.</p> <p>Wichtig zu erw\u00e4hnen ist, dass <code>HAVING</code> auf dem aggregiertem Ergebniss filtert und <code>WHERE</code> vor dem Gruppieren. </p> <p>In einer Aggregationsfunktion kann <code>DISTINCT</code> verwendet werden (wie <code>COUNT(DISTINCT &lt;spalte&gt;))</code>. Somit werden nur verschiedene Werte gez\u00e4hlt, summiert,...</p>"},{"location":"21HS/DB/04_SQL.html#subqueries","title":"Subqueries","text":"<p>Abfragen k\u00f6nnen miteinander verbunden werden:</p> <p><code>&lt;query&gt; (UNIION | INTERSECT | EXCEPT) [ALL|DISTINCT] &lt;query&gt;</code> </p> <ul> <li><code>UNION ALL</code> = Bag Concatenation </li> <li><code>INTERSECT ALL</code> = \\(\\cap\\)</li> <li><code>EXCEPT ALL</code> = \\</li> </ul> <p>Ohne <code>ALL</code> wird automatisch <code>DISTINCT</code> gebraucht, was Duplikate entfernt.</p>"},{"location":"21HS/DB/04_SQL.html#all-und-any","title":"<code>ALL</code> und <code>ANY</code>","text":"<p><code>where &lt;column&gt; &lt;|&gt;|&lt;=|&gt;= [NOT] ALL(&lt;subquery&gt;)</code></p> <p><code>where &lt;column&gt; &lt;|&gt;|&lt;=|&gt;= [NOT]ANY (&lt;subquery&gt;)</code></p> <p><code>WHERE alter &gt; all(select alter from person)</code> w\u00fcrde sicher stellen, dass das Alter gr\u00f6sser ist als alle Alter der Personen der Tabelle Person.</p> <p><code>WHERE alter &gt; ANY(select alter from person)</code> w\u00fcrde sicher stellen, dass das Alter gr\u00f6sser ist als mindestens ein Alter einer Person der Tabelle Person.</p>"},{"location":"21HS/DB/04_SQL.html#exists","title":"EXISTS","text":"<p><code>where [NOT] EXISTS(&lt;subquery&gt;)</code></p> <p><code>EXISTS</code> wird true, wenn die Subquery kein leeres Resultat zur\u00fcck bringt.</p> <p>Beispiel: <code>select * from person as P where exists (select 1 from angestellte as A where P.name=A.name)</code>angestellte</p>"},{"location":"21HS/DB/04_SQL.html#common-table-expression-cte","title":"Common Table Expression (CTE)","text":"<p>Mit dem Syntax: <code>WITH &lt;cte_name&gt; AS (&lt;select_query&gt;)&lt;select_query2&gt;</code></p> <p><code>&lt;select_query2&gt;</code> kann nun eine Tabelle <code>&lt;cte_name&gt;</code> ben\u00fctzten. Dies kann Abfragen vereinfachen, welche viele Subqueries haben.</p>"},{"location":"21HS/DB/04_SQL.html#views","title":"Views","text":""},{"location":"21HS/DB/04_SQL.html#materialized-view","title":"Materialized View","text":"<p>Eine materialized View updaten nicht automatisch, sondern muss manuell geupdated werden mit <code>REFRESH MATERIALIZED VIEW &lt;name&gt;</code>.</p> <p>Dies kann auch mit Triggers erledigt werden. So k\u00f6nnte man z.B. nach einem Zeitintervall die Materialized View updaten.</p>"},{"location":"21HS/DB/04_SQL.html#view-erstellen","title":"View erstellen","text":"<p><code>CREATE [MATERIALIZED] VIEW &lt;name&gt; AS &lt;abfrage&gt;</code></p> <p>Damit wird eine View erstellt. Dies kann n\u00fctzlich sein, um die Schreibarbeit zu minimieren. Ebenfalls kann es dazu verwendet werden, Rechte auf nur einen Teil einer Tabelle zu verteilen.</p> <p>Views k\u00f6nnen auch von anderen Views abh\u00e4ngig sein.</p> <p>Wenn eine View von mehreren Tabellen abh\u00e4ngig ist (oder andere Speziallf\u00e4lle), k\u00f6nnen keine neue Daten eingef\u00fcgt werden. Wenn eine View mit <code>AS select * from &lt;tabelle&gt;</code> erstellt, dann k\u00f6nnen Daten ge\u00e4ndert werden.</p>"},{"location":"21HS/DB/04_SQL.html#view-andern","title":"View \u00e4ndern","text":"<p><code>ALTER VIEW &lt;name&gt; ..</code></p> <p>Kann dazu verwedet werden, um verschiedene Eigenschaften einer View zu \u00e4ndern. Um die Spalten einer View zu \u00e4ndern, ist es aber einfacher einfach die View zu l\u00f6schen und neu zu erstellen.</p>"},{"location":"21HS/DB/04_SQL.html#view-loschen","title":"View l\u00f6schen","text":"<p><code>DROP VIEW &lt;name&gt;</code></p> <p>Damit wird eine View gel\u00f6scht.</p>"},{"location":"21HS/DB/04_SQL.html#stored-proceduresfunktion","title":"Stored Procedures/Funktion","text":"<ul> <li>Vorteile</li> <li>Reduktion von Datenverkehr zwischen Client und DBMS</li> <li>Sehr komplexe Abfragen sind m\u00f6glich</li> <li>Sind verwendtbar von mehreren Applikationen</li> <li>Nachteile</li> <li>Syntax nicht standardisiert</li> <li>Fehlerbehandlung ist umst\u00e4ndlich</li> <li>Unkonfortable zum Entwickeln</li> <li>(Vermutlich noch ein Ort mehr, an dem dieselbe Logik implementiert wird (z.B. in HTML/JS, Java Server und noch DBMS))</li> </ul> <p><code>CREATE PROCEDURE &lt;name&gt;</code></p> <p><code>ALTER PROCEDURE &lt;name&gt;...</code></p> <p><code>DROP PROCEDURE &lt;name&gt;</code></p> <p><code>CREATE FUNCTION &lt;name&gt;</code></p> <p><code>ALTER FUNCTION &lt;name&gt;...</code></p> <p><code>DROP FUNCTION &lt;name&gt;</code></p> <p>Die Grundstruktur einer Funktion sieht folgendermassen aus:</p> <pre><code>CREATE OR REPLACE FUNCTION &lt;name&gt;() RETURNS &lt;returnType&gt; AS\n$body$\nBEGIN\n&lt;mainLogicBlock&gt;\nEXCEPTION\n&lt;exceptionBlock&gt;\nEND\n$body$\n</code></pre> <p>Mit <code>SELECT &lt;name&gt;()</code> kann man diese Funktion danach aufraufen.</p>"},{"location":"21HS/DB/04_SQL.html#variabeln","title":"Variabeln","text":"<p><code>&lt;name&gt; [CONSTANT] &lt;type&gt; [NOT NULL] &lt;expression&gt;</code></p> <p><code>&lt;name&gt; [CONSTANT] &lt;type&gt; [NOT NULL] DEFAULT &lt;expression&gt;</code></p> <p>Mit dem obigen SQL k\u00f6nnen Variabeln in einer Funktion erstellt werden. </p>"},{"location":"21HS/DB/04_SQL.html#cursor","title":"Cursor","text":"<pre><code>DECLARE &lt;cursor_name&gt; CURSOR\nFOR &lt;select_expression&gt;\n[FOR UPDATE]\n</code></pre> <p>Mit <code>OPEN &lt;cursor_name&gt;</code> kann der Cursor ge\u00f6ffnet werden und mit <code>CLOSE &lt;cursor_name&gt;</code> wieder geschlossen.</p> <pre><code>CREATE OR REPLACE FUNCTION Show_AlleBesuchernamen()\nRETURNS VOID AS $$\nDECLARE\n    rec_Besucher record;\n    c_Namen CURSOR FOR SELECT Name,Vorname FROM Besucher;\nBEGIN\n    OPEN c_Namen;\n    LOOP\n        FETCH c_Namen INTO rec_Besucher;\n        EXIT WHEN NOT FOUND;\n        RAISE NOTICE 'Name: % Vorname: % ',rec_Besucher.Name, rec_Besucher.Vorname;\nEND LOOP;\nCLOSE c_Namen;\nEND; $$\nLANGUAGE plpgsql;\n</code></pre>"},{"location":"21HS/DB/04_SQL.html#trigger","title":"Trigger","text":"<p>Triggers werden ausgef\u00fchrt, wenn ein sich eine Tabelle \u00e4ndert. Einen Trigger kann f\u00fcr INSERT, UPDATE und DELETE definiert werden.</p> <p>Mit den typeschen SQL Statements k\u00f6nnen Triggers erstellt werden.</p> <p><code>CREATE TRIGGER &lt;name&gt; (BEFORE|AFTER|INSTEAD OF) ON &lt;tabelle&gt; FOR EACH ROW EXECUTE PROCEDURE &lt;procedure/function&gt;()</code> <code>ALTER TRIGGER \u00a0&lt;name&gt; (DISABLE|ENABLE)</code></p> <p><code>DROP TRIGGER &lt;name&gt;</code></p>"},{"location":"21HS/DB/04_SQL.html#index","title":"Index","text":"<p>Mit <code>CREATE INDEX &lt;name&gt; on &lt;table&gt;(&lt;column&gt;, ...)</code> kann ein Index erstelt werden und mit <code>DROP INDEX &lt;name&gt;</code> weder gel\u00f6scht werden.</p> <p>Ein Index hat einige Vorteile, aber auch Nachteille:</p> <ul> <li> <p>Vorteil:</p> </li> <li> <p>Zugriffzeit     Da die Daten nun eine Sortierung haben, kann die DB schneller auf die Daten zugreifen</p> </li> <li> <p>Nachteile:</p> </li> <li> <p>Speicherplatz     Der Index b\u00f6ntigt platz</p> </li> <li> <p>Zeit     Um den Index zu erstellen und nocht wichtiger beim Updaten, ben\u00f6tigt die DB Zeit, um den Index neu zu schreiben</p> </li> </ul>"},{"location":"21HS/DB/04_SQL.html#wann-lohnt-sich-ein-index","title":"Wann lohnt sich ein Index?","text":"<ul> <li> <p>Attribute, welche oft Abgefragt werden</p> </li> <li> <p>Femdschl\u00fcssel sollten indexiert werden</p> </li> <li> <p>Generell, Attribute, \u00fcber die oft gejoint weden, sollten indexiert werden</p> </li> <li> <p>Attribute mit niedriger Kardinalit\u00e4t sollten nicht indexiert weden (daf\u00fcr gibt es spezielle Indexstrukturen, welche wir allerdings nicht behandeln)</p> </li> </ul>"},{"location":"21HS/DB/04_SQL.html#dunn-vs-dichtbesetzer-index","title":"D\u00fcnn- vs. Dichtbesetzer Index","text":""},{"location":"21HS/DB/04_SQL.html#transaktionen","title":"Transaktionen","text":"<p>Im folgenden Bild sind die verschiedenen Statis einer Transakti</p> <p></p>"},{"location":"21HS/DB/04_SQL.html#lost-update","title":"Lost-Update","text":"<ul> <li>Es darf nicht gleizeitig aus zwei Transaktionen geschrieben werden. Dies verhindert ein Lost-Update</li> </ul>"},{"location":"21HS/DB/04_SQL.html#dirty-read","title":"Dirty Read","text":""},{"location":"21HS/DB/04_SQL.html#non-repeatable-read","title":"Non-Repeatable Read","text":""},{"location":"21HS/DB/04_SQL.html#phantom-read","title":"Phantom-Read","text":""},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html","title":"Integrit\u00e4tsregeln","text":"<p>Wichtig anzumerken, nur weill die Datenbank konsistenz ist, heisst nicht, dass die Daten darin korrekt sind.</p>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#uberprufbare-regeln","title":"\u00dcberpr\u00fcfbare Regeln","text":"<ul> <li> <p>Bereichintegrit\u00e4t   Das DB-System stellt sicher, dass der Wert eines Attributes in einem Wertebereich ist. Daf\u00fcr k\u00f6nnen z.B. <code>NULL</code> und <code>NOT NULL</code>, wie auch Dom\u00e4nen verwendet werden</p> </li> <li> <p>Entit\u00e4tsintegrit\u00e4t   Der Prim\u00e4tschl\u00fcssel kann nicht leer sein. Also nicht <code>NULL</code></p> </li> <li> <p>Refentielle Integrit\u00e4t   Der Wert eines Fremdschl\u00fcssel muss <code>NULL</code> sein oder genau einen Prim\u00e4rschl\u00fcssel referezieren</p> </li> <li> <p>Constraints   Zus\u00e4tzlich k\u00f6nnen Constraints geschrieben werden, um weitere Bedingungen zu \u00fcberpr\u00fcfen. Siehe SQL</p> </li> </ul>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#acid","title":"ACID","text":"<p>ACID steht f\u00fcr Atomicity, Consistency, Isolation und Durability. Dies sind Eigenschaften, welche von einer Transaktion eingehalten werden soll.</p>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#atomicity","title":"Atomicity","text":"<p>Entweder funktioniert alle Statements in einer Transaktion oder kein Statement. Wenn ein Fehler auftritt, m\u00fcssen alle \u00c4nderungen davor r\u00fcckg\u00e4ngig gemacht werden (Rollback).</p>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#consistency","title":"Consistency","text":"<p>Nach einer Operation muss die DB wieder in einem Konsistenten Zustand hinterlassen werden.</p>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#isolation","title":"Isolation","text":"<p>Zwei parallel-laufende Transaktionen d\u00fcrfen sich nicht beinflussen.</p>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#durability","title":"Durability","text":"<p>Die DB muss erfolgreiche Statements speichern, so dass selbst im Fall eines Absturz diese wieder geladen werden k\u00f6nnten. Falls dies nicht m\u00f6glich ist, muss auf einen vorg\u00e4ngigen konsistenten Zustand zur\u00fcck gesetzt werden k\u00f6nnen (Rollback).</p>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#probleme-beim-nicht-einhalten-von-acid","title":"Probleme beim nicht-einhalten von ACID","text":"<p>Folgende Probleme k\u00f6nnen auftreten, wenn die ACID Eigenschaften nicht eingehalten werden. Manchmal kann man mit diesen Problemen leben, da das Einhalten der ACID-Eigeschaften Performance kostet.</p> <p>Lost-Update kann fast nie toleriert werden. Die anderen Probleme k\u00f6nnen zum teil toleriert werden.</p>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#lost-update","title":"Lost-Update","text":"<p>Ein bereits geschriebenes Update wird wieder \u00fcberschrieben. Dies kann eintreffen, wenn keine Isolation zwischen den Transaktionen herscht und eine Transaktion den zu schreibenden Bereich nicht sperrt.</p> <p>Dieses Problem wird gel\u00f6st, in dem eine Transaktion Daten, welche von einer zweiten Transaktion gelesen werden, nicht ver\u00e4ndern darf.</p> <p>Beispiel:</p> Transaktion 1 Transaktion 2 1 <code>SEECT wert INTO W FROM tbl</code> 2 <code>SEECT wert INTO W FROM tbl</code> 3 <code>UPDATE tbl SET wert=100</code> 4 <code>UPDATE tbl SET wert=200</code> 5 <code>SEECT wert INTO W FROM tbl</code> 6 <code>SEECT wert INTO W FROM tbl</code>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#dirty-read-problem","title":"Dirty-Read-Problem","text":"<p>Ein Dirty-Read passiert, wenn Daten von einer noch nicht fertigen Transaktion gelesen werden.</p> Transaktion 1 Transaktion 2 1 <code>UPDATE tbl SET Wert = 5</code> 2 <code>SELECT wert INTO w FROM tbl</code> 3 <code>ROLLBACK</code> 4 <code>UPDATE tbl SET wert=w+1</code> 5 <code>SELECT wert FROM tbl</code> (Resultat 6) <p>Dies wird dadurch verursacht, dass die Transaktion 2 bereits Daten von der noch nicht fertigen Transaktion 1 lesen kann und somit die Isolation-Eigenschaft von ACID verletzt ist. Zus\u00e4tzlich d\u00fcrfte dies nicht m\u00f6glich sein, da die Transaktion 1 die Tabelle <code>tbl</code> sperren m\u00fcsste, um zu schreiben zu k\u00f6nnen.</p>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#non-repeatable-read","title":"Non-Repeatable-Read","text":"<p>Zwei verschiedene Lese-Zugriff auf den selben Wert lieftert unterschiedliche Resultate.</p> Transaktion 1 Transaktion 2 1 <code>SELECT wert INTO W FROM tbl</code> 2 <code>UPDATE tbl SET wert=6</code> 3 <code>COMMIT</code> 4 <code>SELECT wert INTO W FROM tbl</code> <p>Das <code>SELECT</code> bei 1 w\u00fcrde ein anderes Resultat zur\u00fcck liefern als das bei 4. Dies kommt davon, da Transaktion 1 sieht was Transaktion 2 ver\u00e4ndert hat. Die Transaktion 1 d\u00fcrfte nur den Zustand der DB sehen, welche am Anfang der Transaktion vorhanden war.</p>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#phantom-read","title":"Phantom-Read","text":"<p>Ein Phatom-Read entsteht, wenn ein Tupel eingef\u00fcgt oder gel\u00f6scht wird, w\u00e4hrend einer anderen Transaktion und die das sieht. Dies kann in Aggregationsfunktionen auftreten</p> Transaktion 1 Transaktion 2 1 <code>SELECT COUNT(*) INTO ctn FROM tbl</code> 2 <code>INSERT INTO tbl VALUES (...)</code> 3 <code>COMMIT</code> 4 <code>SELECT COUNT(*) INTO ctn FROM tbl</code> <p>Das Problem ist dasselbe, wie beim Non-Repeatable-Read, dass die Transaktion 1 sieht, was Transaktion 2 commitet hat. Der Unterschied ist, dass sich keine Attributwerte sich ver\u00e4ndern, sondern eines Tupel hinzugef\u00fcgt oder entfernt wird.</p> <p>Dies kann gel\u00f6st werden, in dem Transaktion 1 nur sieht, was zu Beginn der Transaktion sichtbar war.</p>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#isolationsebenen","title":"Isolationsebenen","text":"<p>Mit <code>SET TRANSACTION ISOLATION LEVEL {READ UNCOMMITED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE}</code> kann die Isolationsebenen ver\u00e4ndert werden.</p> <p>(In Postgresql ist <code>READ UNCOMMITTED</code> das selbe, wie <code>READ COMMITTED</code>)</p> <p></p>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#defered-constraint-checking","title":"Defered Constraint Checking","text":""},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#schedules","title":"Schedules","text":"<p>Der vollst\u00e4ndige Schedule beinhaltet alle Schritte, inklusive <code>COMMIT</code> und <code>ROLLBACK</code> Befehle. Ebenfalls ist f\u00fcr jede Transaktion festgehalten, ob sie erfolgreich war oder nicht. Wenn eine neue Abfrage an den DB-Server gesendet wird, landet diese zuerst im vollst\u00e4ndigen Schedule bevor die Befehle auf einen Schedule geplant werden konnten.</p> <p>Ein Schedule (nicht ein vollst\u00e4ndiger Schedule) wird von der DB geplant anhand des vollst\u00e4ndigen Schedule. Die Planung kann w\u00e4hrend des Ausf\u00fchrens eines Schedules laufen, so bald dieser fertig ist, wird der n\u00e4chste ausgef\u00fchrt.</p>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#darstellung","title":"Darstellung","text":""},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#konfliktserialisierbar","title":"konfliktserialisierbar","text":"<p>Ein Schedule ist konfliktserialisierbar, wenn:</p> <ol> <li>d</li> </ol> <p>Anders ausgedr\u00fcckt, ein Schedule ist serialisierbar, wenn dieser keine Zyklen enth\u00e4lt.</p> <p></p>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#scheduler-transaktionsmanager","title":"Scheduler / Transaktionsmanager","text":"<p>Der Scheduler erstellt ein serialisierbaren Schedule f\u00fcr parallel auszuf\u00fchrende Transaktionen.</p> <ul> <li>Aggresiver Scheduler   L\u00e4sst Konflikte zu und probiert wenn diese auftreten, die zu l\u00f6sen. Dies f\u00fchrt zu einer h\u00f6hreren Parallelit\u00e4t</li> <li>Konservative Scheduler   Verscuht m\u00f6glichst Konflikte zu vermeiden. Dies f\u00fchrt zu einer niedrigen Parallelit\u00e4t</li> </ul>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#sperrverfahre","title":"Sperrverfahre","text":"<p>Generell gillt, dass nach einem Unlock, darf eine Transaktion keine weiteren Locks erstellen und alle Sperren werden beim Transaktionsende (COMMIT/ROLLBACK) aufgehoben.</p> <p>Wenn keine Sperre erstellt werden kann, dann muss die Transaktion warten, bis diese Sperre aufgehoben ist und der Bereich wieder frei ist. Das kann zu Livelocking, bzw. Verhunger f\u00fchren, wenn eine Transaktion wiederholt nicht daran kommt, weil eine andere Transaktion immer den Bereich sperrt, wenn er wieder frei wird. Die DBMS versucht dies zu vermeiden, in dem \"faire\" Algorithmen eingesetzt werden.</p>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#lese-sperre-share-lock","title":"Lese-Sperre (Share Lock)","text":"<p>Bei einer Lese sperre k\u00f6nnen andere Transaktionen immer noch vom gelockten Bereich lesen, aber nicht mehr Schreiben. Diese Sperre kann nur gesetzt werden, wenn keine Schreib-Sperre existiert (eine Lese-Sperre ist kein Problem).</p> <p>Ein Lesezugriff kann nur get\u00e4tigt werden, wenn eine Lese-Sperre (oder Schreib-Sperre) auf dem zu lesenden Bereich existiert. </p>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#schreib-sperre-exclusive-lock","title":"Schreib-Sperre (Exclusive Lock)","text":"<p>Bei einer Schreib-Sperre kann der gesperrte Breich nur von dieser Transaktion gelesen und geschrieben werden. Diese Sperre kann nur gesetzt werden, wenn keine andere Spere auf diesem Bereich aktiv ist.</p> <p>Ein Schreibzugriff kan nur get\u00e4tigt werden, wenn eine Schreib-Sperre auf dem zu schreibewnden Bereich aktiv ist.</p>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#regeln","title":"Regeln","text":"<ul> <li>Bei einem Commit oder Rollback werden alle Sperren aufgehoben</li> </ul>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#probleme","title":"Probleme","text":"<ol> <li>Block: Eine gesperrte Resource zwingt einen anderen Prozess zu warten, bis die Sperre wieder entfernt wurde</li> <li>Verhungern, Livelock: Eine Transaktion kommt nie daran, weil immer wieder andere Transaktionen vor der Transaktion abgearbeitet werden.</li> <li>Deadlock: Dies passiert, wenn sich mehrere Transaktionen gegenseitig Sperren.    Das RDBms erkennt solche Deadlocks. Wenn dies passiert, wird eine Transaktion ausgew\u00e4hlt und zur\u00fcck gesetzt, um den Deadlock zu behben.</li> <li>Phantom-Read/Non-Repeatable-Read:     L\u00f6sungen: Sperren und/oder Transaktionen isolieren</li> </ol>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#recovery","title":"Recovery","text":"<p>Wenn die DB nicht ordnungsgem\u00e4ss herunter gefahren wurde (z.B. mit <code>pkill</code> im Terminal), wird eine Recovery eingeleitet, um wieder auf einen konsistenten Zustand zu kommen</p> <ol> <li>Der Recovery-Manager kann aus den Transaktionslogs einen vorherigen Zustand wieder herstellen</li> <li>...</li> </ol>"},{"location":"21HS/DB/05_Integrit%C3%A4tsregeln.html#fehlerklassifikation","title":"Fehlerklassifikation","text":"<ol> <li>Transaktionsfehler    Dies f\u00fchrt zu einem Transaktionsabbruch und einem <code>ROLLBACK</code>. Da alle \u00c4nderungen r\u00fcckg\u00e4ngig gemacht werden, hat dies keinen Einfluss auf den Speicher</li> <li>Systemfehler    Die Daten im Arbeitsspeicher wurden (zum Teil) zerst\u00f6rt. Dies kann eine Folge von einem Fehler in der DBMS, vom OS oder auf der Hardware sein. Eventuell wurde das System nicht sauber neugestartet.     In diesem Fall wird zuerst versucht die erfolgreichabgeschlossenen Transaktionen anhand des Transaktionslogs wieder herzustellen. Wenn dies fehlschl\u00e4gt wird auf den letzten konsistenten Zustand zur\u00fcckgesetzt.</li> <li>Mediafehler    Die Daten auf dem Speichermedium sind korrupt. In diesem Fall kann versucht werden manuell ein Backup einzuspielen. Ev. kann die DB aus den bestehenden Daten wieder auf einen konsistenten Zustand kommen.</li> </ol>"},{"location":"21HS/DB/summaries/summary-2022-01-25.html","title":"DB Summary 25.01.2022","text":"","tags":["summary","DB"]},{"location":"21HS/DB/summaries/summary-2022-01-25.html#relationale-algebra","title":"Relationale Algebra","text":"Operation Erkl\u00e4rung Beispiel \\(\\sigma\\) Selektion/ <code>WHERE</code> \\(\\sigma_{L\u00e4nge&gt;3}(R)\\) \\(\\pi\\) Projektion/<code>SELECT</code> \\(\\pi_{}\\) \\(\\bowtie\\) <code>NATURAL JOIN</code>","tags":["summary","DB"]},{"location":"21HS/DB/summaries/summary-2022-01-25.html#erd","title":"ERD","text":"","tags":["summary","DB"]},{"location":"21HS/DB/summaries/summary-2022-01-25.html#korrektes-er-diagramm","title":"Korrektes ER-Diagramm","text":"<p>Mit folgenden Regeln, wird ein korrektes ER-Diagramm erstellt:</p> <ol> <li>Definiere die unabh\u00e4ngige Entit\u00e4ts-Typen (Tabellen, welche keine Fremdschl\u00fcssel besitzen)</li> <li>Definiere die Beziehungs-Typen (Rhomben), wenn mehr als eine unabh\u00e4ngige Entit\u00e4ts-Typen existiert.</li> <li>Definiere die Attribute und Schl\u00fcssel</li> <li>Wandle Beziehungstypen ind zusammengesetzte Entit\u00e4tstypen um, wenn n\u00f6tig</li> <li>Definiere die ID-Abh\u00e4nigen Entit\u00e4stypen (Pfeile mit ID)</li> <li>Definiere die ISA-Abh\u00e4nigen Entit\u00e4tstypen (Pfeile mit ISA)</li> </ol>","tags":["summary","DB"]},{"location":"21HS/DB/summaries/summary-2022-01-25.html#schlussel-gruppen","title":"Schl\u00fcssel Gruppen","text":"Diagramm Schl\u00fcssel Beschreibung E 1 -- &lt;&gt; -- 1 F Schl\u00fcssel von E und F in seperaten Schl\u00fcsselgruppen E 1 -- &lt;&gt; -- m F Schl\u00fcssel von F E m -- &lt;&gt; -- 1 F Schl\u00fcssel von E E m -- &lt;&gt; -- m F Schl\u00fcssel von E und F in einer Schl\u00fcsselgruppe <p> | x    | y    | z    | Schl\u00fcssel          | | ---- | ---- | ---- | ------------------ | | m    | m    | m    | {A1, A2, A3}       | | m    | m    | 1    | {A1, A2}           | | m    | 1    | m    | {A1, A3}           | | m    | 1    | 1    | {A1, A2}, {A1, A3} | | 1    | m    | m    | {A2, A3}           | | 1    | m    | 1    | {A2, A1}, {A2, A3} | | 1    | 1    | m    | {A3, A1}, {A3, A2} | | 1    | 1    | 1    | {A1}, {A2}, {A3}   |</p>","tags":["summary","DB"]},{"location":"21HS/DB/summaries/summary-2022-01-25.html#id-und-isa-bezihungen","title":"ID und ISA Bezihungen","text":"<ul> <li>ISA - \u00dcbernimmt den Schl\u00fcssel</li> <li>ID - Erweirtert den Schl\u00fcssel</li> </ul>","tags":["summary","DB"]},{"location":"21HS/DB/summaries/summary-2022-01-25.html#sql","title":"SQL","text":"","tags":["summary","DB"]},{"location":"21HS/DB/summaries/summary-2022-01-25.html#reihenfolge","title":"Reihenfolge","text":"<p>In der folgenden Reihenfolge werden SQL Queries abgearbeitet. Speziell wo <code>WHERE</code>und <code>HAVING</code> steht.</p> <ol> <li> <p>FROM</p> </li> <li> <p>WHERE</p> </li> <li> <p>GROUP BY</p> </li> <li> <p>HAVING</p> </li> <li> <p>SELECT</p> </li> <li> <p>ORDER BY</p> </li> </ol>","tags":["summary","DB"]},{"location":"21HS/DB/summaries/summary-2022-01-25.html#stuff","title":"Stuff","text":"","tags":["summary","DB"]},{"location":"21HS/DB/summaries/summary-2022-01-25.html#datenarten","title":"Datenarten","text":"Name Erkl\u00e4rung Beispiel Strukturierte Daten Daten mit fest vorgegebenen Struktur DBs Semi-strukturierte Daten Daten,  mit unvollst\u00f6ndigen Struktur JSON, XML,... Unstrukturierte Daten Daten, ohne explizite Struktur Text, Bilder, Film, ... <p>Eine Dom\u00e4ne ist ein Wertebereich</p> <ul> <li>Dom\u00e4ne: Ein Wertebereich, bzw. Datentyp</li> <li>Attribute: Eigenschaften von Tabellen</li> <li>Attributwerte: Die eigentlichen Werte eines Attributes</li> <li>n-Tupel: Eine Reihe in einer Relation, eine Menge von Attributwerten</li> <li>Relationsschema, Format, Heading, Relationsvariable: Menge von Attributen</li> <li>Relation: Relationsschema und Menge von Tupeln zusammen</li> <li>Sind ungeordnet</li> <li>Schl\u00fcssel: Identifiziert ein Tupel eindeutig</li> <li>Surrogatschl\u00fcssel: K\u00fcnstlicher Schl\u00fcssel (zB. eine ID)</li> <li>Prim\u00e4rschl\u00fcssel: Ein Schl\u00fcssel, auf welchen ein Fremdschl\u00fcssel zeigt</li> </ul>","tags":["summary","DB"]},{"location":"21HS/DM/01_Aussaglogik.html","title":"01 Aussaglogik","text":""},{"location":"21HS/DM/01_Aussaglogik.html#aussaglogik","title":"Aussaglogik","text":"<ul> <li>Sprachliche S\u00e4tze sind nicht eindeutig!</li> </ul> <p>T (\\(\\top\\)) = Tautologie = immer wahr W (\\(\\bot\\))= Wiederspruch = immer falsch</p>"},{"location":"21HS/DM/01_Aussaglogik.html#was-ist-eine-aussage","title":"Was ist eine Aussage","text":"<ul> <li> <p>Ein Satz, welchem ein \"wahr\" oder \"falsch\" Wert zugeordnet werden kann</p> </li> <li> <p>Darf nicht abh\u00e4ngig von einer freien Variable sein </p> </li> <li> <p>zB. x &gt; 0 ist keine Aussage, da abh\u00e4ngig von x </p> </li> <li> <p>\"alle x, wenn man sie durch 2 teilt, sind gerade\", ist eine Aussage, da alle x eingesetzt werden k\u00f6nnen</p> </li> <li> <p>Ein Pr\u00e4dikat wird zu einer Aussage, wenn man die freie Variable bindet (zB. \"A(2)\")</p> </li> <li> <p>Eine Aussage ist ein 0-stelliges Pr\u00e4dikat</p> </li> </ul>"},{"location":"21HS/DM/01_Aussaglogik.html#pradikat","title":"Pr\u00e4dikat","text":"<ul> <li>A(x): einstelliges Pr\u00e4dikat (zB: A(x):=\"x&lt;3\")</li> <li>A(x, y): zweistelliges Pr\u00e4dikat (zB. A(x, y):= \"x &lt; y\")</li> <li>Bsp:</li> <li>P(p) := \"p is teine Primzahl\"</li> <li>Q(x, y) := \"wenn x &lt; y, dann gilt x\u00b2 + 14x - 15 = 0\" </li> </ul>"},{"location":"21HS/DM/01_Aussaglogik.html#junktoren","title":"Junktoren","text":"<p>Verkn\u00fcpfen Aussagen, um so komplexere Junkoren zu kreieren.</p> <p>Definitionen: </p> <ul> <li>Elementaraussagen: Eine Aussage, die nicht weiter Zerlegt werden kann.</li> <li>Zusamengesetzte Aussagen: Aussagen, die aus Elementaraussagen bestehen, die durch Junktoren verknp\u00fcft werden</li> </ul> <p>Bsp:</p> <ul> <li>A := \"78 ist keine Primzahl\" (Elementaraussage)</li> <li>B := \"15 ist keine Primzahl\" (Elementaraussage)</li> <li>C := \"78 ist keine Primzahl und 15 ist keine Primzahl\" (Zusammengesetzte Aussage)</li> </ul> <p>0: falsch = W (Wiederspruch) 1: wahr = T (Tautologie)</p>"},{"location":"21HS/DM/01_Aussaglogik.html#negation","title":"Negation","text":"<p>Negation: \\(\\neg A\\)</p> <p>Bsp:</p> <ul> <li>A:= \"Hans studiert an der ZHAW\"</li> <li>\\neg A:= (\"Hans studiert nicht an der ZHAW\") = \"Es trifft nicht zu, dass Hans an der ZHAW studiert.\"</li> </ul> <p>\\(\\neg\\) -&gt; \"Es trifft nicht zu\"</p>"},{"location":"21HS/DM/01_Aussaglogik.html#konjunktion-und","title":"Konjunktion (und)","text":"<p>\\wedge -&gt; \\(\\wedge\\)</p> <p>Beispiel:</p> <ul> <li>A := \"6 ist durch 2 teilbar\" -&gt; wahr</li> <li>B := \"8 ist durch 5 teilbar\" -&gt; falsch</li> <li>\\(A \\wedge B\\): \"6 ist durch 2 teilbar und 8 ist durch 5 teilbar\" -&gt; falsch</li> </ul> A B \\(A \\wedge B\\) 0 0 0 1 0 0 0 1 0 1 1 1"},{"location":"21HS/DM/01_Aussaglogik.html#disjunktion-oder","title":"Disjunktion (oder)","text":"<p>\\vee -&gt; \\(\\vee\\)</p> <p>Beispiel:</p> <ul> <li>A := \"9 ist durch 3 teilbar\" -&gt; wahr</li> <li>B := \"9 ist eine Quadratzahl\" -&gt; wahr</li> <li>\\(A \\vee \\neg B\\) = \"9 ist durch 3 teilbar oder 9 ist keine Quadratzahl\" -&gt;wahr</li> </ul> A B \\(A \\vee B\\) 0 0 0 0 1 1 1 0 1 1 1 1"},{"location":"21HS/DM/01_Aussaglogik.html#implikation-wenn-dann","title":"Implikation (wenn..., dann...)","text":"<p>\\Rightarrow -&gt; \\(\\Rightarrow\\)</p> <p>Bsp:</p> <ul> <li>A := \"Es regnet\"</li> <li>B := \"Die Wiese ist nass\"</li> <li>\\(A \\Rightarrow B\\) := Wenn es regnet, dann ist die wiese nass\"</li> <li>\"Alle Fische leben im Ozean\" =&gt; \"Haie leben im Ozean\" = wahr</li> <li>\"Alle Fische leben im Ozean\" =&gt; \"Forellen leben im Ozean\" = wahr</li> </ul> A B \\(A \\Rightarrow B\\) Erkl\u00e4rung 0 0 1 Da A, die Bedinungen falsch ist, kann B falsch sein. 0 1 1 Da A falsch ist, kann B aber auch wahr sein. 1 0 0 Wenn A wahr ist, muss B auch wahr sein 1 1 1 Wenn A wahr ist, muss B auch wahr sein"},{"location":"21HS/DM/01_Aussaglogik.html#aquivalenz-leftrightarrow","title":"\u00c4quivalenz (\\(\\Leftrightarrow\\))","text":"<p>Zwei Aussagen sind \u00e4quivalenz, wenn gilt: \\(A \\Rightarrow B \\wedge B \\Rightarrow A\\)</p> A B \\(A \\Leftrightarrow B\\) 0 0 1 0 1 0 1 0 0 1 1 1 <p>Bsp:</p> <ul> <li>A(x) := \"\\(x^2=4\\)\"</li> <li>B(x) := \"x=2\"</li> <li>in \\(\\mathbb Z: B(x) \\Rightarrow A(x)\\) -&gt; wahr</li> <li>in \\(\\mathbb N: B(x) \\Rightarrow A(x)\\) -&gt; wahr</li> <li>in \\(\\mathbb N: A(x) \\Rightarrow B(x)\\) -&gt; wahr</li> <li>in \\(\\mathbb N: A(x) \\Leftrightarrow B(x)\\)  -&gt; wahr</li> </ul>"},{"location":"21HS/DM/01_Aussaglogik.html#reihenfolge","title":"Reihenfolge","text":"<p>Reihenfolge der Bildung \\(\\neg\\), \\(\\wedge\\), \\(\\vee\\), \\(\\Rightarrow\\), \\(\\Leftrightarrow\\)</p> <p>Bsp:</p> <ul> <li>\\(((A \\vee (B \\wedge C)) \\Rightarrow D)\\)</li> <li>\\((\\neg A) \\Rightarrow (C \\vee ((\\neg B) \\wedge D))\\)</li> </ul>"},{"location":"21HS/DM/01_Aussaglogik.html#junktoren-regeln","title":"Junktoren Regeln","text":"<p>Mit den folgenden Regeln, kann man \u00c4quivalente-Aussagen umformen</p> <ul> <li>Doppel Negation: \\(\\neg \\neg A \\Leftrightarrow A\\)</li> <li>Kummutativt\u00e4t</li> <li>\\(A \\wedge B \\Leftrightarrow B \\wedge A\\)</li> <li>\\(A \\vee B \\Leftrightarrow B \\vee A\\)</li> <li>Assoziativit\u00e4t: </li> <li>\\((A \\wedge B) \\wedge C \\Leftrightarrow A \\wedge (B \\wedge C)\\)</li> <li>\\((A \\vee B) \\vee C \\Leftrightarrow A \\vee (B \\vee C)\\)</li> <li>Distributivit\u00e4t: </li> <li>\\(A \\wedge (B \\vee C) \\Leftrightarrow (A \\wedge B) \\vee (A \\wedge C)\\)</li> <li>\\(A \\vee (B \\wedge C) \\Leftrightarrow (A \\vee B) \\wedge (A \\vee C)\\)</li> <li>\\((A \\wedge B) \\vee (C \\wedge D) \\Leftrightarrow ((A \\wedge B) \\vee C) \\wedge ((A \\wedge B) \\vee D) \\Leftrightarrow (A \\vee C) \\wedge (B \\vee C) \\wedge (A \\vee D) \\wedge (B \\vee D)\\)</li> <li>als vergleich: \\(A \\cdot (B + C) = A \\cdot B + A \\cdot C\\)</li> <li>Regeln von de Morgan:</li> <li>\\(\\neg(A\\vee B) \\Leftrightarrow \\neg A \\wedge \\neg B\\)</li> <li>\\(\\neg(A\\wedge B) \\Leftrightarrow \\neg A \\vee \\neg B\\)</li> <li>Implikation:</li> <li>\\(A \\Rightarrow B \\Leftrightarrow \\neg A \\vee B\\)</li> <li>Kontraposition</li> <li>\\(A \\Rightarrow B \\Leftrightarrow \\neg B \\Rightarrow \\neg A\\)</li> <li>\u00c4quivalenz</li> <li>\\((A \\Leftrightarrow B) \\Leftrightarrow (A \\Rightarrow B) \\wedge (B \\Rightarrow A) \\Leftrightarrow (\\neg A \\vee B) \\wedge (\\neg B \\vee A)\\)</li> <li>Indepotenz:</li> <li>\\(A \\vee A \\Leftrightarrow A\\)</li> <li>\\(A \\wedge A \\Leftrightarrow A\\)</li> <li>ausgeschlossene Dritte:</li> <li>\\(A \\vee \\neg A \\Leftrightarrow T\\)</li> <li>\\(A \\wedge \\neg A \\Leftrightarrow W\\)</li> <li>Identit\u00e4t:</li> <li>\\(A \\vee T \\Leftrightarrow T\\)</li> <li>\\(A \\wedge T \\Leftrightarrow A\\)</li> <li>\\(A \\vee F \\Leftrightarrow A\\)</li> <li>\\(A \\wedge F \\Leftrightarrow F\\)</li> </ul> <p>Beweiss, dass \\((A \\Rightarrow B) \\Leftrightarrow (\\neg B \\Leftrightarrow \\neg A)\\)  ist</p> <ul> <li>\\(A \\Rightarrow B\\)</li> <li>\\(\\Leftrightarrow \\neg A \\vee B\\)</li> <li>\\(\\Leftrightarrow \\neg \\neg (\\neg A \\vee B)\\)</li> <li>\\(\\Leftrightarrow \\neg (\\neg \\neg A \\wedge \\neg B)\\)</li> <li>\\(\\Leftrightarrow \\neg (A \\wedge \\neg B)\\)</li> <li>\\(\\Leftrightarrow \\neg A \\vee \\neg \\neg B\\)</li> <li>\\(\\Leftrightarrow \\neg \\neg B \\vee \\neg A\\)</li> <li>\\(\\Leftrightarrow \\neg (\\neg B) \\vee (\\neg A)\\)</li> <li>\\(\\Leftrightarrow \\neg B \\Leftrightarrow \\neg A\\)</li> </ul> <p>Bsp:</p> <ul> <li> <p>\\(A \\Rightarrow B\\) -&gt; Wenn es regnet, ist die Wiese nass</p> </li> <li> <p>\\(\\neg B \\Rightarrow \\neg A\\) -&gt; Wenn die Wiese nicht nass ist, regnet es nicht</p> </li> <li> <p>\\(\\neg (A \\Rightarrow B)\\)</p> </li> <li> <p>\\(\\neg (A \\Rightarrow B)\\) </p> </li> <li> <p>\\(\\neg (\\neg A \\vee B)\\) </p> </li> <li> <p>\\(\\neg \\neg A \\wedge \\neg B\\) </p> </li> <li> <p>\\(A \\wedge \\neg B\\) </p> </li> </ul> <p>Implikations-Wahrheitstabelle:</p> A B \\(A \\Rightarrow B\\) \\(\\neg A \\vee B\\) 0 0 1 1 0 1 1 1 1 0 0 0 1 1 1 1"},{"location":"21HS/DM/01_Aussaglogik.html#quantore","title":"Quantore","text":"<p>Motivation: \u00dcbergang von Pr\u00e4dikat zu Aussage zu formulieren</p> <ul> <li> <p>P(X) := \"x ist eine nat\u00fcrliche Zahl\" =&gt; Pr\u00e4dikat</p> </li> <li> <p>P(5) := \"5 ist eine nat\u00fcrliche Zahl\" =&gt; Aussage (wahr)</p> </li> <li> <p>\"Es gibt mindestens eine \\(x \\in \\mathbb{Z}\\), so dass P(x) gilt\" =&gt; Aussage</p> </li> <li> <p>\"F\u00fcr alle \\(x \\in \\mathbb{Z}\\) gillt P(x)\" =&gt; Aussage</p> </li> </ul>"},{"location":"21HS/DM/01_Aussaglogik.html#liste-von-quantoren","title":"Liste von Quantoren","text":"Zeichen Name Beschreibung \\(\\forall\\) Allquantor F\u00fcr alle \\(\\exists\\) Existenzquantor \"f\u00fcr mindestens ein\" <p>Beispiele</p> Beispiel gesprochen Erkl\u00e4rung \\(\\forall x A(x)\\) F\u00fcr alle x gilt A(x) Alle x in dem Pr\u00e4dikat, werden auf alle Zahlen gebunden \\(\\forall x \\in M A(x)\\) F\u00fcr alle x aus M gillt A(x) Alle x in dem Pr\u00e4dikat, werden auf alle Werte von M gebunden \\(\\exists x A(x)\\) Es gibt (mind.) ein x mit A(x) Es gibt mindestens eine Zahl, bei welcher A(x) zutrifft \\(\\exists x \\in M A(x)\\) Es gibt (mind.) ein x aus M miz A(x) Es gibt mindestes einen Wert von M, bei welcher A(x) zutrifft <p>Jeder Quantor bindet eine Variable</p> <p>Umformungen:</p> <ul> <li>\\(\\forall x \\in I B(x) \\Leftrightarrow \\forall x (x \\in I \\Rightarrow B(x))\\)</li> <li>Klammern</li> <li>Quantoren binden st\u00e4rker als Junktoren</li> <li>\\(\\forall x \\in \\mathbb M B(x) \\wedge C(x) \\Leftrightarrow (\\forall x \\in \\mathbb M B(x)) \\wedge C(x)\\)</li> <li>Abk\u00fcrzungen</li> <li>\\(\\forall x \\in \\mathbb M (\\forall y \\in \\mathbb M A(x, y)) \\Leftrightarrow \\forall x,y \\in \\mathbb M A(x, y)\\)</li> <li>\\(\\exists x \\in \\mathbb M (\\exists y \\in \\mathbb M A(x, y)) \\Leftrightarrow \\forall x,y \\in \\mathbb M A(x, y)\\)</li> <li>Falls die Menge aus dem Kontext klar ist, k\u00f6nnen wir schreiben:<ul> <li>\\(\\forall x A(x)\\) (ohne \\(\\in \\mathbb M\\))</li> <li>\\(\\exists x A(x)\\) (ohne \\(\\in \\mathbb M\\))</li> </ul> </li> <li>Negation:</li> <li>\\(\\neg \\exists x \\in M A(x) \\Leftrightarrow \\forall x \\in M \\neg A(x)\\)</li> <li>\\(\\neg \\forall x \\in M A(x) \\Leftrightarrow \\exists x \\in M \\neg A(x)\\)</li> <li>\\(\\forall x A(x) \\Leftrightarrow \\neg \\exist x \\neg A(x)\\)</li> <li>Distributiv-Gesetzt</li> <li>Keine Distributiv-Gesetzt mit Quantoren und Junktoren</li> <li>Beispiel<ul> <li>A(x) := \"x ist eine gerade nat\u00fcrliche Zahl\"</li> <li>B(x) := \"x ist eine ungerade nat\u00fcrliche Zahl\"</li> <li>\\(\\forall x A(x) \\vee B(x) \\Leftrightarrow W \\nLeftrightarrow \\forall x (A(x) \\vee B(x)) \\Leftrightarrow T\\)</li> </ul> </li> <li>\\(\\exists x (A(x) \\wedge B(x)) \\nLeftrightarrow \\exists x A(x) \\wedge \\exists x B(x)\\)</li> <li>\\(\\exists x (A(x) \\vee B(x)) \\nLeftrightarrow \\exists x A(x) \\vee \\exists x B(x)\\)</li> <li>Reihenfolge von Quantoren:</li> <li>\\(P(x, y) := x + y = 17\\)</li> <li>\\(\\forall x \\in \\mathbb Z (\\exists x \\in \\mathbb Z P(x, y)) : wahr\\)</li> <li>\\(\\exists x \\in \\mathbb Z (\\forall x \\in \\mathbb Z P(x, y)): falsc h\\)</li> </ul> <p>Beispiel:</p> <ul> <li>A(x, y) := \"x &lt; y\" -&gt; 2-stelliges Pr\u00e4dikat, frei: x, y</li> <li>\\(\\forall x \\in \\mathbb{R} A(x, y)\\) : 1-stelliges Pr\u00e4dikat, frei: x</li> </ul>"},{"location":"21HS/DM/01_Aussaglogik.html#ubungungen-quantoren","title":"\u00dcbungungen Quantoren","text":"<p>2)</p> <ul> <li>a) \\(\\exists x P(x) \\wedge \\forall y,z (P(y) \\wedge P(z) \\Rightarrow y = z)\\)</li> <li>b) \\(\\exists y,z (P(y) \\wedge P(z) \\wedge y \\neq z)\\)</li> <li>c) \\(\\neg (\\exists x,y (P(x) \\wedge P(y) \\wedge x \\neq y)) -&gt; negation von b)\\)</li> <li>d) \\(\\forall x, y (P(x) \\wedge P(y) \\Rightarrow Q(x, y))\\)</li> <li>e) \\(\\neg(\\exists x Q(x, x)) \\Leftrightarrow \\forall x (\\neg Q(x, x))\\)</li> <li>\\(\\neg(\\forall x Q(x, x))\\) -&gt; das w\u00e4re: \"nicht alle x sind Q(x, x)\", aber eines x, bei welchem Q(x, x) stimmt, w\u00e4re ok</li> </ul> <p>3)</p> <ul> <li>a) Alle Pr\u00fcfungen sind einfach \\(\\Leftrightarrow \\forall x \\in P E(x)\\)</li> <li>b) Eine Pr\u00fcfung ist einfach \\(\\Leftrightarrow \\exists x \\in P E(x)\\)</li> <li>c) Keine Pr\u00fcfung ist einfach \\(\\Leftrightarrow \\neg \\exists x \\in P E(x)\\)</li> <li>d) Alle Pr\u00fcfungen sind einfach \\(\\Leftrightarrow \\forall x \\in P (\\neg E(x))\\)</li> <li>e) Nur eine Pr\u00fcfung ist einfach \\(\\Leftrightarrow (\\exist x \\in P E(x)) \\wedge \\forall y,z \\in P (E(y) \\wedge E(z))\\)</li> <li>f) Nur eine Pr\u00fcfung ist nicht einfach \\(\\Leftrightarrow (\\exist x \\in P \\neg E(x)) \\wedge \\forall y,z \\in P (\\neg E(y) \\wedge \\neg E(z))\\)</li> <li>g) Nicht alle Pr\u00fcfung sind einfach \\(\\Leftrightarrow \\neg \\forall x \\in P E(x)\\)</li> <li>h) Eine Pr\u00fcfung ist nicht einfach \\(\\Leftrightarrow \\exists x \\in P \\neg E(x)\\)</li> <li>g) und h) sind \u00e4quivalent</li> </ul>"},{"location":"21HS/DM/01_Aussaglogik.html#beweisstechnik","title":"Beweisstechnik","text":"<ul> <li>\\(\\forall\\) : </li> <li>wahr: f\u00fcr alle Elemente aus der Grundmenge<ul> <li>Verallgemeinern mit Variablen</li> </ul> </li> <li>falsch: Ein Element, bei dem es nicht funktioniert</li> <li>\\(\\exists\\)</li> <li>wahr: Ein Element finden, bei dem es stimmt</li> <li>falsch: Alle Elemente aus der Grundmenge allgemein zeigen, dass das Pr\u00e4dikat nicht gilt</li> </ul>"},{"location":"21HS/DM/01_Aussaglogik.html#direkten-beweis","title":"Direkten Beweis","text":"<ul> <li>Implikation</li> <li>zu zeigen<ul> <li>\\(\\forall x,y \\in \\mathbb N (\\text{x ist gerade} \\wedge \\text{y ist gerade} \\Rightarrow x\\cdot y \\text{ ist gerade})\\)</li> <li>\\(\\Leftrightarrow \\forall x,y \\in \\mathbb N \\exists n_x,n_y,n_z \\in \\mathbb N (x = 2 \\cdot n_x \\wedge y = 2\\cdot n_y \\Rightarrow x\\cdot y = 2\\cdot n_z)\\)</li> </ul> </li> <li>Beweise:<ul> <li>A: wahr \\((x=2n_x \\wedge y=2n_y) = T \\text{  } n_x,n_y \\in \\mathbb N\\)</li> <li>B: wahr \\((x\\cdot y = 2n_z) = T\\)</li> <li>\\(A \\Rightarrow B: x \\cdot y = 2n_x \\cdot 2n_y = 2(2n_xn_y) = 2n_z\\)</li> </ul> </li> </ul>"},{"location":"21HS/DM/01_Aussaglogik.html#beweis-durch-widerspruch","title":"Beweis durch Widerspruch","text":"<p>Anstatt zu zeigen, dass die Aussage A immer wahr ist, wird bewiessen, dass A niemals falsch ist.</p> <ul> <li>zu beweisen:</li> <li>\\(A:= \\text{\"Es gibt keine gr\u00f6sste nat\u00fcrliche zahl\"} = \\neg \\exists n \\in \\mathbb N G(n)\\)</li> <li>\\(G(x) := \\text{\"x ist gr\u00f6sste Zahl\"}\\)</li> <li>\\(\\neg A := \\text{\"Es gibt mindestens eine gr\u00f6sste nat\u00fcrliche Zahl\"} = \\exists n \\in \\mathbb N G(n)\\)</li> <li>Beweis:</li> <li>Annahme: n ist gr\u00f6sste nat\u00fcrliche Zahl</li> <li>Jedoch f\u00fcr jede nat\u00fcrliche Zahl n, existiert n + 1</li> <li>Daher ist n+1 &gt; n und n ist nicht die gr\u00f6sste Zahl</li> <li>\\(\\Rightarrow \\neg A = W \\Rightarrow A = T\\)</li> </ul>"},{"location":"21HS/DM/01_Aussaglogik.html#beweis-durch-gegen-beispiel","title":"Beweis durch (Gegen-) Beispiel","text":"<ul> <li>zu beweisen</li> <li>\"Nicht jede nat\u00fcrliche Zahl ist eine Quadratzahl\"</li> <li>\\(A:= \\neg\\forall n \\in \\mathbb N Q(n)\\Leftrightarrow \\exists n \\in \\mathbb N \\neg Q(n)\\)</li> <li>\\(Q(x)=\\text{x ist Quadradzahl} )\\)</li> <li>Beweis:</li> <li>\\(n = 7\\), denn \\(f(x)=x^2\\) mit \\(f(x) \\in \\mathbb N\\)</li> <li>in diesem Fall w\u00fcrde 7 niemals als Funktionswert f\u00fcr f(x) herausgekommen, da \\(2\\cdot 2 &lt; 7 &lt; 3 \\cdot 3\\)</li> <li>\\(\\Rightarrow\\) 7 ist keine Quadratzahl</li> <li>\\(\\Rightarrow\\) A ist wahr</li> </ul>"},{"location":"21HS/DM/01_Aussaglogik.html#beweis-durch-kontraposition","title":"Beweis durch Kontraposition","text":"<p>Es gillt die Aussage von der Form \\(A \\Rightarrow B \\Leftrightarrow \\neg B \\Rightarrow \\neg A\\)</p> <p>Beispiel:</p> <ul> <li>zu beweisen:</li> <li>\\(\\forall n \\in \\mathbb N ((n^2 + 1 = 1) \\Rightarrow (n = 0))\\)</li> <li>anstatt dies, beweissen wir</li> <li>\\(\\Leftrightarrow \\forall n \\in \\mathbb N (\\neg (n = 0) \\Rightarrow \\neg(n^2 + 1 = 1))\\)</li> <li>\\(\\Leftrightarrow \\forall n \\in \\mathbb N (n \\neq 0 \\Rightarrow n^2 + 1 \\neq 1))\\)</li> <li>Beweis:</li> <li>Wenn \\(n \\neq 0 \\Rightarrow n^2\\neq 0 \\Rightarrow n^2 + m \\neq m\\) </li> <li>F\u00fcr \\(m=1 \\Rightarrow n^2 + 1 \\neq 1\\) </li> <li>\\(\\Rightarrow \\forall n \\in \\mathbb N ((n \\neq 0) \\Rightarrow (n^2 + 1 \\neq 1)) : T\\)</li> </ul>"},{"location":"21HS/DM/01_Aussaglogik.html#aquivalenz","title":"\u00c4quivalenz","text":"<p>Um eine \u00c4quivalenz zu beweissen muss \\(A \\Rightarrow B \\wedge B \\Rightarrow A\\)</p> <p>Beispiel:</p> <ul> <li>\\(B \\Rightarrow A: \\forall n \\in \\mathbb N ((n = 0) \\Rightarrow (n^2+1=1))\\)</li> <li>\\(n=0\\)  (wenn n=0 wahr ist, dann muss auch die n\u00e4chste Linie wahr sein)</li> <li>\\(n^2+1=0^2 + 1 = 1\\) (was sie ist)</li> <li>und da \\(A \\Rightarrow B\\) und \\(B \\Rightarrow A\\) wahr waren, ist auch \\(A \\Leftrightarrow B\\) wahr</li> </ul> <p>Biespiel #2:</p> <ul> <li>zu zeigen:</li> <li>\\(\\forall n \\in \\mathbb N \\exists k,j \\in \\mathbb N ((n = 2k) \\Leftrightarrow n^2=2j)\\)</li> <li>bzw. \\(\\forall n \\in \\mathbb N \\exists k,j \\in N (n = 2k \\Rightarrow n^2 = j2) \\wedge (n^2 = 2j \\Rightarrow n = 2k)\\)</li> <li>Beweis:</li> <li>\\(A(n) \\Rightarrow B(n)\\)</li> <li>n = 2k : wahr</li> <li>\\(n^2=(2k)^2\\)</li> </ul>"},{"location":"21HS/DM/02_Semantik.html","title":"02 Semantik","text":"<p>Semantik = Bedeutung</p> <ul> <li>Konstante</li> <li>\\(\\top\\) = Wahr (\\top)</li> <li>\\(\\bot\\) = Falsch (\\bot)</li> <li>Variabeln</li> <li>Klammern</li> <li>Junktoren</li> </ul> <p>Ableitungsb\u00e4ume (ein Syntaxbaum / AST) kann genutzt werden, um die Struktur von Termen eindeutig zu zeigen</p> <p>Beispiel: \\(f = (((a \\wedge b) \\vee (\\neg c)) \\wedge (a \\vee b))\\)</p>"},{"location":"21HS/DM/02_Semantik.html#belegungen-von-variabeln","title":"Belegungen von Variabeln","text":"<ul> <li>f\u00fcr atomare Formeln (z.B. a, b, oder eine andere Variabel)</li> <li>\\(B: \\mathbb V \\rightarrow \\{1, 0\\}\\)</li> <li>Beispiel: \\(B(a)=1\\)</li> <li>f\u00fcr komplexe Formeln</li> <li>\\(\\hat B (formel)\\)</li> <li>Beispiel \\(\\hat B (a \\vee b)=false\\)</li> </ul>"},{"location":"21HS/DM/02_Semantik.html#wahrheitstabelle","title":"Wahrheitstabelle","text":"<p>In einer Wahrheitstabelle werden alle Teilformeln in Spalten aufgelistet f\u00fcr alle m\u00f6glichen Inputs.</p> <p>Teilformeln sind Teile einer gr\u00f6sseren Formeln. </p> <p>Beispiel: Teilformeln f\u00fcr \\(((a \\wedge b) \\vee (\\neg c)) \\wedge (a \\vee c)\\)</p> <ul> <li>die Inputs: a, b ,c</li> <li>\\(a \\wedge b\\)</li> <li>\\(\\neg c\\)</li> <li>\\((a \\wedge b) \\vee (\\neg c)\\)</li> <li>\\(a \\vee c\\)</li> <li>\\(((a \\wedge b) \\vee (\\neg c)) \\wedge (a \\vee c)\\)</li> </ul>"},{"location":"21HS/DM/02_Semantik.html#semantische-eigenschaften","title":"Semantische Eigenschaften","text":"Begriff Erkl\u00e4rung Bei Wahrheitstabellen G\u00fcltig oder wahr Bei einer spezifischen Belegung wahr (f\u00fcr eine Spezifische Belegung) Allgemeing\u00fclltig Bei allen Belegungen wahr alle Zeilen sind wahr (Tautologie/\\(\\top\\)) Erf\u00fclltbar mind. eine Belegung wahr mind. eine Zeile mit wahr Unerf\u00fclltbar immer falsch alle Zeilen sind falsch (Wiederspruch/\\(\\bot\\)) Wiederlegbar mind. einmal falsch, nicht unbedingt immer mind. eine Zeile mit 0 Begriff L\u00f6sungsart G\u00fcltig oder wahr Allgemeing\u00fcltig Wahrheitstabelle, Vereinfachung, Beweis durch Widerspruch Erf\u00fcllbar Ein Beispiel mit Ergebnis \"wahr\" Unerf\u00fcllbar Wahrheitstabelle, Vereinfachung, Beweis durch Widerspruch Wiederlegbar Ein Beispiel mit Ergebnis \"falsch\""},{"location":"21HS/DM/02_Semantik.html#aquivalent-equiv","title":"\u00c4quivalent (\\(\\equiv\\))","text":"<ul> <li>\\(\\equiv\\); latex: \\equiv</li> <li>Dieses Zeichen wird ben\u00fctzt, wenn zwei aussagenlogische Formel unter jeden Bedingung denselben Wert ergeben</li> <li>Bei Aussagen kann man auch \"\\(\\Leftrightarrow\\)\" bent\u00fctzen</li> <li>Achtung:</li> <li>folgendes ist korrekt: \\(F \\vee (G \\vee H) \\equiv (F \\vee (G \\vee H)\\), da jede </li> <li>folgendes nicht: \\(\\hat B(F \\vee (G \\vee H)) \\equiv \\hat B((F \\vee (G \\vee H))\\), da man hier eine bestimmte Belegung rechnet und somit einen wirkklichen Wahrheitswert hat. Hier w\u00fcrde man ein = ben\u00fctzen.</li> </ul>"},{"location":"21HS/DM/02_Semantik.html#konsequenz","title":"Konsequenz","text":"<ul> <li>F ist genau dann von G, fall F in jeder m\u00f6glichen Belegung wahr ist, in welcher auch G wahr ist</li> <li>Mit logischen Aussagen ausgedr\u00fcckt: \\(\\forall B (\\hat B(F \\rightarrow G)=true)\\)</li> </ul>"},{"location":"21HS/DM/02_Semantik.html#normalformen","title":"Normalformen","text":""},{"location":"21HS/DM/02_Semantik.html#literale","title":"Literale","text":"<p>Literale sind atomare Formeln oder negierte atomare Formel (a oder \\(\\neg a\\))</p>"},{"location":"21HS/DM/02_Semantik.html#negotions-normalform-nnf","title":"Negotions Normalform (NNF)","text":"<p>Wenn alle Negationen in Literale und keine Implikationen vorkommen</p>"},{"location":"21HS/DM/02_Semantik.html#disjunktive-normalform-dnf","title":"Disjunktive Normalform (DNF)","text":"<p>Wenn die folgende Formel eingehaltet wird: \\((L_1 \\wedge L_2 \\wedge ...)\\vee(L_3 \\wedge L_4 \\wedge ...) \\vee ...\\)</p>"},{"location":"21HS/DM/02_Semantik.html#konjunktive-normalform-knf","title":"Konjunktive Normalform (KNF)","text":"<p>Wenn die folgende Formel eingehaltet wird: \\((L_1 \\vee L_2 \\vee ...)\\wedge(L_3 \\vee L_4 \\vee ...) \\wedge ...\\)</p>"},{"location":"21HS/DM/02_Semantik.html#umformen-rechnerisch","title":"Umformen - Rechnerisch","text":"<p>Vorgehen:</p> <ol> <li>Implikationen eliminieren: \\(F \\rightarrow G \\equiv \\neg F \\vee G\\)</li> <li>DeMorgan, falls negationen vor Klammern stehen: \\(\\neg(p\\vee q) \\equiv (\\neg p \\wedge \\neg q)\\) bzw. \\(\\neg (p\\wedge q) \\equiv (\\neg p \\vee \\neg q)\\) </li> <li>\\(\\Rightarrow\\) NNF erreicht</li> <li>Distributivgesetzt anwenden bis gewollte Form erreicht</li> <li>\\(\\Rightarrow\\) KNF oder DNF erreicht</li> </ol>"},{"location":"21HS/DM/02_Semantik.html#umformen-mit-wahrheitstabelle","title":"Umformen - mit Wahrheitstabelle","text":"<p>Nach dem man die Wahrheitstabelle gebildet haben kann man folgende Verfahren anwenden:</p> <ul> <li>Minterm:</li> <li>Bei jeder Belegung, welche 1 als Resultat gibt, eine Formel aufschreiben, welche diese Belegung abbildet (Parameter welche 0 ergeben, negieren, Parameter welche 1 geben, direkt \u00fcbernehmen, zusammenf\u00fcgen mit und \\(\\wedge\\))</li> <li>Alle Terme mit oder/\\(\\vee\\) verkn\u00fcpfen</li> <li>Maxterm</li> <li>Bei jeder Belegung, welche 0 als Resultat gibt, eine Form aufschreiben, welche diese Belegung abbildet (Paramter, welche 0 geben, direkt \u00fcbernehmen; Parameter, welche 1 geben, negieren; alle Terme mit und/\\(\\vee\\) verbinden)</li> <li>Alle Terme mit und/\\(\\wedge\\) verkn\u00fcpfen</li> </ul>"},{"location":"21HS/DM/03_Mengen.html","title":"Mengen","text":"<p>Menge: Zusammenfassung wohlunterscheidbarer unsortierten Objekte (keine Duplikate sind erlaubt)</p> <ul> <li>Mengen<ul> <li>Darstellung</li> <li>(Echte) Teilmengen</li> <li>Operationen<ul> <li>Gleichheit</li> <li>Potenzmengen</li> <li>Partitionen</li> <li>Kardinalit\u00e4t</li> <li>Schnittmenge</li> <li>Vereinigung</li> <li>Komplement</li> <li>Kartesisches Produkt</li> <li>Disjunkte Mengen</li> <li>Faktormengen</li> <li>\u00c4quivalenzklasse</li> <li></li> <li>Komplement (ohne)</li> </ul> </li> <li>Rechneregeln</li> <li>Relationen<ul> <li>Komposition</li> <li>Inverse Relationen</li> <li>Gerichtete Graphen</li> <li>Relationen und Funktionen</li> <li>Injektiv und Surjektiv</li> <li>Homogene und heterogene Relation<ul> <li>Reflexiit\u00e4t</li> <li>Symmetrisch</li> </ul> </li> <li>Antisymmetrisch<ul> <li>Transitiv</li> </ul> </li> <li>Heterogene Relation</li> </ul> </li> <li>Unendliche Mengen<ul> <li>Begriffe der Unendlichkeit</li> <li>Erste Diagonal Argument</li> <li>Zweite Diagonal Argument</li> </ul> </li> <li>Ordnungsrelationen<ul> <li>Begriffe</li> <li>Hasse Diagram</li> <li>Graph<ul> <li>DAG<ul> <li>topologische Sortierung</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"21HS/DM/03_Mengen.html#darstellung","title":"Darstellung","text":"<ul> <li>Explizite Darstellung (Aufz\u00e4hlung)</li> <li>Beispiel: {2, 3, 4}</li> <li>Leere Menge</li> <li>Beispiel: {} </li> <li>Beispiel: \\(\\emptyset\\)</li> <li>Spezielle Zahlenmenge:</li> <li>nat\u00fcrliche Zahlen \\(\\mathbb N_0 =\\mathbb N = [0; \\infty[\\)<ul> <li>ganze Zahlen: \\(\\mathbb Z = ]\\infty: \\infty[\\)</li> <li>rationale Zahlen: \\(\\mathbb Q\\) (Alle Zahlen, welche durch einen Bruch darstellbar sind (1/3 ja, \\(\\pi\\) nein))</li> <li>reelle zahlen: \\(\\mathbb R\\) (Alle Zahlen mit einem Komma  \\(\\sqrt 2, \\pi, e\\))</li> <li>komplexe Zahlen</li> </ul> </li> <li>Intervallchreibweisse </li> <li>\\([a,b] := \\{x \\in \\mathbb R | a \\leq x \\leq b \\}\\)</li> <li>\\(]a,b] := \\{x \\in \\mathbb R | a &lt; x \\leq b \\}\\)</li> <li>Pr\u00e4dikatschreibweisse</li> <li>\\(\\{z | z &lt; 10\\}\\)</li> <li>\\(\\{n \\in \\mathbb N | \\text{n ist gerade}\\} = \\{n \\in \\mathbb N | \\exist z \\in \\mathbb N (n = 2\\cdot z)\\}\\)</li> <li>Ersetzungsschreibweisse</li> <li>\\(\\{F(x) | x \\in X\\} = \\{y | \\exists x \\in X (y = F(x))\\}\\)</li> <li>Grafische Darstellung</li> </ul>"},{"location":"21HS/DM/03_Mengen.html#echte-teilmengen","title":"(Echte) Teilmengen","text":"<p>\\(X \\subseteq Y \\Leftrightarrow \\forall x(x \\in X \\Rightarrow x \\in Y)\\)</p> <p>X ist eine Teilmenge von Y. X kann auch Y sein</p> <p>\\(X \\subsetneq Y \\Leftrightarrow X \\subseteq Y \\wedge X \\neq Y\\) Dies ist die echte Teilmenge, was nichts anderst heisst, dass X eine Teilmenge von Y ist, aber X nicht Y ist.</p>"},{"location":"21HS/DM/03_Mengen.html#operationen","title":"Operationen","text":""},{"location":"21HS/DM/03_Mengen.html#gleichheit","title":"Gleichheit","text":"<p>Mengen sind gleich, wenn alle Elemente gleich sind: \\(X = Y \\Leftrightarrow \\forall z(z \\in X \\Leftrightarrow z \\in Y)\\)</p> <p>F\u00fcr das Mengen aber gleich sind, muss die Reihenfolge nicht \u00fcbereinstimmen, da Mengen nicht sortiert sind.</p>"},{"location":"21HS/DM/03_Mengen.html#potenzmengen","title":"Potenzmengen","text":"<p>Menge aller Teilmengen</p> <p>Beispiele:</p> <ul> <li> <p>\\(\\mathcal P(\\emptyset)=\\{\\emptyset\\}\\)</p> </li> <li> <p>\\(\\mathcal P(\\{0, 1\\})=\\{\\emptyset, \\{0\\}, \\{1\\}, \\{0, 1\\}\\}\\)</p> </li> <li> <p>\\(\\mathcal P(\\{a, \\{c\\}\\}=\\{\\emptyset, \\{a\\}, \\{\\{c\\}\\}, \\{a, \\{c\\}\\}\\})\\)</p> </li> </ul> <p>Die M\u00e4chtigkeit einer Potenzmenge ist zwei hoch die M\u00e4chtigkeit der urspr\u00fcnglichen Menge \\(|P(A)|=2^{|A|}\\)</p>"},{"location":"21HS/DM/03_Mengen.html#partitionen","title":"Partitionen","text":"<p>Eine Partition von A ist eine Menge von Teilmengen von A, welche nicht leer sind und welche zusammen wieder A ergeben (\\(\\bigcup_{i \\in I}P_i = A\\))</p> <p>Beispiel: \\(A=\\{1, 2, 3\\}\\)</p> <ul> <li> <p>\\(P=\\{\\{1\\}, \\{2\\}, \\{3\\}\\}\\)</p> </li> <li> <p>\\(P=\\{\\{1\\}, \\{2, 3\\}\\}\\)</p> </li> </ul>"},{"location":"21HS/DM/03_Mengen.html#kardinalitat","title":"Kardinalit\u00e4t","text":"\\[ X=\\{1, 2, 3\\}\\\\ |X|=3 \\] <p>Der Betrag von Mengen ist die Anzahl Elemente der Menge.</p> <p>\\(|A \\cup B| = |A| + |B| - |A\\cap B|\\)</p> <p>F\u00fcr disjunkte mengen gillt: \\(|A \\cup B | = |A| + |B|\\)</p> <p>F\u00fcr drei Mengen: \\(|A \\cup B \\cup C| = |A| + |B| + |C| - |A\\cap B| - |B \\cap C| - |A \\cap C| + |A \\cap B \\cap C|\\)</p>"},{"location":"21HS/DM/03_Mengen.html#schnittmenge","title":"Schnittmenge","text":"<p>\\(X \\cap Y\\)</p> <p>In der Schnittmenge von zwei Meingen sind alle Elemente, welche in beiden Mengen enthalten sind.</p> <p>![](/res/2021-11-06-14-05-00-image.png</p>"},{"location":"21HS/DM/03_Mengen.html#vereinigung","title":"Vereinigung","text":"<p>\\(X \\cup Y\\)</p> <p>Die vereinigte Menge zweier Menge sind die Elemente von beiden Mengen in einer, nat\u00fcrlich ohne Duplikate.</p>"},{"location":"21HS/DM/03_Mengen.html#komplement","title":"Komplement","text":"<p>\\(X \\setminus Y = X \\cap \\bar Y\\)</p>"},{"location":"21HS/DM/03_Mengen.html#kartesisches-produkt","title":"Kartesisches Produkt","text":"<p>\\(A \\times B=\\{a, b\\} \\times \\{1, 2, 3\\} = \\{(a, 1), (a, 2), (a, 3), (b, 1), (b, 2), (b, 3), (c, 1), (c, 2), (c, 3)\\}\\)</p> <p>\\(A\\times B=\\{(a, b) | a \\in A \\wedge b \\in B\\}\\)</p> <p>M\u00e4chtigkeit: \\(|A \\times B| = |A| \\cdot |B|\\)</p> <p>\\(A\\times B \\neq B \\times A\\) </p> <p>Dies liegt daran, dass das Kartesisches Produkt Tupels ergibt und diese sortiert sind. Somit gillt \\((x, 1) \\neq (1, x)\\)</p> <p>Wenn man mehr als zwei Mengen hat, kann man es auch folgendermassen schreiben: \\(\\prod ^n_{A_i}=A\\times A_2\\times A_n\\)</p>"},{"location":"21HS/DM/03_Mengen.html#disjunkte-mengen","title":"Disjunkte Mengen","text":"<p>X und Y heissen diskunkt, falls sie keine Elemente teilen</p> <p>\\(X \\cap Y\\cap Z=\\emptyset\\)</p> <p>Paarweise Disjunkte Menge ist eine Menge, wenn sie untereinander keine Elemente Teilen.</p> <p></p>"},{"location":"21HS/DM/03_Mengen.html#faktormengen","title":"Faktormengen","text":"<p>\\(^X/_R=\\{[x]_R | x \\in X\\}\\)</p> <p>Die Faktormenge besteht aus allen \u00c4quivalenzkalssen. Der Sytanx, wie er oben steht, bedeutet, dass alle \u00c4quivalenzklassen von der Relation R, welche von der Menge X gebildet wurde, in der Faktormenge sind.</p> <p>Beispiel:</p> \\[ xRy \\Leftrightarrow (x - y) \\text{ durch 5 Teilbar ist}  = x\\equiv_5 y \\\\ \\text{}^{\\mathbb Z}/_{R_{\\equiv_5}} = \\{[0]_{\\equiv_5},[1]_{\\equiv_5}, [2]_{\\equiv_5}, [3]_{\\equiv_5}, [4]_{\\equiv_5}\\} \\]"},{"location":"21HS/DM/03_Mengen.html#aquivalenzklasse","title":"\u00c4quivalenzklasse","text":"<p>Eine \u00c4quivalenzklasse eines Element beschreibt, welche Elemente damit in verbindng stehen in einer Relation.</p> <p>\\([x]_R={y \\in R | xRy}\\)</p> <pre><code>graph LR\n3((3))\n4((4))\n11((11))\n12((12))\n3 --&gt; 3\n4 --&gt; 4\n3 --&gt; 4 --&gt; 3\n\n11 --&gt; 11 --&gt; 12 --&gt; 12 --&gt; 11</code></pre>"},{"location":"21HS/DM/03_Mengen.html#_1","title":"Mengen","text":"<p>In der oberen Relation g\u00e4be es zwei Relationsklassen: \\([3]_R = [4]_R\\) und \\([11]_R = [12]_R\\) </p> <p>Die Relationsklasse \\([11]_R\\) ist dieselbe, wie \\([12]_R\\) , da in den Klammern ein Vertreter der Relationsklasse steht.</p>"},{"location":"21HS/DM/03_Mengen.html#komplement-ohne","title":"Komplement (ohne)","text":"<p>\\(\\bar X=\\{x | x \\in G \\wedge x \\not \\in X\\}\\)</p>"},{"location":"21HS/DM/03_Mengen.html#rechneregeln","title":"Rechneregeln","text":"<p>De Morgan: \\(\\overline{A\\cup B} = \\bar A \\cap \\bar B\\)</p> <p>Komplementgesetzt</p>"},{"location":"21HS/DM/03_Mengen.html#relationen","title":"Relationen","text":"<p>Relationen sind das Kartesischeprodukt zweier Mengen: \\(R \\subseteq X \\times Y\\)</p> <p>Dies ergibt eine Liste von Tupels. Daher kann folgenedes ausgesagt werden: \\((x, y) \\in R\\) was auch als \\(xRy\\) geschrieben werden kann.</p> <p>Man kann sie folgendermassen Darstellen:</p> <ol> <li> <p>TODO</p> </li> <li> <p>Beschreibend: \\(xRy\\Leftrightarrow \\text{\"y ist doppelt so gross wie x\"}\\)</p> </li> <li> <p>Wahrheitstabelle </p> </li> <li> <p>Graph im Koordinatensystem</p> </li> <li> <p>Bipartifer Graph    </p> </li> <li> <p>Gerichter Graphen    Dieser funktioniert nur mit heterogenen Relationen. Hier ist ein Beispiel:    </p> </li> </ol>"},{"location":"21HS/DM/03_Mengen.html#komposition","title":"Komposition","text":"<p>Mit \\(S\\circ R\\) wird R mit S gejoint (Achtung mit der Reihenfolge!!)</p> <p>\\(S\\circ R = {(x, z) \\in A \\times C | \\exists y \\in B (xRy \\wedge y \\in Z)}\\)</p> <p></p>"},{"location":"21HS/DM/03_Mengen.html#inverse-relationen","title":"Inverse Relationen","text":"<p>Ist das Pandon von Umkehrfunktionen.</p> <p>Achtung: \\((S\\circ R)^{-1}=R^{-1} \\circ S^{-1}\\)</p>"},{"location":"21HS/DM/03_Mengen.html#gerichtete-graphen","title":"Gerichtete Graphen","text":"<p>Der folgende gerichtete Graph zeigt die Teilbarkeit von Zahlen in der Menge \\(\\{1, 2, 3, 4\\}\\) . Ein gerichteten Graph kann man nur mit homogenen Relationen erstellen k\u00f6nnen.</p> <p>Die Relation w\u00e4re folgendes: {(1, 1), (1, 2), (1, 3), (1,4), (2, 2), (2, 3), (2,4), (3, 3), (3, 4), (4, 4)}</p> <p></p>"},{"location":"21HS/DM/03_Mengen.html#relationen-und-funktionen","title":"Relationen und Funktionen","text":"<p>Eine bin\u00e4re Relation ist eine Funktion, falls f\u00fcr jedes \\(x \\in A\\) genau ein \\(y \\in B\\) mit \\(xRy\\) existiert. In diesem Fall kann man schreiben: \\(f: A\\rightarrow B \\text{ mit } f(x)=y\\)</p> <p>Mathematischer ausgedr\u00fcckt: Eine Relation \\(f\\subseteq A \\times B\\) ist eine Funktion von A nach B, falls:  \\(\\forall x \\in A\\exists!y \\in B((x, y) \\in f)\\)</p> <p>In anderen Worte muss die Funktion muss linkseindeutig  (alle Elemente der linken Menge m\u00fcssen einen Pfeil haben) und Rechtseindeutig (Alle Werte der linken Menge m\u00fcssen klar einem Rechten Wert zu gewissen werden k\u00f6nnen).</p>"},{"location":"21HS/DM/03_Mengen.html#injektiv-und-surjektiv","title":"Injektiv und Surjektiv","text":"<p>Eine Funktion ist Injektiv (linkseindeutig ), wenn zu jedem y es h\u00f6chstens einmal x mit  \\(xRy\\) zutrifft </p> <p>Eine Funktion ist surjektiv (rechtstotal), wenn es zu jedem y mindestens ein x gibt mit \\(xRy\\)</p> <p>Wenn eine Funktion injektiv und surjektiv ist, dann nennt man diese auch Bijektiv.</p> <p>Eine Funktion kann linkstotal, rechtseindeutig, rechtstotal und linkseindeutig sein. Dies kann man auch eine bijektive Funktion nennen.</p> <p>Da bei einer bijektiven Funktion in beiden Mengen alle Elemente \"besetzt\" sein m\u00fcssen, m\u00fcssen sie dieselbe M\u00e4chtigkeit haben (\\(|A|=|B|\\))</p>"},{"location":"21HS/DM/03_Mengen.html#homogene-und-heterogene-relation","title":"Homogene und heterogene Relation","text":"<p>Eine Relation ist homogen, wenn beide Mengen gleich sind. Mathematischer ausgedr\u00fcckt: \\(A=B, R \\subseteq A \\times A\\)</p>"},{"location":"21HS/DM/03_Mengen.html#reflexiitat","title":"Reflexiit\u00e4t","text":"<p>Es gilt \\(\\forall x \\in X (xRx)\\) . In Deutsch heisst dies, dass jedes Element auf sich selbst zeigt. Es darf auch Verbindungen gehen, welche nicht auf sich selbst zeigen, aber jedes Element brauch sicher eine Verbindung mit sich selbst.</p> <p></p>"},{"location":"21HS/DM/03_Mengen.html#symmetrisch","title":"Symmetrisch","text":"<p>\\(\\forall x,y \\in X (xRy \\Rightarrow yRx)\\) oder in Deutsch, wenn x zu y zeigt, muss auch y zu x zeigen.</p> <p></p>"},{"location":"21HS/DM/03_Mengen.html#antisymmetrisch","title":"Antisymmetrisch","text":"<p>\\(\\forall x,y \\in X (xRy \\wedge yRx \\Rightarrow x=y)\\) oder in Deutsch, es darf nur Pfeile geben, welche nur in eine Richtung oder auf sich selbst zeigen.</p> <p></p>"},{"location":"21HS/DM/03_Mengen.html#transitiv","title":"Transitiv","text":"<p>\\(\\forall x,y,z \\in X (xRy \\wedge yRz \\Rightarrow xRz)\\) oder in Deutsch, wenn wenn x zu y und y zu z in Verbindung steht, dann muss auch x zu z in Verbindung stehen. </p> <p></p> <p>Transitiv ist eine Relation auch, wenn es nur ein Element gibt, oder auch in speziellen F\u00e4lle bei zwei Elemente. Folgende Relation w\u00e4re transitiv.</p> <p></p>"},{"location":"21HS/DM/03_Mengen.html#heterogene-relation","title":"Heterogene Relation","text":"<p>Heterogen ist eine Relation hingegen, wenn die Mengen ungleich sind: \\(A \\neq B, R \\subseteq A \\times B\\)</p>"},{"location":"21HS/DM/03_Mengen.html#unendliche-mengen","title":"Unendliche Mengen","text":""},{"location":"21HS/DM/03_Mengen.html#begriffe-der-unendlichkeit","title":"Begriffe der Unendlichkeit","text":"<p>Eine Menge ist endlich, wenn es eine Darstellung f\u00fcr alle Elemente in der Form \\(M=\\{x_1, x_2, x_3, ..., x_n\\}\\) gibt. Wenn dies nicht der Fall ist, dann nennt man eine Menge unendlich.</p> <p>Eine Menge ist abz\u00e4hlbar, wenn eine surjektive Funktion \\(F: \\mathbb N \\rightarrow X\\) existiert. Dass heisst, jedes Element von X muss mindestens ein Element von  \\(\\mathbb N\\) haben. Wenn dies nicht m\u00f6glich ist, nennt man eine Menge \u00fcberabz\u00e4hlbar.</p> <p>Abz\u00e4hlbar und unendliche Mengen sind abz\u00e4hlbar und unendlich.</p>"},{"location":"21HS/DM/03_Mengen.html#erste-diagonal-argument","title":"Erste Diagonal Argument","text":"<p>Das erste diagonale Argument besagt, dass die Menge \\(\\mathbb N \\times \\mathbb N\\) abz\u00e4hlbar ist. Man kann also eine Funktion bilden, welche wie folgt aussieht: \\(F: \\mathbb N \\rightarrow (\\mathbb N, \\mathbb N)\\)</p> <p>Dies kann erreicht wrden, in dem man die Tupels als 2D-Array darstellt und diagonal z\u00e4hlt</p> <p></p> <p>Aus dem kann man auch schliessen, dass Vereinigungen von abz\u00e4hlbaren Mengen, abz\u00e4hlbar sind.</p> \\[ \\bigcup _{i\\in \\mathbb N}A_i = \\{F_i(j) | i, j \\in \\mathbb N\\} = \\{F_i(j) | (i, j) \\in \\mathbb N \\times \\mathbb N\\}\\\\ \\text{Daraus kann man die folgende Funktion bilden: }\\\\ H(i, j)=F_i(j) \\] <p>Da \\(\\mathbb N \\times \\mathbb N\\) abz\u00e4hlbar ist, muss auch \\(\\bigcup_{i \\in \\mathbb N}A_i\\) abz\u00e4hlbar sein</p>"},{"location":"21HS/DM/03_Mengen.html#zweite-diagonal-argument","title":"Zweite Diagonal Argument","text":"<p>Die Menge aller unendlichen Bin\u00e4rsequenzen ist \u00fcberabz\u00e4hlbar</p> <p>Die Begr\u00fcndung daf\u00fcr ist: Die Menge soll als folgende Tabelle dargestelt werden:</p> Index Sequenz 1 011001000... 2 100100100... 3 110100100... n ... <p>Damit man die Menge \u00fcberabz\u00e4hlbar nennen kann</p>"},{"location":"21HS/DM/03_Mengen.html#ordnungsrelationen","title":"Ordnungsrelationen","text":"<p>Ordnungsrelationen sind Relationen, mit welchen man Objekte in einer gewissen Reihenfolgen ordnen kann.</p>"},{"location":"21HS/DM/03_Mengen.html#begriffe","title":"Begriffe","text":"<p>Es gibt mehrere Begriffe, welche man typsicherweisse mit den Ordnungsrelationen verwendet. Das R in den folgenden Begriffen ist der Name der Relation. Folgende Begriffe beziehen sich auf einzelne Elemente</p> <ul> <li> <p>R-unvergleichbar nennt man zwei Elemente, wenn weder xRy, noch yRx gilt oder in anderen Worten, wenn die Elemente nicht miteinander verbunden sind.</p> </li> <li> <p>R-minimal nennt man ein Elemente, wenn kein anderes Element darauf zeigt.</p> </li> <li> <p>R-maximal nennt man ein Element, wenn es auf kein weiteres Element zeigt.</p> </li> </ul> <p>Nun gibt es noch Begriffe, um Ordnungsrelationen zu benennen:</p> Begriff Erkl\u00e4rung Pr\u00e4ordnung Relation, welche reflexiv und transitiv ist Halbordnung Relation, welche reflexiv, transitiv und antisymmetrisch ist totale-/ lineare Ordnung Relation, welche eine Halbordnung ist und keine R-unvergleichbaren Elemente besitzt (jedes Element muss mit Jedem indirekt verbunden sein) Wohlordnung Relation von M, welche eine totale Ordnung ist, bei welcher alle Teilmengen (ausser \\(\\empty\\)), mindestens ein R-minimal Element enthalten <p></p> <p>Es gibt noch mehr Begriffe!!!</p> <ul> <li> <p>\\(R^+\\) ist ein \"transitiver Abschluss\" und beinhaltet zus\u00e4tzlich zu R auch noch alle indirekten Verbindungen.    Beispiel: Die Menge \\(M={(a, b), (b, c)}\\) ist gegeben, f\u00fcr \\(R^+\\) w\u00fcrde zus\u00e4tzlich noch \\((a, c)\\) hinzu kommen.</p> </li> <li> <p>\\(R^*\\) ist eine \"reflexiver transitiver Abschluss\" und beinhaltet zus\u00e4tzlich zu \\(R^+\\) auch noch die reflexive Werte   Beispiel: Zus\u00e4tzlich zu \\(M^+\\) k\u00e4men noch folgende Paare hinzu: \\((a, a), (b, b), (c, c)\\)</p> </li> </ul>"},{"location":"21HS/DM/03_Mengen.html#hasse-diagram","title":"Hasse Diagram","text":"<p>Ein Hasse Diagram kann nur f\u00fcr Halbordnungen verwendet werden.</p>"},{"location":"21HS/DM/03_Mengen.html#graph","title":"Graph","text":"<p>Einen Graph wird formal durch eine Menge von Punkten und Kanten zwischen den Punkten beschrieben. Matematisch schreibt man dies folgendermassen: \\(G=(V, E)\\), dabei ist V die Menge aller Punkte und E eine homogene Relation zwischen den Punkten, welche die Kanten beschreiben.</p>"},{"location":"21HS/DM/03_Mengen.html#dag","title":"DAG","text":"<p>Ein DAG Graph ist ein gerichteter zyklenfreier Graph. Diese kann man z.B. in einem Hasse Diagram darstellen.</p> <p>\\(G(V, E \\setminus \\Delta_V)\\)</p> <p>Dabei steht \\(\\Delta_V\\) f\u00fcr alle zyklischen Verbindungen. Im unteren Beispiel sieht man einen Graph. Mit den roten Pfeilen w\u00e4re es keinen DAG, da diese zyklisch sind.</p> <p></p>"},{"location":"21HS/DM/03_Mengen.html#topologische-sortierung","title":"topologische Sortierung","text":""},{"location":"21HS/DM/04_Nat%C3%BCrliche%20Zahlen.html","title":"Nat\u00fcrliche Zahlen","text":"<ul> <li>Nat\u00fcrliche Zahlen<ul> <li>Volst\u00e4ndige Induktion</li> <li>Methode des kleinsten Verbrechers</li> <li>Rekursion<ul> <li>Darstellungsm\u00f6glichkeiten</li> </ul> </li> </ul> </li> </ul> <ul> <li>Jede nat\u00fcrliche Zahl plus 1 ergibt die n\u00e4chste nat\u00fcrliche Zahl</li> <li>Die Zahl 0 hat als einzige nat\u00fcrliche Zahl keinen Vorg\u00e4nger</li> <li>Jede nat\u00fcrliche Zahl ist Nachfolger von h\u00f6chstens einer nat\u00fcrlichen Zahl</li> </ul>"},{"location":"21HS/DM/04_Nat%C3%BCrliche%20Zahlen.html#volstandige-induktion","title":"Volst\u00e4ndige Induktion","text":"<p>Idee: Beweissen, dass ein Vorgang f\u00fcr das 1. Element und f\u00fcr das n-te Element gillt. Wenn dies gegeben ist, dann wird es auch f\u00fcr das n+1-te Element gellten</p> <p>Um dies zu tun, werden folgende Schritte getan</p> <ol> <li> <p>Induktionsverankerung (IV)    E(0): wahr</p> </li> <li> <p>Induktionsschritt (IS)    Wenn E(n) wahr, dann gillt auch E(n+1)  oder \\(E(n) \\Rightarrow E(n+1)\\)</p> </li> </ol> <p>Dies kann man normalerweissen in folgende Schritte weiter unterteilen:</p> <ol> <li> <p>Induktionsverankerung (IV)    Man beweist, dass E(0) wahr ist. Hier kann man einfach einsetzen</p> </li> <li> <p>Induktionsanhame (IA)    Man schreibt auf, was man f\u00fcr E(n) erwartet. Dies ist eine Annahme und muss nicht in diesem Schritt bewiesen werden</p> </li> <li> <p>Induktionsbehauptung (IB)    Man behauptet, wie sich E() f\u00fcr E(n+1) verhaltet</p> </li> <li> <p>Induktionschluss (IS)    Man beweisst, dass wenn es f\u00fcr E(n) gilt, dann gilt es auch f\u00fcr E(n+1)</p> </li> </ol>"},{"location":"21HS/DM/04_Nat%C3%BCrliche%20Zahlen.html#methode-des-kleinsten-verbrechers","title":"Methode des kleinsten Verbrechers","text":""},{"location":"21HS/DM/04_Nat%C3%BCrliche%20Zahlen.html#rekursion","title":"Rekursion","text":"<p>F\u00fcr eine Rekursion wird das erste Glied angegeben, und wie man von diesem zum n\u00e4chsten kommt</p> <p>Also:  F(0) = ... F(n+1)=...(n+1)...</p>"},{"location":"21HS/DM/04_Nat%C3%BCrliche%20Zahlen.html#darstellungsmoglichkeiten","title":"Darstellungsm\u00f6glichkeiten","text":"<p>Es gibt drei m\u00f6glichkeiten solche Reihen darzustellen:</p> <ol> <li> <p>Aufz\u00e4hlend - die Werte der Reihe aufgez\u00e4hlt (    Beispiel: 2, 4, 8, ...</p> </li> <li> <p>Rekursiv    Als Rekusirve Funktion    Beispiel: \\(F(0)=2; F(n+1)=2\\cdot F(n)\\)</p> </li> <li> <p>Explitzit    Als Funktion, welche nicht sich selbst bent\u00fctzt    Beispiel: \\(F(n)=2^n+1\\)</p> </li> </ol> <p>Mit Hilfe einer vollst\u00e4ndigen Indukation kann man beweissen, dass die rekursive und explizite Form dasselbe darstellt.</p>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html","title":"Ganz Zahlen","text":"<ul> <li>Ganz Zahlen<ul> <li>Begriffe<ul> <li>Teilbarkeit</li> </ul> </li> <li>Teilermenge</li> <li>Teilen mit Rest</li> <li>GGT &amp; KGV<ul> <li>Rechenregeln GGT</li> <li>Euklischer Algorithmus<ul> <li>Beispiel 1</li> <li>Beispiel 2</li> </ul> </li> <li>Teilerfremd</li> <li>Lemma von B\u00e9zout</li> <li>Erweiterter euklidischen Algorithmus</li> </ul> </li> <li>Primzahlen<ul> <li>Eigenschaften</li> <li>Primzahlen finden (Sieb des Eratosthenes)</li> <li>\\(\\pi\\) Funktion</li> </ul> </li> <li>Modulare Arithmetik<ul> <li>Der mod Operator</li> <li>Kongruenz<ul> <li>Notation f\u00fcr Restklassen</li> </ul> </li> </ul> </li> <li>Restklassen-Rechnen<ul> <li>Addition</li> </ul> </li> <li>Multiplikation<ul> <li>Beispiel f\u00fcr Modulare Arithmetik</li> </ul> </li> <li>Prime Restklassen<ul> <li>Eulersche \\(\\varphi\\)-Funktion</li> <li>Chinesischer Restsatz</li> <li>Satz von Euler</li> <li>Kleiner Satz von Fermat</li> </ul> </li> </ul> </li> </ul>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#begriffe","title":"Begriffe","text":"Begriff Erkl\u00e4rung Neutrales Element Das neutrale Element einer Operation, gibt wieder das eigentliche Element zur\u00fcck Absorbtion Das Element, welches bei jedem anderen Element 0 zur\u00fcck gibt."},{"location":"21HS/DM/05_Ganz%20Zahlen.html#teilbarkeit","title":"Teilbarkeit","text":"<p>Um zu schreiben, dass die Zahl x teilt die Zahl y, wird dies auch in der Form x|y geschrieben.</p> <p>\\(x|y \\Leftrightarrow(y=k\\cdot x)\\)</p> <p>Beispiel: \\(5|10=\\text{wahr}\\) </p> <p>Folgende Gesetzte gellten:</p> <ul> <li> <p>\\(z|z=\\text{wahr}\\) (reflexiv)</p> </li> <li> <p>\\(x|y \\Rightarrow x|k\\cdot y \\wedge k \\in \\Z\\)</p> </li> <li> <p>\\(x|y \\wedge x|(y+z)=x|z\\)</p> </li> <li> <p>\\(x|y \\wedge y|z=x|z\\)  (transitive)</p> </li> <li> <p>\\(x|y \\wedge x|z \\Rightarrow x|(y-z)\\) (Wenn y und z durch x teilbar ist, ist auch (y-z) durch x teilbar)</p> </li> </ul>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#teilermenge","title":"Teilermenge","text":"<p>Die Menge aller nat\u00fcrlichen Teiler der Zahl. Man schreibt nur die positiven Zahl auf.</p> <p>Als Beispiel:</p> <p>\\(T(15)=\\{1, 3, 5, 15\\}\\)</p> <p>\\(T(-15)=\\{1, 3, 5, 15\\}\\)</p>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#teilen-mit-rest","title":"Teilen mit Rest","text":"<p>Das Teilen durch Rest kann auch als \\(m=kn+r\\) dargestellt werden.</p> <p>Beispiel: </p> \\[ 28:5=4\\text{ Rest } 3 = 5\\cdot 5 + 3\\\\ 7:3=2 \\text{ Rest } 1 = 2\\cdot 3 + 1\\\\ -7:3=-3 \\text{ Rest } 2 = -3 \\cdot 3 + 2 \\\\ 7:-3=-3 \\text{ Rest } -2 = -3 \\cdot -3 - 2 \\\\ -7:-3=2 \\text { Rest } -1 = -3 \\cdot 2 - 1 \\]"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#ggt-kgv","title":"GGT &amp; KGV","text":"<p>Der gr\u00f6sste gemeinsame Teiler kann als \\(ggT(n, m)=max\\{k \\in \\N \\mid k|n \\wedge k|m\\}\\) (max holt das gr\u00f6sste Elemente der Liste)</p> <p>Das kleinste gemeinsame Vielfache kann als \\(kgV(n, m)=min \\{k \\in \\N \\mid n | k \\wedge m|k\\}\\)</p> <p>\\(n\\cdot m = kgV(n, m)\\cdot ggT(n, m) \\Rightarrow kgV(n, m)=\\frac{n\\cdot m}{ggT(n, m)}\\)</p>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#rechenregeln-ggt","title":"Rechenregeln GGT","text":"<ol> <li> <p>\\(ggT(n, n) = n\\)</p> </li> <li> <p>\\(ggT(n, 1)=1\\)</p> </li> <li> <p>\\(ggT(n, 0)=n\\)</p> </li> <li> <p>\\(ggT(n, m)=ggT(m, n)\\)</p> </li> <li> <p>\\(ggT(n, m)=ggT(n, m-n)\\)</p> </li> <li> <p>\\(ggT(n, m)=ggT(n, m-k\\cdot n) \\text{ wenn } k\\cdot n \\le m\\)</p> </li> </ol>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#euklischer-algorithmus","title":"Euklischer Algorithmus","text":"<p>Mit diesem Algorithmus kann der ggT(n, m) bestummen weden.</p> <p>Allgeimein F\u00fcr \\(n, m \\in \\Z \\setminus \\{0\\}\\) :</p> <ol> <li> <p>Berechne \\(k, r \\in \\N\\) mit    \\(n=k\\cdot m + r\\) mit \\(0 \\le |r| \\lt m\\)</p> </li> <li> <p>Falls $r \\ne 0 $ setze \\(n=m\\) und \\(m = r\\) Wiederhole Schritt 1 </p> </li> <li> <p>Falls \\(r=0\\) ist \\(m\\) der ggT</p> </li> </ol>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#beispiel-1","title":"Beispiel 1","text":"<ol> <li> <p>\\(ggT(693, 286)=ggT(286, 693-2\\cdot 286)=ggT(286, 121)\\)</p> </li> <li> <p>\\(ggT(286, 121)=ggT(121, 286-2\\cdot 121)=ggT(121, 44)\\)</p> </li> <li> <p>\\(ggT(121, 44)=ggT(44, 121 - 2\\cdot 44) = ggT(44, 33)\\)</p> </li> <li> <p>\\(ggT(44, 33)=ggT(33, 44 - 1\\cdot 33)=ggT(33, 11)\\)</p> </li> <li> <p>\\(ggT(33, 11)=ggT(11, 33 - 3\\cdot 11)=ggT(11, 0)=11\\)</p> </li> </ol> <p>oder Verk\u00fcrzt geschrieben:</p> <ol> <li> <p>\\(693=2\\cdot 286+121\\)</p> </li> <li> <p>\\(286=2\\cdot 121 + 44\\)</p> </li> <li> <p>\\(121=2\\cdot 44 + 33\\)</p> </li> <li> <p>\\(44=1\\cdot 33 + 11\\)</p> </li> <li> <p>\\(33=3\\cdot 11 + 0\\)</p> </li> </ol>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#beispiel-2","title":"Beispiel 2","text":""},{"location":"21HS/DM/05_Ganz%20Zahlen.html#teilerfremd","title":"Teilerfremd","text":"<p>Zwei Zahlen \\(x, y \\in \\Z\\) heissen teilerfremd, falls \\(ggT(x, y)=1\\) ist.</p> <p>In Deutsch, zwei Zahlen haben keinen gemeinsammen Teiler (ausser 1 nat\u00fcrlich).</p>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#lemma-von-bezout","title":"Lemma von B\u00e9zout","text":"<p>\\(ggT(x, y)=ax+by\\), wenn \\(x, y \\neq 0\\)</p>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#erweiterter-euklidischen-algorithmus","title":"Erweiterter euklidischen Algorithmus","text":"<p>Diesen Algorithmus kann dazu verwendet werden eine L\u00f6sung  f\u00fcr \\(x\\) und \\(y\\) zur Gleichung \\(ggT(a, b)=xb+yc\\) zu finden (wenn \\(x &gt; y\\) ist). Solche Gleichungen nennt man lineare diophalische Gleichungen.</p> <p>Dieser Algorithmus erweitert den euklidischen Algorithmus. Zuerst wird dieser durchgef\u00fchrt f\u00fcr den \\(ggT(a, b)\\). Danach folgen die unteren Schritte. \\(q_k\\) ist dabei der Quotient in der Reihe \\(k\\) vom euklidischen Algorithmus. $$ x_0=1\\ x_1=0\\ x_k=x_{k-2}-q_k\\cdot x_{k-1}\\ \\space \\ y_0=0\\ y_1=1\\ y_k=y_{k-2}-q_k\\cdot y_{k-1} $$ {title: \"test\"}</p> <p>Beispiel: </p>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#primzahlen","title":"Primzahlen","text":"<p>Definition: Primzahlen sind nat\u00fcrliche Zahlen, die nur durch 1 und durch sich selbst teilbar sind (1 selbst ist keine Primzahl) \\(|T(p)|=2\\)</p>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#eigenschaften","title":"Eigenschaften","text":"<ul> <li>Jede ganze Zahl \\(z\\) mit \\(z \\notin \\{-1, 1\\}\\) besitzt ein Primfaktor (ein Faktor, welcher eine Primzahl ist)</li> <li>Jede nat\u00fcrliche Zahl kann als Primfaktoren dargestellt werden</li> <li>Mersenne-Primzahl hat die Form \\(2^n-1\\)</li> <li>Es gibt unendlich viele Primzahlen</li> </ul>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#primzahlen-finden-sieb-des-eratosthenes","title":"Primzahlen finden (Sieb des Eratosthenes)","text":"<p>Man geht jede (noch nicht gestrichene) Zahl und streicht die Vielfachen der Zahl. Dies wiederholt man so lange, bis die Quadradtzahl der aktuellen Zahl ist ausserhalb dem Suchbereich.</p> <p></p>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#pi-funktion","title":"\\(\\pi\\) Funktion","text":"<p>Die Funktion \\(\\pi(n)\\) gibt zur\u00fcck, wie viele Primzahlen es gibt, welche kleiner als n sind.</p> <p></p>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#modulare-arithmetik","title":"Modulare Arithmetik","text":""},{"location":"21HS/DM/05_Ganz%20Zahlen.html#der-mod-operator","title":"Der <code>mod</code> Operator","text":"<p>Der <code>mod</code> Operator gibt zur\u00fcck, wie viel Rest bei einer Division ergibt. Das Vorzeichen des Resultates hat meistens dasselbe Vorzeichen, wie der Divident (die zweite Zahl).</p>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#kongruenz","title":"Kongruenz","text":"<p>Zwei Zahlen sind konkruent, wenn sie denselben Resten ergeben, wenn man sie durch die selbe Zahl teilt.</p> <p>\\(r\\equiv_n s \\Leftrightarrow n|(r-s)\\) (n teilbar durch r-s)</p> <p>Als Beispiel: \\(26\\equiv_8 18\\equiv_8 10 \\equiv_8 2 \\equiv_8 -6 \\equiv_8 -14\\)</p> <p>Dieses Denken, kann helfen das Resultat von Minuszahlen sich vorzustellen.</p> <p>Dieser Operator kann auch als \u00c4quivalenrelation beschrieben werden, da die Eigenschaft reflexiv, symmetrisch und transitiv ist. In einer \u00c4quivalenzklasse dieser Relation sind alle Zahlen, welche den selben Rest haben. Diese nennet man auch Restklassen</p> <p>Beispiel: \\([10]_8=\\{..., -22, -14, -6, 2, 10, 18, 26, ...\\}\\)</p> <p>n\u00fctzlich sein kann: \\([38]_9+[22]_9=[2]_9+[4]_9=[6]_9\\)</p>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#notation-fur-restklassen","title":"Notation f\u00fcr Restklassen","text":"Formel Erkl\u00e4rung \\(\\Z/n=\\{[z]_n\\|z\\in \\Z\\}\\) Die Menge aller Restklasse \\(\\Z^*_{/n}\\) Das Primes Restklassenssytem, welches nur die Restklassen enth\u00e4lt, welche zu n teilerfremd sind. Alle Restklassen in diesem System k\u00f6nnen multipliziert werden (Siehe Prime Restklassen) \\([z]_n=\\overline{z}\\) Die Restklasse, bzw. \u00c4quivalenzklasse mit dem Teiler n und dem Vertreter \\(z\\)"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#restklassen-rechnen","title":"Restklassen-Rechnen","text":"<p>Das Berechnen der Restklassen kann man auch vereinfachen.</p> \\[ [a]_n+[b]_n=[a+b]_n\\\\ [a]_n\\cdot[b]_n=[a\\cdot b]_n \\]"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#addition","title":"Addition","text":"<ul> <li> <p>Das neutrale Element dabei ist: \\([0]_n\\)</p> </li> <li> <p>Das inverse Element von \\([a]_n=[-a]_n=[n-a]_n\\)</p> </li> </ul> <p>In der folgenden Tabelle sieht man, alle Additionen von \\([n]_6\\)</p> \\([0]_6\\) \\([1]_6\\) \\([2]_6\\) \\([3]_6\\) \\([4]_4\\) \\([5]_6\\) \\([0]_6\\) \\([0]_6\\) \\([1]_6\\) \\([2]_6\\) \\([3]_6\\) \\([4]_4\\) \\([5]_6\\) \\([1]_6\\) \\([1]_6\\) \\([2]_6\\) \\([3]_6\\) \\([4]_6\\) \\([5]_6\\) \\([0]_6\\) \\([2]_6\\) \\([2]_6\\) \\([3]_6\\) \\([4]_6\\) \\([5]_6\\) \\([0]_6\\) \\([1]_6\\) \\([3]_6\\) \\([3]_6\\) \\([4]_6\\) \\([5]_6\\) \\([0]_6\\) \\([1]_6\\) \\([2]_6\\) \\([4]_6\\) \\([4]_6\\) \\([5]_6\\) \\([0]_6\\) \\([1]_6\\) \\([2]_6\\) \\([3]_6\\) \\([5]_6\\) \\([5]_6\\) \\([0]_6\\) \\([1]_6\\) \\([2]_6\\) \\([3]_6\\) \\([4]_6\\)"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#multiplikation","title":"Multiplikation","text":"<p>In der folgenden Tabelle sieht man, alle Multiplikationen von \\([n]_6\\)</p> \\([0]_6\\) \\([1]_6\\) \\([2]_6\\) \\([3]_6\\) \\([4]_4\\) \\([5]_6\\) \\([0]_6\\) \\([0]_6\\) \\([0]_6\\) \\([0]_6\\) \\([0]_6\\) \\([0]_6\\) \\([0]_6\\) \\([1]_6\\) \\([0]_6\\) \\(\\mathbf{[1]_6}\\) \\([2]_6\\) \\([3]_6\\) \\([4]_6\\) \\([5]_6\\) \\([2]_6\\) \\([0]_6\\) \\([2]_6\\) \\([4]_6\\) \\([0]_6\\) \\([2]_6\\) \\([4]_6\\) \\([3]_6\\) \\([0]_6\\) \\([3]_6\\) \\([0]_6\\) \\([3]_6\\) \\([0]_6\\) \\([3]_6\\) \\([4]_6\\) \\([0]_6\\) \\([4]_6\\) \\([2]_6\\) \\([0]_6\\) \\([4]_6\\) \\([2]_6\\) \\([5]_6\\) \\([0]_6\\) \\([5]_6\\) \\([4]_6\\) \\([3]_6\\) \\([2]_6\\) \\([1]_6\\) <ul> <li> <p>Neutrales Element: \\([1]_6\\)</p> </li> <li> <p>Inverse Element: </p> </li> <li> <p>Nur Zahlen, welche teilerfremd sind (ggT(Zahl, N)=1)</p> </li> <li>Eine Zahl multipliziert mit ihrem inveren Element muss 1 geben</li> <li>Beispiel: \\([5]_6\\cdot[5]_6=[1]_6\\)</li> <li>Beispiel 2: \\([7^{49}]_{10}=(7^2)^{24}\\cdot 7 \\equiv_{10} 49^{24}\\cdot7\\equiv_{10}(-1)^{24}\\cdot 7 \\equiv_{10}\\cdot 7=[7]_{10}\\)</li> </ul>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#beispiel-fur-modulare-arithmetik","title":"Beispiel f\u00fcr Modulare Arithmetik","text":"\\[ 3\\cdot x \\equiv_7 4 \\\\ [3]\\cdot[3^{-1}]\\cdot x \\equiv_7 4\\\\ -2\\cdot 3 \\cdot x \\equiv_7 (-2)\\cdot 4\\\\ x \\equiv_7 -8\\equiv_7 6 \\]"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#prime-restklassen","title":"Prime Restklassen","text":"<p>Prime Restklassen sind die Restklassen, welche ein Inverseselement f\u00fcr die Multiplikation besitzen. Dies wird mit einem Stern geschrieben, wie hier zu sehen: \\(\\Z_{/7}^{*}\\) .</p> <p>Beispiel:</p> <p>\\(\\Z^*_{/7}=\\{[1], [2], [3], [4], [5], [6]\\}\\)</p> <p>\\(\\Z^*_{/6}=\\{[1], [5]\\}\\)</p>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#eulersche-varphi-funktion","title":"Eulersche \\(\\varphi\\)-Funktion","text":"<p>Um die M\u00e4chtigkeit einer Prime Restklasse zu bestimmen kann folgenden getan werden:</p> <ol> <li>\\(\\varphi(n\\cdot m)=\\varphi(n)\\cdot \\varphi(m)\\), wobei gillt \\(ggT(n, m)=1\\)</li> <li>\\(\\varphi(p)=p-1\\), wobei gillt \\(p\\in \\mathbb P\\)</li> <li>\\(\\varphi(p^k)=p^k-p^{k-1}\\), wobei gillt \\(k\\in \\N_{\\gt0}\\)</li> </ol> <p>Beispiel:</p> \\[ |\\Z_{/8}^*|=\\varphi(8)=\\varphi(2^3)=2^3-2^{3-1} = 8 -4 =4\\\\ |\\Z_{/15}^*|=\\varphi(15)=\\varphi(3\\cdot5)=\\varphi(3)\\cdot \\varphi(5)\\\\ |\\Z_{/240}^*|=\\varphi(240)=\\varphi(2^4\\cdot3\\cdot5)=.. \\]"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#chinesischer-restsatz","title":"Chinesischer Restsatz","text":"<p>Der chinesischer Restsatz hilft ein Gleichungssystem mit mehreren Kongruenzen ( \\(\\equiv_n\\)) . Es gibt garantiert eine L\u00f6sung, wenn alle Modulos paarweise teilerfremd sind (alle mit allen den ggT von 1 haben). Falls dies nicht der Fall ist, kann es trotzdem noch eine L\u00f6sung geben, dies ist aber nicht garantiert.</p> <p>Hier sind die Schritte f\u00fcr den Algorithmus:</p> <ol> <li>\\(M_k\\) berechnen    Mit \\(M_k=\\frac{\\sum_k m_k}{m_k}\\) kann \\(M\\) f\u00fcr jede Gleichung berechnet werden. Dabei werden alle Modulos (\\(\\sum_k m_k\\)) durch das Module der aktuellen Zeile (\\(m_k\\)) gerechnet</li> <li>Das multiplikative Inverse \\(N_k\\) f\u00fcr jedes \\(M_k\\) berechnen.    Bei kleinen Zahlen kann hier f\u00fcr gepr\u00f6pelt werden</li> <li>Nun folgt die Formel: \\(x=\\sum^n_{k=1}a_kM_kN_k=a_1M_1N_1+...+a_nM_nN_n\\)</li> </ol> <p>Beispiel:</p> <p>Folgendes ist die Gleichung und die daraus resultierende \\(a_k\\) und \\(m_k\\) Werte: $$ x\\equiv_3 2 &amp;\\rightarrow &amp;a_1=2&amp;m_1=3\\ x\\equiv_5 7 &amp;\\rightarrow &amp;a_2=3 &amp;m_2=5\\ x\\equiv_7 2 &amp;\\rightarrow&amp;a_3=2 &amp;m_3=7\\ $$</p> <ol> <li> <p>Nun werden die \\(M_k\\) berechnet    $$    M_1=\\frac{m_1\\cdot m_2 \\cdot m_3}{m_1}=m_2\\cdot m_3 = 5\\cdot 7 = 35\\    M_2=\\frac{m_1\\cdot m_2 \\cdot m_3}{m_2}=m_1\\cdot m_3 = 3\\cdot 7 = 21\\    M_3=\\frac{m_1\\cdot m_2 \\cdot m_3}{m_3}=m_1\\cdot m_2 = 3\\cdot 5 = 15\\    $$</p> </li> <li> <p>Als n\u00e4chstes werden die multiplikative Inverse \\(N_k\\) berechnet </p> </li> </ol> <p>Beispiel: $$ x &amp;\\equiv 2 \\mod3\\ x &amp;\\equiv 5 \\mod 7\\ $$</p> <ol> <li> <p>Inverse der Modulen gegenseitig:    Dies kann man mit dem erweiterten Euklidischen Algorithmus ausrechnen oder mit ausprobieren finden    $$    M_1=7: 7\\cdot N_1\\equiv_3 1 \\rightarrow [N_1]_3=[1]_3\\    M_2=3:  3\\cdot N_2 \\equiv_7 1 \\rightarrow [N_2]_7=[5]_7\\    $$</p> </li> <li> <p>Kongurenz Zusammenfassen    $$    x &amp; \\equiv 2 \\cdot 7 \\cdot 1 + 5 \\cdot 3 \\cdot 5 \\mod (3\\cdot 7)\\    &amp; \\equiv (14 + 75)\\equiv 89 \\equiv 5 \\mod 21    $$</p> </li> <li></li> </ol> \\[ x\\equiv2 \\mod3 &amp; a_1=2 &amp;m_1=3\\\\ x\\equiv3 \\mod 5 &amp; a_2=3 &amp;m_2=5\\\\ x\\equiv2 \\mod 7&amp; a_3=2 &amp;m_3=7\\\\ \\] <ol> <li> <p>\\(M_n\\) bestimmen:    $$    M_1=\\frac m {m_1}    $$</p> </li> <li> <p>\\(N_k\\) bestimmen Multiplikative Inverse von \\([N_k]_{mk}=[M_k^{-1}]_{mk}\\)    $$    N_1: [N_1]_3=[35^{-1}]_3=[2^{-1}]_3=[2]_3 &amp;N_1=2\\    N_2: [N_2]_5=[21^{-1}]_5=[1^{-1}]_5=[1]_5 &amp;N_2=1\\    N_3: [N_3]_7=[15^{-1}]_7=[1^{-1}]_7=[1]_7 &amp;N_3=1\\    $$</p> </li> <li> <p>Kongruenz    $$    x\\equiv 2\\cdot35\\cdot2+ 3\\cdot 21 \\cdot1 + 2\\cdot 15 \\cdot 1 \\mod 105\\    \\equiv 233 \\mod105 \\equiv 23 \\mod 105\\    \\mathbb L=[23]_105    $$</p> </li> </ol>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#satz-von-euler","title":"Satz von Euler","text":"\\[ a^e ... \\mod n\\\\    3^{160}\\equiv_{10}(3^2)^{80}\\equiv_{10}9^{80}\\equiv{10}(-1)^{80}\\equiv_{10}1 \\] <p>Der Satz von Euler besagt: \\(ggT(a, m)=1\\Rightarrow a^{\\varphi(m)}\\equiv1 \\mod m\\)</p>"},{"location":"21HS/DM/05_Ganz%20Zahlen.html#kleiner-satz-von-fermat","title":"Kleiner Satz von Fermat","text":"<p>F\u00fcr \\((p \\in \\R \\wedge a \\in \\Z)\\wedge p \\not{|} a\\) gillt \\(a^{p-1}\\equiv 1 \\mod p\\)</p> <p>Beispiel: </p> \\[ 26^{123}\\mod 7 &amp; ggT(26, 7)=1\\\\ 26^{7-1}\\equiv_7 26^6\\equiv_7 1\\\\ 26^{123}\\equiv_7 (26^6)^{20}\\cdot 26^3\\equiv_7 1^20\\cdot 26^3\\equiv_7 5^3\\equiv_7(-2^3) \\equiv_7 -8 \\equiv_76 \\]"},{"location":"21HS/DM/Summaries/01_summary_2021-11-23.html","title":"Summary - 2021-11-23","text":"<ul> <li>Summary - 2021-11-23<ul> <li>Aussagenlogik<ul> <li>Gesetze</li> <li>Beweistechniken</li> </ul> </li> <li>Semantik</li> <li>Mengen</li> <li>Relationen</li> </ul> </li> </ul>"},{"location":"21HS/DM/Summaries/01_summary_2021-11-23.html#aussagenlogik","title":"Aussagenlogik","text":"Begriff Erkl\u00e4rung \\(\\top\\)\u00a0(Tautologie) immer wahr \\(\\bot\\)\u00a0(Wiederspruch) immer falsch \\(\\vee\\) oder \\(\\wedge\\) und <p>Bindung: \\(\\neg, \\wedge, \\vee, \\Rightarrow, \\Leftrightarrow\\)</p>"},{"location":"21HS/DM/Summaries/01_summary_2021-11-23.html#gesetze","title":"Gesetze","text":"<ul> <li>Distributivgesetzt:   \\(A \\wedge (B \\vee C) \\Leftrightarrow (A \\wedge B) \\vee (A \\wedge C)\\)</li> <li>Der Morgen:   \\(\\neg(A\\vee B) \\Leftrightarrow \\neg A \\wedge \\neg B\\)</li> <li>Implikation:   \\(A \\Rightarrow B \\Leftrightarrow \\neg A \\vee B\\)</li> <li>Kontraposition:   \\(A \\Rightarrow B \\Leftrightarrow \\neg B \\Rightarrow \\neg A\\)</li> <li>\u00c4quivalenz   \\((A \\Leftrightarrow B) \\Leftrightarrow (A \\Rightarrow B) \\wedge (B \\Rightarrow A) \\Leftrightarrow (\\neg A \\vee B) \\wedge (\\neg B \\vee A)\\)</li> </ul>"},{"location":"21HS/DM/Summaries/01_summary_2021-11-23.html#beweistechniken","title":"Beweistechniken","text":"<ul> <li> <p>Direkten Beweis</p> </li> <li> <p>So veralgemeinern, dass der einte der Term gleich dem anderen Term ist</p> </li> <li> <p>Beweis durch Widerspruch</p> </li> <li> <p>Anstatt zu zeigen, dass die Aussage A immer wahr ist, wird bewiessen, dass A niemals falsch ist.</p> </li> <li> <p>Beweis durch (Gegen-) Beispiel</p> </li> <li> <p>Wenn beweissen werden soll, dass etwas immer korrekt oder immer falsch ist, kann mit ein korrekten, bzw. falschem Beispiel gezeigt werden, dass die Aussage falsch ist </p> </li> <li> <p>Beweis durch Kontraposition</p> </li> <li> <p>Es gillt die Aussage von der Form \\(A \\Rightarrow B \\Leftrightarrow \\neg B \\Rightarrow \\neg A\\)</p> </li> <li> <p>\u00c4quivalenz</p> </li> <li> <p>Da eine \u00c4quivalenz \\((A \\Leftrightarrow B) \\Leftrightarrow (A \\Rightarrow B \\wedge B \\Rightarrow A)\\) ist, kann einfach das zweitere bewiessen werden.</p> </li> </ul>"},{"location":"21HS/DM/Summaries/01_summary_2021-11-23.html#semantik","title":"Semantik","text":"Begriff Erkl\u00e4rung G\u00fclltig oder Wahr Bei einer spezifischen Belegung wahr Allgemeing\u00fclltig Bei allen Belegungen wahr Erf\u00fcllbar mind. eine Belegung ist erf\u00fcllbar Unerf\u00fcllbar immer falsch Wiederlegbar mind. einmal falsch; nicht umbedingt immer falsch Literale \\(\\neg a \\text{ oder } a\\) Negotions Normalform (NNF) Keine Implikationen und alle\\(\\neg\\) in Literale Disjunktive Normalform (DNF) Form:\\((L_1 \\wedge L_2 \\wedge ...)\\vee (L_3 \\wedge L_4) \\vee ...\\) Konjuktive Normalform (KNF) Form:\\(L_1 \\vee L_2 \\vee ...) \\wedge (L_3 \\vee L_4)\\wedge ...\\) Funktional Vollst\u00e4ndig Menge von Logischen Verkn\u00fcpfungen, welche die Funktionen\\(\\vee, \\wedge, \\neg, \\rightarrow\\) darstellen k\u00f6nnen"},{"location":"21HS/DM/Summaries/01_summary_2021-11-23.html#mengen","title":"Mengen","text":"Begriff Erkl\u00e4rung Nat\u00fcrliche Zahlen (\\(\\N\\)) \\([0; \\infty]\\) Ganze Zahlen (\\(\\Z\\)) \\([-\\infty;\\infty]\\) Rationale Zahlen (\\(\\mathbb Q\\)) Alle Zahlen, darstellbar durch einen Bruch Reele Zahlen (\\(\\R\\)) Alle Zahlen mit einem Komma (\\(\\pi\\), \\(e\\), 2.32, 2, ...) Intervallschreibweisse Ist immer im Zahlenbereich\\(\\R\\) Teilmenge (\\(X \\subseteq Y\\)) \\(\\forall x (x \\in X \\Rightarrow x \\in Y)\\) / X ist eine Teilmenge von Y, X=Y kann auch sein Echte Teilmenge (\\(X \\subsetneq Y\\)) \\(X \\subseteq Y \\wedge X \\neq Y\\) / X ist eine Teilmenge von Y, X kann nicht Y sein Potenzmenge (\\(\\mathcal P(X)\\)) Menge aller Teilmenge (\\(\\mathcal P(\\{0, 1\\})=\\{\\emptyset, \\{0\\}, \\{1\\}, \\{0, 1\\} \\}\\). Die M\u00e4chtigkeit ist $\\mathcal P(A)=2^{ \\vert A \\vert} $ Partition Eine Menge von Teilmengen von A, welche nicht leer sind (\\(\\bigcup_{i\\in I}P_i=A\\)) Kardinalit\u00e4t/M\u00e4chtigkeit Anzahl Elemente in Menge Schnittmenge (\\(X \\cap Y\\)) Alle Elemente, welch ein beiden enthalten sind Vereinigung (\\(X \\cup Y\\)) Alle Elemente von beiden Mengen Komplement (\\(X\\setminus Y)\\) Alle Elemente aus X, welche nicht in Y vorkommen (\\(X \\cap \\bar Y\\)) (nicht paarweise) Disjunkte Mengen Zwei Mengen teilen keine Elemente paarwweise Disjunkte Mengen Alle Mengen teilen keine Elemente Abz\u00e4hlbare Menge Wenn eine surjektive Funktion \\(F: \\N \\rightarrow X\\)\u00a0existiert \u00dcberabz\u00e4hlbare Menge Wenn es keine surjektive Funktion \\(F: \\N \\rightarrow X\\)\u00a0existiert"},{"location":"21HS/DM/Summaries/01_summary_2021-11-23.html#relationen","title":"Relationen","text":"Begriff Erkl\u00e4rung Injektiv (linkseindeutig) Wenn zu jedem y h\u00f6chsten ein x gibt Surjektiv (rechtstotal) Wenn es zu jedem y mindestens ein x gibt Bijektive Funktion Eine Funktion, welche injektiv und surjktiv ist ( Homogene Relation \\(A=B, R\\subseteq A\\times A\\) \u00c4quivalenzrelationen Eine reflexive, symmetrische und transitive Relation, in welcher alle Elemente zu einander eine Beziehung haben $x\\equiv_5y $ \\((x - y) \\text{ ist ein vielfaches von 5}\\)"},{"location":"21HS/DM/Summaries/01_summary_2022_01_17.html","title":"01 summary 2022 01 17","text":"<p>tags:     - summary     - DM title: DM Summary</p>"},{"location":"21HS/DM/Summaries/01_summary_2022_01_17.html#summary-2022-01-17","title":"Summary - 2022-01-17","text":"<ul> <li>Summary - 2022-01-17<ul> <li>Aussagenlogik<ul> <li>Gesetze</li> <li>Beweistechniken</li> </ul> </li> <li>Semantik</li> <li>Mengen</li> <li>Relationen<ul> <li>Hase Diagram</li> </ul> </li> <li>Volst\u00e4ndige Induktion</li> <li>Kleinster Verbrecher</li> <li>Teilbarkeit<ul> <li>Rechnenregeln ggT</li> <li>(Erweiterten) Euklischer Algorithmus</li> <li>Modulare Arithmethik</li> <li>Eulerische \\(\\varphi\\)-Funktion</li> <li>Chinesischer Restsatz</li> <li>Kleiner Satz von Fermat</li> </ul> </li> </ul> </li> </ul>"},{"location":"21HS/DM/Summaries/01_summary_2022_01_17.html#aussagenlogik","title":"Aussagenlogik","text":"Begriff Erkl\u00e4rung \\(\\top\\) (Tautologie) immer wahr \\(\\bot\\) (Wiederspruch) immer falsch \\(\\vee\\) oder \\(\\wedge\\) und <p>Bindung: \\(\\neg, \\wedge, \\vee, \\Rightarrow, \\Leftrightarrow\\)</p>"},{"location":"21HS/DM/Summaries/01_summary_2022_01_17.html#gesetze","title":"Gesetze","text":"<ul> <li>Distributivgesetzt:   \\(A \\wedge (B \\vee C) \\Leftrightarrow (A \\wedge B) \\vee (A \\wedge C)\\)</li> <li>Der Morgen:   \\(\\neg(A\\vee B) \\Leftrightarrow \\neg A \\wedge \\neg B\\)</li> <li>Implikation:   \\(A \\Rightarrow B \\Leftrightarrow \\neg A \\vee B\\)</li> <li>Kontraposition:   \\(A \\Rightarrow B \\Leftrightarrow \\neg B \\Rightarrow \\neg A\\)</li> <li>\u00c4quivalenz   \\((A \\Leftrightarrow B) \\Leftrightarrow (A \\Rightarrow B) \\wedge (B \\Rightarrow A) \\Leftrightarrow (\\neg A \\vee B) \\wedge (\\neg B \\vee A)\\)</li> </ul> Formel Erkl\u00e4rung \\(A(x):=\\text{\"x ist einfach\"}\\) Aussage \\(\\neg\\exists x\\in P A(x)\\) oder \\(\\forall x \\in P(\\neg A(x))\\) Keine Pr\u00fcfung ist einfach \\(\\exists x \\in P A(x) \\wedge (\\forall y,z\\in P(A(x)\\wedge A(y)\\Rightarrow x=y))\\) Genau eine Pr\u00fcfung ist einfach \\(\\exists x \\in P A(x) \\wedge (\\forall a, b, c \\in P (a\\neq b \\neq c \\Rightarrow \\neg(A(a) \\wedge A(b) \\wedge A(c)))\\) Genau zwei Pr\u00fcfungen sind einfach \\(\\exists a,b \\in P(a\\neq b \\wedge A(a) )\\)"},{"location":"21HS/DM/Summaries/01_summary_2022_01_17.html#beweistechniken","title":"Beweistechniken","text":"<ul> <li> <p>Direkten Beweis</p> </li> <li> <p>So veralgemeinern, dass der einte der Term gleich dem anderen Term ist</p> </li> <li> <p>Beweis durch Widerspruch</p> </li> <li> <p>Anstatt zu zeigen, dass die Aussage A immer wahr ist, wird bewiessen, dass A niemals falsch ist.     Also Anstatt \\(\\forall n (A(n) \\Rightarrow B(n)): true\\) soll man beweissen \\(\\neg (\\forall n(A(n)\\Rightarrow B(n))):false\\) ist</p> </li> <li> <p>Beweis durch (Gegen-) Beispiel</p> </li> <li> <p>Wenn beweissen werden soll, dass etwas immer korrekt oder immer falsch ist, kann mit ein korrekten, bzw. falschem Beispiel gezeigt werden, dass die Aussage falsch ist </p> </li> <li> <p>Beweis durch Kontraposition</p> </li> <li> <p>Es gillt die Aussage von der Form \\(A \\Rightarrow B \\Leftrightarrow \\neg B \\Rightarrow \\neg A\\)</p> </li> <li> <p>\u00c4quivalenz</p> </li> <li> <p>Da eine \u00c4quivalenz \\((A \\Leftrightarrow B) \\Leftrightarrow (A \\Rightarrow B \\wedge B \\Rightarrow A)\\) ist, kann einfach das zweitere bewiessen werden.</p> </li> </ul>"},{"location":"21HS/DM/Summaries/01_summary_2022_01_17.html#semantik","title":"Semantik","text":"Begriff Erkl\u00e4rung G\u00fclltig oder Wahr Bei einer spezifischen Belegung wahr Allgemeing\u00fclltig Bei allen Belegungen wahr Erf\u00fcllbar mind. eine Belegung ist erf\u00fcllbar Unerf\u00fcllbar immer falsch Wiederlegbar mind. einmal falsch; nicht umbedingt immer falsch Literale \\(\\neg a \\text{ oder } a\\) Negotions Normalform (NNF) Keine Implikationen und alle\\(\\neg\\) in Literale Disjunktive Normalform (DNF) Form:\\((L_1 \\wedge L_2 \\wedge ...)\\vee (L_3 \\wedge L_4) \\vee ...\\) Konjuktive Normalform (KNF) Form:\\(L_1 \\vee L_2 \\vee ...) \\wedge (L_3 \\vee L_4)\\wedge ...\\) Funktional Vollst\u00e4ndig Menge von Logischen Verkn\u00fcpfungen, welche die Funktionen\\(\\vee, \\wedge, \\neg, \\rightarrow\\) darstellen k\u00f6nnen"},{"location":"21HS/DM/Summaries/01_summary_2022_01_17.html#mengen","title":"Mengen","text":"Begriff Erkl\u00e4rung Nat\u00fcrliche Zahlen (\\(\\N\\)) \\([0; \\infty]\\) Ganze Zahlen (\\(\\Z\\)) \\([-\\infty;\\infty]\\) Rationale Zahlen (\\(\\mathbb Q\\)) Alle Zahlen, darstellbar durch einen Bruch Reele Zahlen (\\(\\R\\)) Alle Zahlen mit einem Komma (\\(\\pi\\), \\(e\\), 2.32, 2, ...) Intervallschreibweisse Ist immer im Zahlenbereich \\(\\R\\) Teilmenge (\\(X \\subseteq Y\\)) \\(\\forall x (x \\in X \\Rightarrow x \\in Y)\\) / X ist eine Teilmenge von Y, X=Y kann auch sein Echte Teilmenge (\\(X \\subsetneq Y\\)) \\(X \\subseteq Y \\wedge X \\neq Y\\) / X ist eine Teilmenge von Y, X kann nicht Y sein Potenzmenge (\\(\\mathcal P(X)\\)) Menge aller Teilmenge (\\(\\mathcal P(\\{0, 1\\})=\\{\\emptyset, \\{0\\}, \\{1\\}, \\{0, 1\\} \\}\\). Die M\u00e4chtigkeit ist \\(\\mathcal \\vert P(A)\\vert=2^{ \\vert A \\vert}\\); \\(\\mathcal P(A)=\\{x\\mid x \\subseteq A\\}\\) Partition Eine Menge von Teilmengen von A, welche nicht leer sind (\\(\\bigcup_{i\\in I}P_i=A\\)) (nicht leer, paarweise disjunkt, Vereinigung gibt Ursprungsmenge) Kardinalit\u00e4t/M\u00e4chtigkeit Anzahl Elemente in Menge Schnittmenge (\\(X \\cap Y\\)) Alle Elemente, welche in beiden enthalten sind (\\(X\\cup U=\\{x\\mid x \\in X \\wedge x \\in Y\\}\\))Distributivgesetz: \\(A\\cap(B\\cup C)=(A\\cap B)\\cup (A\\cap C)\\)DeMorgan: \\((C\\setminus A)\\cap(C\\setminus B)=C\\setminus(A\\cup B)\\) Vereinigung (\\(X \\cup Y\\)) Alle Elemente von beiden Mengen (\\(X\\cup U=\\{x\\mid x \\in X \\vee x \\in Y\\}\\)) Komplement (\\(X\\setminus Y)\\) Alle Elemente aus X, welche nicht in Y vorkommen (\\(X \\cap \\bar Y\\)) (nicht paarweise) Disjunkte Mengen Zwei Mengen teilen keine Elemente  paarwweise Disjunkte Mengen Alle Mengen teilen keine Elemente Abz\u00e4hlbare Menge Wenn eine surjektive Funktion \\(F: \\N \\rightarrow X\\) existiert:Abz\u00e4hlbar: \\(\\N\\times\\N\\) , \\(\\Z\\times\\Z\\), \u00dcberabz\u00e4hlbare Menge Wenn es keine surjektive Funktion \\(F: \\N \\rightarrow X\\) existiert\u00dcberabz\u00e4hlbar: \\(\\mathcal P(\\N)\\), \\([0;1]\\); Die Menge aller unendlichen Bin\u00e4rsequenzen (2. Diagonalargument)"},{"location":"21HS/DM/Summaries/01_summary_2022_01_17.html#relationen","title":"Relationen","text":"Begriff Erkl\u00e4rung Injektiv (linkseindeutig) Wenn zu jedem y h\u00f6chsten ein x gibt Surjektiv (rechtstotal) Wenn es zu jedem y mindestens ein x gibt Funktion (Relation) Eine Relation, bei welchem ein x Element nicht zwei y Werte gibt. Von einem Element d\u00fcrfen also nur maximal ein Pfeil wegzeigen. Bijektive Funktion Eine Funktion, welche injektiv und surjktiv ist Homogene Relation \\(A=B, R\\subseteq A\\times A\\) Wohldefiniertheit Eine Funktion, welche eine \u00c4quivalenzrelation als Argument nimmt, ist wohldefiniert, wenn \\(xRy \\Rightarrow F(x)=F(y)\\) bedeutet. \u00c4quivalenzrelationen Eine reflexive, symmetrische und transitive Relation, in welcher alle Elemente zu einander eine Beziehung haben Restklasse Eine Menge von Elementen in einer \u00c4quivalenzrelation, welche miteinander verbunden \\(x\\equiv_5y\\) \\((x - y) \\text{ ist ein vielfaches von 5}\\) transitiver Abschluss (\\(R^+\\)) Eine Relation \\(R^+\\), enh\u00e4lt zus\u00e4tzlich zu R, alle Relation, damit R transitiv wird reflexiv-transitiven Abschluss (\\(R^*\\)) Eine Relation \\(R^*\\), enh\u00e4lt zus\u00e4tzlich zu \\(R^+\\), alle Relationen, damit \\(R^+\\) reflexiv wird. DAG Ein gerichteten zyklenfreien Graphen ist ein Graph, welcher keine zyklen enh\u00e4lt Dipartir Graph  Ein Graph, welcher nicht auf einer Homogenen Relation funktioniert Ordnungsrelation Ordnung, welche sicherlich reflexiv, transitiv R-unvergleichbar Zwei elemente, wenn weder \\(xRy\\) und \\(yRx\\) gillt R-minimal Ein Element, wenn kein Pfeil auf das Element zeigen R-maximal Ein Element, wenn es keine Pfeile weg vom Element zeigen Pr\u00e4ordnung reflexiv und transitiv Halbordnung Eine Pr\u00e4ordnung (reflexiv und transitiv), welche auch noch antisymmetrisch ist (zyklenfrei) totale/lineare Ordnung Eine Halbordnung (reflexiv, transitiv und antisymmetrisch) ohne R-unvergleichbaren Elemente (zyklenfrei) Wohlordnung Eine totale Ordnung, bei welcher alle nicht leeren Teilmenge mindestens ein R-minimales Element (Element, auf welches keine Pfeile zeigen) enhalte (zyklenfrei) topologische Sortierung Einen Pfad von Elemente, welche alle miteinander verbunden sind. Matematisch ist dies eine Ordnung: \\((\\preceq) \\subseteq (M\\times M\\)). \\(a\\preceq b\\) sagt aus, dass a der Vorg\u00e4nger von b ist"},{"location":"21HS/DM/Summaries/01_summary_2022_01_17.html#hase-diagram","title":"Hase Diagram","text":"<p>Funktioniert nur auf Halbordnungen, welche DAGs sind (also zyklen frei). F\u00fcr gr\u00f6ssere Diagramme kann man alle Elemente mit ihren Nachfolgern aufschreiben und danach alle Nachfolger streichen, welche ein Nachfolger eines Nachfolgers sind. Es lohnt sich zudemmit dem R-maximalen Element zu starten.</p> <p></p>"},{"location":"21HS/DM/Summaries/01_summary_2022_01_17.html#volstandige-induktion","title":"Volst\u00e4ndige Induktion","text":"<ol> <li>IV - Induktions Verankerung: \\(A(0)\\), \\(A(1)\\), oder anderen Startwert</li> <li>IA - Induktions Annahme: \\(A(n)\\)</li> <li>IB - Induktions Behauptung: \\(A(n+1)\\)</li> <li>IS - Induktions Schluss: \\(A(n)\\Rightarrow A(n+1)\\)</li> </ol>"},{"location":"21HS/DM/Summaries/01_summary_2022_01_17.html#kleinster-verbrecher","title":"Kleinster Verbrecher","text":"<p>Es gibt eine Aussage \\(A(n), n\\in \\N\\), welche wahr sein soll.</p> <ol> <li>Behauptung: Es gibt ein \"kleinsten Verbrecher\" aka. die kleinste Zahl, welche die eigentlich Behaupt verletzt. (\\(A(n_0):f\\))</li> <li>Man versucht nun mit der kleinsten Zahl aus \\(\\N\\), \\(0\\): \\(A(0): t\\) \\(\\Rightarrow\\) Daher muss gelten \\(n&gt;0 \\Rightarrow k+1=n\\) (wobei \\(k\\in \\N\\))</li> <li>Nun kann \\(k+1\\) als \\(n\\) in \\(A(n)\\) eingesetzt werden (\\(A(k+1)\\)). Falls dies ein Wiederspruch ergibt, ist die Aussage \\(A(n)\\) wahr, da es keinen kleinsten Verbrecher gibt</li> </ol>"},{"location":"21HS/DM/Summaries/01_summary_2022_01_17.html#teilbarkeit","title":"Teilbarkeit","text":"Begriff Erkl\u00e4rung \\(x\\mid y\\) X teilt y (achtung Reihenfolge) \\(T(x)\\) Menge aller Teile von \\(x\\) (\\(T(15)=\\{1, 3, 5, 15\\}\\)) \\(\\pi(n)\\) Wie viel Primzahlen kleiner als n sind Prime Restklassen (\\(\\Z^*_{/7}\\)) Eine Menge von Elementen mit einem multiplikativen inversem Element Faktormenge (\\(X_{/R}\\)) Die Menge aller \u00c4quivalenzklassen von \\(X\\) modulo \\(R\\)\\(X_{/R}=\\{[x]_R\\mid x \\in X\\}\\) Peano-Axiomen Die Zahl 0 ist eine nat\u00fcrliche Zahl. Jede nat\u00fcrliche Zahl \\(k\\) hat gtenau einen Nachfolger \\(k+1\\), welcher auch eine nat\u00fcrliche Zahl ist. Die Zahl \\(0\\) ist die einzige Zahl, welc"},{"location":"21HS/DM/Summaries/01_summary_2022_01_17.html#rechnenregeln-ggt","title":"Rechnenregeln ggT","text":"<ul> <li>\\(n\\cdot m=kgv(n, m)\\cdot ggT(n, m) \\Rightarrow kgV(n, m)=\\frac{n \\cdot m}{ggT(n, m)}\\)</li> <li>\\(ggT(n, n)=n\\)</li> <li>\\(ggT(n, 1)=1\\)</li> <li>\\(ggT(n, 0)=n\\)</li> <li>\\(ggT(n, m)=ggT(n, m-n)\\)</li> <li>\\(ggT(n, m)=ggT(n, m-k\\cdot n)\\), wenn \\(k\\cdot n \\le m\\)</li> <li>\\(ggT(n, m)=a\\cdot n + b \\cdot m\\), wenn \\(x\\neq y\\) und \\(a,b \\in \\N\\)</li> </ul> <p>Um das \\(kgV(x, y)\\) zu bestimmen, wird eine Primfaktorzerlegung von \\(x\\) und \\(y\\) durchgef\u00fchrt. Danach werden die h\u00f6chsten Potenzen zusammen gerechnet. F\u00fcr den \\(ggT\\) werden die tiefsten Potenzen verwendet.</p>"},{"location":"21HS/DM/Summaries/01_summary_2022_01_17.html#erweiterten-euklischer-algorithmus","title":"(Erweiterten) Euklischer Algorithmus","text":"\\[ x_0=1\\\\ x_1=0\\\\ x_k=x_{k-2}-q_k\\cdot x_{k-1}\\\\ \\space \\\\ y_0=0\\\\ y_1=1\\\\ y_k=y_{k-2}-q_k\\cdot y_{k-1} \\]"},{"location":"21HS/DM/Summaries/01_summary_2022_01_17.html#modulare-arithmethik","title":"Modulare Arithmethik","text":"<p>f\u00fcr Multiplikation:</p> <ul> <li>neutrales Element: \\([1]_n\\)</li> <li>inverses Element:</li> <li>Nur Zahlen, welche teilefrmed sind (\\(ggT(Zahl, N)=1\\))</li> <li>Eine Zahl multipliziert mt ihrem inversen Element gibt \\(1\\)</li> <li>Kann mit dem Erweiterten Euklidischen Algorithmus berechnet werden:     \\(Zahlenbereich \\cdot x + Zahl \\cdot y=1\\) \\(\\Rightarrow y\\) ist das multiplikative Inverse. (Zahl muss kleiner sein als Zahlenbereich, sonst muss gewechselt werden)</li> </ul>"},{"location":"21HS/DM/Summaries/01_summary_2022_01_17.html#eulerische-varphi-funktion","title":"Eulerische \\(\\varphi\\)-Funktion","text":"<p>Findet die M\u00f6chtigkeit einer Prime Restklassen heraus:</p> <ol> <li>\\(\\varphi(n\\cdot m)=\\varphi(n)\\cdot \\varphi(m)\\), wobei gillt \\(ggT(n, m)=1\\)</li> <li>\\(\\varphi(p)=p-1\\), wobei gillt \\(p\\in \\mathbb P\\)</li> <li>\\(\\varphi(p^k)=p^k-p^{k-1}\\), wobei gillt \\(k\\in \\N_{\\gt0}\\)</li> </ol> <p>Beispiel:</p> \\[ |\\Z_{/8}^*|=\\varphi(8)=\\varphi(2^3)=2^3-2^{3-1} = 8 -4 =4\\\\ |\\Z_{/15}^*|=\\varphi(15)=\\varphi(3\\cdot5)=\\varphi(3)\\cdot \\varphi(5)\\\\ |\\Z_{/240}^*|=\\varphi(240)=\\varphi(2^4\\cdot3\\cdot5)=.. \\]"},{"location":"21HS/DM/Summaries/01_summary_2022_01_17.html#chinesischer-restsatz","title":"Chinesischer Restsatz","text":"<p>Es gibt garantiert eine L\u00f6sung, wenn alle Modulos paarweise teilerfremd sind (alle mit allen den \\(ggT\\) von \\(1\\) haben)</p> <p>Beispiel, um zu sehen, wie \\(a_1\\) und \\(m_1\\) zustande kommen: \\(\\(\\begin{aligned}   x\\equiv_3 2 &amp; \\rightarrow &amp;a_1=2 &amp;m_1=3\\\\   x\\equiv_5 7 &amp; \\rightarrow &amp;a_2=3 &amp;m_2=5\\\\   x\\equiv_7 2 &amp; \\rightarrow &amp;a_3=2 &amp;m_3=7 \\end{aligned}\\)\\)</p> <ol> <li>\\(M_k\\) berechnen: \\(M_k=\\frac{\\prod m_i}{m_k}\\)</li> <li>Das multiplaktive Inverse \\(N_k\\) f\u00fcr jedes \\(M_k\\) berechnen mit dem Module der Linie k</li> <li>Das Ergebnis mit \\(x=\\sum^n_{k=1}a_kM_kN_k\\) berechnen</li> </ol> <p>\\(x\\) ist im Modulo \\(\\prod_{i=1}m_i\\) (das Produkt von allen Modulos)</p>"},{"location":"21HS/DM/Summaries/01_summary_2022_01_17.html#kleiner-satz-von-fermat","title":"Kleiner Satz von Fermat","text":"<p>F\u00fcr \\((p \\in \\R \\wedge a \\in \\Z)\\wedge p \\not{|} a\\) gillt \\(a^{p-1}\\equiv 1 \\mod p\\)</p> <p>Beispiel: </p> \\[ \\begin{aligned} \\begin{gathered} 26^{123}\\mod 7 &amp; ggT(26, 7)=1\\\\ 26^{7-1}\\equiv_7 26^6\\equiv_7 1\\\\ 26^{123}\\equiv_7 (26^6)^{20}\\cdot 26^3\\equiv_7 1^20\\cdot 26^3\\equiv_7 5^3\\equiv_7(-2^3) \\equiv_7 -8 \\equiv_76 \\end{gathered} \\end{aligned} \\]"},{"location":"21HS/GED/Elektronik/Maschen%20und%20Knotensatz.html","title":"Knotenregel","text":"<p>Was in ein Kabel an Ladung(I) hinein geht, muss auch wieder raus.</p> <p>Mit der Knotenregel kann man erkl\u00e4ren, wieso in einer Parallelschaltung die Ladung sich aufteilt. Denn was in einen Knoten hinein geht, muss sich aufteilen.</p>"},{"location":"21HS/GED/Elektronik/Maschen%20und%20Knotensatz.html#maschensatz","title":"Maschensatz","text":"<p>Eine Masche ist ein \"Loop\" im Stromkreis. Alle Str\u00f6me (V) zusammen m\u00fcssen 0 ergeben. Mit dem kann man erkl\u00e4ren, wieso in Parallelschaltungen auf beiden Leitungen der Strom gleich bleibt. Bei einer Serienschaltung gibt es nur eine Masche, daher bleibt der Strom nicht gleich bei einer Serienschaltung.</p>"},{"location":"21HS/GED/Elektronik/Maschen%20und%20Knotensatz.html#elektronischebauteile","title":"Elektronischebauteile","text":"<ul> <li>Ohm'scher Leiter hat eine Lineare Spannungs-Strom-Charakteristik. Nicht-Ohm'scher Leiter hingegen nicht (z.B. LED's).</li> </ul>"},{"location":"21HS/GED/Elektronik/Maschen%20und%20Knotensatz.html#wiederstanden","title":"Wiederst\u00e4nden","text":"<ul> <li>Das Ohm'sche Gesetzt gillt: \\(U=R \\cdot I\\)</li> <li>Die Leistung : \\(P=U\\cdot I=\\frac {U^2} R = I^2R\\)</li> </ul>"},{"location":"21HS/GED/Elektronik/Maschen%20und%20Knotensatz.html#kondensatoren","title":"Kondensatoren","text":"<p>Ein Kondensator ist eine Art Feder, durch welche kein Strom fliessen kann. Beim Aufladen werden immer mehr Elektronen hinein gepumpt. Daher wird es immer schwieriger noch mehr Elektronen hinein zu pressen, je voller der Kondensator wird.</p> <ul> <li>Ladung kann mit \\(CU_c = Q\\) berechnen. C stellt dabei die Kapazit\u00e4t in Farad [F] and (nicht die Ladung)</li> <li>Ein Kondensator ist kein Ohm'sches Bauteil und folgt demnach nicht dem Ohm'schen gesetzt.   Anstatt kann folgende Exponentialfunktion f\u00fcr Q benutzt werden. \\(U_0\\) ist dabei die Spannungsquelle, C die Kapazit\u00e4t in Fahrad und R der Wiederstand, durch welcher der Strom fliessen muss: </li> <li>f\u00fcr zum Laden: \\(Q(t) = U_0\\cdot C (1 - e^{\\frac{-t}{R\\cdot C}})\\)</li> <li>f\u00fcr zum Entladen: \\(Q(t) = U_0\\cdot C (e^{\\frac{-t}{R\\cdot C}})\\)</li> <li>Um U (Strom) des Kondensators zu berechnen, einfach das \\(\\cdot C\\) aus der Gleichung entfernen, da \\(C\\cdot U_c=Q \\rightarrow U_c=\\frac Q C\\) bedeutet</li> </ul>"},{"location":"21HS/GED/Elektronik/Maschen%20und%20Knotensatz.html#schwinungen","title":"Schwinungen","text":"<p>//TODO</p>"},{"location":"21HS/GED/Elektronik/Maschen%20und%20Knotensatz.html#spule","title":"Spule","text":"<p>Wenn durch eine Spule Strom (V) fliesst, dann erzeugt dies ein Magnetfeld. Beim Hochfahren des Stromes (V) wird Energie ben\u00f6tig, um das Magnetfeld zu erzeugen. Wenn der Strom (V) zur\u00fcckgefahren wird, wird die Energie wieder freigegeben.</p> <ul> <li>Es gilt: \\(U=L\\frac {dI}{dt}\\)</li> <li>L ist die Induktivit\u00e4t in Henry [H]</li> <li>I Formel</li> </ul>"},{"location":"21HS/GED/Elektronik/Maschen%20und%20Knotensatz.html#lange-kabeldrahte","title":"Lange Kabel/Dr\u00e4hte","text":"<p>Der Wiederstand eines Drahtes kann mit der Formel \\(R=\\rho \\frac L A\\). Grunds\u00e4tzlich gillt je L\u00e4nger und je d\u00fcnner ein Draht ist, desto h\u00f6her ist der Wiederstand. Nat\u00fcrlich h\u00e4ngt es auch noch von \\(\\rho\\) (\\(mm^2m^{-1}...\\)), dem Spezifischer Wierstand, ab.</p>"},{"location":"21HS/GED/Elektronik/Maschen%20und%20Knotensatz.html#spannungsbander","title":"Spannungsb\u00e4nder","text":"<p>Da man im Computer nicht genau 0V oder 5V, definiert man Spannungsb\u00e4nder, in welcher eine Schaltung einen Input oder Output als 1 oder 0 erkennt.</p> <p>![](/res/2021-10-27-08-57-35-image.png</p>"},{"location":"21HS/GED/Physik/00_Formeln.html","title":"Formeln","text":"<p>In dieser Datei werden alle Formeln und Konstanten zusammen gefasst.</p> Prefix Exponent peta \\(10^{15}\\) tera \\(10^{12}\\) giga \\(10^9\\) mega \\(10^6\\) kilo \\(10^3\\) hecto \\(10^2\\) deca \\(10^1\\) - \\(10^0\\) dezi \\(10^{-1}\\) cento \\(10^{-2}\\) milli \\(10^{-3}\\) micro \\(10^{-6}\\) nano \\(10^{-9}\\) pico \\(10^{-12}\\) femto \\(10^{-15}\\)"},{"location":"21HS/GED/Physik/00_Formeln.html#elektronik","title":"Elektronik","text":"Thema Formeln Erkl\u00e4rung \\(I [A]\\) Strom \\(U [V]\\) Spannung Wiederst\u00e4nde \\(U=R\\cdot I\\) Formel f\u00fcr Ohmnische Wiederst\u00e4nde Wiederst\u00e4nde \\(R_{12}=\\frac 1 {\\frac 1 {R_1} + \\frac 1 {R_2}}\\) Formel zum zwei parallele Wiederst\u00e4nde zusammen zu fassen Kondensator \\(CU_c=Q\\) Der Zusammenhang zwischen der Spannung \\(U\\) und der Ladung \\(Q\\) Kondensator \\(Q(t)=CU_0(1-e^{-\\frac t{RC}})\\) Wie sich die Ladung \\(Q\\) beim Laden Kondensator \\(U_C(t)=\\frac{Q(t)}{C}=U_0(1-e^{-\\frac t{RC}})\\) Wie sich die Spannung \\(U\\) beim Laden verhaltet Kondensator \\(I(t)=\\frac{U_0}{R}e^{-\\frac t {RC}}\\) Wie sich der Strom \\(I\\) beim Laden verhaltet Kondensator \\(\\tau=R\\cdot C\\) Der Kondensator f\u00e4llt/steigt auf ca \\(\\frac 1 e\\approx0.37\\) auf/ab in der Zeit \\(\\tau\\)"},{"location":"21HS/GED/Physik/00_Formeln.html#themische-strahlungen","title":"Themische Strahlungen","text":"Konstante Erkl\u00e4rung \\(c=3\\cdot 10^8m/s\\) Lichtgeschwindigkeit im Vakum \\(h=6.626\\cdot10^{-34} Js\\) Planck'sche Konstante Formel Erkl\u00e4rung \\(c=\\lambda \\cdot\\nu\\) Dies ist der Zusammenhang zwischen der Wellenl\u00e4nge \\(\\lambda\\)\u00a0und der Frequenz \\(\\nu\\)\u00a0. \\(c\\)\u00a0ist die Lichtgeschwindigkeit \\(E=h\\nu\\) Die Energie einer Strahlung mit der Frequenz \\(\\nu\\). \\(h\\)\u00a0ist die Plank'sche Konstante \\(\\rho(\\nu)=1-\\alpha(\\nu)\\) Umrechnungs Formel zwischen Reflektionskoeffizenten (\\(\\rho\\)) und Absorptionskoeffizenten (\\(\\alpha\\))"},{"location":"21HS/GED/Physik/00_Formeln.html#noch-zu-lernen","title":"Noch zu lernen","text":"<ul> <li>B-Felder induziert E-Felder</li> <li>In welche Richtung positive E-Felder anziehen oder abstossen</li> </ul>"},{"location":"21HS/GED/Physik/01_ch%C3%BCgelif%C3%BCsik.html","title":"Ch\u00fcgeli F\u00fcsik","text":""},{"location":"21HS/GED/Physik/01_ch%C3%BCgelif%C3%BCsik.html#kraft","title":"Kraft","text":"<p>\\(\\vec F = m \\cdot \\vec a\\)</p> <p>Diese Formel nimmt einiges an:</p> <ul> <li>Bewegung in einer Dimension (keine Vektoren)</li> <li>Konstante Beschleunigung (a = const.)</li> <li>Start bei \\(s(0)=0\\)</li> <li>Anfangsgeschwindigkeit bei </li> </ul>"},{"location":"21HS/GED/Physik/01_ch%C3%BCgelif%C3%BCsik.html#beschleunigung-und-co","title":"Beschleunigung und co.","text":"<p>Hier sind einige g\u00e4ngige Formeln aufgelistet, welche hilfreich bei Beschleunigung sind. In der obersten Reihe steht, was die Formel ergeben soll. In der ersten Spalte, was sich nicht \u00e4ndert und somit nicht in der Formel erw\u00e4hnt wird.</p> t s v a t - \\(s=\\frac{v^2}{2a}\\) \\(v=\\sqrt{2as}\\) \\(a=\\frac{v^2}{2s}\\) s \\(t=\\frac{v}{a}\\) - \\(v=at\\) \\(a=\\frac{v}{t}\\) v \\(t=\\sqrt{\\frac{2s}{a}}\\) \\(s=\\frac{at^2}{2}\\) - \\(a=\\frac{2s}{t^2}\\) a \\(t=\\frac{2s}{v}\\) \\(s=\\frac{vt}{2}\\) \\(v=\\frac{2s}{t}\\) -"},{"location":"21HS/GED/Physik/01_ch%C3%BCgelif%C3%BCsik.html#energie","title":"Energie","text":"<p>Energie ist \\(Kraft \\cdot Strecke\\). Es gilt also die Formel \\(E=F\\cdot s [J]\\). Die Masseinheit \\(J\\) kann auch als \\(\\frac{kgm^2}{s^2}\\) </p>"},{"location":"21HS/GED/Physik/02_Elektrotechnik.html","title":"Elektrotechnik","text":""},{"location":"21HS/GED/Physik/02_Elektrotechnik.html#strom-spannung-und-leistung","title":"Strom, Spannung und Leistung","text":"<p>Ampere ist die Einheit des Stromes \\(I\\) und ist Coulomb pro Sekunde \\([Cs^{-1}]\\). </p> <p>Die H\u00f6he zwischen zwei Energiepotentialen nennt sich die Spannung \\(U\\) (\\(U(\\vec r_A,\\vec r_B)=\\varphi(\\vec r_A)-\\varphi(\\vec r_B)\\)). </p> <p>Spannung kann aber auch \u00fcber Arbeit definiert werden. Die Spannung zwischen zwei Punkten \\(A\\) und \\(B\\) ist die Energie pro Ladung, welche frei wird, wxenn die Ladung von \\(A\\) nach \\(B\\) bewegt wird: \\(U=\\int^{\\vec r_B}_{\\vec r_A}\\vec E d\\vec r\\).  Die kinetische Energie, welche eine Ladung \\(q\\) gewinnt, wenn sie eine Spannung \\(U\\) \"herunterf\u00e4llt\" betr\u00e4gt: \\(\\Delta E_{kin}=\\int^{\\vec r_B}_{\\vec r_A}\\vec q\\cdot E d\\vec r=q\\cdot U\\)</p>"},{"location":"21HS/GED/Physik/02_Elektrotechnik.html#schaltung","title":"Schaltung","text":""},{"location":"21HS/GED/Physik/02_Elektrotechnik.html#knotenregel","title":"Knotenregel","text":"<p>Die Knotenregel besagt, dass was in einen Knoten hinein geht, muss auch wieder aus dem Knoten hinaus.</p> <p>Oder \\(I_1=I_2+I_3\\) bzw. \\(I_6=i_5+I_4\\)</p>"},{"location":"21HS/GED/Physik/02_Elektrotechnik.html#maschenregel","title":"Maschenregel","text":"<p>Die Maschenregel besagt, dass alle Spannungen in einer Masche zusammen \\(0\\) ergeben m\u00fcssen. Man rechnet <code>plus</code> wenn es in die Referenzrichtung eines Bauteils geht und <code>minus</code>, wenn es gegen die Referenzrichtung geht.</p> <p>Ebenfalls wichtig zu erw\u00e4hnt ist, dass eine Batterie in die andere Richtung zeigt, als die anderen Bauteile (Dies ist einwenig komisch im Beispiel oben). </p> <p>In der gr\u00fcnen Maschen sieht man, wie dies aussehen kann, f\u00fcr eine Masche, welche nicht \u00fcber die Baterie geht: \\(U_4-U_5=0\\)</p>"},{"location":"21HS/GED/Physik/02_Elektrotechnik.html#batterien","title":"Batterien","text":"<p>Reale Batterien haben einen Innenwiederstand, welcher in Serie mit der Batterie geschalten ist. Dass heisst, dass die realte Spanung einer Batterie kleiner als \\(U_0\\) ist, da \\(U_{in}\\) abgezogen werden muss.</p>"},{"location":"21HS/GED/Physik/02_Elektrotechnik.html#wiederstand","title":"Wiederstand","text":"<p>Ein Wiederstand folgt dem Ohm'sche Gesetzt. Dass heisst, ein Wiederstand kann mit \\(U=R\\cdot I\\) berechnet werden.</p> <p>Da f\u00fcr die Leistung gillt \\(P=U\\cdot I\\) , kann in diese Formel das Ohm'sche Gesetzt eingesetzt werden, um die Formel \\(P=\\frac {U^2} R=I^2R\\) zu bekommen.</p> <p>Wegen der Knoten und Maschenregeln verhalten sich Wiederst\u00e4nde (wie auch andere Bauteile) anderst, jenach dem, ob sie Parallel oder Serial angeschlossen sind.</p> Name Erkl\u00e4rung Bild Parallel geschaltet In einer Parallelschaltung m\u00fcssen Wiederst\u00e4nde folgendermassen zusammen gefasst werden: \\(R_{12}=\\frac 1 {\\frac 1 {R_1} + \\frac 1 {R_2}}\\) Seriel geschaltet In einer Serielschaltung m\u00fcssen Wiederst\u00e4nde folgendermassen zusamengefasst werden: \\(R_{12}=R_1+R_2\\)"},{"location":"21HS/GED/Physik/02_Elektrotechnik.html#kondensator","title":"Kondensator","text":"<p>Ein Kondensator (oder Capacitor) kann man sich als Feder vorstellen, welche aus zwei Metallplatten nahe bei einander bestehen. Es wird Strom hinein \"gepumpt\". Dies wird immer schwerer, je voller der Kondensator wird, bis am Ende der Kondensator voll ist. Das zweite wichtige an einem Kondensator ist, dass keine Elektronen durch ihn durch fliessen k\u00f6nnen. Anstelle dessen sammeln sich auf der einen Seite mehr Elektronen an, auf der anderen Seite werden die bereits vorhanden Elektronen abgesaugt. </p> <p></p> formel Erkl\u00e4rung \\(\\frac {dQ}{dt}=I\\) Die Ver\u00e4nderungsrate der Ladung, ist der Strom \\(I\\) \\(CU_c=Q\\) Der Zusammenhang zwischen der Spannung \\(U [V]\\) und der Ladung \\(Q\\) abh\u00e4ngig von der Kapazit\u00e4t \\(C [F]\\) in Farad \\(Q(t)=CU_0(1-e^{-\\frac t{RC}})\\) Wie sich die Ladung \\(Q\\) beim Laden \\(U_C(t)=\\frac{Q(t)}{C}=U_0(1-e^{-\\frac t{RC}})\\) Wie sich die Spannung \\(U\\) beim Laden verhaltet \\(U_C(t)=U_0\\cdot e^{-\\frac t {RC}}\\) Wie sich die Spannung \\(U\\) beim Entladen verhaltet \\(I(t)=\\frac{U_0}{R}e^{-\\frac t {RC}}\\) Wie sich der Strom \\(I\\) beim Laden verhaltet \\(\\tau=R\\cdot C\\) Die Zeitkonstante \\(\\tau\\) . Der Strom des Kondensator f\u00e4llt auf ca \\(\\frac 1 e\\approx0.37\\) ab in der Zeit \\(\\tau\\) oder steigt auf \\(1-\\frac 1 e\\approx0.63\\) in \\(\\tau\\) an, wenn der Kondensator geladen wird"},{"location":"21HS/GED/Physik/02_Elektrotechnik.html#spulen","title":"Spulen","text":"<p>Wenn durch ein Draht Strom fliesst, entsteht ein Magnetfeld. Dies ist ebenfalls der Fall bei einer Spule. Wenn der Strom hochgefahren wird, dann wird ein Magnetfeld aufgebaut. Dies ben\u00f6tigt aber Energie, was wiederum einen Wiederstand erzeugt.</p> <p>Wenn der Strom abgebaut wird, wir die Energie des Magnetfeldes wieder zur\u00fcck in die Spannung gespiessen und \u00fcber der Spule entsteht eine Spannung, welche den Strom antreibt.</p> <p>Die Richtung des Magnetfeldes findet man heraus, in dem man die Rechtehand nimmt und mit dem Daumen in die Ricthung des <code>-</code> zeigt, bzw. die Stromrichtung auf dem Schaltungsplan (nicht die physikalische Stromrichtung, die ist in die andere Richtung). </p> <p></p> Formel Erkl\u00e4rung \\(U_L=L\\frac{dI}{dt}\\) Die Ver\u00e4nderungsrate von dem Strom \\(I\\) mit der Konstante \\(L [Henry]\\) multipliziert, ergibt die Spannung"},{"location":"21HS/GED/Physik/02_Elektrotechnik.html#ungedampfte-schwingkreise","title":"Unged\u00e4mpfte Schwingkreise","text":"<p>In einem Schwingungskreis, schwingen die Elektronen zwischen den zwei Platten des Kondensators hin und her. Dies kann man in die folgende Schritte unterteilen:</p> <ol> <li>Der Kondensator ist geladen und es herrscht eine Spanung \\(U_0\\) \u00fcber dem Kondensator. Der Schalter ist aber noch offen.</li> <li>Der Schalter \\(s_1\\) wurde geschlossen und der Strom fliesst. Wegen dem Maschensatz muss \\(U_C=U_L\\)  sein. Da die Spannung \\(U_C\\)w\u00e4chst, muss auch der Strom \\(I\\) wachsen und somit ein Magnetfeld \u00fcber L entstehen.</li> <li>Der Strom \\(I\\) und somit auch das Magnetfeld \\(B\\) sind maximal. Irgendwann wird der Kondensator leer sein (Auf beiden Seiten der Platte sind gleich viele Elektronen) und \\(U_L\\) und \\(UC\\) sind 0. Somit gilt auch \\(I=0\\). </li> <li>Da nun der Strom in der Spule freigesetzt wird, l\u00e4dt sich der Kondensator wieder auf (allerdings mit einem anderen Vorzeichen) und so entsteht wieder eine Spannung \\(U_C\\) \u00fcber dem Kondensator.</li> <li>So bald die Spule \"leer\" ist, wechselt die Stromrichtung wieder</li> <li>Der Zyklus wiederholt sich nun wiede</li> </ol> Formel Erkl\u00e4rung \\(Q(t)=CU_0\\cdot \\cos(\\frac 1 {\\sqrt {LC}}\\cdot t)\\) Die Ladung \\(Q\\) eines Schwinungskreises \\(I(t)=-\\sqrt {\\frac C L}\\cdot U_0\\cdot \\sin(\\frac 1 {\\sqrt {LC}}\\cdot t)\\) Der Strom \\(I\\) eines Schwinungskreises \\(U_L(t)=-\\frac 1 {\\sqrt{LC}}\\cdot U_0\\cdot \\cos(\\frac 1 {\\sqrt{LC}} \\cdot t)\\) Die Spannun \\(U_L\\) eines Schwinungskreises \\(f=\\frac 1 {2\\pi\\sqrt{LC}}\\) Die Frequenz \\(f\\), mit welcher der Schwingunskreis schwingt \\(T=2\\pi\\sqrt{LC}\\) Die Periodendauer \\(T\\), welche eine Schwinung des Schwingungskreis ben\u00f6tigt"},{"location":"21HS/GED/Physik/02_Elektrotechnik.html#gedampfte-schwingungskreise","title":"Ged\u00e4mpfte Schwingungskreise","text":"<p>Der Strom im Schwinungskreis wird schw\u00e4cher, wenn \\(R &lt; 2\\sqrt {\\frac L C}\\)  (oder wenn \\(\\frac{R^2}{4L^2}&gt;\\frac 1 {LC}\\) ist) Wenn dies gegeben ist, dann ist es ein ged\u00e4mpfter Schwingungskreis.</p> Formel Erkl\u00e4rung \\(Q(t)=Q_0e^{-\\frac t \\tau}\\cos(\\omega_dt-\\phi_0)\\) Die Ladung des Schwinungskreis1 \\(f=\\frac 1 {2\\pi}\\sqrt{\\frac 1 {LC} -\\frac{R^2}{4L^2}}\\) , \\(T=\\frac 1 f\\) Die (Kreis-)frequenz \\(\\omega_d\\) \\(\\tau=\\frac{2L} R\\) Die Zeitkonstante \\(\\tau\\) der D\u00e4mpfung. Der Strom des Kondensator f\u00e4llt/steigt auf ca \\(\\frac 1 e\\approx0.37\\%\\) auf/ab in der Zeit \\(\\tau\\)"},{"location":"21HS/GED/Physik/02_Elektrotechnik.html#low-pass-und-high-pass-filter","title":"Low-Pass und High-Pass-Filter","text":"<p>Bei einem Low-Pass-Filter werden die tiefen Frequenzen durchgelassen und die Hochen weggefiltert.</p> <p>Bei einem High-Pass-Filter ist es umgekehrt und die hochen Frequenzen werden duch gelassen und die tiefen weggefiltert.</p> <p></p> <p>\u00dcber dem Wiederstand misst man ein Signal, bei welchem die tiefen Frequenzen ged\u00e4mpft wurden und die hochen Frequenzen fast unver\u00e4ndert. Dies w\u00e4re ein High-Pass-Filter.</p> <p>Hingegen \u00fcber dem Kondensator misst werden die hochen Frequenzen ged\u00e4mpft und die tiefen durchgelassen, was ein Low-Pass-Filter ist.</p>"},{"location":"21HS/GED/Physik/02_Elektrotechnik.html#draht","title":"Draht","text":"<p>Der Wiederstand in einem Kabel ist ungef\u00e4hr: \\(R=\\rho\\frac L A\\), wobei \\(\\rho\\) den <code>spezifischen Wiederstand</code> mit der Einheit \\([mm^2m^{-1}\\Omega]\\). \\(L\\) ist die L\u00e4nge in \\([m]\\) und \\(A\\) ist die Querschnittsfl\u00e4che in \\([mm^2]\\).</p>"},{"location":"21HS/GED/Physik/02_Elektrotechnik.html#karnaugh-veitsch-diagramme","title":"Karnaugh-Veitsch Diagramme","text":"<p>Ein KV-Diagram kann praktisch sein, um eine Wahrheitstabelle mit vier Inputs in eine Schaltung zu verwandeln.</p> <p>Daf\u00fcr wird zuerst die Wahrheitstabelle in das folgende Raster einf\u00fchrt. Dabei ist oben, bzw. auf der linken Seite das erste Bit und auf der unteren/rechten Seite das linke Bit. Das Feld oben rechts stellt also f\u00fcr den Wert aus der Wahrheitstabelle A=1, B=0, C=0, D=0. </p> <p></p> <p>Wenn dies getan ist, versucht man Bl\u00f6cke mit Einsen zu finden. Die Bl\u00f6cke k\u00f6nnen 1, 2, 4, 8 oder 16 lang und/oder breit sein. Falls es egal ist, ob ein Input <code>0</code> oder <code>1</code> ist, kann er so betrachtet werden, dass es sch\u00f6nere Bl\u00f6cke gibt. Ebenfalls wichtig, ein Block darf \u00fcber die Kante hinausgehen.</p> <p></p> <p>Im letzten Schritt wird nun aus den Bl\u00f6cken Und-Schaltungen gebaut. Dabei m\u00fcssen zwei Dinge beachtet werden:</p> <ol> <li>Wenn ein Block \u00fcber den not und \"normalen\" Block geht (z.B. A und not-A), dann muss das And-Gate keine Verbindung zu diesem Input haben, da es in beiden F\u00e4llen true ist.</li> <li>Wenn ein Block nur \u00fcbr ein Block geht (z.B. nur \u00fcber den A oder nur den not-A Block), dann muss das And-Gate mit diesem Input verbunden sein.</li> </ol> <p>Hier sieht man noch das Beispiel f\u00fcr die oberigen Bl\u00f6cke.</p> <p></p>"},{"location":"21HS/GED/Physik/02_Elektrotechnik.html#transformer","title":"Transformer","text":""},{"location":"21HS/GED/Physik/02_Elektrotechnik.html#stromnetz","title":"Stromnetz","text":"<p>In unserem Stromnetzt werden mehrere Spannungen gen\u00fctzt. Zum einten m\u00f6chte man hohe Spannungen f\u00fcrs Transportieren von Strom ben\u00fctzten, da dies um einiges effizienter ist. Allerdings ist es zu gef\u00e4hrlich Hochspannung direkt im Haus zu gebrauchen. Daher hat man vier Netzebenen, welche mit Transformern gekoppelt sind.</p> <ul> <li>1 Ebene - H\u00f6chstspannungsebene: 380kV, bzw. 220 kV aus dem Kraftwerk oder vom Ausland</li> <li>3 Ebene - Hochspannungsebene: 36kV - 150kV: \u00dcberregionale Verteilungsnetzte</li> <li>5 Ebene - Mittelspannungsebene: 1kV - 36kV: Regionale Verteilungsnetzte</li> <li>7 Ebene - Niederspannungsebene: &lt; 1kV: Lokale Verteilungsnetzte</li> </ul> <p>Die Ebenen 2, 4 und 6 sind die Transformatorenebenen. Auf diesen Ebenen wird der Strom auf die n\u00e4chst tiefere oder h\u00f6here Ebene transformiert.</p> <p></p>"},{"location":"21HS/GED/Physik/02_Elektrotechnik.html#wechsel-vs-gleichstrom","title":"Wechsel- vs. Gleichstrom","text":"<p>Man hat sich in der Vergangenheit auf Wechselstrom geeinigt, weil es relativ einfach ist, Wechselstrom zu transformieren. Heute ist dies aber auch mit Gleichstrom m\u00f6glich. Gleichstrom erzeugt weniger Verl\u00fcste, wenn transportiert auf lange Streckenen, als Wechselstrom, da Wechselstrom nah an der Kabeloberfl\u00e4chse fliest und daher ein st\u00e4rkeres Magnetfeld erzeugt.</p> <p></p> <p>Der \\(U_{Eff}\\) kann mit der folgender Formel berechnet werden: \\(U_{Eff}=\\frac{U_S}{\\sqrt 2}\\) . Dies berechnet den quadratischen Mittelwert einer Wechselspannung.</p> <p>Der Sinus kann mit der folgenden Formel angegebene werden: \\(f(t)=U_{Eff}\\cos(\\omega\\cdot t)=U_{Eff}\\cos(f\\cdot 2\\pi\\cdot t)\\)</p>"},{"location":"21HS/GED/Physik/02_Elektrotechnik.html#drehstrom","title":"Drehstrom","text":"<p>(Siehe Script_GED_Lect_3_4.pdf)</p> <p></p> <p></p> <p>Drehstrom ist praktisch f\u00fcr Motoren, da es keine \"Totenp\u00fcnkte\" gibt, an dem ein Magnet stoppen k\u00f6nnte. Zudem sind alle H\u00e4user in der Schweiz an einem Drehstrom angeschlossen.</p> <p></p> <p>Auf den Aussenleiter wird der Strom \"transportiert\" und stehen gegen\u00fcber der Erde unter einer Spannung von 230V. </p> <p>Der Neutralleiter ist der \"Ausgang\" f\u00fcr die Elektronen, welche \u00fcber die Aussenleiter hinein gepumpt werden.</p>"},{"location":"21HS/GED/Physik/02_Elektrotechnik.html#gefahr-durch-strom","title":"Gefahr durch Strom","text":"<p>Wie gef\u00e4hrlich Strom ist h\u00e4ngt von der Stromst\u00e4rke und der Dauer ab. </p> <p>Gefahrebereiche:</p> <ol> <li>Wird nicht wahrgenommen, da der Strom zu klein ist</li> <li>Kribbeln, Kr\u00e4mpfte, aber keine bleibenden Sch\u00e4den</li> <li>Stromquelle kann wegen Museklverkrampfung nicht mehr losgelassen werden (bei Gleichstrom)</li> <li>T\u00f6dlich, wegen z.B. Herzkammerflimmern</li> </ol>"},{"location":"21HS/GED/Physik/03_Elektromagnetismus.html","title":"Elektromagnetismus","text":""},{"location":"21HS/GED/Physik/03_Elektromagnetismus.html#formeln","title":"Formeln","text":"Formel Erkl\u00e4rung $\\vec F_{12}=\\frac 1 {4\\pi\\varepsilon_0}\\cdot \\frac {Q_1Q_2}{ \\vec r_{12} $\\vec E(\\vec r)=\\frac 1 {4\\pi\\varepsilon_0}\\cdot \\frac Q { \\vec r - \\vec r_Q \\(\\vec F =q\\vec E(\\vec r, t)\\) Die Kraft \\(\\vec F\\), mit welcher das Feld \\(\\vec E\\) die Probeladung \\(q\\) beschleunigt \\(\\vec F_L=q\\cdot(\\vec v\\times\\vec B)\\) Die Kraft, eines Magnetfeldes auf eine Ladung \\(q\\), welche sich mit \\(\\vec v\\) bewegt. $m=\\frac{rq \\vec B <p>Auf dem TI-nspire cx gibt es den Befehl \\(crossP(x, y)\\), um mit den Vektoren \\(\\vec x\\) und \\(\\vec y\\) ein Kreuzprodukt zu rechnen.</p> <p>Das Skalarprodukt ist folgendermassen definiert: \\(\\vec a \\cdot \\vec b=|\\vec a| \\cdot |\\vec b|\\cdot \\cos(\\alpha)\\)  Aus dem kann geschlossen werden, dass wenn \\(\\alpha=90\u00b0\\) , bzw. die Vektoren \\(\\vec a\\) und \\(\\vec b\\) senkrecht aufeinander stehen, dass das Skalarprodukt <code>0</code> is</p>"},{"location":"21HS/GED/Physik/03_Elektromagnetismus.html#linienintegrale","title":"Linienintegrale","text":"<p>\\(W=\\int_\\gamma\\vec F\\cdot d\\vec \\gamma\\)</p> <p>Arbeit wurde in der BMS als \\(W=F\\cdot s\\) definiert. Nun kann aber \\(F\\) und \\(s\\) auch Vektoren sein. Hier kommt das Linienintegral ins Spiel, denn mit diesem kann man die Arbeit mit Vektoren ausrechnen.</p> <p>Der Vektor \\(\\vec F\\) und \\(\\vec \\gamma\\) m\u00fcssen nicht umbedingt in dieselbe Richtung zeigen. Wenn man z.B. einen Schlitten zieht, hat die Kraft \\(\\vec F\\) ca. eine 45\u00b0 gegen oben, w\u00e4hrend \\(\\vec \\gamma\\) die Strecke des Schlittens darstellt.</p> <p>Spannung kann auch als Linienintegral angesehen werden: \\(U(\\gamma)=\\int_\\gamma\\vec E \\cdot d\\vec \\gamma\\)</p>"},{"location":"21HS/GED/Physik/03_Elektromagnetismus.html#spezialfalle","title":"Spezialf\u00e4lle","text":"Name Formel Bild KreisDas Vektorfeld liegt \u00fcberall tangential an der Kurve und alle Vektoren haben dieselbe L\u00e4nge. \\(\\int_\\gamma\\vec U\\cdot d\\vec\\gamma =2\\pi r\\vert\\vec U\\vert\\) RechteckDas Vektorfeld ist parallel zu zwei Seiten (A, C) des Rechteck. Entlang einer Seite haben die Vektoren eine konstante Gr\u00f6sse \\(\\int_\\gamma\\vec U \\cdot d\\vec \\gamma=aU_1-aU_5\\)"},{"location":"21HS/GED/Physik/03_Elektromagnetismus.html#flussintegrale","title":"Flussintegrale","text":"<p>Beim Flussintegral wie viel Volumen \\(vdt\\) fliesst durch \\(A\\), wenn es die Geschwindigkeit \\(\\vec U\\) hat. Dies kann als Integral geschrieben werden, in GED wird allerdings nur folgende Spezialf\u00e4lle behandelt.</p> <p></p> <p>\\(U\\) sind in diesen Formel die L\u00e4nge der Pfeile.</p>"},{"location":"21HS/GED/Physik/03_Elektromagnetismus.html#maxwellgleichungen","title":"Maxwellgleichungen","text":""},{"location":"21HS/GED/Physik/03_Elektromagnetismus.html#geschlossene-und-nicht-geschlossene-flachen","title":"Geschlossene und nicht-geschlossene Fl\u00e4chen","text":"<p>Eine geschlossene Fl\u00e4che hat keinen Rand (wie zB. eine Kugel) und es gibt ein klares Innen und Aussen.</p> <p>Eine nicht geschlossene Fl\u00e4che hat einen Rand. </p>"},{"location":"21HS/GED/Physik/03_Elektromagnetismus.html#gausssche-gesetzt","title":"Gauss'sche Gesetzt","text":""},{"location":"21HS/GED/Physik/03_Elektromagnetismus.html#metalle","title":"Metalle","text":""},{"location":"21HS/GED/Physik/03_Elektromagnetismus.html#rechte-hand-regel","title":"Rechte-Hand Regel","text":""},{"location":"21HS/GED/Physik/03_Elektromagnetismus.html#rechte-hand-regel-2","title":"Rechte-Hand Regel 2","text":"<p>Wenn der Daumen in die technische Stromrichtung zeigt, dann zeigen die Finger den Umlaufsinn des \\(\\vec B\\)-Feldes an.</p>"},{"location":"21HS/GED/Physik/03_Elektromagnetismus.html#vektorfelder","title":"Vektorfelder","text":"\\[ \\vec E (x, y, z, t)=\\begin{bmatrix} E_x(x, y, z, t) \\\\ E_y(x, y, z, t) \\\\ E_z(x, y, z, t) \\\\ \\end{bmatrix} \\] <p>Ein Vektor kann ein 2D oder 3D Koordinatensystem sein, in welchem Vektoren in eine Richtung zeigen. Diese Richtung kann zus\u00e4tzlich auch noch von der Zeit abh\u00e4ngig sein.</p>"},{"location":"21HS/GED/Physik/03_Elektromagnetismus.html#magnetfeld","title":"Magnetfeld","text":"<p>\\([\\vec B(\\vec r, t)]=\\frac {Ns}{Cm}=\\frac{\\text{Newton Sekunden}}{\\text{Coulomb Meter}}=\\frac{kg}{s C} = \\text{Tesla}\\)</p> <p>Ein Magnetfeld wird in Teslas angegeben. Dabei ist ein Tesla kg pro Coulomb Sekunde oder Newton Sekunden pro Coulomb Meter.</p> <p>Um zu berechnen, mit vieviel Kraft ein Objekt mit einer Ladung beeinflusst wird, gibt es folgende Formel: \\(\\vec F = q(\\vec v \\times \\vec B)\\)</p>"},{"location":"21HS/GED/Physik/03_Elektromagnetismus.html#elektrofeld","title":"Elektrofeld","text":"<p>\\([\\vec E (\\vec r, t)]=\\frac N C = \\frac V M = \\frac{kg}{ms^3A}\\)</p> <p>Ein Elektrofeld wird Newton pro Coulomb, Volt pro Meter oder Kilogram pro Meter Sekunden\u00b3 Amper angegeben. Die Einheiten bedeuten dasselbe (Coulomb = Amper Sekunde)</p> <p>Wenn ein Leiter positiv geladen ist, wirkt er abstossend zu Elektronen, wenn ein Leiter negative geladen ist, dann wirkt er anziehend. Zu dem sind die Pfeile im senkrecht auf dem Leiter.</p> <p></p> <p>Um das Elektrofeld einer einzuelne Ladung zu berechnen, kann die folgende Formel verwendet werden</p>"},{"location":"21HS/GED/Physik/03_Elektromagnetismus.html#elektrofelder-und-magnetfelder-zusammen","title":"Elektrofelder und Magnetfelder zusammen","text":"<p>Zeitlich ver\u00e4nderliche B-Felder erzeugen zeitlich ver\u00e4nderliche E-Felder, welche wiederum zeitlich ver\u00e4nderliche B-Felder erzeugen. Diesen Effekt f\u00fchrt zu einer Welle, welche sich ausbreitet.</p> <p>Initialisiert kann es z.B. von einer Antenne werden, welche nichts anderses als Str\u00f6me zeitlich ver\u00e4ndert durch einen Draht schickt.</p> <p></p>"},{"location":"21HS/GED/Physik/03_Elektromagnetismus.html#magnete","title":"Magnete","text":"<p>Magnete haben immer einen Nord- und S\u00fcdpol. Wenn man ein Magnet trennt, entstehen zwei neue Magnete, mit jeweils einem Nord- und S\u00fcdpol.  </p> <p>Wie auch bei elektrischen Feldern kann man auch bei magnetischen Feldern Linien zeichnen.</p> <p></p> <p>Magnete wirken eine Kraft auf bewegte Ladung  aus. Auf ruhende Ladung hat es keinen Effekt. Diese Kraft nennt sich Lorentz-Kraft und kann mit folgender Formel berechnet werden: \\(\\vec F_L=q\\cdot(\\vec v \\times \\vec B)\\)</p> <p>Wenn \\(\\vec v\\) senkrecht auf \\(\\vec B\\) steht,und \\(\\vec B\\) konstant ist, kann mit folgender Formel den Zusammenhang von der Geschwindigkeit der Ladung \\(\\vec v\\) mit dem Magnetfeld \\(\\vec B\\) und dem Radius \\(r\\) beschrieben werden: \\(m=\\frac{rq|\\vec B|}{v}\\)</p> <p>Bei Elementarteilchen ist die Ladung entweder \\(0\\), \\(e\\) oder \\(-e\\).</p>"},{"location":"21HS/GED/Physik/03_Elektromagnetismus.html#intensitat","title":"Intensit\u00e4t","text":"<p>Die Intensit\u00e4t einer ebenen Welle kann mit der folgenden Formeln berechnet werden: $$ I_{em}=\\frac{E_0B_0}{2 \\mu _0}=\\frac{E^2_0}{2c\\mu_0}=\\frac{cB^2_0}{2\\mu_0}\\ $$ Dabei ist \\(\\mu_0\\) die magnetische Feldkonstante \\(1.257\\cdot10^{-6}=4\\pi\\cdot 10^{-7}\\)</p>"},{"location":"21HS/GED/Physik/03_Elektromagnetismus.html#strahlendruck","title":"Strahlendruck","text":"<p> $$ p_s=\\frac{I_{em}}c=\\frac{E_0B_0}{2c\\mu_0}=\\frac{E^2}{2c^2\\mu_0}=\\frac{B^2_0}{2\\mu_0} $$</p>"},{"location":"21HS/GED/Physik/04_Thermische_Strahlung.html","title":"Termische Strahlung","text":"<p>Wichtig: Alle Temperaturen sind in Kelvin.</p> <p>Um von Celsius zu Kelvin zu konvertieren: \\(T_{kelvin}=T_{celsius}+273.15\\)</p>"},{"location":"21HS/GED/Physik/04_Thermische_Strahlung.html#formeln","title":"Formeln","text":"Formel Erkl\u00e4rung \\(E\\)"},{"location":"21HS/GED/Physik/04_Thermische_Strahlung.html#sichtbares-licht","title":"Sichtbares Licht","text":"<p>Sichtbares Licht:</p>"},{"location":"21HS/GED/Physik/04_Thermische_Strahlung.html#lichtbrechung","title":"Lichtbrechung","text":"<p> $$ \\frac{\\sin(\\alpha)}{\\sin(\\beta)}=\\frac {c_1} {c_2}=\\frac{n_2}{n_1} $$ Dabei stellt \\(c\\) die Lichtgeschwindigkeit im jeweiligen Material dar und \\(n\\) der Brechungsindex.</p>"},{"location":"21HS/GED/Physik/04_Thermische_Strahlung.html#totalreflexion","title":"Totalreflexion","text":"<p>Wenn ein Lichtstrahl genug Flach auf die \"Bruchkanta\" (z.B. die Wasseroberfl\u00e4che). In diesemfall wird alles zur\u00fcck reflektiert. F\u00fcr die Formel heisst das, dass \\(\\alpha\\ge 90\u00b0\\) oder \\(\\beta \\ge 90\u00b0\\) </p> <p></p>"},{"location":"21HS/GED/Physik/04_Thermische_Strahlung.html#photonen","title":"Photonen","text":"<p>Jedem Photon wird eine Wellenl\u00e4nge, bzw eine Frequenz zu geordnet: \\(E=h\\nu\\) , dabei ist die Planck'sche Konstante \\(h=6.626\\cdot 10^{-34} [Js]\\) und \\(E\\) die Energie des Photons.</p>"},{"location":"21HS/GED/Physik/04_Thermische_Strahlung.html#elektromagnitische-strahlung","title":"Elektromagnitische Strahlung","text":"<p>Eine Elektromagnetische Strahlung besteht aus einer Welle mit einer Wellenl\u00e4nge \\(\\lambda\\) und einer Frequenz \\(\\nu\\).</p> <p>Die Formel \\(c=\\lambda\\cdot \\nu\\) zeigt den Zusammenhang zwischen \\(\\lambda\\) und \\(\\nu\\). \\(c\\) ist dabei die Lichtgeschwindigkeit (\\(c=3\\cdot10^8 m/s\\))</p> <p>Die Energie einer Strahlung kann mit \\(E=h\\nu\\) errechnet werden. \\(h\\) ist dabei die Planck'sche Konstante (\\(h=6.626\\cdot10^b{-34}\\))</p> <p></p> <p>Der Absorptionskoeffizent beschreibt, wie viel der Frequenzen ein K\u00f6rper absorbiert. <code>1</code> heisst, dass alles absorbiert wird, <code>0</code>, dass nichts absorbiert wird. </p> <p>Der Gegenpol, der Reflexionskoeffizent, beschreibt, wie viel der Frequenzen reflektiert werden und kann mit der folgenden Formel umgerechnet werden: \\(\\rho=1-\\alpha\\)</p> <p>Oft sind diese Koeffizenten abh\u00e4hngig von der Frequenz (also \\(\\alpha(\\nu)\\) und \\(\\rho(\\nu)\\)). Ein blaues T-Shirt w\u00fcrde die \"blauen Frequenzen\" reflektieren und die anderen absorbieren.</p> <p></p> <p>Bei einem schwarzen Strahler kann bewiessen werden, dass es keinen Unterschied gibt, ob die Strahlung vom Material 1 ins Material 2 oder umgekehrt geht.</p> \\[ \\alpha_{1\\rightarrow 2}=\\alpha_{2\\rightarrow 1}\\\\ \\sigma_{1\\rightarrow 2}=\\sigma_{2\\rightarrow 1} \\]"},{"location":"21HS/GED/Physik/04_Thermische_Strahlung.html#emission","title":"Emission","text":"<p>Wenn eine Strahle von einem \"d\u00fcnnem\" Material, wie Luft, aufgenommen wird, wird von Emission von Strahlung gesprochen und anstatt dem Absorptionskoeffizent, wird der Emissionskoeffizenten \\(\\varepsilon\\) verwendet (es gilt also: \\(\\alpha_{2\\rightarrow1}=\\varepsilon_{2\\rightarrow 1}\\))</p>"},{"location":"21HS/GED/Physik/04_Thermische_Strahlung.html#schwarzer-strahler","title":"Schwarzer Strahler","text":"<p>Ein K\u00f6rper mit dem Reflexionskoeffizent \\(\\rho=0\\) und Absorptionskoeffizenten von \\(\\alpha=1\\) wird <code>schwarzer Strahler</code> genannt. Ein schwarzer Block kann als Schwarzerstrahler angen\u00e4hert werden (er reflektiert trotzdem noch ein wenig Licht), aber auch die Sonne, da diese keine Frequenzen und somit auch Licht reflektiert.</p>"},{"location":"21HS/GED/Physik/04_Thermische_Strahlung.html#grauer-strahler","title":"Grauer Strahler","text":"<p>Ein grauer Strahler ist ein K\u00f6rper,  welcher in gewissen Wellenbereichen nicht so stark strahlen, wie ein schwarzer Strahler. Dass heisst, dass der Emmisionskoeffizent \\(\\varepsilon\\) nicht umbedingt <code>1</code> muss sein.</p>"},{"location":"21HS/GED/Physik/04_Thermische_Strahlung.html#wiensches-verschiebungsgesetzt","title":"Wien'sches Verschiebungsgesetzt","text":"<p>Mit \\(\\lambda_{max}=\\frac b T\\) kann man die Temperatur in Kelvin zu der maximalen Wellenl\u00e4nge umrechnen.</p> <p>Mit dieser Formel kann man auch die Lichtfarbe, welche in Kelvin angegeben wird, erkl\u00e4ren.</p> <p></p>"},{"location":"21HS/GED/Physik/04_Thermische_Strahlung.html#stefan-boltzmann-gesetzt-gesammtleistung","title":"Stefan-Boltzmann Gesetzt (Gesammtleistung)","text":"<p>Um die Gesamtleistung eines Strahlendenk\u00f6rpers zu berechnen kann man die folgende Formel ben\u00fctzten: \\(P_{rad}=\\sigma AT^4\\) Dabei ist \\(\\sigma=5.67\\cdot10^{-8} [Wm^{-2}K^{-4}]\\) , \\(A\\) die Oberfl\u00e4che des K\u00f6rpers und \\(T\\) die Temperatur des K\u00f6rpers.</p>"},{"location":"21HS/GED/Physik/04_Thermische_Strahlung.html#energetische-bilanz-eines-strahlers","title":"Energetische Bilanz eines Strahlers","text":"<p>Die Energiebilanz sagt aus, ob Energie vom K\u00f6rper aufgenommen wird und er daher w\u00e4rmer wird oder ob mehr Energie abgegeben wird und er daher k\u00e4lter wird. Dies kann mit der folgenden Formel berechnet werden:  $$ I=-\\frac{dE}{dt}=\\sigma\\varepsilon A(T^4-T_{env}^4) $$ Dabei ist \\(\\sigma=5.67\\cdot10^{-8}\\), \\(\\varepsilon\\) den Emmisionskoeffizenten, \\(A\\) die Oberfl\u00e4che des K\u00f6rpers, \\(T\\) die Temperator des K\u00f6rpers und \\(T_{env}\\) die Umgebungstemperatur.</p> <p>Bei einem grauen Strahler kann \\(\\varepsilon \\neq1\\) sein.</p> <p>Wie man an der Formeln mit den Temperaturen erkennen kann, wird die Temperatur hoch 4 gerechnet. Dies f\u00fchrt bei einer 16-facher vergr\u00f6sserung, wenn die Temperatur verdoppelt wird.</p> <p>Ein \u00e4hliches Ph\u00e4nomen gibt es, wenn die L\u00e4nge eines K\u00f6rpers veroppelt werden, wird die Fl\u00e4che vervierfacht und das Volumen verachtfacht.</p>"},{"location":"21HS/GED/Physik/04_Thermische_Strahlung.html#sonneneinstrahlung","title":"Sonneneinstrahlung","text":"<p>Um zu berechnen, wie viel Energie die Sonne auf die Erde strahlt, kann folgende Formel gebraucht werden: $$ I=\\sin(\\beta)Aj $$ Dabei ist \\(\\beta\\) den Einstrahls-Winkel der Sonne, \\(A\\) die Fl\u00e4che, wo f\u00fcr man die Energie \\(I\\) berechnen m\u00f6chte und \\(j\\) der Faktor der Sonneneinstrahlung.</p> <p></p>"},{"location":"21HS/GED/Physik/04_Thermische_Strahlung.html#warmeleitung","title":"W\u00e4rmeleitung","text":"\\[ I=-Ah_{X,Y}(T_X-T_Y) \\] <p>Mit dieser Formel kann der W\u00e4rmestrom (Energie pro Zeit) berechnet werden, welcher von einem Objekt \\(X\\) mit der Temperatur \\(T_X\\) zu einem Objekt \\(Y\\) mit der Temperatur \\(T_Y\\) fliesst. \\(A\\) ist dabei die Ber\u00fchrungsfl\u00e4che der zwei Objekte und \\(h_{X,Y}\\) ist der W\u00e4rme\u00fcbertragunskoeffizent.</p>"},{"location":"21HS/GED/Physik/05_Signale.html","title":"Signale","text":""},{"location":"21HS/GED/Physik/05_Signale.html#signalarten","title":"Signalarten","text":"Name Bild Sinussignal Rechtecksignal S\u00e4gezahnsignal Dreieckssignal <p>Eine Welle wird haupts\u00e4chlich durch ihre Amplitude \\(A\\), Periode \\(T\\), Frequenz \\(\\nu\\) und Phasenverschiebung \\(\\varphi\\) definiert. Mit \\(T=\\frac 1 \\nu\\) kann man von der Frequenz \\(\\nu\\) zur Periode \\(T\\) umwandeln.</p> <p></p> <p>Ein Sinussignal kann in ein Cosinussignal und umgekehrt folgendermassen umgewandelt werden: $$ sin(a-\\frac \\pi 2)=cos(a)\\ cos(a+\\frac \\pi 2)=sin(a) $$</p>"},{"location":"21HS/GED/Physik/05_Signale.html#fourierzerlegung","title":"Fourierzerlegung","text":"<p>Man kann jede Funktion in eine Summe von Cosinusen oder Sinusen zerlegen</p>"},{"location":"21HS/GED/Physik/05_Signale.html#tone-und-klangfarbe","title":"T\u00f6ne und Klangfarbe","text":"<p>Neben eines Grundtones produziert ein Instrument auch noch Obert\u00f6ne. Als Daumenregeln: Je mehr Obert\u00f6ne, desto sch\u00e4rfer t\u00f6nt ein Instrument.</p> <p></p> <p></p>"},{"location":"21HS/GED/Physik/05_Signale.html#nyquist-shannon-theorem","title":"Nyquist - Shannon Theorem","text":"<p>Es m\u00fcssen doppelt so viele Messpunkte existieren, wie die maximale Frequenz: \\(f_{measure}&gt;2\\cdot f_{max}\\). Wenn dies nicht gegeben ist, tritt Aliasing auf und es werden falsche Frequenzen gespeichert.</p> <p>F\u00fcr die tiefste Frequenz gilt, dass das Intervall \\(T\\) zwischen den Messpunkten : \\(T &gt; \\frac 1 {f_{min}}\\)</p>"},{"location":"21HS/GED/Physik/05_Signale.html#blip","title":"Blip","text":"<p>Ein Blip ist ein kurzes Signal. Dabei gilt, je k\u00fcrzer der Blip, desto mehr Frequenzen gibt es um die Hauptfrequenz \\(\\nu_0\\)</p> <p></p> <p>Ein zweites Prinzip, das \u00e4hlich funktioniert: Je steiler eine Flanke eines Signales, desto mehr Frequenzen werden ben\u00f6tigt, um die Flanke darzustellen.</p>"},{"location":"21HS/GED/Physik/05_Signale.html#schnelle-orgeln","title":"Schnelle Orgeln","text":"<p>Damit ein Ton als harmonisch empfunden wird, muss eine Frequenz domonieren. Bei einem Blip ist dies allerdings nicht umbedingt gegeben. Ebenfalls gilt, je h\u00f6her ein Ton, desto k\u00fcrzer kann er sein, dass trotzdem noch eine Frequenz dominiert und der Ton harmonisch klingt. </p> <p>Aus diesem Grund kann eine Picolo schnell spielen und eine tiefe Orgel nicht.</p> <p></p> <p>Mathematisch kann diese Relation folgendermassen ausgedr\u00fcckt werden:  $$ \\frac{\\Delta f\\cdot \\Delta t}{2}\\sim 1 $$</p>"},{"location":"21HS/GED/Physik/05_Signale.html#signal-to-noise-ratio","title":"Signal-to-Noise Ratio","text":"<p>\\(A_{noise}=\\text{Die durchschnittliche Noise Amplitude}\\) $$ SNR=\\frac{P_{signal}} {P_{noise}}=\\frac{I_{signal}} {I_{noise}}=\\frac{A^2_{signal}}{A^2_{noise}} $$</p> <p>Dabei bezeichnet \\(P\\) die Leistung, \\(I\\) die Intensit\u00e4t und \\(A\\) die Amplitude.</p> <p></p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html","title":"All ged summaries","text":"<ul> <li>Formeln<ul> <li>Elektronik</li> <li>Themische Strahlungen</li> <li>Noch zu lernen</li> </ul> </li> <li>Ch\u00fcgeli F\u00fcsik<ul> <li>Kraft</li> <li>Beschleunigung und co.</li> <li>Energie</li> </ul> </li> <li>Elektrotechnik<ul> <li>Strom, Spannung und Leistung</li> <li>Schaltung<ul> <li>Knotenregel</li> <li>Maschenregel</li> <li>Batterien</li> <li>Wiederstand</li> <li>Kondensator</li> <li>Spulen</li> <li>Unged\u00e4mpfte Schwingkreise</li> <li>Ged\u00e4mpfte Schwingungskreise</li> <li>Low-Pass und High-Pass-Filter</li> </ul> </li> <li>Draht</li> <li>Karnaugh-Veitsch Diagramme</li> <li>Transformer</li> <li>Stromnetz</li> <li>Wechsel- vs. Gleichstrom</li> <li>Drehstrom</li> <li>Gefahr durch Strom</li> </ul> </li> <li>Elektromagnetismus<ul> <li>Formeln</li> <li>Linienintegrale<ul> <li>Spezialf\u00e4lle</li> </ul> </li> <li>Flussintegrale</li> <li>Maxwellgleichungen<ul> <li>Geschlossene und nicht-geschlossene Fl\u00e4chen</li> <li>Gauss'sche Gesetzt<ul> <li>Metalle</li> </ul> </li> </ul> </li> <li>Rechte-Hand Regel</li> <li>Rechte-Hand Regel 2</li> <li>Vektorfelder</li> <li>Magnetfeld</li> <li>Elektrofeld</li> <li>Elektrofelder und Magnetfelder zusammen</li> <li>Magnete</li> <li>Intensit\u00e4t</li> <li>Strahlendruck</li> </ul> </li> <li>Termische Strahlung<ul> <li>Formeln</li> <li>Sichtbares Licht</li> <li>Lichtbrechung<ul> <li>Totalreflexion</li> </ul> </li> <li>Photonen</li> <li>Elektromagnitische Strahlung<ul> <li>Emission</li> <li>Schwarzer Strahler</li> <li>Grauer Strahler</li> </ul> </li> <li>Wien'sches Verschiebungsgesetzt</li> <li>Stefan-Boltzmann Gesetzt (Gesammtleistung)<ul> <li>Energetische Bilanz eines Strahlers</li> <li>Sonneneinstrahlung</li> <li>W\u00e4rmeleitung</li> </ul> </li> </ul> </li> <li>Signale<ul> <li>Signalarten</li> <li>Fourierzerlegung</li> <li>T\u00f6ne und Klangfarbe</li> <li>Nyquist - Shannon Theorem</li> <li>Blip<ul> <li>Schnelle Orgeln</li> </ul> </li> <li>Signal-to-Noise Ratio</li> </ul> </li> </ul>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#formeln","title":"Formeln","text":"<p>In dieser Datei werden alle Formeln und Konstanten zusammen gefasst.</p> Prefix Exponent peta \\(10^{15}\\) tera \\(10^{12}\\) giga \\(10^9\\) mega \\(10^6\\) kilo \\(10^3\\) hecto \\(10^2\\) deca \\(10^1\\) - \\(10^0\\) dezi \\(10^{-1}\\) cento \\(10^{-2}\\) milli \\(10^{-3}\\) micro \\(10^{-6}\\) nano \\(10^{-9}\\) pico \\(10^{-12}\\) femto \\(10^{-15}\\)"},{"location":"21HS/GED/Physik/all-ged-summaries.html#elektronik","title":"Elektronik","text":"Thema Formeln Erkl\u00e4rung \\(I [A]\\) Strom \\(U [V]\\) Spannung Wiederst\u00e4nde \\(U=R\\cdot I\\) Formel f\u00fcr Ohmnische Wiederst\u00e4nde Wiederst\u00e4nde \\(R_{12}=\\frac 1 {\\frac 1 {R_1} + \\frac 1 {R_2}}\\) Formel zum zwei parallele Wiederst\u00e4nde zusammen zu fassen Kondensator \\(CU_c=Q\\) Der Zusammenhang zwischen der Spannung \\(U\\) und der Ladung \\(Q\\) Kondensator \\(Q(t)=CU_0(1-e^{-\\frac t{RC}})\\) Wie sich die Ladung \\(Q\\) beim Laden Kondensator \\(U_C(t)=\\frac{Q(t)}{C}=U_0(1-e^{-\\frac t{RC}})\\) Wie sich die Spannung \\(U\\) beim Laden verhaltet Kondensator \\(I(t)=\\frac{U_0}{R}e^{-\\frac t {RC}}\\) Wie sich der Strom \\(I\\) beim Laden verhaltet Kondensator \\(\\tau=R\\cdot C\\) Der Kondensator f\u00e4llt/steigt auf ca \\(\\frac 1 e\\approx0.37\\) auf/ab in der Zeit \\(\\tau\\)"},{"location":"21HS/GED/Physik/all-ged-summaries.html#themische-strahlungen","title":"Themische Strahlungen","text":"Konstante Erkl\u00e4rung \\(c=3\\cdot 10^8m/s\\) Lichtgeschwindigkeit im Vakum \\(h=6.626\\cdot10^{-34} Js\\) Planck'sche Konstante Formel Erkl\u00e4rung \\(c=\\lambda \\cdot\\nu\\) Dies ist der Zusammenhang zwischen der Wellenl\u00e4nge \\(\\lambda\\)\u00a0und der Frequenz \\(\\nu\\)\u00a0. \\(c\\)\u00a0ist die Lichtgeschwindigkeit \\(E=h\\nu\\) Die Energie einer Strahlung mit der Frequenz \\(\\nu\\). \\(h\\)\u00a0ist die Plank'sche Konstante \\(\\rho(\\nu)=1-\\alpha(\\nu)\\) Umrechnungs Formel zwischen Reflektionskoeffizenten (\\(\\rho\\)) und Absorptionskoeffizenten (\\(\\alpha\\))"},{"location":"21HS/GED/Physik/all-ged-summaries.html#noch-zu-lernen","title":"Noch zu lernen","text":"<ul> <li>B-Felder induziert E-Felder</li> <li>In welche Richtung positive E-Felder anziehen oder abstossen</li> </ul>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#chugeli-fusik","title":"Ch\u00fcgeli F\u00fcsik","text":""},{"location":"21HS/GED/Physik/all-ged-summaries.html#kraft","title":"Kraft","text":"<p>\\(\\vec F = m \\cdot \\vec a\\)</p> <p>Diese Formel nimmt einiges an:</p> <ul> <li>Bewegung in einer Dimension (keine Vektoren)</li> <li>Konstante Beschleunigung (a = const.)</li> <li>Start bei \\(s(0)=0\\)</li> <li>Anfangsgeschwindigkeit bei </li> </ul>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#beschleunigung-und-co","title":"Beschleunigung und co.","text":"<p>Hier sind einige g\u00e4ngige Formeln aufgelistet, welche hilfreich bei Beschleunigung sind. In der obersten Reihe steht, was die Formel ergeben soll. In der ersten Spalte, was sich nicht \u00e4ndert und somit nicht in der Formel erw\u00e4hnt wird.</p> t s v a t - \\(s=\\frac{v^2}{2a}\\) \\(v=\\sqrt{2as}\\) \\(a=\\frac{v^2}{2s}\\) s \\(t=\\frac{v}{a}\\) - \\(v=at\\) \\(a=\\frac{v}{t}\\) v \\(t=\\sqrt{\\frac{2s}{a}}\\) \\(s=\\frac{at^2}{2}\\) - \\(a=\\frac{2s}{t^2}\\) a \\(t=\\frac{2s}{v}\\) \\(s=\\frac{vt}{2}\\) \\(v=\\frac{2s}{t}\\) -"},{"location":"21HS/GED/Physik/all-ged-summaries.html#energie","title":"Energie","text":"<p>Energie ist \\(Kraft \\cdot Strecke\\). Es gilt also die Formel \\(E=F\\cdot s [J]\\). Die Masseinheit \\(J\\) kann auch als \\(\\frac{kgm^2}{s^2}\\) </p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#elektrotechnik","title":"Elektrotechnik","text":""},{"location":"21HS/GED/Physik/all-ged-summaries.html#strom-spannung-und-leistung","title":"Strom, Spannung und Leistung","text":"<p>Ampere ist die Einheit des Stromes \\(I\\) und ist Coulomb pro Sekunde \\([Cs^{-1}]\\). </p> <p>Die H\u00f6he zwischen zwei Energiepotentialen nennt sich die Spannung \\(U\\) (\\(U(\\vec r_A,\\vec r_B)=\\varphi(\\vec r_A)-\\varphi(\\vec r_B)\\)). </p> <p>Spannung kann aber auch \u00fcber Arbeit definiert werden. Die Spannung zwischen zwei Punkten \\(A\\) und \\(B\\) ist die Energie pro Ladung, welche frei wird, wenn die Ladung von \\(A\\) nach \\(B\\) bewegt wird: \\(U=\\int^{\\vec r_B}_{\\vec r_A}\\vec E d\\vec r\\).  Die kinetische Energie, welche eine Ladung \\(q\\) gewinnt, wenn sie eine Spannung \\(U\\) \"herunterf\u00e4llt\" betr\u00e4gt: \\(\\Delta E_{kin}=\\int^{\\vec r_B}_{\\vec r_A}\\vec q\\cdot E d\\vec r=q\\cdot U\\)</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#schaltung","title":"Schaltung","text":""},{"location":"21HS/GED/Physik/all-ged-summaries.html#knotenregel","title":"Knotenregel","text":"<p>Die Knotenregel besagt, dass was in einen Knoten hinein geht, muss auch wieder aus dem Knoten hinaus.</p> <p>Oder \\(I_1=I_2+I_3\\) bzw. \\(I_6=i_5+I_4\\)</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#maschenregel","title":"Maschenregel","text":"<p>Die Maschenregel besagt, dass alle Spannungen in einer Masche zusammen \\(0\\) ergeben m\u00fcssen. Man rechnet <code>plus</code> wenn es in die Referenzrichtung eines Bauteils geht und <code>minus</code>, wenn es gegen die Referenzrichtung geht.</p> <p>Ebenfalls wichtig zu erw\u00e4hnt ist, dass eine Batterie in die andere Richtung zeigt, als die anderen Bauteile (Dies ist einwenig komisch im Beispiel oben). </p> <p>In der gr\u00fcnen Maschen sieht man, wie dies aussehen kann, f\u00fcr eine Masche, welche nicht \u00fcber die Baterie geht: \\(U_4-U_5=0\\)</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#batterien","title":"Batterien","text":"<p>Reale Batterien haben einen Innenwiederstand, welcher in Serie mit der Batterie geschalten ist. Dass heisst, dass die realte Spanung einer Batterie kleiner als \\(U_0\\) ist, da \\(U_{in}\\) abgezogen werden muss.</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#wiederstand","title":"Wiederstand","text":"<p>Ein Wiederstand folgt dem Ohm'sche Gesetzt. Dass heisst, ein Wiederstand kann mit \\(U=R\\cdot I\\) berechnet werden.</p> <p>Da f\u00fcr die Leistung gillt \\(P=U\\cdot I\\) , kann in diese Formel das Ohm'sche Gesetzt eingesetzt werden, um die Formel \\(P=\\frac {U^2} R=I^2R\\) zu bekommen.</p> <p>Wegen der Knoten und Maschenregeln verhalten sich Wiederst\u00e4nde (wie auch andere Bauteile) anderst, jenach dem, ob sie Parallel oder Serial angeschlossen sind.</p> Name Erkl\u00e4rung Bild Parallel geschaltet In einer Parallelschaltung m\u00fcssen Wiederst\u00e4nde folgendermassen zusammen gefasst werden: \\(R_{12}=\\frac 1 {\\frac 1 {R_1} + \\frac 1 {R_2}}\\) Seriel geschaltet In einer Serielschaltung m\u00fcssen Wiederst\u00e4nde folgendermassen zusamengefasst werden: \\(R_{12}=R_1+R_2\\)"},{"location":"21HS/GED/Physik/all-ged-summaries.html#kondensator","title":"Kondensator","text":"<p>Ein Kondensator (oder Capacitor) kann man sich als Feder vorstellen, welche aus zwei Metallplatten nahe bei einander bestehen. Es wird Strom hinein \"gepumpt\". Dies wird immer schwerer, je voller der Kondensator wird, bis am Ende der Kondensator voll ist. Das zweite wichtige an einem Kondensator ist, dass keine Elektronen durch ihn durch fliessen k\u00f6nnen. Anstelle dessen sammeln sich auf der einen Seite mehr Elektronen an, auf der anderen Seite werden die bereits vorhanden Elektronen abgesaugt. </p> <p></p> formel Erkl\u00e4rung \\(\\frac {dQ}{dt}=I\\) Die Ver\u00e4nderungsrate der Ladung, ist der Strom \\(I\\) \\(CU_c=Q\\) Der Zusammenhang zwischen der Spannung \\(U [V]\\) und der Ladung \\(Q\\) abh\u00e4ngig von der Kapazit\u00e4t \\(C [F]\\) in Farad \\(Q(t)=CU_0(1-e^{-\\frac t{RC}})\\) Wie sich die Ladung \\(Q\\) beim Laden \\(U_C(t)=\\frac{Q(t)}{C}=U_0(1-e^{-\\frac t{RC}})\\) Wie sich die Spannung \\(U\\) beim Laden verhaltet \\(U_C(t)=U_0\\cdot e^{-\\frac t {RC}}\\) Wie sich die Spannung \\(U\\) beim Entladen verhaltet \\(I(t)=\\frac{U_0}{R}e^{-\\frac t {RC}}\\) Wie sich der Strom \\(I\\) beim Laden verhaltet \\(\\tau=R\\cdot C\\) Die Zeitkonstante \\(\\tau\\) . Der Strom des Kondensator f\u00e4llt auf ca \\(\\frac 1 e\\approx0.37\\) ab in der Zeit \\(\\tau\\) oder steigt auf \\(1-\\frac 1 e\\approx0.63\\) in \\(\\tau\\) an, wenn der Kondensator geladen wird"},{"location":"21HS/GED/Physik/all-ged-summaries.html#spulen","title":"Spulen","text":"<p>Wenn durch ein Draht Strom fliesst, entsteht ein Magnetfeld. Dies ist ebenfalls der Fall bei einer Spule. Wenn der Strom hochgefahren wird, dann wird ein Magnetfeld aufgebaut. Dies ben\u00f6tigt aber Energie, was wiederum einen Wiederstand erzeugt.</p> <p>Wenn der Strom abgebaut wird, wir die Energie des Magnetfeldes wieder zur\u00fcck in die Spannung gespiessen und \u00fcber der Spule entsteht eine Spannung, welche den Strom antreibt.</p> <p>Die Richtung des Magnetfeldes findet man heraus, in dem man die Rechtehand nimmt und mit dem Daumen in die Ricthung des <code>-</code> zeigt, bzw. die Stromrichtung auf dem Schaltungsplan (nicht die physikalische Stromrichtung, die ist in die andere Richtung). </p> <p></p> Formel Erkl\u00e4rung \\(U_L=L\\frac{dI}{dt}\\) Die Ver\u00e4nderungsrate von dem Strom \\(I\\) mit der Konstante \\(L [Henry]\\) multipliziert, ergibt die Spannung"},{"location":"21HS/GED/Physik/all-ged-summaries.html#ungedampfte-schwingkreise","title":"Unged\u00e4mpfte Schwingkreise","text":"<p>In einem Schwingungskreis, schwingen die Elektronen zwischen den zwei Platten des Kondensators hin und her. Dies kann man in die folgende Schritte unterteilen:</p> <ol> <li>Der Kondensator ist geladen und es herrscht eine Spanung \\(U_0\\) \u00fcber dem Kondensator. Der Schalter ist aber noch offen.</li> <li>Der Schalter \\(s_1\\) wurde geschlossen und der Strom fliesst. Wegen dem Maschensatz muss \\(U_C=U_L\\)  sein. Da die Spannung \\(U_C\\)w\u00e4chst, muss auch der Strom \\(I\\) wachsen und somit ein Magnetfeld \u00fcber L entstehen.</li> <li>Der Strom \\(I\\) und somit auch das Magnetfeld \\(B\\) sind maximal. Irgendwann wird der Kondensator leer sein (Auf beiden Seiten der Platte sind gleich viele Elektronen) und \\(U_L\\) und \\(UC\\) sind 0. Somit gilt auch \\(I=0\\). </li> <li>Da nun der Strom in der Spule freigesetzt wird, l\u00e4dt sich der Kondensator wieder auf (allerdings mit einem anderen Vorzeichen) und so entsteht wieder eine Spannung \\(U_C\\) \u00fcber dem Kondensator.</li> <li>So bald die Spule \"leer\" ist, wechselt die Stromrichtung wieder</li> <li>Der Zyklus wiederholt sich nun wiede</li> </ol> Formel Erkl\u00e4rung \\(Q(t)=CU_0\\cdot \\cos(\\frac 1 {\\sqrt {LC}}\\cdot t)\\) Die Ladung \\(Q\\) eines Schwinungskreises \\(I(t)=-\\sqrt {\\frac C L}\\cdot U_0\\cdot \\sin(\\frac 1 {\\sqrt {LC}}\\cdot t)\\) Der Strom \\(I\\) eines Schwinungskreises \\(U_L(t)=-\\frac 1 {\\sqrt{LC}}\\cdot U_0\\cdot \\cos(\\frac 1 {\\sqrt{LC}} \\cdot t)\\) Die Spannun \\(U_L\\) eines Schwinungskreises \\(f=\\frac 1 {2\\pi\\sqrt{LC}}\\) Die Frequenz \\(f\\), mit welcher der Schwingunskreis schwingt \\(T=2\\pi\\sqrt{LC}\\) Die Periodendauer \\(T\\), welche eine Schwinung des Schwingungskreis ben\u00f6tigt"},{"location":"21HS/GED/Physik/all-ged-summaries.html#gedampfte-schwingungskreise","title":"Ged\u00e4mpfte Schwingungskreise","text":"<p>Der Strom im Schwinungskreis wird schw\u00e4cher, wenn \\(R &lt; 2\\sqrt {\\frac L C}\\)  (oder wenn \\(\\frac{R^2}{4L^2}&gt;\\frac 1 {LC}\\) ist) Wenn dies gegeben ist, dann ist es ein ged\u00e4mpfter Schwingungskreis.</p> Formel Erkl\u00e4rung \\(Q(t)=Q_0e^{-\\frac t \\tau}\\cos(\\omega_dt-\\phi_0)\\) Die Ladung des Schwinungskreis1 \\(f=\\frac 1 {2\\pi}\\sqrt{\\frac 1 {LC} -\\frac{R^2}{4L^2}}\\) , \\(T=\\frac 1 f\\) Die (Kreis-)frequenz \\(\\omega_d\\) \\(\\tau=\\frac{2L} R\\) Die Zeitkonstante \\(\\tau\\) der D\u00e4mpfung. Der Strom des Kondensator f\u00e4llt/steigt auf ca \\(\\frac 1 e\\approx0.37\\%\\) auf/ab in der Zeit \\(\\tau\\)"},{"location":"21HS/GED/Physik/all-ged-summaries.html#low-pass-und-high-pass-filter","title":"Low-Pass und High-Pass-Filter","text":"<p>Bei einem Low-Pass-Filter werden die tiefen Frequenzen durchgelassen und die Hochen weggefiltert.</p> <p>Bei einem High-Pass-Filter ist es umgekehrt und die hochen Frequenzen werden duch gelassen und die tiefen weggefiltert.</p> <p></p> <p>\u00dcber dem Wiederstand misst man ein Signal, bei welchem die tiefen Frequenzen ged\u00e4mpft wurden und die hochen Frequenzen fast unver\u00e4ndert. Dies w\u00e4re ein High-Pass-Filter.</p> <p>Hingegen \u00fcber dem Kondensator misst werden die hochen Frequenzen ged\u00e4mpft und die tiefen durchgelassen, was ein Low-Pass-Filter ist.</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#draht","title":"Draht","text":"<p>Der Wiederstand in einem Kabel ist ungef\u00e4hr: \\(R=\\rho\\frac L A\\), wobei \\(\\rho\\) den <code>spezifischen Wiederstand</code> mit der Einheit \\([mm^2m^{-1}\\Omega]\\). \\(L\\) ist die L\u00e4nge in \\([m]\\) und \\(A\\) ist die Querschnittsfl\u00e4che in \\([mm^2]\\).</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#karnaugh-veitsch-diagramme","title":"Karnaugh-Veitsch Diagramme","text":"<p>Ein KV-Diagram kann praktisch sein, um eine Wahrheitstabelle mit vier Inputs in eine Schaltung zu verwandeln.</p> <p>Daf\u00fcr wird zuerst die Wahrheitstabelle in das folgende Raster einf\u00fchrt. Dabei ist oben, bzw. auf der linken Seite das erste Bit und auf der unteren/rechten Seite das linke Bit. Das Feld oben rechts stellt also f\u00fcr den Wert aus der Wahrheitstabelle A=1, B=0, C=0, D=0. </p> <p></p> <p>Wenn dies getan ist, versucht man Bl\u00f6cke mit Einsen zu finden. Die Bl\u00f6cke k\u00f6nnen 1, 2, 4, 8 oder 16 lang und/oder breit sein. Falls es egal ist, ob ein Input <code>0</code> oder <code>1</code> ist, kann er so betrachtet werden, dass es sch\u00f6nere Bl\u00f6cke gibt. Ebenfalls wichtig, ein Block darf \u00fcber die Kante hinausgehen.</p> <p></p> <p>Im letzten Schritt wird nun aus den Bl\u00f6cken Und-Schaltungen gebaut. Dabei m\u00fcssen zwei Dinge beachtet werden:</p> <ol> <li>Wenn ein Block \u00fcber den not und \"normalen\" Block geht (z.B. A und not-A), dann muss das And-Gate keine Verbindung zu diesem Input haben, da es in beiden F\u00e4llen true ist.</li> <li>Wenn ein Block nur \u00fcbr ein Block geht (z.B. nur \u00fcber den A oder nur den not-A Block), dann muss das And-Gate mit diesem Input verbunden sein.</li> </ol> <p>Hier sieht man noch das Beispiel f\u00fcr die oberigen Bl\u00f6cke.</p> <p></p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#transformer","title":"Transformer","text":""},{"location":"21HS/GED/Physik/all-ged-summaries.html#stromnetz","title":"Stromnetz","text":"<p>In unserem Stromnetzt werden mehrere Spannungen gen\u00fctzt. Zum einten m\u00f6chte man hohe Spannungen f\u00fcrs Transportieren von Strom ben\u00fctzten, da dies um einiges effizienter ist. Allerdings ist es zu gef\u00e4hrlich Hochspannung direkt im Haus zu gebrauchen. Daher hat man vier Netzebenen, welche mit Transformern gekoppelt sind.</p> <ul> <li>1 Ebene - H\u00f6chstspannungsebene: 380kV, bzw. 220 kV aus dem Kraftwerk oder vom Ausland</li> <li>3 Ebene - Hochspannungsebene: 36kV - 150kV: \u00dcberregionale Verteilungsnetzte</li> <li>5 Ebene - Mittelspannungsebene: 1kV - 36kV: Regionale Verteilungsnetzte</li> <li>7 Ebene - Niederspannungsebene: &lt; 1kV: Lokale Verteilungsnetzte</li> </ul> <p>Die Ebenen 2, 4 und 6 sind die Transformatorenebenen. Auf diesen Ebenen wird der Strom auf die n\u00e4chst tiefere oder h\u00f6here Ebene transformiert.</p> <p></p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#wechsel-vs-gleichstrom","title":"Wechsel- vs. Gleichstrom","text":"<p>Man hat sich in der Vergangenheit auf Wechselstrom geeinigt, weil es relativ einfach ist, Wechselstrom zu transformieren. Heute ist dies aber auch mit Gleichstrom m\u00f6glich. Gleichstrom erzeugt weniger Verl\u00fcste, wenn transportiert auf lange Streckenen, als Wechselstrom, da Wechselstrom nah an der Kabeloberfl\u00e4chse fliest und daher ein st\u00e4rkeres Magnetfeld erzeugt.</p> <p></p> <p>Der \\(U_{Eff}\\) kann mit der folgender Formel berechnet werden: \\(U_{Eff}=\\frac{U_S}{\\sqrt 2}\\) . Dies berechnet den quadratischen Mittelwert einer Wechselspannung.</p> <p>Der Sinus kann mit der folgenden Formel angegebene werden: \\(f(t)=U_{Eff}\\cos(\\omega\\cdot t)=U_{Eff}\\cos(f\\cdot 2\\pi\\cdot t)\\)</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#drehstrom","title":"Drehstrom","text":"<p>(Siehe Script_GED_Lect_3_4.pdf)</p> <p></p> <p></p> <p>Drehstrom ist praktisch f\u00fcr Motoren, da es keine \"Totenp\u00fcnkte\" gibt, an dem ein Magnet stoppen k\u00f6nnte. Zudem sind alle H\u00e4user in der Schweiz an einem Drehstrom angeschlossen.</p> <p></p> <p>Auf den Aussenleiter wird der Strom \"transportiert\" und stehen gegen\u00fcber der Erde unter einer Spannung von 230V. </p> <p>Der Neutralleiter ist der \"Ausgang\" f\u00fcr die Elektronen, welche \u00fcber die Aussenleiter hinein gepumpt werden.</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#gefahr-durch-strom","title":"Gefahr durch Strom","text":"<p>Wie gef\u00e4hrlich Strom ist h\u00e4ngt von der Stromst\u00e4rke und der Dauer ab. </p> <p>Gefahrebereiche:</p> <ol> <li>Wird nicht wahrgenommen, da der Strom zu klein ist</li> <li>Kribbeln, Kr\u00e4mpfte, aber keine bleibenden Sch\u00e4den</li> <li>Stromquelle kann wegen Museklverkrampfung nicht mehr losgelassen werden (bei Gleichstrom)</li> <li>T\u00f6dlich, wegen z.B. Herzkammerflimmern</li> </ol>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#elektromagnetismus","title":"Elektromagnetismus","text":""},{"location":"21HS/GED/Physik/all-ged-summaries.html#formeln_1","title":"Formeln","text":"Formel Erkl\u00e4rung $\\vec F_{12}=\\frac 1 {4\\pi\\varepsilon_0}\\cdot \\frac {Q_1Q_2}{ \\vec r_{12} $\\vec E(\\vec r)=\\frac 1 {4\\pi\\varepsilon_0}\\cdot \\frac Q { \\vec r - \\vec r_Q \\(\\vec F =q\\vec E(\\vec r, t)\\) Die Kraft \\(\\vec F\\), mit welcher das Feld \\(\\vec E\\) die Probeladung \\(q\\) beschleunigt \\(\\vec F_L=q\\cdot(\\vec v\\times\\vec B)\\) Die Kraft, eines Magnetfeldes auf eine Ladung \\(q\\), welche sich mit \\(\\vec v\\) bewegt. $m=\\frac{rq \\vec B <p>Auf dem TI-nspire cx gibt es den Befehl \\(crossP(x, y)\\), um mit den Vektoren \\(\\vec x\\) und \\(\\vec y\\) ein Kreuzprodukt zu rechnen.</p> <p>Das Skalarprodukt ist folgendermassen definiert: \\(\\vec a \\cdot \\vec b=|\\vec a| \\cdot |\\vec b|\\cdot \\cos(\\alpha)\\)  Aus dem kann geschlossen werden, dass wenn \\(\\alpha=90\u00b0\\) , bzw. die Vektoren \\(\\vec a\\) und \\(\\vec b\\) senkrecht aufeinander stehen, dass das Skalarprodukt <code>0</code> is</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#linienintegrale","title":"Linienintegrale","text":"<p>\\(W=\\int_\\gamma\\vec F\\cdot d\\vec \\gamma\\)</p> <p>Arbeit wurde in der BMS als \\(W=F\\cdot s\\) definiert. Nun kann aber \\(F\\) und \\(s\\) auch Vektoren sein. Hier kommt das Linienintegral ins Spiel, denn mit diesem kann man die Arbeit mit Vektoren ausrechnen.</p> <p>Der Vektor \\(\\vec F\\) und \\(\\vec \\gamma\\) m\u00fcssen nicht umbedingt in dieselbe Richtung zeigen. Wenn man z.B. einen Schlitten zieht, hat die Kraft \\(\\vec F\\) ca. eine 45\u00b0 gegen oben, w\u00e4hrend \\(\\vec \\gamma\\) die Strecke des Schlittens darstellt.</p> <p>Spannung kann auch als Linienintegral angesehen werden: \\(U(\\gamma)=\\int_\\gamma\\vec E \\cdot d\\vec \\gamma\\)</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#spezialfalle","title":"Spezialf\u00e4lle","text":"Name Formel Bild KreisDas Vektorfeld liegt \u00fcberall tangential an der Kurve und alle Vektoren haben dieselbe L\u00e4nge. \\(\\int_\\gamma\\vec U\\cdot d\\vec\\gamma =2\\pi r\\vert\\vec U\\vert\\) RechteckDas Vektorfeld ist parallel zu zwei Seiten (A, C) des Rechteck. Entlang einer Seite haben die Vektoren eine konstante Gr\u00f6sse \\(\\int_\\gamma\\vec U \\cdot d\\vec \\gamma=aU_1-aU_5\\)"},{"location":"21HS/GED/Physik/all-ged-summaries.html#flussintegrale","title":"Flussintegrale","text":"<p>Beim Flussintegral wie viel Volumen \\(vdt\\) fliesst durch \\(A\\), wenn es die Geschwindigkeit \\(\\vec U\\) hat. Dies kann als Integral geschrieben werden, in GED wird allerdings nur folgende Spezialf\u00e4lle behandelt.</p> <p></p> <p>\\(U\\) sind in diesen Formel die L\u00e4nge der Pfeile.</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#maxwellgleichungen","title":"Maxwellgleichungen","text":""},{"location":"21HS/GED/Physik/all-ged-summaries.html#geschlossene-und-nicht-geschlossene-flachen","title":"Geschlossene und nicht-geschlossene Fl\u00e4chen","text":"<p>Eine geschlossene Fl\u00e4che hat keinen Rand (wie zB. eine Kugel) und es gibt ein klares Innen und Aussen.</p> <p>Eine nicht geschlossene Fl\u00e4che hat einen Rand. </p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#gausssche-gesetzt","title":"Gauss'sche Gesetzt","text":""},{"location":"21HS/GED/Physik/all-ged-summaries.html#metalle","title":"Metalle","text":""},{"location":"21HS/GED/Physik/all-ged-summaries.html#rechte-hand-regel","title":"Rechte-Hand Regel","text":""},{"location":"21HS/GED/Physik/all-ged-summaries.html#rechte-hand-regel-2","title":"Rechte-Hand Regel 2","text":"<p>Wenn der Daumen in die technische Stromrichtung zeigt, dann zeigen die Finger den Umlaufsinn des \\(\\vec B\\)-Feldes an.</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#vektorfelder","title":"Vektorfelder","text":"\\[ \\vec E (x, y, z, t)=\\begin{bmatrix} E_x(x, y, z, t) \\\\ E_y(x, y, z, t) \\\\ E_z(x, y, z, t) \\\\ \\end{bmatrix} \\] <p>Ein Vektor kann ein 2D oder 3D Koordinatensystem sein, in welchem Vektoren in eine Richtung zeigen. Diese Richtung kann zus\u00e4tzlich auch noch von der Zeit abh\u00e4ngig sein.</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#magnetfeld","title":"Magnetfeld","text":"<p>\\([\\vec B(\\vec r, t)]=\\frac {Ns}{Cm}=\\frac{\\text{Newton Sekunden}}{\\text{Coulomb Meter}}=\\frac{kg}{s C} = \\text{Tesla}\\)</p> <p>Ein Magnetfeld wird in Teslas angegeben. Dabei ist ein Tesla kg pro Coulomb Sekunde oder Newton Sekunden pro Coulomb Meter.</p> <p>Um zu berechnen, mit vieviel Kraft ein Objekt mit einer Ladung beeinflusst wird, gibt es folgende Formel: \\(\\vec F = q(\\vec v \\times \\vec B)\\)</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#elektrofeld","title":"Elektrofeld","text":"<p>\\([\\vec E (\\vec r, t)]=\\frac N C = \\frac V M = \\frac{kg}{ms^3A}\\)</p> <p>Ein Elektrofeld wird Newton pro Coulomb, Volt pro Meter oder Kilogram pro Meter Sekunden\u00b3 Amper angegeben. Die Einheiten bedeuten dasselbe (Coulomb = Amper Sekunde)</p> <p>Wenn ein Leiter positiv geladen ist, wirkt er abstossend zu Elektronen, wenn ein Leiter negative geladen ist, dann wirkt er anziehend. Zu dem sind die Pfeile im senkrecht auf dem Leiter.</p> <p></p> <p>Um das Elektrofeld einer einzuelne Ladung zu berechnen, kann die folgende Formel verwendet werden</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#elektrofelder-und-magnetfelder-zusammen","title":"Elektrofelder und Magnetfelder zusammen","text":"<p>Zeitlich ver\u00e4nderliche B-Felder erzeugen zeitlich ver\u00e4nderliche E-Felder, welche wiederum zeitlich ver\u00e4nderliche B-Felder erzeugen. Diesen Effekt f\u00fchrt zu einer Welle, welche sich ausbreitet.</p> <p>Initialisiert kann es z.B. von einer Antenne werden, welche nichts anderses als Str\u00f6me zeitlich ver\u00e4ndert durch einen Draht schickt.</p> <p></p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#magnete","title":"Magnete","text":"<p>Magnete haben immer einen Nord- und S\u00fcdpol. Wenn man ein Magnet trennt, entstehen zwei neue Magnete, mit jeweils einem Nord- und S\u00fcdpol.  </p> <p>Wie auch bei elektrischen Feldern kann man auch bei magnetischen Feldern Linien zeichnen.</p> <p></p> <p>Magnete wirken eine Kraft auf bewegte Ladung  aus. Auf ruhende Ladung hat es keinen Effekt. Diese Kraft nennt sich Lorentz-Kraft und kann mit folgender Formel berechnet werden: \\(\\vec F_L=q\\cdot(\\vec v \\times \\vec B)\\)</p> <p>Wenn \\(\\vec v\\) senkrecht auf \\(\\vec B\\) steht,und \\(\\vec B\\) konstant ist, kann mit folgender Formel den Zusammenhang von der Geschwindigkeit der Ladung \\(\\vec v\\) mit dem Magnetfeld \\(\\vec B\\) und dem Radius \\(r\\) beschrieben werden: \\(m=\\frac{rq|\\vec B|}{v}\\)</p> <p>Bei Elementarteilchen ist die Ladung entweder \\(0\\), \\(e\\) oder \\(-e\\).</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#intensitat","title":"Intensit\u00e4t","text":"<p>Die Intensit\u00e4t einer ebenen Welle kann mit der folgenden Formeln berechnet werden: $$ I_{em}=\\frac{E_0B_0}{2 \\mu _0}=\\frac{E^2_0}{2c\\mu_0}=\\frac{cB^2_0}{2\\mu_0}\\ $$ Dabei ist \\(\\mu_0\\) die magnetische Feldkonstante \\(1.257\\cdot10^{-6}=4\\pi\\cdot 10^{-7}\\)</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#strahlendruck","title":"Strahlendruck","text":"<p> $$ p_s=\\frac{I_{em}}c=\\frac{E_0B_0}{2c\\mu_0}=\\frac{E^2}{2c^2\\mu_0}=\\frac{B^2_0}{2\\mu_0} $$</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#termische-strahlung","title":"Termische Strahlung","text":"<p>Wichtig: Alle Temperaturen sind in Kelvin.</p> <p>Um von Celsius zu Kelvin zu konvertieren: \\(T_{kelvin}=T_{celsius}+273.15\\)</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#formeln_2","title":"Formeln","text":"Formel Erkl\u00e4rung \\(E\\)"},{"location":"21HS/GED/Physik/all-ged-summaries.html#sichtbares-licht","title":"Sichtbares Licht","text":"<p>Sichtbares Licht:</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#lichtbrechung","title":"Lichtbrechung","text":"<p> $$ \\frac{\\sin(\\alpha)}{\\sin(\\beta)}=\\frac {c_1} {c_2}=\\frac{n_2}{n_1} $$ Dabei stellt \\(c\\) die Lichtgeschwindigkeit im jeweiligen Material dar und \\(n\\) der Brechungsindex.</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#totalreflexion","title":"Totalreflexion","text":"<p>Wenn ein Lichtstrahl genug Flach auf die \"Bruchkanta\" (z.B. die Wasseroberfl\u00e4che). In diesemfall wird alles zur\u00fcck reflektiert. F\u00fcr die Formel heisst das, dass \\(\\alpha\\ge 90\u00b0\\) oder \\(\\beta \\ge 90\u00b0\\) </p> <p></p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#photonen","title":"Photonen","text":"<p>Jedem Photon wird eine Wellenl\u00e4nge, bzw eine Frequenz zu geordnet: \\(E=h\\nu\\) , dabei ist die Planck'sche Konstante \\(h=6.626\\cdot 10^{-34} [Js]\\) und \\(E\\) die Energie des Photons.</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#elektromagnitische-strahlung","title":"Elektromagnitische Strahlung","text":"<p>Eine Elektromagnetische Strahlung besteht aus einer Welle mit einer Wellenl\u00e4nge \\(\\lambda\\) und einer Frequenz \\(\\nu\\).</p> <p>Die Formel \\(c=\\lambda\\cdot \\nu\\) zeigt den Zusammenhang zwischen \\(\\lambda\\) und \\(\\nu\\). \\(c\\) ist dabei die Lichtgeschwindigkeit (\\(c=3\\cdot10^8 m/s\\))</p> <p>Die Energie einer Strahlung kann mit \\(E=h\\nu\\) errechnet werden. \\(h\\) ist dabei die Planck'sche Konstante (\\(h=6.626\\cdot10^b{-34}\\))</p> <p></p> <p>Der Absorptionskoeffizent beschreibt, wie viel der Frequenzen ein K\u00f6rper absorbiert. <code>1</code> heisst, dass alles absorbiert wird, <code>0</code>, dass nichts absorbiert wird. </p> <p>Der Gegenpol, der Reflexionskoeffizent, beschreibt, wie viel der Frequenzen reflektiert werden und kann mit der folgenden Formel umgerechnet werden: \\(\\rho=1-\\alpha\\)</p> <p>Oft sind diese Koeffizenten abh\u00e4hngig von der Frequenz (also \\(\\alpha(\\nu)\\) und \\(\\rho(\\nu)\\)). Ein blaues T-Shirt w\u00fcrde die \"blauen Frequenzen\" reflektieren und die anderen absorbieren.</p> <p></p> <p>Bei einem schwarzen Strahler kann bewiessen werden, dass es keinen Unterschied gibt, ob die Strahlung vom Material 1 ins Material 2 oder umgekehrt geht.</p> \\[ \\alpha_{1\\rightarrow 2}=\\alpha_{2\\rightarrow 1}\\\\ \\sigma_{1\\rightarrow 2}=\\sigma_{2\\rightarrow 1} \\]"},{"location":"21HS/GED/Physik/all-ged-summaries.html#emission","title":"Emission","text":"<p>Wenn eine Strahle von einem \"d\u00fcnnem\" Material, wie Luft, aufgenommen wird, wird von Emission von Strahlung gesprochen und anstatt dem Absorptionskoeffizent, wird der Emissionskoeffizenten \\(\\varepsilon\\) verwendet (es gilt also: \\(\\alpha_{2\\rightarrow1}=\\varepsilon_{2\\rightarrow 1}\\))</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#schwarzer-strahler","title":"Schwarzer Strahler","text":"<p>Ein K\u00f6rper mit dem Reflexionskoeffizent \\(\\rho=0\\) und Absorptionskoeffizenten von \\(\\alpha=1\\) wird <code>schwarzer Strahler</code> genannt. Ein schwarzer Block kann als Schwarzerstrahler angen\u00e4hert werden (er reflektiert trotzdem noch ein wenig Licht), aber auch die Sonne, da diese keine Frequenzen und somit auch Licht reflektiert.</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#grauer-strahler","title":"Grauer Strahler","text":"<p>Ein grauer Strahler ist ein K\u00f6rper,  welcher in gewissen Wellenbereichen nicht so stark strahlen, wie ein schwarzer Strahler. Dass heisst, dass der Emmisionskoeffizent \\(\\varepsilon\\) nicht umbedingt <code>1</code> muss sein.</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#wiensches-verschiebungsgesetzt","title":"Wien'sches Verschiebungsgesetzt","text":"<p>Mit \\(\\lambda_{max}=\\frac b T\\) kann man die Temperatur in Kelvin zu der maximalen Wellenl\u00e4nge umrechnen.</p> <p>Mit dieser Formel kann man auch die Lichtfarbe, welche in Kelvin angegeben wird, erkl\u00e4ren.</p> <p></p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#stefan-boltzmann-gesetzt-gesammtleistung","title":"Stefan-Boltzmann Gesetzt (Gesammtleistung)","text":"<p>Um die Gesamtleistung eines Strahlendenk\u00f6rpers zu berechnen kann man die folgende Formel ben\u00fctzten: \\(P_{rad}=\\sigma AT^4\\) Dabei ist \\(\\sigma=5.67\\cdot10^{-8} [Wm^{-2}K^{-4}]\\) , \\(A\\) die Oberfl\u00e4che des K\u00f6rpers und \\(T\\) die Temperatur des K\u00f6rpers.</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#energetische-bilanz-eines-strahlers","title":"Energetische Bilanz eines Strahlers","text":"<p>Die Energiebilanz sagt aus, ob Energie vom K\u00f6rper aufgenommen wird und er daher w\u00e4rmer wird oder ob mehr Energie abgegeben wird und er daher k\u00e4lter wird. Dies kann mit der folgenden Formel berechnet werden:  $$ I=-\\frac{dE}{dt}=\\sigma\\varepsilon A(T^4-T_{env}^4) $$ Dabei ist \\(\\sigma=5.67\\cdot10^{-8}\\), \\(\\varepsilon\\) den Emmisionskoeffizenten, \\(A\\) die Oberfl\u00e4che des K\u00f6rpers, \\(T\\) die Temperator des K\u00f6rpers und \\(T_{env}\\) die Umgebungstemperatur.</p> <p>Bei einem grauen Strahler kann \\(\\varepsilon \\neq1\\) sein.</p> <p>Wie man an der Formeln mit den Temperaturen erkennen kann, wird die Temperatur hoch 4 gerechnet. Dies f\u00fchrt bei einer 16-facher vergr\u00f6sserung, wenn die Temperatur verdoppelt wird.</p> <p>Ein \u00e4hliches Ph\u00e4nomen gibt es, wenn die L\u00e4nge eines K\u00f6rpers veroppelt werden, wird die Fl\u00e4che vervierfacht und das Volumen verachtfacht.</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#sonneneinstrahlung","title":"Sonneneinstrahlung","text":"<p>Um zu berechnen, wie viel Energie die Sonne auf die Erde strahlt, kann folgende Formel gebraucht werden: $$ I=\\sin(\\beta)Aj $$ Dabei ist \\(\\beta\\) den Einstrahls-Winkel der Sonne, \\(A\\) die Fl\u00e4che, wo f\u00fcr man die Energie \\(I\\) berechnen m\u00f6chte und \\(j\\) der Faktor der Sonneneinstrahlung.</p> <p></p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#warmeleitung","title":"W\u00e4rmeleitung","text":"\\[ I=-Ah_{X,Y}(T_X-T_Y) \\] <p>Mit dieser Formel kann der W\u00e4rmestrom (Energie pro Zeit) berechnet werden, welcher von einem Objekt \\(X\\) mit der Temperatur \\(T_X\\) zu einem Objekt \\(Y\\) mit der Temperatur \\(T_Y\\) fliesst. \\(A\\) ist dabei die Ber\u00fchrungsfl\u00e4che der zwei Objekte und \\(h_{X,Y}\\) ist der W\u00e4rme\u00fcbertragunskoeffizent.</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#signale","title":"Signale","text":""},{"location":"21HS/GED/Physik/all-ged-summaries.html#signalarten","title":"Signalarten","text":"Name Bild Sinussignal Rechtecksignal S\u00e4gezahnsignal Dreieckssignal <p>Eine Welle wird haupts\u00e4chlich durch ihre Amplitude \\(A\\), Periode \\(T\\), Frequenz \\(\\nu\\) und Phasenverschiebung \\(\\varphi\\) definiert. Mit \\(T=\\frac 1 \\nu\\) kann man von der Frequenz \\(\\nu\\) zur Periode \\(T\\) umwandeln.</p> <p></p> <p>Ein Sinussignal kann in ein Cosinussignal und umgekehrt folgendermassen umgewandelt werden: $$ sin(a-\\frac \\pi 2)=cos(a)\\ cos(a+\\frac \\pi 2)=sin(a) $$</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#fourierzerlegung","title":"Fourierzerlegung","text":"<p>Man kann jede Funktion in eine Summe von Cosinusen oder Sinusen zerlegen</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#tone-und-klangfarbe","title":"T\u00f6ne und Klangfarbe","text":"<p>Neben eines Grundtones produziert ein Instrument auch noch Obert\u00f6ne. Als Daumenregeln: Je mehr Obert\u00f6ne, desto sch\u00e4rfer t\u00f6nt ein Instrument.</p> <p></p> <p></p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#nyquist-shannon-theorem","title":"Nyquist - Shannon Theorem","text":"<p>Es m\u00fcssen doppelt so viele Messpunkte existieren, wie die maximale Frequenz: \\(f_{measure}&gt;2\\cdot f_{max}\\). Wenn dies nicht gegeben ist, tritt Aliasing auf und es werden falsche Frequenzen gespeichert.</p> <p>F\u00fcr die tiefste Frequenz gilt, dass das Intervall \\(T\\) zwischen den Messpunkten : \\(T &gt; \\frac 1 {f_{min}}\\)</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#blip","title":"Blip","text":"<p>Ein Blip ist ein kurzes Signal. Dabei gilt, je k\u00fcrzer der Blip, desto mehr Frequenzen gibt es um die Hauptfrequenz \\(\\nu_0\\)</p> <p></p> <p>Ein zweites Prinzip, das \u00e4hlich funktioniert: Je steiler eine Flanke eines Signales, desto mehr Frequenzen werden ben\u00f6tigt, um die Flanke darzustellen.</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#schnelle-orgeln","title":"Schnelle Orgeln","text":"<p>Damit ein Ton als harmonisch empfunden wird, muss eine Frequenz domonieren. Bei einem Blip ist dies allerdings nicht umbedingt gegeben. Ebenfalls gilt, je h\u00f6her ein Ton, desto k\u00fcrzer kann er sein, dass trotzdem noch eine Frequenz dominiert und der Ton harmonisch klingt. </p> <p>Aus diesem Grund kann eine Picolo schnell spielen und eine tiefe Orgel nicht.</p> <p></p> <p>Mathematisch kann diese Relation folgendermassen ausgedr\u00fcckt werden:  $$ \\frac{\\Delta f\\cdot \\Delta t}{2}\\sim 1 $$</p>"},{"location":"21HS/GED/Physik/all-ged-summaries.html#signal-to-noise-ratio","title":"Signal-to-Noise Ratio","text":"<p>\\(A_{noise}=\\text{Die durchschnittliche Noise Amplitude}\\) $$ SNR=\\frac{P_{signal}} {P_{noise}}=\\frac{I_{signal}} {I_{noise}}=\\frac{A^2_{signal}}{A^2_{noise}} $$</p> <p>Dabei bezeichnet \\(P\\) die Leistung, \\(I\\) die Intensit\u00e4t und \\(A\\) die Amplitude.</p> <p></p>"},{"location":"21HS/GED/Physik/include.html","title":"Include","text":"<p>[[TOC]] !!!include(./00_Formeln.md)!!! !!!include(./01_ch\u00fcgelif\u00fcsik.md)!!! !!!include(./02_Elektrotechnik.md)!!! !!!include(./04_Thermische_Strahlung.md)!!! !!!include(./05_Signale.md)!!!</p>"},{"location":"21HS/INCO/00_Infos.html","title":"Infos","text":""},{"location":"21HS/INCO/00_Infos.html#prufung","title":"Pr\u00fcfung","text":"<ul> <li>Zusammenfassung (14 Seiten/7-A4 Seiten)</li> <li>CAS-Taschenrechner ist erlaubt</li> <li>Keine weiteren Hilfsmittel sind erlaubt</li> </ul>"},{"location":"21HS/INCO/00_Infos.html#tipps-vom-dozenten","title":"Tipps vom Dozenten","text":"<ul> <li>Dezibel weden oft schlecht verstanden</li> <li>Huffman kommt (fast) sicher</li> <li>Faltungscode</li> </ul>"},{"location":"21HS/INCO/2_Sequenzelle%20Bauteile.html","title":"2 Sequenzelle Bauteile","text":"<p>Software zur Simulierng: https://kra.lc/projects/jdigitalsimulator/download.html</p>"},{"location":"21HS/INCO/2_Sequenzelle%20Bauteile.html#d-flip-flop","title":"D-Flip-Flop","text":"<ul> <li>1bit Speicher</li> <li>hat 3 Eing\u00e4ge</li> <li>Clock (C)</li> <li>Eingang (D)</li> <li>Ausgang (Q)</li> </ul> <p>Wenn C von niedrig zu hoch geht (steigende Flanke), wird D gelesen und gespeichert. Der gespeicherte Wert wird auf Q ausgegeben</p> <p>Beispiele:</p> <ul> <li>Wenn D hoch ist und C steigt, dann wird ein 1 gespeichert.</li> <li>Wenn D tief ist und C steigt, dann wird ein 0 gespeichert</li> <li>Wenn D hoch oder tief ist, aber C nicht steigt, dann passiert nichts</li> </ul> <p>Fakten:</p> <ul> <li>n Flip-Flop k\u00f6nnen \\(2^n\\) Zust\u00e4nde speichern</li> <li>Periode T = T0 + T1 [s]</li> <li>T0 = Periode, in welcher das Signal 0 ist</li> <li>T1 = Periode, in welcher das Signal 1 ist</li> <li>Frequenz f = 1/T [HZ]</li> <li>Duty Cycle = T1/T = Wie viel Prozent das Signal auf 1 ist</li> </ul>"},{"location":"21HS/INCO/2_Sequenzelle%20Bauteile.html#beispiel-frequenzteiler","title":"Beispiel: Frequenzteiler","text":"<p>Bilder einf\u00fcgen</p>"},{"location":"21HS/INCO/2_Sequenzelle%20Bauteile.html#generelle-form","title":"Generelle Form","text":"<p>Bild von Folien einf\u00fcgen</p> <p>Typsiche Anwendungen</p> <ul> <li>Counter</li> <li>... (von Folien)</li> </ul>"},{"location":"21HS/INCO/2_Sequenzelle%20Bauteile.html#finit-state-machine","title":"Finit State Machine","text":""},{"location":"21HS/INCO/2_Sequenzelle%20Bauteile.html#shift-register","title":"Shift Register","text":""},{"location":"21HS/INCO/2_Sequenzelle%20Bauteile.html#paralleles-register","title":"Paralleles Register","text":""},{"location":"21HS/INCO/2_Sequenzelle%20Bauteile.html#zustands-automaten","title":"Zustands-Automaten","text":"<p>Zustands Tabelle einf\u00fcgen</p>"},{"location":"21HS/INCO/3_Zahlensysteme.html","title":"Zahlensysteme","text":""},{"location":"21HS/INCO/3_Zahlensysteme.html#generel","title":"Generel","text":"<ul> <li>Das Zusammen-Rechnen kann auch als Summenzeichen: \\(\\sum^{n}_{i=0}(a_i\\cdot b^i)\\)</li> </ul>"},{"location":"21HS/INCO/3_Zahlensysteme.html#binar","title":"Bin\u00e4r","text":"<ul> <li>Abek\u00fcrzungen:</li> <li>0b0010 0000</li> <li>0B0010 0000</li> <li>\\(0010'0000_b\\)</li> </ul>"},{"location":"21HS/INCO/3_Zahlensysteme.html#hexadezimal","title":"Hexadezimal","text":"<ul> <li>Abk\u00fcrzungen:</li> <li>\\(AF3C_h\\)</li> <li>AF3Ch (&lt;- h am Ende anf\u00fcgen)</li> <li>0xAF3C</li> </ul>"},{"location":"21HS/INCO/3_Zahlensysteme.html#umrechnen","title":"Umrechnen","text":"<ul> <li>Achtung von welcher Richtung man den Rest liest</li> </ul> <p>TODO</p> <ol> <li>\\(\\frac{a_n\\cdot b^n + a_2\\cdot b^2+a_1\\cdot b^1+a_0}{b}\\)</li> <li></li> </ol> <p>Beispiel:</p> <ol> <li>\\(1000_d:16_d = 62_d R8_d=8_h\\)</li> <li>\\(62_d : 16_d = 3_d R 14_d=E_h\\)</li> <li>\\(3_d : 16d = 0_d R 3_d=3_h\\)</li> <li>\\(\\text{Daraus gibt es von unten nach oben gelesen: } 3E8_h=1000_d\\)</li> </ol> <p>Beispiel #2:</p> <ul> <li>\\(26.6875_d = binar\\)</li> <li>Man beginnt nur mit der ganz Zahl, also 26</li> <li>\\(26_d : 2_d = 13_d R0\\)</li> <li>\\(13_d : 2_d = 6_d R1\\)</li> <li>\\(6_d : 2_d = 3_d R0\\)</li> <li>\\(3_d : 2_d = 1_d R1\\)</li> <li>\\(1_d : 2_d = 0_d R1\\)</li> <li>Von unten nach oben gelesen gibt dies: \\(11010_b\\)</li> <li>Nun noch \\(0.6875_d\\)</li> <li>\\(0.6875_d \\cdot 2 = 0.375 + 1\\)</li> <li>\\(0.374 \\cdot 2 = 0.75 + 0\\)</li> <li>\\(0.75 * 2 = 0.5 + 1\\)</li> <li>\\(0.5 * 2 = 0 + 2\\)</li> <li>Nun von oben nach unten lesen: \\(1011_b\\)</li> <li>Zusammen: \\(11010.1011_b\\)</li> </ul>"},{"location":"21HS/INCO/3_Zahlensysteme.html#addition-subtraktion","title":"Addition &amp; Subtraktion","text":"<ul> <li>Wie Schriftliches-Addieren</li> <li>Bei Hexadezimal darauf denken, dass der \u00dcbertrag im Hexadezimal-System ist. Heisst eine 1 beim \u00dcbertrag von der Einerstelle ist 16</li> </ul>"},{"location":"21HS/INCO/3_Zahlensysteme.html#ziffern-verschieben","title":"Ziffern verschieben","text":"<p>Wenn man eine 0 anh\u00e4nkt, rechnet man Mal die Basis.  Als Beispiel: \\(12 \\cdot 10 = 120\\) oder \\(10b\\cdot2_d=100_b\\)</p>"},{"location":"21HS/INCO/3_Zahlensysteme.html#multiplikaton","title":"Multiplikaton","text":"<p>Beim Bin\u00e4r (oder auch andre Zahlensystem) multiplizeren, wird jede einzelne Stelle mit der ganzen anderen Zahlen multipliziert und die Ergebnisse addiert. Dies funktioniert im Zehnersystem, wie auch in Bin\u00e4r.</p> <p>Beispiel:</p> <pre>\n101 x 1110\n  1 x 1110 =   1110\n 0  x 1110 =  0000\n1   x 1110 = 1110\n            1000110\n</pre>"},{"location":"21HS/INCO/3_Zahlensysteme.html#dividieren","title":"Dividieren","text":"<pre>\n 6   : 5   = 1.2\n 110 : 101 = 1.0001\n-         (hat 1x platz -&gt; 1.)\n 001\n  010      (ein 0 wird hinzugef\u00fcgt)      \n  0100     (da 101 nicht in 100 hineinpasst, wird ein weiteres 0 hinzugef\u00fcgt -&gt; 1.0)\n  01000    (ein weiteres 0 wird hinzugef\u00fcgt -&gt; 1.00)\n   -101    (jetzt kann 101 abgezogen werden -&gt; 1.001)\n    011\n</pre> <p>Dieses Spiel k\u00f6nnte man nun wiederholen bis in alle Ewigkeit, da 1.2 sich nicht als bin\u00e4r oder hexadezimal Zahle l\u00e4sst.</p>"},{"location":"21HS/INCO/3_Zahlensysteme.html#minuszahlen","title":"Minuszahlen","text":"<p>Um Minuszahlen ohne ein Minuszeichen darzustellen wird in der Informatik einen Trick verwendet. </p>"},{"location":"21HS/INCO/3_Zahlensysteme.html#9er-10er-komplement","title":"9er- &amp; 10er-Komplement","text":"<p>Wenn man von 0 Eins abzieht (-1 rechnet), dann bekommt man -1. Wenn man nun dasselbe durchf\u00fchrt, aber ohne Minuszeichen, dann wird aus 0000 \\(\\to\\) 9999, da es einen Underflow gibt. Man halbiert die Anzahl m\u00f6glichen Zahlen, da nun die H\u00e4lfte der Zahlen f\u00fcr positive Zahlen und die andere H\u00e4lfte f\u00fcr die negativen Zahlen steht. Dies nennt sich das Komplement.</p> <p>Wenn im 10-er System gedacht wird,  ist das 9-er Komplement, wenn jede Ziffer von <code>9</code> abgez\u00e4hlt wird. Die negative Representation von <code>0001</code> (also -1), w\u00e4re <code>9998</code>. Dieses System hat aber den Nachteil, dass man zwei 0 hat: <code>9999</code> und <code>0000</code>. </p> <p>Da dies Platzverschwendung w\u00e4re, gibt es das 10er-Komplement, in dem noch <code>+1</code> gerechnet wird. Aus <code>0001</code> wird zuerst <code>9998</code> und dann <code>9999</code>.</p> <p></p>"},{"location":"21HS/INCO/3_Zahlensysteme.html#1er-2er-komplement","title":"1er- &amp; 2er-Komplement","text":"<p>Dasselbe Konzept, wie beim 9er-, bzw. 10er-Komplement kann auch auf das 1er- und 2er-Komplement \u00fcbertragen werden. </p> <p>Beim 1er-Komplement wird jede Ziffer von <code>1</code> abegez\u00e4hlt. Die negative Representation von <code>0001</code> ist also <code>1110</code>. Auch hier hat man zwei Representation f\u00fcr die Zahl <code>0</code>, daher wird im 10er-Komplement noch <code>+1</code> gerechnet. Aus <code>1110</code> wird also <code>1111</code> f\u00fcr <code>-1</code>.</p> <p>Hier sieht man die verschiednenen Verfahren</p> Bin\u00e4r unsigned 1er-Komplement 2er-Komplement 1111 15 -0 -1 1110 14 -1 -2 1101 13 -2 -3 1100 12 -3 -4 1011 11 -4 -5 1010 10 -5 -6 1001 9 -6 -7 1000 8 -7 -8 0111 7 7 7 0110 6 6 6 0101 5 5 5 0100 4 4 4 0011 3 3 3 0010 2 2 2 0001 1 1 1 0000 0 0 0 <p>Dasselbe Verfahren funktioniert auch f\u00fcr Kommazahlen. In diesemfall wird die ganze Kommazahl als eine Zahl gedacht und nur einmal +1 beim 2er-Komplement gerechnet. </p> <p>Um eine Zahl in ihr Komplement um zuwandeln, muss der Umwandler wissen, wie viel Stellen die Zahl hat. Daher am besten 1, als 0001 schreiben.</p>"},{"location":"21HS/INCO/3_Zahlensysteme.html#over-underflows","title":"Over- &amp; Underflows","text":"<p>Ein Overflow, bzw. ein Underflow passieren, wenn eine Zahl gr\u00f6sser ist, als der Wertebereich, in denen man sie speichert. Je nachdem ob ein Komplement verwendet wird oder nicht, ist dieser Punkt an einem anderen Ort.</p> <p>Bei Zahlen ohne Vorzeichen ist der Overflow-Punkt zwischen 0 und 15: </p> <p>Bei Zahlen, welche mit dem 2er-Komplement formatiert sind, ist dieser Punkt zwischen 7 und -8:</p>"},{"location":"21HS/INCO/3_Zahlensysteme.html#verschiedene-codes","title":"Verschiedene Codes","text":""},{"location":"21HS/INCO/3_Zahlensysteme.html#bcd-code-binary-code-decimal","title":"BCD Code (Binary Code Decimal)","text":"<p>Ein Code, welcher verwendet wird, wenn Dezimalzahlen auf einer Anzeige dargestellt werden. Die Bin\u00e4rzahlen <code>0000</code> bis <code>1001</code> gelten f\u00fcr 0 - 9, die anderen sind ung\u00fcltige Zeichen.</p> <p></p>"},{"location":"21HS/INCO/3_Zahlensysteme.html#gray-code","title":"Gray Code","text":"<p>Gray Code ist ein Code, bei welchen maximal 1 Bit von einem Codewort zum einem benachbarten Codewort (z.B. 5 zu 6 oder 5 zu 4). Dieses System wird f\u00fcr Schleifkontakte genutzt, da es dort problematisch sein kann, wenn sich mehrere Bits gleichzeitig \u00e4ndern. Wenn sich zwei Bits \u00e4ndern, kann es sein, dass ein Bit sich ein wenig sp\u00e4ter \u00e4ndert und so der Computer eine Falsche Zahl liest.</p> Dezimal GrayCode 0 000 1 001 2 011 3 010 4 110 5 111 6 101 7 100 <p>Oft wird ein Graycode f\u00fcr Schleifkontakte auf einer Drehscheibe genutzt.</p> <p></p>"},{"location":"21HS/INCO/3_Zahlensysteme.html#ascii-code","title":"ASCII Code","text":""},{"location":"21HS/INCO/3_Zahlensysteme.html#unicode","title":"Unicode","text":"<p>Unicode ist ein Zeichensatz in dem alle Modernensprachen (und viele historische Sprachen) abgebildet werden k\u00f6nnen und hat das Ziel die inkompatibilit\u00e4t zwischen Encodings aufzuheben. Dabei hat Unicode Platz f\u00fcr rund 1 Milion Zeichen, wovon heute ca 10% genutzt sind. </p> <p>Dabei definiert der Standart 17 Ebenen. Die erste ist die Base Multilinugal Plane (BMP), in welcher die Zeichen der modernen Sprachen abgelegt sind. In der Supplementary Multilingual Plane (SMP) sind historische Zeichen, Symbole und auch Emoticons abgelegt.</p>"},{"location":"21HS/INCO/3_Zahlensysteme.html#utf-8-utf-16-utf-32","title":"UTF-8, UTF-16 &amp; UTF-32","text":"<p>UTF-8 ist ein Code mit variabler Breite und kann 1 bis 4 Bytes pro Zeichen gross sein. </p> Unicode-Bereicht Utf-8 Codierung Anzahl Code-Bits 0000'0000 - 0000'007F 0xxxxxxx 7 0000'0080-0000'07FF 110xxxxx 10xxxxxx 11 (5 + 1*6) 0000'0800-0000'FFFF 1110xxxx 10xxxxxx 10xxxxxx 16 (4 + 2*6) 0001'0000-0010'FFFF 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 21 (3 + 3*6) <p>UTF-16 ist ein Encoding, welches entweder aus 2 oder 4 Bytes besteht. Die Code Points zwischen \\(0000_h\\) und \\(FFFF_h\\) k\u00f6nnen mit 2 Bytes dargestellt werden. F\u00fcr h\u00f6hrere Code Points werden 4 Bytes ben\u00f6tigt. Das ein 2 bytiges und 4 bytiges Code Wort nicht verwechselt werden, wird der Bereich \\(D800_h\\) bis \\(DFFF_h\\) freigehalten. Wenn ein Code Wort in diesem Bereich liegt, dann ist es klar, dass die n\u00e4chsten zwei Bytes auch noch dazu geh\u00f6ren.</p>"},{"location":"21HS/INCO/3_Zahlensysteme.html#endiannes","title":"Endiannes","text":"<p>Wenn mehrere Bytes als eine Zahl verschickt werden, stellt sich die Frage, welches Byte zuerst kommt. Hier gibt es zwei Varianten.</p> Name Beschreibung Darstellung Little Endian Das niederstwertige Byte wird zuerst geschickt FEDCBA9 87654321 Big Endian Das h\u00f6chstwertige Byte wird zuerst geschickt 87654321 FEDCBA9"},{"location":"21HS/INCO/4_Informationstheorie.html","title":"Was ist Information","text":"<ul> <li>Etwas, was das eigene Wissen erweitert; etwas neues, was wir vorhin noch nicht wussten</li> <li>mit \\(F=ceiling(log(_2(N))\\)</li> </ul>"},{"location":"21HS/INCO/4_Informationstheorie.html#daten-quellen","title":"Daten Quellen","text":""},{"location":"21HS/INCO/4_Informationstheorie.html#discrete-memoryless-source-dms","title":"Discrete Memoryless Source (DMS)","text":"<ul> <li>Discrete = Einzelne Nachrichten</li> <li>Die einzelnen Nachrichten sind Unabh\u00e4ngig</li> </ul> <p>Beispiele:</p> <ul> <li>W\u00fcrfel (errinnert sich nicht an den letzten Wurf, getrennte Nachrichten)</li> <li>Liste von Nummerschild von Autos von einer Kamera auf der Autobahn</li> </ul>"},{"location":"21HS/INCO/4_Informationstheorie.html#binary-memoryless-source-bms","title":"Binary Memoryless Source (BMS)","text":"<ul> <li>Wie eine DMS, aber nur 1 oder 0</li> <li>(scheint ein wenig nutzlos zu sein\u2026)</li> </ul>"},{"location":"21HS/INCO/4_Informationstheorie.html#irrelevanz","title":"Irrelevanz","text":"<p>Informationen ist irrelevant, wenn f\u00fcr den Empf\u00e4nger die Informationen nicht ben\u00f6tigt. Um dies festzustellen zu k\u00f6nnen, muss man wissen, f\u00fcr was der Empf\u00e4nger die Informationen verwendet.</p>"},{"location":"21HS/INCO/4_Informationstheorie.html#mathe-dahinter","title":"Mathe dahinter","text":""},{"location":"21HS/INCO/4_Informationstheorie.html#information","title":"Information","text":"<p>\\(I(x)=log_2(\\frac 1 {P(x)})\\)</p> <p>Diese Formel stellt dar, wie gross der \u00dcberraschungseffekt ist. Die Einheit ist \"Bits\". </p> <p>(\\(P(x)\\) ist, wie wahrscheinlich es ist, dass x vorkommt)</p>"},{"location":"21HS/INCO/4_Informationstheorie.html#entropie","title":"Entropie","text":"<p>Die Entropie ist der gewichtete Durchschnitt der Informationen und wird mit folgender Formel berechnet:</p> <p>\\(H(X)=\\sum^{N-1}_{n=0} P(x_n)\\cdot I(x_n)=\\sum^{N-1}_{n=0}P(x_n)\\cdot log_2(\\frac 1 {P(x_n)})\\)</p> <p>Das folgende Bild zeigt die Entropie von einer BMS mit der Wahrscheinlichkeit von \\(p\\) f\u00fcr das eine Zeichen (und die Wahrscheinlichkeit \\(1-p\\) f\u00fcr das andere Zeichen). Wie man sieht, ist die Entropie am h\u00f6chsten, wenn alle Zeichen gleich oft Vorkommen.</p> <p></p>"},{"location":"21HS/INCO/4_Informationstheorie.html#zweier-logarithmus-ohne-zweier-logarithmus","title":"Zweier Logarithmus ohne zweier Logarithmus","text":"<ul> <li>\\(2^x=K\\)</li> <li>\\(log(2^x)=log(K)\\)</li> <li>\\(x\\cdot log(2)=log(K)\\)</li> <li>\\(x=\\frac{log(K)}{log(2)}\\)</li> </ul>"},{"location":"21HS/INCO/4_Informationstheorie.html#quellenkodierung","title":"Quellenkodierung","text":""},{"location":"21HS/INCO/4_Informationstheorie.html#redundanz","title":"Redundanz","text":"<p>Daten, welche reversible entfernt werden k\u00f6nnen. </p> <p>Um dies zu berechnen, kann man von der Code-L\u00e4nge die Entropie abziehen. Jetzt kann es aber sein, dass es Codierungen gibt, bei welcher nicht alle Zeichen dieselbe L\u00e4nge haben. Daher braucht man die mittlere Codewortl\u00e4nge, welche wie folgt berechnet wird:</p> <p>\\(L(X)=\\sum^{N-1}_{n=0}P(x_n)\\cdot l(x_n)\\)</p> <p>(Also eigentlich einfach nur der gewichtete Durchschnitt von allen Codel\u00e4ngen)</p> <p>Die Redundanz ist nun folgendes:</p> <p>\\(R(X)=L(X)-H(X)\\)</p> <p>Wenn die Redundanz &lt; 0 ist, dann komprimiert man mit Verl\u00fcste, da nicht alle Informationen hineinpassen und somit Informationen weggeworfen wird</p>"},{"location":"21HS/INCO/4_Informationstheorie.html#huffman-codes","title":"Huffman Codes","text":"<p>Codes mit dem Huffmanverfahren sind:</p> <ul> <li> <p>automatisch pr\u00e4fixfrei</p> </li> <li> <p>optimal (Das heisst, es gibt keine besseren pr\u00e4fixfreie Code)</p> </li> </ul>"},{"location":"21HS/INCO/4_Informationstheorie.html#vorgehen","title":"Vorgehen","text":"<ol> <li>Ordne alle Symbole nach aufsteigenen Auftretenswahrscheinlichkeiten auf einer Zeile. Dies sind die Bl\u00e4tter</li> <li>Notiere unter jedes Blatt seine Wahrscheinlichkeit</li> <li>Schliesse die beiden Bl\u00e4tter mit der kleinsten Wahrscheinlichekit an einer gemeinsamen Astgabel an und ordne dem Ast die Summe der Wahrscheinlichkeiten zu</li> <li>Wiederhole Schritt 2 es nur noch ein Stamm gibt</li> <li>Jedem Ast wird nun ein eine 0, wenn man links geht und eine 1 wenn man rechts geht, zugewiessen</li> <li>Die Pfade zu allen Bl\u00e4tter aufschreiben. Das ist der Huffmancode</li> </ol>"},{"location":"21HS/INCO/4_Informationstheorie.html#lauflangenkodierung","title":"Laufl\u00e4ngenkodierung","text":"<p>Man speichert, wie oft ein Symbol vorkommt. Anstatt \"AAAAAABBC\" k\u00f6nnte man einfach \"6A2B1C\"</p> <p>Um auch Symbole, welche nur einmal vorkommen, effizent zu speichern, wird ein Token benutzt, welcher symbolisiert, dass nun eine Laufl\u00e4ngenkodierung kommt.</p> <p>Um das obere Beispiel nochmals aufzugreiffen: \"Z6AZ2BC\". Hier wurde Z als Marker (oder Token) gew\u00e4hlt, und nur wenn ein Z gelesen wird, wird das folgende als L\u00e4nge interpretiert.</p> <p>Wie viel Zeichen als Marker reserviert werden soll, ist abh\u00e4ngig von der Quelle in ihre statistischen Eigenschaften.</p>"},{"location":"21HS/INCO/4_Informationstheorie.html#lz77","title":"LZ77","text":"<p>Ein Token ist definiert als (Offset, L\u00e4nge, Zeichen). Es hat eine fixe L\u00e4nge.</p> <p>Es gibt ebenfalls ein Such- und ein Vorschau-Buffer. Es werden im Such-Buffer nach denselben Muster gesucht.</p> <p>Falls ein Match gefunden wurde, wird ein Token geschrieben. In diesem ist der Offset des Such-Buffer, die L\u00e4nge ist die L\u00e4nge des Musters, und das Zeichen das n\u00e4chste Zeichen nach dem gemachten Muster.</p> <p>Falls kein Match gefunden wurde, wird folgender Token geschrieben (0, 0, Zeichen). Dies ist n\u00f6tig, da zu Beginn des Algorithmus noch nichts im Such-Buffer ist.</p> <p></p> <p>Um dies zu dekodieren, wird dies R\u00fcckw\u00e4rts durch gearbeitet</p>"},{"location":"21HS/INCO/4_Informationstheorie.html#lzw","title":"LZW","text":"<p>LZW bassiert auf LZ77 mit einigen \u00c4nderungen. Anstatt eines \"Sliding Window\" ben\u00fctzt man ein W\u00f6rterbuch. Ein Token besteht nur aus einem Index, welchen auf das W\u00f6rterbuch referenziert. Der Dekoder baut gleichzeitig mit den empfangenen Tokens das W\u00f6rterbuch auf.</p> <p>Um ein Text zu enkodieren, werden folgende Schritte durchgef\u00fchrt</p> <ol> <li> <p>Suche das aktuelle Zeichen im W\u00f6rterbuch</p> </li> <li> <p>So lange verl\u00e4ngern, wie m\u00f6glich und dieses als Token versenden</p> </li> <li> <p>Ein neuen Eintrag Token + der n\u00e4chste Zeichen ins W\u00f6rterbuch hinzuf\u00fcgen</p> </li> </ol> <p>Um nun einen Tokenstream wieder zu dekodieren, muss man folgendes tun:</p> <ol> <li> <p>Empfangener Token ausgeben</p> </li> <li> <p>Empfangener Token ins W\u00f6rterbuch als neuer Eintrag hinzuf\u00fcgen (mit einem Blank am Ende)</p> </li> <li> <p>N\u00e4chster empfangener Token ausgeben und die Blank vom letzten Schritt ausf\u00fcllen mit dem ersten ausgegeben Buchstaben des empfangen Tokens</p> </li> <li> <p>Gehe zu Schritt 2</p> </li> </ol>"},{"location":"21HS/INCO/5_JEPG.html","title":"5 JEPG","text":""},{"location":"21HS/INCO/5_JEPG.html#was-ist-ein-digitales-bild","title":"Was ist ein digitales Bild?","text":"<p>Ein Bild ist ein zweidimensionales Pixel-Array</p> <ul> <li> <p>schwarzweiss Bild: 2-wertige Pixel</p> </li> <li> <p>Graustufenbild: Pixel mit Wertebereich \\([0..2^W-1]\\), typisch W=8 bit</p> </li> <li> <p>nat\u00fcrliches Bild: (Farb-)Pixel mit 3 Komponenten (z.B. RGB). Benachbarte Pixelwerte sind oft fast gleich gross</p> </li> <li> <p>Grafik oder syntetisches Bild: haben oft scharfe Kanten</p> </li> </ul>"},{"location":"21HS/INCO/5_JEPG.html#jpeg-verfahren","title":"JPEG Verfahren","text":"<ol> <li> <p>Das RGB Bild wird zu einem YCrCb Bild umgewandelt</p> </li> <li> <p>Das Bild in 8x8 Bl\u00f6cke aufteilen</p> </li> <li> <p>Eine Discrete Cosine Transform (DCT) wird auf das Bild angewendet</p> </li> <li> <p>Quanitzation - Es werden gewisse Bildinformationen mehr komprimiert als andere, da sie der Mensch besser wahrnehmen kann</p> </li> <li> <p>DC und AC Seperation</p> </li> <li> <p>Runlength Encoding &amp; Huffman enkodierung</p> </li> <li> <p>In ein File verpacken</p> </li> </ol> <p>Man benutzt bei JPG die Luminance, da das menschliche Auge auf Helligkeit empfindlicher ist</p>"},{"location":"21HS/INCO/5_JEPG.html#schritt-1-rgb-zu-ycrcb","title":"Schritt 1 - RGB zu YCrCb","text":"<ul> <li> <p>Y - Helligkeitinformationen (eigentlich. ein Graustufenbild)</p> </li> <li> <p>Cb - Blau anteil</p> </li> <li> <p>Cr - Rotanteil</p> </li> </ul> <p>Im Folgenden Bild sieht man die Beziehung von Cb und Cr:</p> <p></p> <p>Um die Luminaz von einem Pixel zu berechnen, kann man eine gewichtetes Summe der RGB Pixel errechnen: \\(L=0.299\\cdot R + 0.587 \\cdot G + 0.115\\cdot B\\). Die Faktoren kommen davon, dass das menschliche Auge die Farben Blau, Gelb und Rot verschieden wahrnehmen.</p> <p>\\(\\begin{bmatrix} Y \\\\ C_B \\\\ C_R \\end{bmatrix} = \\begin{bmatrix}0.299 &amp; 0.587 &amp; 0.114\\\\ -0.1687 &amp; -0.3313 &amp; 0.5\\\\ 0.5 &amp; -0.4187 &amp; -0.0813\\end{bmatrix} \\cdot \\begin{bmatrix} R\\\\G\\\\B \\end{bmatrix} + \\begin{bmatrix} 0 \\\\ 128 \\\\ 128 \\end{bmatrix}\\)</p> <p>Umgekehrt kann man folgende Formel benutzen:</p> <p>\\(\\begin{bmatrix} R \\\\ G \\\\ B \\end{bmatrix} = \\begin{bmatrix}1 &amp; 0 &amp; 1.402\\\\ 1 &amp; -0.34414 &amp; -0.71414\\\\ 1 &amp; 1.772 &amp; 0\\end{bmatrix} \\cdot \\begin{bmatrix} Y\\\\C_B - 128\\\\C_R - 128\\end{bmatrix}\\)</p>"},{"location":"21HS/INCO/5_JEPG.html#downsampling","title":"Downsampling","text":"<p>Man gibt mit dem folgenden Muster \"Blockbreite:Reduktion Breite:Redutktion H\u00f6he\"</p> <p></p>"},{"location":"21HS/INCO/5_JEPG.html#diskrete-cosinus-transformation-dct","title":"Diskrete Cosinus Transformation (DCT)","text":"<p>Die Idee von einer DCT ist, dass anstatt in einem Pixel zu speichern, wie Schwarz dieser Pixel ist, speichert man, wie stark eine Frequenz in einem 8x8-Block vorkommt. Diese Operation ist komplet reversieble und es werden keine Informationen verloren.</p> <p>Im unteren Beispiel sieht man eine 1D-DCT. In diesem Fall ist der Pixel-Block 8x1 gross. Im ersten Pixel wird gespeichert, wie hell das Bild ist. Dieser Wert wird auch DC-Wert genannt von Direct Current, da die dargestelle \"Frequenz\" 0Hz hat, wie man im unteren Beispiel sieht.</p> <p>Der zweite Pixel stellt danach dar, wie stark die Frequenz mit 1Hz in diesem 8x1-Block verterten ist. Der dritte Pixel, wie stark 2Hz vertretten sind und so weiter.</p> <p></p> <p>Dieses Prinzip, wie es in 1D funktioniert, kann auch f\u00fcr ein 2D Bild angewendet werden. Hierbei stellen die Pixel dar, wie stark eine horizontale und vertikale Frequenz vertreten sind. Im Beispiel unten ist der Pixel 1/1 (der erste Pixel) wieder der DC, mit den Frequenzen 0Hz/0Hz. Der Pixel 2/2 hat die Frequenz 1Hz/1Hz, der Pixel 4/3 hat die Frequenzen 3Hz/2Hz. Im unteren Bild sieht man die Muster, welche erkannt werden.</p> <p></p> <p>F\u00fcr diese Konvertierung gilt die folgende Formel: $$ F_{vu}=\\frac 1 4 C_u C_v \\sum^7_{x=0}\\sum^7_{y=0}B_{yx} \\cos(\\frac {(2x+1)u\\pi} {16})\\cos(\\frac{(2y+1)v\\pi} {16}) $$ Dies gibt f\u00fcr jedes \\(B_{yx}\\) einen Wert \\(F_{vu}\\).</p> <p>Diese Konvertierung kann mit einer Inversen DCT wieder r\u00fcckg\u00e4ngig gemacht werden: $$ B_{yx}=\\frac 1 4 \\sum^7_{u=0}\\sum^7_{v=0}C_uC_vF_{vu}\\cos(\\frac{(2x+1)u\\pi}{16})\\cos(\\frac{(2y+1)v\\pi}{16}) $$ Nach einer DCT ergibt dies ein Resultat, wie dies:</p> <p></p> <p>In diesem Bild gibt es einige gr\u00f6ssere Werte im oberen linken Ecken. Die anderen Werte sind relative klein. </p>"},{"location":"21HS/INCO/5_JEPG.html#quantisierung","title":"Quantisierung","text":"<p>Beim Quantisieren wird das Resultat der DCT gewichtet. Daf\u00fcr nimmt man eine weitere  Tabelle mit Werte. Jeder Wert in der DCT Tabelle wird durch den Wert an derselben Position in der Gewichtungstabelle geteilt. Danach wird auf Ganzzahlen gerundet. Damit wirft man Daten weg, welche weniger relevant sind.</p> <p></p> <p></p>"},{"location":"21HS/INCO/5_JEPG.html#run-lenght-encoding","title":"Run-Lenght Encoding","text":"<p>Es gibt folgende Tokens:</p> <ul> <li> <p>(DC Wert) - Ein Token f\u00fcr den DC Wert. Dies ist der Wert oben links</p> </li> <li> <p>(Anzahl Nullen, n\u00e4chstes nicht Null-Zeichen) - Die Anzahl Nullen vor dem n\u00e4chsten Zeichen</p> </li> <li> <p>(EOB) - End Of Block -&gt; der Rest ist Null</p> </li> </ul> <p>Dies wird danach noch mit einem Huffmancode enkodiert. Daf\u00fcr kann eine fixen Code verwendet werden oder der Encoder kann einen selbst erstellen.</p> <p>Der DC Wert wird mit eine \"horizontale Pr\u00e4diktion\" verwendet. Dabei sieht ein Token (Anzahl Bits,  \\(DC_n-DC_{n-1}\\)). Es wird also die Differenz des DC-Wertes zwischen zwei Bl\u00f6cken gespeichert, da sich diese selten komplet \u00e4ndert.</p>"},{"location":"21HS/INCO/5_JEPG.html#mpeg","title":"MPEG","text":"<p>Ansatz: Man speichert nicht jedes Frame einzeln, sondern die Unterschiede</p>"},{"location":"21HS/INCO/5_JEPG.html#makroblocke","title":"Makrobl\u00f6cke","text":"<p>Wenn man ein Video komprimiert, teilt man ein Frame in mehrere Makrobl\u00f6cke auf. Danach sucht man im letzten Bild nach demselben Block. Da man nicht das ganze Bild absuchen m\u00f6chte, sucht man nur in einem Suchfenster um den Block herum, da man an nimmt, dass sich das Bild nicht gross ver\u00e4ndert. </p> <p>Wenn kein Makroblock im letzten Frame im Suchfenster gefunden wurde, wird der Block als JPG komprimiert und gespeichert.</p> <p>Um Makrobl\u00f6cke zu finden, werden nicht die eigentlich Pixel verglichen, da kleine \u00c4nderungen, welche von z.B. von Sensorrauschen verursacht wurde, dazuf\u00fchren w\u00fcrde, dass man keine Bl\u00f6cke finden.</p> <p>MPEG schreibt nicht vor, wie man nach diesen Bl\u00f6cke sucht. Meistens schr\u00e4nkt man aber das Fenster zwischen 7-15 Pixel ein.</p>"},{"location":"21HS/INCO/5_JEPG.html#frames","title":"Frames","text":"<ul> <li> <p>Intra Frame (I-Frame) - Ein koplettes Frame als JPG</p> </li> <li> <p>Predicated Frame (P-Frame) - ein vorheriges Frame wird als Referenz benutzt</p> </li> <li> <p>Bidirectional Frame (B-Frame) - ein vorheriges Frame, wie auch das n\u00e4chste Frame kann als Referenz benutzt werden</p> </li> </ul> <p></p> <p>Da man bei den B-Frames auch voraussehen kann, ist die Reihenfolge der Frames wie man es schaut, nicht dieselbe, wie man es sendet.</p> <p></p>"},{"location":"21HS/INCO/5_JEPG.html#geschichte","title":"Geschichte","text":"<ul> <li> <p>MPEG-1:</p> </li> <li> <p>Typisch f\u00fcr Fernseher</p> </li> <li> <p>318 MBit/s -&gt; 1.5 MBit/s</p> </li> <li> <p>MPEG-2:</p> </li> <li> <p>F\u00fcr HD-TV </p> </li> <li> <p>Resultierte in ca. 80 - 100 MBit/s</p> </li> </ul>"},{"location":"21HS/INCO/6_Audio.html","title":"Audio","text":""},{"location":"21HS/INCO/6_Audio.html#abtastrate","title":"Abtastrate","text":"<p>Um  ein Audio-Signal digital zu verwenden, muss man es Abtasten. Laut dem Abtasttheorem von Shanon muss die Abtastrate doppelt so gross sein, wie die maximale Frequenz (\\(f_{abtast} &gt; 2\\cdot f_{max}\\)). Wegen dem Abtasten wird das Signal quantisiert. </p> <p>Wenn man \\(2\\cdot f_{max}\\) \u00fcbersteigt, beginnt sich die Frequenz zu spiegeln. Die hat die Frequenz \\(f_{abtast}-f_{zu hohe Frequenz}\\)</p>"},{"location":"21HS/INCO/6_Audio.html#quantisierungsrauschen","title":"Quantisierungsrauschen","text":"<p>Das Quantisierungsrauschen entsteht bei Rundungsfehler auf die n\u00e4chste Zahl, welche abgespeichert weren kann.</p> <p></p> <p>Das Rauschen ist die Differenz zwischen dem Analogensignal und dem digitalen Signal. Das Rauschen wird durch die gr\u00fcne \"Kurve\" dargestellt.</p> <p></p> <p>Um jede erh\u00f6hung um 1 Bit nimmt das Rauschen um 6dB ab</p>"},{"location":"21HS/INCO/6_Audio.html#schalldruckpegel-db","title":"Schalldruckpegel (dB)","text":"<p>Der Schallpegel wird mit der folgenden Formel berechnet: </p> <p>\\(L=20\\cdot log_{10}(\\frac p {p_0})\\) </p> <ul> <li> <p>\\(p\\) = Effiektiver Schaldruck [PA]</p> </li> <li> <p>\\(p_0\\)=Bezugsschalldruck </p> </li> </ul> <p>Wie man in der Formel sieht, ist Decibel eine Logarithmischeschwelle</p>"},{"location":"21HS/INCO/6_Audio.html#puls-code-modulation-pcm","title":"Puls Code Modulation (PCM)","text":""},{"location":"21HS/INCO/6_Audio.html#itu-t-g711-a-law","title":"ITU-T G.711 (A-law)","text":"<p>Der Frequenzbereicht ist 300-3400Hz und wird mit 8000Hz abgetastet. Ein Abtastpunkt werden als 8 bit gespeichert, das ergibt eine Datenrate von \\(8000Hz \\cdot 8Bit = 64KBit/s\\)</p>"},{"location":"21HS/INCO/6_Audio.html#cd-adio","title":"CD-Adio","text":"<p>Eine CD ben\u00fctzt eine Abtastfrequenz von 44.1kHz und speichert dies als 16-bit Wert ab. Die Datenrate ist \\(44'100 Hz * 2Byte * 2 Kan\u00e4le = 176'400 Byte/s=1.411 MBit/s\\)</p> <p>Quantisiert wird Linear. Dies heisst dass die Y-Achse in einem solchen Diagram linear ist.</p>"},{"location":"21HS/INCO/6_Audio.html#arten-von-pcm","title":"Arten von PCM","text":"<p>PCM kann auf mehrere Arten abgespeichert werden</p> <ul> <li> <p>Absolut: Jeder Wert wird als absoluter Wert abgespeichert</p> </li> <li> <p>Diffrerential-PCM (DPCM): Es werden nur die Differenzen gespeichert </p> </li> <li> <p>Adaptive Differential-PCM (ADPCM): Es werden die Differenzen der Differenzen gespeichert. Der Sinn dahinter: Bei Audio-Files \u00e4ndert sich die Differenz nicht fest, also ist es effizenter nur die Differenzen der Differenzen zu speichern   </p> </li> </ul>"},{"location":"21HS/INCO/6_Audio.html#linear-prediction-coder-lpc","title":"Linear Prediction Coder (LPC)","text":"<p>Das \u00c4quivelent zu der DCT in der Audio Welt. Wird heutzutage nicht mehr verwendet.</p>"},{"location":"21HS/INCO/6_Audio.html#wave-file-format","title":"Wave File Format","text":"<p>Hier ist das Header Format von einem Wave-Files, welches PCM Daten enth\u00e4lt. Werte im Wave-Format sind im Little-Endian Format abgespeichert (Tieferer Wert kommt zu erst)</p> <p></p> Offset Byte Name Erkl\u00e4rung 0 4 ChunkID Contains the letters \"RIFF\" in ASCII form 4 4 ChunkSize 36 + SubChunk2Size, or more precisely:4 + (8 + SubChunk1Size) + (8 + SubChunk2Size)This is the size of the rest of the chunkfollowing this number. This is the size of theentire file in bytes minus 8 bytes for thetwo fields not included in this count: ChunkID and ChunkSize. 8 4 Format Contains the 4 letters \"WAVE\" 12 4 Subchunk1ID Contains the 4 letters \"fmt \" 16 4 Subchung1Size 16 for PCM. This is the size of the rest of the Subchunk which follows this number. 20 2 AudioFormat PCM = 1 (i.e. Linear quantization) Values other than 1 indicate some form of compression. 22 2 NumChannels Mono = 1, Stereo = 2, etc. 24 4 SampleRate 8000, 44100, etc. 28 4 ByteRate == SampleRate * NumChannels * BitsPerSample/8 32 2 BlockAlign == NumChannels * BitsPerSample/8The number of bytes for one sample including all channels. 34 2 BitsPerSample 8 bits = 8, 16 bits = 16, etc. 36 4 Subchunk2Id Contains the 4 letters \"data\" 40 4 Cubchank2Size == NumSamples * NumChannels * BitsPerSample/8This is the number of bytes in the data. You can also think of this as the size of the read of the subchunk following this number. 44 * Data The actual sound data."},{"location":"21HS/INCO/6_Audio.html#flac-free-lossless-audio-codec","title":"FLAC (Free Lossless Audio Codec)","text":"<ul> <li> <p>Kompressionsrate: 30-50%</p> </li> <li> <p>Ben\u00fctzt ein Verfahren \u00e4hlich auf die LZ-Codierung</p> </li> </ul>"},{"location":"21HS/INCO/6_Audio.html#mpeg","title":"MPEG","text":"<p>Es werden zwei Fakten des Menschlichen Geh\u00f6hres ausgenutzt:</p> <ol> <li> <p>die menschliche H\u00f6hrschwelle        Die H\u00f6hrschwelle ist bei jedem Mensch verschieden und \u00e4ndert isch auch \u00fcber das Leben einer Person.    </p> </li> <li> <p>Spektrale Maskierung    Wenn ein Lauterton abgespielt wird, werden leisere T\u00f6ne unh\u00f6hrbar. Kurz bevor einem Lautenton h\u00f6hrt man bereits leisse T\u00f6ne nicht mehr. Dasselbe gillt auch f\u00fcr danach.    </p> </li> </ol> <p>Diese zwei Fakten m\u00fcssen zusammen betrachtet werden. In der Unteren Graphik sieht man, wie die beiden Effekte kombiniert wurden.</p> <p></p> <p>Man unterteilt das Audiosignal in mehrere Frequenzb\u00e4nder. Jedes Frequenband enkodiert man mit genau so viel Bits, so dass das Quantisierungsrauschen unter der H\u00f6hrschwelle bzw. Maskierungsschwelle bleibt.  </p> <p></p>"},{"location":"21HS/INCO/6_Audio.html#mp3","title":"MP3","text":"<ul> <li>Frequenzb\u00e4nder in MP3: 512 (in ACC: 2048 Frequenb\u00e4nder)</li> </ul> <ul> <li> <p>Frequenz-Transformation - Adiosignal in mehrere Frequenzb\u00e4nder aufteilen</p> </li> <li> <p>Psycho-Akustisches-Modell - Man entscheidet, wie viel bits man ben\u00f6tigt (siehe oben)</p> </li> </ul>"},{"location":"21HS/INCO/7_Kanalkodierung.html","title":"Kanalkodierung","text":"<p>Man kann nicht garantieren, dass ein Kanal eine \u00dcbertragung fehlerlos \u00fcbertragen hat.</p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#binaren-kanal","title":"Bin\u00e4ren Kanal","text":"<p>\\(\\varepsilon\\) (Epsilon) ist die Wahrscheinlichkeit, wie oft ein Fehlerauftritt (Bit Error Ratio = BER)</p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#symmetrische-und-asymmetrische-kanale","title":"Symmetrische und asymmetrische Kan\u00e4le","text":"<p>Ein symetrischen kanal hat die selben \\(\\varepsilon\\) f\u00fcr beide wege. Ein Asymetrischen Kanal hat hingegen eine andere warscheinlichkeit, dass eine 0 zu einem 1 wird als umgekehrt.</p> <p>In dem folgenden Bild sieht man ein symmetrischen Kanal</p> <p> </p> <p>\\(P(y_m|x_n)\\) steht f\u00fcr die Wahrscheinlichkeit, dass \\(x_n\\) zu \\(y_m\\) wird.</p> <p></p> <p>Im obigen Bild sieht man nun, wie die Formeln f\u00fcr die Wahrscheinlichkeit f\u00fcr das \\(y_0\\) eintritt, bzw. dass \\(y_1\\) eintritt. Die Summe von \\(P(y_1)\\) und \\(P(y_0)\\) muss 1 ergeben.</p> <p>TODO: Entropie berechnen</p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#kanalkapazitat","title":"Kanalkapazit\u00e4t","text":"<p>Die h\u00f6chste Kapazit\u00e4t eines Kanals ist 1bit Information pro versendetes 1 bit.</p> <p>Beides, die maximale Kanalkapazit\u00e4t, wie auch die St\u00f6rquelle, kann als Binary Memoryless Source (BMS) interpretiert werden und so die standard Entropie Formeln ben\u00fctzt werden.</p> <p>Daher kommt man auf die foglenden Formel:</p> <p>\\(C_{BSC}(\\varepsilon)=1-H(\\varepsilon)=1-(\\varepsilon \\cdot log_2 \\frac 1 \\varepsilon + (1-\\varepsilon )\\cdot log_2 \\frac 1 {1 - \\varepsilon})\\)</p> <p>\\(C_{BSC}\\) hat die Masseinheit bits/bits (bits pro bits).</p> <p></p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#mathe","title":"Mathe","text":"<p>Um ein Frame zu brechnen gillt folgene Formel: \\(A_1 = A(1 - \\varepsilon)\\), dabei ist A die l\u00e4nge in Bits des Frames.</p> <p>F\u00fcr mehrere Frames gillt: \\(A_N=A(1-\\varepsilon)^N\\)</p> <p>Wenn \\(\\varepsilon\\) nahe an 1 ist, kann die folgende N\u00e4herung genutzt wird: \\(1 - N\\cdot \\varepsilon\\)</p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#mehr-bit-fehlerwahrscheinlichkeit","title":"Mehr-Bit-Fehlerwahrscheinlichkeit","text":"<p>Wenn berechnet werden soll, was die Wahrscheinlichkeit ist, dass eine N-lange Sequenz genau F Fehler auftreten, dann kann folgende Formel genutzt werden:</p> <p>\\(P_{F,N}=\\begin{pmatrix}N \\\\ F\\end{pmatrix} \\cdot \\varepsilon^F \\cdot (1-\\varepsilon)^{N-F}\\)</p> <p>Dabei stellt <code>F</code> die Anzahl Fehler dar, <code>N</code> die L\u00e4nge des Block-Codes und \\(\\varepsilon\\) die Bit Error Ratio des Kanales. </p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#binominalkoeffizenten","title":"Binominalkoeffizenten","text":"<p>\\(\\begin{pmatrix}N \\\\ F\\end{pmatrix}\\) wird gesprochen als n choose r und kann folgender massen berechnet werden</p> <p>\\(\\begin{pmatrix}n \\\\ k \\end{pmatrix}=\\frac{n!}{k!\\cdot(n-k)!}\\)</p> <p>Einige Taschenrechner haben eine Taste nCr, welche dies ausrechnen kann (der Canon F-718SGA hat dies ebenfalls)</p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#framegrossen","title":"Framegr\u00f6ssen","text":"<p>Im obigen Bild sieht man die Wahrscheinlichkeit, dass ein Frame ankommt f\u00fcr eine gewisse Frame-Gr\u00f6sse.</p> <p>In dieser Abbildung sieht man, dass grosse Frames erst wirklich Sinn ergeben, wenn man Fehlerresistenten Kanal hat.</p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#fehlerkorrekturverfahren","title":"Fehlerkorrekturverfahren","text":""},{"location":"21HS/INCO/7_Kanalkodierung.html#backward-error-correction","title":"Backward Error Correction","text":"<p>Es wird eine gewisse Redundanz hinzugef\u00fcgt (z.B. CRC), welche es erlauben, einen Fehler zu erkennen und die Daten nochmals anzufordern. </p> <ul> <li> <p>Der Empf\u00e4nger schickt eine Quittung zur\u00fcck. Wenn keine Quittung erhalten wurde, wird das Packet nochmals gesendet.   </p> </li> <li> <p>Nachteile:</p> </li> <li> <p>Langsam, da immer gewartet werden muss (Dies kann etwas mitigert werden, in dem die n\u00e4chste Nachricht bereits versendet wird, bevor die Quittung ankommt)</p> </li> <li> <p>Ein R\u00fcckkanal ist erfoderlich</p> </li> </ul>"},{"location":"21HS/INCO/7_Kanalkodierung.html#forward-error-correction","title":"Forward Error Correction","text":"<ul> <li>Mehr Redundanz, so dass der Fehler sogar korrigiert werden kann</li> </ul>"},{"location":"21HS/INCO/7_Kanalkodierung.html#hamming-distanz","title":"Hamming-Distanz","text":"<p>Die Hamming-Distanz beschreibt, wie viel Bits sich zwischen zwei Codew\u00f6rter \u00e4ndert. </p> <p>Die Codw\u00f6rter k\u00f6nnen auch auf einem W\u00fcrfel dargestellt werden in dem die Codew\u00f6rter in folgendes Koordinatensystem eingetragen werden:</p> <p></p> <p>Wenn alle Codew\u00f6rter  (im Beispiel unten ein 3-Zeichen langen Block-Code) in einem solchen Koordiantesystem eingetragen werden, kommt einen W\u00fcrfel oder \u00e4hliches heraus.</p> <p>Pro Zahl braucht man eine Dimension.</p> <p></p> <p>Die minimale Hamming-Distanz ist die kleinste Distanz zwischen zwei korrekten Code-Words.</p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#fehlerkorrektur-mit-matrizen","title":"Fehlerkorrektur mit Matrizen","text":""},{"location":"21HS/INCO/7_Kanalkodierung.html#block-code","title":"Block-Code","text":"<p>Bei einem Blockcode werden die Informationen in Bl\u00f6cke verschickt. Dabei gibt es die N, die Anzahl Bits f\u00fcr Informationen und K, die Bits f\u00fcr den Fehlerschutz</p> <p>Systematische Blockcodes sind Blockcodes, bei welcher die Fehlerschutzbits zu Beginn oder am Ende steht.</p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#systematischer-block-code","title":"Systematischer Block-Code","text":"<p>In einem Systematischer Block-Code sind die Informationsbits klar von den Fehlerschutz-Bits getrennt. Als entweder kommen zuerst die informations-Bits und dann die Fehlerschutz-Bits oder umgekehrt.</p> <p></p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#linearer-block-code","title":"Linearer Block-Code","text":"<p>In einem linearen Block-Code, wenn man zwei beliebige Codes zusammen xored, dann ergibt dies einen weiteren g\u00fclltigen Code.</p> <p>Der Code C={000, 110, 001, 101} w\u00e4re zum Beispiel einer.</p> <p>Jeder Linearer Block-Code ben\u00f6tigt einen Code mit nur 0.</p> <p>Wenn Codew\u00f6rter aus einer Generatormatrix generiert wird, dann ist der Code linear.</p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#zyklischer-block-code","title":"Zyklischer Block-Code","text":"<p>Ein zyklischer Block-Code kann man um eins Rotieren und bekommt wieder ein valides Codewort. </p> <p>Als Beispiel. Aus \"110\"  wird \"011\", dann \"101\" und dann wieder \"110\".</p> <p></p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#perfekter-block-code","title":"Perfekter Block-Code","text":"<p>Ein Perfekter Blockcode hat die selbe Hamming-Distanz zwischen allen Codw\u00f6rtern</p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#fehlererkennung","title":"Fehlererkennung","text":""},{"location":"21HS/INCO/7_Kanalkodierung.html#parity","title":"Parity","text":"<p>F\u00fcr ein Datenblock gibt es ein Parity-Bit.</p> <ul> <li> <p>Even Parity: Parity-Bit ist 1, wenn die Anzahl 1-er inkl. Parity-Bit is gerade, sonst 0</p> </li> <li> <p>Odd Parity: Parity-Bit ist 1, wenn die Anzahl 1-Bit inklusiv Parity-Bit  ungerade ist, sonst 0</p> </li> </ul> <p>Der Vorteil von Even-Parity ist, dass es linearen Block-Code ist.</p> <p>Mit dieser Methode kann 1-Bit Fehler erkennt wrden.</p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#quer-pariy","title":"Quer-Pariy","text":"<p>Es wird ein Parity-Bit horizontal gebildet und ein Parity-Bit vertikal. F\u00fcr einen Block gibt es nun eine Linie f\u00fcr die horizontale gebildete Parity-Bits und eine Line f\u00fcr die vertikal gebildete Parity-Bits. Diese zwei Parity-Bit-Linien werden nun in ein Gesamt-Parity-Bit gerechnet.</p> <p>Die Coderate (\\(\\frac K N\\)) ist \\(\\frac{l\u00e4nge\\cdot breite}{l\u00e4nge \\cdot breite + l\u00e4nge + breite + 1}\\) </p> <p>Um dies zu optimieren, sollte probiert weden, den Bl\u00f6ck m\u00f6glich Quadratisch zu gestalten. L\u00e4nge und Breite sollte also m\u00f6glich gleich sein.</p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#prufsumme","title":"Pr\u00fcfsumme","text":"<p>Man summiert alle Reihen/Elemente zusammen (\\(\\sum^{n-1}_{i=0}Element_i\\))</p> <p>Dabei hat man eine minimale Hamming-Distanz von 2. Die Hamming-Distanz in einigen F\u00e4llen kann auch h\u00f6her sein, da es ein \u00dcbertrag geben kann und somit ein Bit-Wechsel mehrere Bit-\u00c4nderungen in der Pr\u00fcfsumme zu folge haben.</p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#tcp-udp-prufsumme","title":"TCP &amp; UDP Pr\u00fcfsumme","text":"<p>Die Pr\u00fcfsumme wird \u00fcber ein Frame gebildet mit der Wortbreite von 16 Bis.</p> <p>//TODO</p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#1-bit-arithmetik","title":"1-Bit Arithmetik","text":"<p>Wichtig ist, dass es keine 2 geben kann (1+1=0). Der \u00dcbertrag wird vergessen.</p> <p>Man kann eine solche Zahl auch als Polynom darstellen.</p> <p>\\(1011=1\\cdot z^3+0\\cdot z^2+1\\cdot z^1+1\\cdot z^0\\)</p> <p>Auch mit diesem Polynomen kann man mit der 1-Bit Arithmetik rechnen. Beispiel: \\(\\begin{alignat} {1} (z^3+z^2+1)\\pm(z^2+z+1)=&amp;z^3\\cdot(1\\pm0)+z^2\\cdot(1\\pm1)+z^1\\cdot(0\\pm1)+z^0\\cdot (1\\pm1)\\\\=&amp;z^3+z\\end{alignat}\\)</p> <p>Dasselbe Spiel kann auch den anderen Rechnenoperationen durchgespielt werden.</p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#crc","title":"CRC","text":"<p>Bei CRC teilt man den Datenblock als Polynom durch ein Generator-Polynom. Der dabei resultierender Rest ist die Pr\u00fcfsumme, welche mit verschickt wird.</p> <p>Es gibt verschiedene Generator-Polynome, jenach dem welchen Standard man folgt.</p> <p>Im Verfahren wird der Datenblock um die Anzahl Bits der Pr\u00fcfsumme verschoben (also aus 10, wird zB. 1000, wenn die Pr\u00fcfsumme 2-bit lang ist). Danach wird das Datenblock Polynom durch das Generator-Polynom geteilt. Der Rest, der dabei heraus kommt wird zum Datenblock addiert. Da man um die Anzahl Stellen der Pr\u00fcfsumme zu begin verschoben hat, hat man nun die Pr\u00fcfsumme vor der Zahl \"eingef\u00fcgt\".</p> <p>Nun haben wir ein Datenblock, welchen sicher durch den Generatorblock geteilt werden kann.</p> <p>Beispiel mit Dezimalzahlen: Datenblock: 123, Generatorbits: 12)</p> <p>1230 : 12 = R6 -&gt; 1236 ist teilbar</p> <p>Ebenfalls wichtig ist, dass wenn man durch eine Zahl teilt, ist der Rest h\u00f6chsten der Rest-1. In Bin\u00e4r heisst dass, eine Stelle weniger als durch was man geteilt hat.</p>"},{"location":"21HS/INCO/7_Kanalkodierung.html#fehlerkorrektur","title":"Fehlerkorrektur","text":""},{"location":"21HS/INCO/7_Kanalkodierung.html#forward-error-correction_1","title":"Forward Error Correction","text":"<p>Wenn man eine Hammingdistanz von 3 hat, kann man ein Bit korigieren. Dabei wird angenommen, dass ein Bit falsch ist und korrigiert zum n\u00e4chsten validen Codewort. Dies kann aber auch falsch sein!!</p> <p>Wie man oben bereits gesehen hat, nimmt man das Codewort, welches am n\u00e4chsten ist. </p> <p>Dabei kann man \\(\\left \\lfloor{\\frac{d_{min}-1)} 2}\\right \\rfloor\\) Fehler korrigieren.</p> <p></p>"},{"location":"21HS/INCO/8_Matrix.html","title":"Matrix","text":"<p>Eine Matrix ist ein rechteckiges Zahlenfeld, wie z.B. diese 3x2 Matrix: \\(\\begin{bmatrix}7 &amp; 6 &amp; 2\\\\2 &amp; 3 &amp; 3\\end{bmatrix}\\)</p>"},{"location":"21HS/INCO/8_Matrix.html#addition-und-subtraktion","title":"Addition und Subtraktion","text":"<p>Matrizen addieren und subtrahieren ist denkbar einfach. Jede Zahl wird mir der Zahl an der gleichen Stelle in der anderen Matrix addiert, bzw. subtrahiert. $$ \\begin{bmatrix}x_1 &amp; x_2 &amp; x_3 \\ x_4 &amp; x_5 &amp; x_6\\end{bmatrix} -  \\begin{bmatrix}y_1 &amp; y_2 &amp; y_3 \\ y_4 &amp; y_5 &amp; y_6\\end{bmatrix} =  \\begin{bmatrix}x_1-y_1 &amp; x_2-y_2 &amp; x_3-y_3 \\ x_4-y_4 &amp; x_5-y_5 &amp; x_6-y_6\\end{bmatrix} $$ Dasselbe gilt auch f\u00fcr die Addition.</p>"},{"location":"21HS/INCO/8_Matrix.html#skalar-multiplikation","title":"Skalar Multiplikation","text":"<p>Wenn eine Matrix mit einem Wert, wie 3 multipliziert wird, entsteht eine neue Matrix, in welcher alle Werte mit diesem Wert multipliziert wurden: $$ c \\cdot \\begin{bmatrix}x_1 &amp; x_2 &amp; x_3 \\ x_4 &amp; x_5 &amp; x_6\\end{bmatrix}=  \\begin{bmatrix}c\\cdot x_1 &amp; c\\cdot x_2 &amp; c\\cdot x_3 \\ c\\cdot x_4 &amp; c\\cdot x_5 &amp; c\\cdot x_6\\end{bmatrix} $$</p>"},{"location":"21HS/INCO/8_Matrix.html#matrix-multiplikation","title":"Matrix Multiplikation","text":"<p>Wenn zwei Matrizen multipliziert werden, wie \\(A\\cdot B\\), dann muss die Breite von \\(A\\) gleich die H\u00f6he von \\(B\\) sein.  Das Resultat ist eine Matrix, welche so hoch ist, wie \\(A\\) und so breit ist, wie \\(B\\). $$ \\begin{bmatrix}x_{11} &amp; x_{21} &amp; x_{31} \\ x_{12} &amp; x_{22} &amp; x_{32}\\end{bmatrix} \\cdot \\begin{bmatrix}y_{11} &amp; y_{21} \\ y_{12} &amp; y_{22} \\ y_{13} &amp; y_{23}\\end{bmatrix} =  \\begin{bmatrix}     x_{11}\\cdot y_{11} + x_{21}\\cdot y_{12} + x_{31}\\cdot y_{13} &amp;      x_{11}\\cdot y_{21} + x_{21}\\cdot y_{22} + x_{21}\\cdot y_{23} \\     x_{12}\\cdot y_{12} + x_{22}\\cdot y_{12} + x_{32}\\cdot y_{13} &amp;      x_{12}\\cdot y_{21} + x_{22}\\cdot y_{22} + x_{22}\\cdot y_{23}  \\end{bmatrix} $$ Oder in Worte, in das Feld (1/1) wird jeder Wert der Zeile 1 von A mit jedem Wert der Spalte 1 von B gerechnet. In den Wert (1/2), wird Zeile 1 mit der Spalten 2 gerchnet.</p> <p>Das Feld (2/1) wird berechnet, in dem die Reihe 2 mit der Spalte 1 multipliziert wird und das Feld (2/2) wird berechnet in dem, die Reihe 2 mit der Spalte 2 gerechnet wird.</p> <p>Wegen dieser Rechnenart, ist die Multiplikation mit zwei Matrizen nicht kommunikativ.</p> <p>Mit dem TR und Ein-Bit Arithmethik, kann modulo 2 gerechnet werden, um das korrekte Resultat zu bekommen.</p>"},{"location":"21HS/INCO/8_Matrix.html#einheitsmatrix","title":"Einheitsmatrix","text":"<p>Eine Einheitsmatrix, ist eine quadratische Matrix, welche Diagonal \u00fcberall eine <code>1</code> hat und sonst <code>0</code>: $$ \\begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; 0\\ 0 &amp; 1 &amp; 0 &amp; 0\\ 0 &amp; 0 &amp; 1 &amp; 0\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{bmatrix} $$ Diese Matrix hat die Eigenschaft, dass wenn eine Matrix \\(A\\) mit einer Identit\u00e4tsmatrix multipliziert wird, dass wieder die Matrix \\(A\\) herauskommt.</p>"},{"location":"21HS/INCO/8_Matrix.html#inverse-matrix","title":"Inverse Matrix","text":"<p>Die Inverse Matrix, ist die Matrix \\(A^{-1}\\), welche mit der Matrix \\(A\\), eine Identit\u00e4tsmatrix \\(I\\) ergibt:</p> <p>\\(A\\cdot A^{-1}=I\\)</p>"},{"location":"21HS/INCO/8_Matrix.html#transponierte-matrix","title":"Transponierte Matrix","text":"<p>Eine transponierte Matrix \\(A^T\\) von \\(A\\) ist, wenn die Spalten in \\(A\\) zu Reihen werden und die Reihen in \\(A\\) zu Spalten werden: $$ B= \\begin{bmatrix} 1 &amp; 2 &amp; 3\\ 3 &amp; 4 &amp; 5 \\end{bmatrix}\\ B^T= \\begin{bmatrix} 1 &amp; 3 \\ 2 &amp; 4\\ 3 &amp; 5 \\end{bmatrix} $$</p>"},{"location":"21HS/INCO/9_Faltungscode.html","title":"9 Faltungscode","text":""},{"location":"21HS/INCO/9_Faltungscode.html#faltungscode","title":"Faltungscode","text":"<p>Ein Faltungscode ist ein Linearer code.</p> <p>Der Input wird dabei durch Flip-Flops gesendet, welche bewirken, dass ein Bit sich auf die n\u00e4chsten Outputs auswirken. So wird eine Redundantz geschaffen.</p> <p>(Im Beispiel unten sind die gelben Elemente die Flip-Flops, die Plus im Kreis sind XOR-Gates)</p> <p></p> <p>Wichtig zu erw\u00e4hnen ist, dass nach einem Codewort m\u00fcssen noch so viele \"0\" gesendet werden, wie die Anzahl Bits des Ged\u00e4chnis, da sonst das vorherige Codewort auf das n\u00e4chste Codewort einfluss nehmen w\u00fcrde. Diese Nullen nennt man \"Tail-Bits\". Diese sind in der unterigen Tabelle eingezeichnet.</p> <p></p> <p>Ein solche Schaltung kann man auch als Statemachine anschauen. In der unteren Tabelle sieht man, wie der aktuellen Zustand der Statemachine zum m\u00e4chsten Zustand wird. Die Output Spalte kann an der \"Present State\" Spalten abgelesen werden.</p> <p></p> <p>Das Zustanddiagramm unten ist eine Abbildung der Tabelle oben. Dabei kann jeder Zu</p> <p></p>"},{"location":"21HS/INCO/9_Faltungscode.html#eigenschaften","title":"Eigenschaften","text":"<p>Die Coderate kann folgendermassen ausgerechnet werden: \\(R=\\frac N {2\\cdot(N+m)}\\)</p> <p>Dabei ist \\(N\\) die Anzahl Inputs und \\(m\\) die Anzahl Tailbits, bzw. wie gross das Ged\u00e4chniss des Faltungscode ist.</p>"},{"location":"21HS/INCO/9_Faltungscode.html#freie-hamming-distanz","title":"Freie Hamming-Distanz","text":"<p>Das ist der Pfad im Zustandsdiagramm mit m\u00f6glichst wenig <code>1</code> (aber nicht nur <code>0</code>) beim Output des Encoders.  Im oberen Zustandsdiagram h\u00e4tten wir eine Freie Hamming-Distanz von 5 (Von <code>00</code> zu <code>10</code> (dabei hat man 2 <code>1</code>); von <code>10</code> zu <code>01</code> (dabei hat man 1x<code>1</code>); von <code>01</code>  zu <code>00</code> (nochmals 2x<code>1</code>); Im gesammten kommt man auf 5). Dies funktioniert auch im Tellis-Diagramm.</p> <p>Aus dies kann ausgerechnet werden, wie viel Fehler behoben werden k\u00f6nnen: \\(\\lfloor\\frac{d_{free}-1}2\\rfloor\\)</p>"},{"location":"21HS/INCO/9_Faltungscode.html#generatoren","title":"Generatoren","text":"<p>Unten sieht man die Schaltung f\u00fcr die Generatoren \\((1101b;1111b)\\)</p> <p></p> <p>Hier k\u00f6nnen die XOR-Gates, welche zu Null verbinden, weggelassen werden und zu folgendem Diagramm optimiert werden:</p> <p></p> <p>In dem Beispiel von oben, waren es immer zwei Generatoren, da zwei Linien von mit XOR von \\(U_K\\) weggingen.</p> \\[ g_1=(111)=z^2+1\\\\ g_2=(101)=z^2+z+1\\\\ u=(1011)=z^3+z+1\\\\  \\\\ g_2\\cdot u=(z^2 + 1) \\cdot (z^3 + z + 1)=z^5+z^3+z^2+z^3+z+1=z^5+z^2+z+1)\\\\ \\rightarrow c_{2k}=(100111) \\] <p>Achtung: wir rechnen mit 1-Bit Arithmetik</p>"},{"location":"21HS/INCO/9_Faltungscode.html#decodieren","title":"Decodieren","text":"<p>Beim Decodieren wird jeden m\u00f6glichen Pfad durch gerechnet und dabei die Bitfehler gez\u00e4hlt, welche auftretten m\u00fcssten. Wenn zwei Pfade sich treffen, wird der Pfad mit den kleinsten Bitfehler gew\u00e4hlt. Am Ende bleibt ein Pfad mit den wenigsten Bitfehler, welcher am Wahrscheinlichsten ist.</p>"},{"location":"21HS/INCO/9_Faltungscode.html#tail-bits","title":"Tail-Bits","text":"<p>Dies sind Bits, welche am Ende eines Inputs noch angeh\u00e4ngt werden m\u00fcssen um die Schaltung wieder in den <code>0</code>-Zustand zur\u00fcck zu setzten. Dass heisst, wenn die Schaltung des Faltungscodes zwei Bits, bzw. zwei Flip-Flops enth\u00e4lt, dann werden zwei Tail-Bits ben\u00f6tigt.</p>"},{"location":"21HS/INCO/summaries/summary_2022-01-20.html","title":"INCO Summary - 20.01.2022","text":"<ul> <li>INCO Summary - 20.01.2022<ul> <li>Kombinatorische Logik</li> <li>Digitaltechnik<ul> <li>Addierer</li> <li>Flip-Flops</li> </ul> </li> <li>Zahlensystem<ul> <li>Zahlen Umwandeln</li> <li>Negative Zahlen</li> <li>Codes<ul> <li>Gray Code</li> <li>ASCII Code</li> <li>UTF-8</li> </ul> </li> <li>Endiannes</li> </ul> </li> <li>Informationstheorie</li> <li>Quellenencoding<ul> <li>Laufenl\u00e4ngen Encoding</li> <li>Huffman Codes</li> </ul> </li> <li>LZ77 &amp; LZW</li> <li>JPEG</li> <li>Audiocodierung</li> <li>Kanalcodierung</li> <li>Fehlererkennung</li> <li>Fehlerkorrigierende Codes</li> <li>CRC</li> <li>Faltunscode</li> </ul> </li> </ul>","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#kombinatorische-logik","title":"Kombinatorische Logik","text":"Gatter Name Formel NOT-Gate \\(!A\\) AND-Gate \\(A\\&amp;B=A\\wedge B\\) NAND-Gate \\(!(A\\&amp;B)\\) OR-Gate \\(A\\#B=A\\vee B\\) NOR-Gate \\(!(A\\#B)\\) XOR-Gate \\(A\\$B\\) XNOR-Gate \\(!(A\\$B)\\) Disjunktive Normalform \\((A\\&amp;B)\\#(C\\&amp;D)\\#..\\) <p>\\(!(A\\&amp;B)=!A\\#!B\\) \\(A\\&amp;(B\\#C)=(A\\&amp;B)\\#(A\\&amp;C)\\)</p> <p>Wenn man aus einer Wahrheitstabelle eine Formel bilden muss, kann man f\u00fcr jedes 1 im Output einen Ausdruck aus den Inputs bilden, welche in diesem Fall 1 ergeben. Diese Ausdr\u00fccken werden mit OR-Gates verbunden. </p>","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#digitaltechnik","title":"Digitaltechnik","text":"","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#addierer","title":"Addierer","text":"<p>Halbaddierer Ein Addierer, welcher nur mit 1Bit ohne Eingang-Carry-Bit umgehen kann. Aus einem Halbaddierer kann einen Volladdierer erstellt werden, welcher zus\u00e4tzlich auch noch ein \u00dcbetrag der Vorheriger Addition ben\u00fctzen kann. Mehrere Volladdierer k\u00f6nnen hintereinander gesetzt werden und so beliebig viel stellen berechnet werden.</p>","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#flip-flops","title":"Flip-Flops","text":"<p>Wenn an C eine \"Rising-Edge\" anliegt, dann wird D gelesen, gepseichert und auf Q ausgegeben, bis auf C die n\u00e4chste \"Rising-Edge\" anliegt.</p> <p>Mit Flip-Flops werden oft Sequentielle Logik gebaut. Dabei werden mehrere Flip-Flips in serie geh\u00e4ngt.</p> <p></p> <p>Beipiele:</p> Bild Erkl\u00e4rung Frequenzteiler Gesetuerter Frequenzteiler FlankendeketorErkennt Flanken bei einer st <p>Synchronschaltung: Eine Schaltung, welche sich nur bei einer positiven Clock-Flanke \u00e4ndert (oder anderes Clocksignal).</p>","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#zahlensystem","title":"Zahlensystem","text":"","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#zahlen-umwandeln","title":"Zahlen Umwandeln","text":"\\[ \\begin{alignat} {6} \\text{Zu konvertieren:}12.6875\\\\ 12 &amp;: 2 &amp;= 6 \\text{ Rest } 0 &amp;&amp; 0.6875 \\cdot 2 &amp;= 0.375 + 1\\\\ 6 &amp;: 2 &amp;= 3 \\text{ Rest } 0 &amp;&amp; 0.375 \\cdot 2 &amp;= 0.750 + 0\\\\ 3 &amp;: 2 &amp;= 1 \\text{ Rest } 1&amp;&amp; 0.750 \\cdot 2 &amp;=0.500 + 1\\\\ 1 &amp;: 2 &amp;= 0 \\text{ Rest } 1&amp;&amp;0.500\\cdot 2 &amp;= 0 + 1\\\\  \\text{Ergebniss: } 1100_b&amp;&amp;&amp;\\hspace{2cm}&amp;&amp;\\text{Ergebniss: }0.1011_b\\\\  \\text{Zusammen: } 1100.1011_b \\end{alignat} \\] <p>(Achtung Reihenfolge: bei Nicht-Kommastellen, von unten nach oben; bei Kommastellen: von oben nach unten)</p>","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#negative-zahlen","title":"Negative Zahlen","text":"System Verfahren Beispiel 9er-Komplement Jede Ziffer von 9 abziehen \\(0022\\to 9977\\) 10er-Komplement Jede Ziffer von 9 abziehen und das Result +1 rechnen \\(0022 \\to 9977 \\to 9978\\) 1er-Komplement Jede Ziffer von 1 abziehen \\(0011_b \\to 1100_b\\) 2er-Kompelemnt Jede Ziffer von 1 abziehen und das Resultat +1 rechnen \\(0011_b \\to 1100_b \\to 1101_b\\) <p>Mit und Ohne Vorzeichen:  </p>","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#codes","title":"Codes","text":"DEZ HEX BIN Dez Hex Bin DEZ HEX BIN 0 0 0000 6 6 0110 12 C 1100 1 1 0001 7 7 0111 13 D 1101 2 2 0010 8 8 1000 14 E 1110 3 3 0011 9 9 1001 15 F 1111 4 4 0100 10 A 1010 5 5 0101 11 B 1011","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#gray-code","title":"Gray Code","text":"<p>Ein Code, welcher f\u00fcr Schleifkontakte be\u00fctzt wird und es \u00e4ndert sich maximal 1 Bit f\u00fcr benachbarte Codew\u00f6rter. </p>","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#ascii-code","title":"ASCII Code","text":"","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#utf-8","title":"UTF-8","text":"Unicode-Bereicht Utf-8 Codierung Anzahl Code-Bits 0000'0000 - 0000'007F 0xxxxxxx 7 0000'0080-0000'07FF 110xxxxx 10xxxxxx 11 (5 + 1*6) 0000'0800-0000'FFFF 1110xxxx 10xxxxxx 10xxxxxx 16 (4 + 2*6) 0001'0000-0010'FFFF 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 21 (3 + 3*6)","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#endiannes","title":"Endiannes","text":"Name Beschreibung Darstellung Little Endian Das niederstwertige Byte wird zuerst geschickt FEDCBA9 87654321 Big Endian Das h\u00f6chstwertige Byte wird zuerst geschickt 87654321 FEDCBA9","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#informationstheorie","title":"Informationstheorie","text":"<p>Discrete Memoryless Source (DMS) gibt einzelne unabh\u00e4ngige Nachrichten aus. Ein Beispiel w\u00e4re einen W\u00fcrfel.</p> Formel Erkl\u00e4rung \\(I(x_n)=\\log_2(\\frac 1 {P(x_n)}) [Bits]\\) \\(I\\) ist der Informationsgehalt von der Nachricht \\(x_n\\) \\(H(X)=\\sum^{N-1}_{n=0}P(x_n)\\cdot \\log_2(\\frac 1 {P(x_n)}) [Bit/Symbol]\\) \\(H\\) ist die Entropie der Quelle \\(X\\)","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#quellenencoding","title":"Quellenencoding","text":"Formel/Wort Erkl\u00e4rung Codwortl\u00e4nge \\(l_n\\) Die Anzahl Bits eines Codewortes \\(L=\\sum^{N-1}_{n=0} P(x_n)\\cdot l_n [Bits/Symbol]\\) Die Codewortl\u00e4nge \\(L\\) einer Quelle \\(R(X)=L(X)-H(X) [Bits/Symbol]\\) Redundanz: Wie viele Bits pro Symbol in einer Quelle redundant sind \\(R(X)=\\frac{\\text{komprimierte Bits}}{\\text{unkombrimierte Bits}}\\) Die Coderate \\(R\\); besagt, wie fest komprimiert wurde <p>}So lange die Redundanz \\(R\\) eines Codes gr\u00f6sser als <code>0</code> ist, kann noch verlustfrei komprimiert werden.</p>","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#laufenlangen-encoding","title":"Laufenl\u00e4ngen Encoding","text":"<p>Anstatt \"AAAABDEFGG\" speichert man \"B04A B01B DEFGG\". Hier wurde B als Token genutzt, da es am seltesten vorkommt.  Ebenfalls wurde der Z\u00e4hler auf eine zweistellige Zahl festgelegt. </p> <p>Bei Schwarzweiss Bilder kann zwischen Schwarz und Weiss gewechselt weden (10, 5, 3), w\u00e4ren 10 schwarze Pixel, 5 weisse Pixel, gefolgt von 3 schwarzen Pixeln.</p>","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#huffman-codes","title":"Huffman Codes","text":"<p>Codes mit dem Huffmanverfahren sind automatisch pr\u00e4frixfrei und optimal (es gibt keinen besseren pr\u00e4fixfreien Code)</p> <p>Folgendes ist das Vorgehen:</p> <ol> <li>Ordne alle Symbole nach aufsteigenen Auftretenswahrscheinlichkeiten auf einer Zeile. Dies sind die Bl\u00e4tter</li> <li>Notiere unter jedes Blatt seine Wahrscheinlichkeit</li> <li>Schliesse die beiden Bl\u00e4tter mit der kleinsten Wahrscheinlichekit an einer gemeinsamen Astgabel an und ordne dem Ast die Summe der Wahrscheinlichkeiten zu</li> <li>Wiederhole Schritt 2 es nur noch ein Stamm gibt</li> <li>Jedem Ast wird nun ein eine 0, wenn man links geht und eine 1 wenn man rechts geht, zugewiessen</li> <li>Die Pfade zu allen Bl\u00e4tter aufschreiben. Das ist der Huffmancode</li> </ol>","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#lz77-lzw","title":"LZ77 &amp; LZW","text":"<p>Wenn keine Sequenz gefunden wird, wird der Token <code>(0, 0, T)</code>, wobei <code>T</code> der n\u00e4chste Buchstabe ist.</p> <p>LZW: Die l\u00e4ngste Zeichenkette im W\u00f6rterbuch f\u00fcr die n\u00e4chsten Zeichen finden und ein neuen W\u00f6rterbucheintrag erstellen, mit dem aktuellen Token + das n\u00e4chste Zeichen.</p> <p>Empfangener Token ausgeben und im W\u00f6rterbuch eintragen mit einem Blank am Ende. Beim n\u00e4chsten Token wird die Blank des letzten W\u00f6rterbuch erg\u00e4nzt</p>","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#jpeg","title":"JPEG","text":"<p>YCrCb (Y=Helligkeit, Cb=Blau Anteil, Cr=Rot Anteil)</p> <p>\\(\\begin{bmatrix} Y \\\\ C_B \\\\ C_R \\end{bmatrix} = \\begin{bmatrix}0.299 &amp; 0.587 &amp; 0.114\\\\ -0.1687 &amp; -0.3313 &amp; 0.5\\\\ 0.5 &amp; -0.4187 &amp; -0.0813\\end{bmatrix} \\cdot \\begin{bmatrix} R\\\\G\\\\B \\end{bmatrix} + \\begin{bmatrix} 0 \\\\ 128 \\\\ 128 \\end{bmatrix}\\)</p> <p>\\(\\begin{bmatrix} R \\\\ G \\\\ B \\end{bmatrix} = \\begin{bmatrix}1 &amp; 0 &amp; 1.402\\\\ 1 &amp; -0.34414 &amp; -0.71414\\\\ 1 &amp; 1.772 &amp; 0\\end{bmatrix} \\cdot \\begin{bmatrix} Y\\\\C_B - 128\\\\C_R - 128\\end{bmatrix}\\)</p> <p></p> <p>Nur die Farbkan\u00e4le werden \"gedownsamplet\", der Helligkeitskanal bleibt bei der vollen Aufl\u00f6sung.</p> <p>  $$ F_{vu}=\\frac 1 4 C_u C_v \\sum^7_{x=0}\\sum^7_{y=0}B_{yx} \\cos(\\frac {(2x+1)u\\pi} {16})\\cos(\\frac{(2y+1)v\\pi} {16})\\ B_{yx}=\\frac 1 4 \\sum^7_{u=0}\\sum^7_{v=0}C_uC_vF_{vu}\\cos(\\frac{(2x+1)u\\pi}{16})\\cos(\\frac{(2y+1)v\\pi}{16}) $$</p>","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#audiocodierung","title":"Audiocodierung","text":"<p>Pro Verdoppelung in Schalldruck, nimmt es 6.0206dB zu: \\(L=20\\cdot log_{10}(\\frac p {p_0})\\)  (\\(p\\)=Schalldruck; \\(p_0\\)=Bezugsschalldruck)</p> <p>\\(f_{abtast} &gt; 2\\cdot f_{max}\\)</p> <p></p> <p>Um jede erh\u00f6hung um 1 Bit nimmt das Rauschen um 6dB ab</p> <p>PCM: </p> <ul> <li>Absolut: Jeder Wert wird als absoluter Wert gespeichert</li> <li>Differential-PCM (DPCM): Es werden die Differenzen gespeichert</li> <li>Adaptive Differenztial-PCM (ADPCM): Es wird die Differenz der Differenz gespeichert.</li> </ul>","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#kanalcodierung","title":"Kanalcodierung","text":"<p>\\(\\varepsilon\\) (Epsilon) ist die Wahrscheinlichkeit, wie oft ein Fehlerauftritt (Bit Error Ratio = BER) Coderate: \\(R=\\frac{K}{N}\\) \\(K\\)=Informationsbits; \\(N\\)=Totale Bits</p> <p></p> <p>KanalKapazit\u00e4t: \\(C_{BSC}(\\varepsilon)=1-H(\\varepsilon)=1-(\\varepsilon \\cdot log_2 \\frac 1 \\varepsilon + (1-\\varepsilon )\\cdot log_2 \\frac 1 {1 - \\varepsilon}) [Bits/Bits]\\)</p> Formel Erkl\u00e4rung \\(P_{F,N}=\\begin{pmatrix}N \\\\ F\\end{pmatrix} \\cdot \\varepsilon^F \\cdot (1-\\varepsilon)^{N-F}\\) (N=L\u00e4nge des Block-Codes, F=Anzahl Fehler, \\(\\varepsilon\\) =Bit Error Ratio des Kanales). Rechnet die Wahrscheinlichkeit aus, dass \\(F\\) Fehler bei einem \\(N\\) langem Block-Code auftreten \\(P_{\\le1,N}=\\sum^1_{t=0}\\begin{pmatrix}N \\\\ t\\end{pmatrix} \\cdot \\varepsilon^t \\cdot (1-\\varepsilon)^{N-t}\\) Die Wahrscheinlichkeit, dass ein Codewort korrekt \u00fcbertragen wurde \\(I(X,Y)=H(Y)-H(\\varepsilon) [bit/bit]\\) Die bleibende Informationen im Kanal","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#fehlererkennung","title":"Fehlererkennung","text":"<ul> <li>Backward Error Correction: Fehler kann erkennt werden und die Daten neuangefordert werden</li> <li>Forward Error Correction: Die Fehler k\u00f6nnen erkennt und zu einem gewissen Punkt korrigiert werden</li> </ul> <p>Blockcodes:</p> <ul> <li>Systematischer Block-Code: Informationsbits und Fehlerschutsbits sind klar getrennt (N=Anzahl CodeBits, K= InformationsBits)</li> <li>Linearer Block-Code: Jedes mit Jedem geXored Codewort gibt ein Codewort (jeder Code mit einer Generatormatrix ist linear)</li> <li>Zyklischer Block-Code: Rotierbar (<code>110</code> \\(\\rightarrow\\) <code>011</code>\\(\\rightarrow\\) <code>101</code> \\(\\rightarrow\\) <code>110</code>)</li> <li>Perfekter Block-Code: gleiche Hammingdistanz zwischen allen Codew\u00f6rtern</li> <li>Das Hamming-Gewicht=die kleinste Anzahl <code>1</code> auf einer Linie der Generator-Matrix   Das Hamming-Gewicht ist gleich die Hamming Distanz \\(d_{min}\\)</li> <li>Erkennbare Fehler: \\(d_{min}-1\\) und korrigierbare Fehler: \\(\\frac{d_{min}-1}2\\)</li> </ul>","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#fehlerkorrigierende-codes","title":"Fehlerkorrigierende Codes","text":"<p>\\(\\frac {d_{min}-1}2\\) korrigierbar </p> <p>Generatormatrix Bedinungen:</p> <ol> <li>f\u00fcr \\(d_{min}=3\\) muss jeder Code (ausser dem 0-Code) min. 3x<code>1</code> haben</li> <li>Mindestens eine <code>1</code> muss in der Einheitsmatrix sein</li> <li>Jede Pari\u00e4tsmatrix-Zeile muss 2x<code>1</code> beinhalten</li> </ol>","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#crc","title":"CRC","text":"<p>Das Datenpolynom wird um die Anzahl Stellen des Generatorpolynoms verschoben und anschliessend durch das Generatorpolynom geteilt. Das Resultat wird zum Datenpolynom hinzu addiert. Dabei werden die entstandenen <code>0</code> des Datenpolynoms gef\u00fcllt. </p> <p>Der Empf\u00e4nger kann den empfangenen Wert durch das Generatorpolynom teilen und muss <code>0</code> erhalten.</p>","tags":["summary","INCO"]},{"location":"21HS/INCO/summaries/summary_2022-01-20.html#faltunscode","title":"Faltunscode","text":"<p>Die Freie Distanz \\(d_{free}=w_{min}\\) und kann bestimmt werden, in dem der Pfad mit den wenigsten Ausgang <code>1</code> stehen (aber nicht nur <code>0</code>). Die Anzahl <code>1</code> beim Ausgang ist die minimale freie Distanz. Die Coderate \\(R=\\frac K N = \\frac{K}{2\\cdot(K+m)}\\), wobei \\(m\\) die Anzahl Tail-Bits sind.</p> <p></p> <p></p> <p></p>","tags":["summary","INCO"]},{"location":"21HS/PM1/Beschlussprotokoll.html","title":"Beschlussprotokoll","text":"<ul> <li>Retrospektive (m\u00fcndliches Gespr\u00e4ch) &amp; Beschlussprotokoll von Retrospektive</li> <li>Teamreflexion (Wie funktioniert unser Team)</li> </ul>"},{"location":"21HS/PM1/Beschlussprotokoll.html#beschlussprotokoll","title":"Beschlussprotokoll","text":"<p>Funktion:</p> <ul> <li>Man Informiert Teammitglieder und Aussenstehende</li> <li>Aufgabenverteilung</li> <li>Man kann in Protokoll klar definieren, wer, was, auf wann macht und sp\u00e4ter auf das zur\u00fcck verweissen</li> <li>Ged\u00e4chnisst\u00fcze</li> <li>(Juristischer Beweis)</li> </ul> <p>Protokollarten:</p> <ul> <li>Ergebnissprotokoll</li> <li>H\u00e4lt nur das Ergebniss fest</li> <li>Verlaufsprotokoll</li> <li>W\u00f6rtliches Protokoll<ul> <li>Jedes Wort wird festgehalten (wie z.B. in Gericht)</li> </ul> </li> <li>Ausf\u00fchrliches Protokoll</li> </ul> <p>In unserem Protokoll m\u00fcssen folgenedes festgehaltet werden:</p> <ul> <li>Dokumentation der Ergebnisse</li> <li>Die Logik hinter den Entscheidngen (Ist das logisch verst\u00e4ndlich?)</li> <li>keine Redebeitr\u00e4ge</li> </ul> <p>Vor der Sitzung soll ein Protokoll schreiber festgelegt werden, welcher sich w\u00e4hrend der Sitzung Notizen erstellt und danach das Protokoll davon erstellt.</p>"},{"location":"21HS/PM1/Projekt%203%20-%20Siedler%20von%20Catan.html","title":"Projekt 3 - Siedler von Catan","text":"<ul> <li>Handeln und Bauen in beliebigereren Reihenfolge</li> <li> <p>Hexboard nicht bearbeiten</p> </li> <li> <p>Config darf nicht angepasst werden</p> </li> <li> <p>Die \u00f6ffentliche Schnittstelle der SiedlerGame darf nicht angepasst werden </p> </li> <li> <p>Dummy kann am Ende gel\u00f6scht werden</p> </li> <li> <p>L\u00e4ngste Strasse ODER R\u00e4uber</p> </li> </ul>"},{"location":"21HS/PM1/Retrospektive.html","title":"Retrospektive","text":"<ol> <li>Erfolge (was hat gut geklappt)</li> <li>Herausforderungen, die L\u00f6sung und die Probleml\u00f6sungsstrategie</li> <li>Umgang mit Herausforderungen</li> <li>Wichtigste Erkenntnisse aus der Teamreflexion</li> <li>Pers\u00f6nliche Ziele und Teamziele (Massnahmen) f\u00fcr das n\u00e4chste Projekt</li> <li>Feedback von Tech-doz zum Code und Projekt allgemein</li> <li>Besprechung der Erkenntnise f\u00fcr das n\u00e4chste Projekt</li> </ol> <p>Jeder sollte etwas sagen. Allerdings ist es sinnvoll einen Sitzungsleiter zu definiert.</p> <p>Es kann eine Presentation als Strukturierung (mit max. 10 Folien) erstellt werden. Die Slides k\u00f6nnen von allen Teammitglieder beigetragen werden.</p>"},{"location":"21HS/PM1/Retrospektive.html#things-to-remember","title":"Things to remember:","text":"<ul> <li>Struktur geben</li> <li>Traktandenliste</li> <li>Sitzungsleiter</li> <li>Wenn jemand von einem Thema abschweift, soll der Sitzungsleiter, oder jemand anders vom Team, wieder auf das eigentliche Thema zur\u00fcckf\u00fchren. Wenn das Thema allerdings f\u00fcr alle wichtig ist, dann kann es sinnvoll sein, auf das Thema einzugehen.</li> </ul>"},{"location":"22FS/AN2/summary_2022_06_20.html","title":"AN2 Summary 26.01.2022","text":"<ul> <li>AN2 Summary 26.01.2022<ul> <li>Reihen &amp; Folgen</li> <li>Grenzwert<ul> <li>Stetigkeit<ul> <li>Nullstellen finden mit Stetigkeit</li> </ul> </li> </ul> </li> <li>Hornerschema</li> <li>Polynomdivision</li> <li>Extremwerte (ev. l\u00f6schen)<ul> <li>Wendepunkte und Sattelpunkte (ev. l\u00f6schen)<ul> <li>Fragen f\u00fcr die Kurvendiskussion (ev. l\u00f6schen)</li> </ul> </li> </ul> </li> <li>Extremaufgaben (ev. l\u00f6schen)</li> <li>Ableiten<ul> <li>Newton Verfahren</li> </ul> </li> <li>Integrieren<ul> <li>Substition</li> <li>Partielle-Integration</li> <li>Partielbruchzerlergung</li> <li>Uneigentliche Integrale</li> </ul> </li> <li>Differentialgleichungen<ul> <li>Gew\u00f6hliche Differentialgleichung 1. Ordnung<ul> <li>Richtungsfeld</li> <li>Euler-Schritte</li> </ul> </li> <li>Separierbare Differentialgleichungen<ul> <li>Autonome Differentialgleichung</li> </ul> </li> <li>Lineare Differentialgleichungen</li> </ul> </li> <li>Anwendung von Integrale<ul> <li>Mittelwert</li> <li>Arbeitsintegral</li> <li>Rotationsk\u00f6rper</li> <li>Bogenl\u00e4nge</li> <li>Mantelfl\u00e4che eines Rotationsk\u00f6rpers</li> <li>Schwerpunkt einer Fl\u00e4che von zwischen zwei Kurven</li> <li>Schwerpunkt eines Rotationosk\u00f6rper</li> </ul> </li> <li>Taylor-Reihen<ul> <li>Komposition</li> <li>Konvergenz</li> </ul> </li> <li>Hopital-Regel</li> </ul> </li> </ul> Begriff Erkl\u00e4rung gerade Funktion Wenn der Graph achsensymmetrisch mit der y-Achse ist (wie bei \\(x^2\\)) ungerade Funktion Wenn der Graph punktsymmetrisch mit dem Nullpunkt ist (wie bei \\(x^3\\)) Komposition \\((g\\circ f)(x)=g(f(x))\\) Injektive Funktion Keine zwei \\(x\\) f\u00fchren zum selben \\(y\\). Von einer injektiven Funktion gibt es eine Umkehrfunktion. \\(\\sum^5_{k=1}a_k\\) Addiert \\(a_k\\) bis (inklusiv) \\(5\\): \\(a_1+a_2+a_3+a_4+a_5\\) \u00dcbliche Summenformeln \\(\\sum^n_{k=1}k=\\frac{n(n+1)}2\\)\\(\\sum^n_{k=1}k^2=\\frac{n(n+1)(2n+1)}6\\) Polynomfunktion \\(f(x)=a_n\\cdot x^n+a_{n-1}\\cdot x^{n-1}+..+a_1\\cdot x + a_0\\) Komposition \\((g\\circ f)(2)=g(f(2))\\) Funktion Mapt vom Definitionsbereich \\(D\\) zum Wertebereich \\(W\\) Mitternachtsformel \\(D=b^2-4ac\\) und \\(x=\\frac{-b\\pm \\sqrt D}{2a}\\)","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#reihen-folgen","title":"Reihen &amp; Folgen","text":"Name explizite Darstellung implizite Darstellung aufz\u00e4hlende Darstellung Arithmetische Folge \\(a_n=c+(n-1)\\cdot d\\) \\(a_1=c\\\\a_{n+1}=a_n+d\\) \\(c,c+d,c+2d,c+3d,...\\) Geometrische Folge \\(a_n=c\\cdot q^{n-1}\\) \\(a_1=c\\\\a_{n+1}=q\\cdot a_n\\) \\(c, c\\cdot q, c\\cdot q^2, c\\cdot q^3, ...\\) Harmonische Folge \\(a_n=\\frac 1 n\\) (nicht \u00fcblich) \\(1, \\frac 1 2, \\frac 1 3, \\frac 1 4, ...\\) Fibonacci-Folge (nicht elementar) \\(a_1=1, a_2=1\\\\a_{n+1}=a_n+a_{n+1}\\) \\(1, 1, 2, 3, 5, 8, ...\\) <ul> <li>Arithmetische Reihee</li> <li>\\(a_k=a_1+(k-1)\\cdot d\\)</li> <li>\\(s_n=n\\cdot a_1+\\frac{n(n-1)}2 \\cdot d\\)</li> <li>\\(\\sum^n_{k=0}(k^2)=\\frac{n(n+1)(2n+1)}{6}\\)</li> <li>\\(\\sum^n_{k=0}k=\\frac{n(n+1)}{2}\\)</li> <li>Strebt immer geben \\(\\infty\\) oder \\(-\\infty\\)</li> <li>Geometrische Reihe</li> <li>\\(a_n=q^{(k-1)}\\cdot a_1\\)</li> <li>\\(s_n=\\frac{a_1(q^n-1)}{q-1}\\)</li> <li>Wenn \\(|q|&lt;1\\) ist, dann ist der Grenzwert \\(\\frac {a_1}{1-q}\\)</li> </ul>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#grenzwert","title":"Grenzwert","text":"<ul> <li>\\(\\lim_{n\\to\\infty}(c\\cdot a_n)=c\\cdot \\lim_{n\\to \\infty} a_n\\)</li> <li>\\(\\lim_{n\\to \\infty}(a_n+b_n)=\\lim_{n\\to \\infty}=\\lim_{n\\to \\infty}a_n + \\lim_{n\\to \\infty} b_n\\)</li> <li>\\(\\lim_{n\\to \\infty}(a_b\\cdot b_n)=\\lim_{n\\to \\infty}a_b \\cdot \\lim_{n\\to \\infty} b_n\\)</li> <li>\\(\\lim_{n\\to \\infty}(\\frac {a_n} {b_n})=\\lim_{n\\to \\infty} a_n : \\lim_{n\\to \\infty}b_n\\)</li> <li>\\(\\lim_{n\\to\\infty}(\\sqrt a - \\sqrt b)=\\lim_{n\\to\\infty}(\\frac{(\\sqrt a-\\sqrt b)(\\sqrt a + \\sqrt b)}{\\sqrt a + \\sqrt b})=\\lim_{n\\to\\infty}(\\frac{a-b}{\\sqrt a + \\sqrt b})\\)</li> </ul> <p>Wenn man einen Bruch in einem \\(\\lim\\) hat, dann kann mit dem h\u00f6chsten \\(n^k\\) mit dem h\u00f6chsten \\(k\\) gek\u00fcrzt werden</p> <p>Beispiel:  $$ \\lim_{n\\to \\infty}=\\frac{3n^2+7n-3}{n^2+4n-11}=\\lim_{n\\to \\infty}\\frac{n^2(3+\\frac 7 n-\\frac 3 {n^2})}{n^2(1+\\frac 4 n - \\frac {11} {n^2})}\\rightarrow\\frac {3+0+0}{1+0+0}=\\frac 3 1 = 3 $$ </p> <p>Spezialfall: \\(\\lim_{n\\to\\infty}(1+\\frac 1 n)^n=e=2.718\\)  $$ \\text{Speziallfall: }\\lim_{n\\to\\infty}(1+\\frac 1 n)^n=e=2.718\\ \\text{Beispiel: } \\lim_{n\\to\\infty}(1+\\frac{9}{4n})^{-5n}\\ (1+\\frac{9}{4n})^{-5n}=(1+\\frac{9}{4n}\\cdot\\frac{\\frac 1 9}{\\frac 1 9})^{-5n}=(1+\\frac 1 {\\frac {4n} 9})^{-5n}\\=(1+\\frac 1 {\\frac {4n} 9})^{-5n\\cdot\\frac{\\frac{4n} 9}{\\frac{4n} 9}}=(1+\\frac 1 {\\frac {4n} 9})^{\\frac{4n} 9\\cdot \\frac{-5n}{\\frac{4n} 9}}=(1+\\frac 1 {\\frac {4n} 9})^{\\frac {4n} 9\\cdot \\frac{-45} 4}\\=((1+\\frac 1 {\\frac {4n} 9})^{\\frac{4n} 9})^{\\frac{-45} 4}=e^{\\frac{-45} 4} $$</p> Typ Funktionswert Beispiel Typ 1: Hebbare Definitionsl\u00fcckeDas Z\u00e4hler- und Nennerpolynom haben dieselbe Nullstelle. Diese kann gek\u00fcrzt werden Strebt gegen den gek\u00fcrzten Bruch Typ 2: PolstelleNur das Nennerpolynom hat die Nullstelle. Dies kann nicht gek\u00fcrzt werden Strebt gegen \\(\\infty\\) oder \\(-\\infty\\)","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#stetigkeit","title":"Stetigkeit","text":"<p>Eine Funktion ist stetig, wenn man sie zeichnen kann, ohne den Stift abzusetetzen.  Eine stetige Funktion hat keine Spr\u00fcnge in der ersten Ableitung und keine Spr\u00fcnge in der eigentlichen Funktion.</p>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#nullstellen-finden-mit-stetigkeit","title":"Nullstellen finden mit Stetigkeit","text":"<ol> <li>Zwei Punkte, bei denen der Y-Wert ein verschiedenes Vorzeichen hat</li> <li>Den Mittelwert zischen den Punkten bilden</li> <li>Zu 1. gehen, aber diesem mit dem Mittelpunkt als Punkt, so dass die zwei P\u00fcnkte ein verschiedenes Vorzeichen haben</li> </ol>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#hornerschema","title":"Hornerschema","text":"<p>Die Werte (\\(b_n\\)), welche unter dem Strich stehen, sind die Koeffizenten f\u00fcr das \\(q(x)\\) in \\(f(x)=(x-x_0)\\cdot q(x)\\). In diesem fall also \\(q(x)=3x^3-8x^2+21x-49\\). Daf\u00fcr muss das Resultat/Rest 0 sein!</p>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#polynomdivision","title":"Polynomdivision","text":"","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#extremwerte-ev-loschen","title":"Extremwerte (ev. l\u00f6schen)","text":"1. Ableitung 2. Ableitung Beschreibung Bild \\(f'(x)&gt;0\\) \\(f''(x_0)&gt;0\\) \\(f\\) macht eine Linkskurve nach oben bei \\((x_0, y_0)\\) \\(f'(x)&gt;0\\) \\(f''(x_0)&lt;0\\) \\(f\\) macht eine Rechtskurve nach oben bei \\((x_0, y_0)\\) \\(f'(x)&lt;0\\) \\(f''(x_0)&gt;0\\) \\(f\\) nmacht eine Linkskurve nach unten bei \\((x_0, y_0)\\) \\(f'(x)&lt;0\\) \\(f''(x_0)&lt;0\\) \\(f\\) macht eine Rechtskurve nach unten bei \\((x_0, y_0)\\) \\(f'(x)=0\\) \\(f''(x)&lt;0\\) \\(f\\) hat ein lokales Maximum bei \\((x_0, y_0)\\) \\(f'(x)=0\\) \\(f''(x)&gt;0\\) \\(f\\) hat ein lokales Minimum bei \\((x_0, y_0)\\) \\(x_0\\) heisst \\(f(x_0)\\) heisst \\((x_0, y_0)\\) heisst Maxiumum (relative) Maximalstelle (relatives) Maximum/Maximalwert (relativer) Hochpunkt Minimum (relative) Minimalstelle (relatives) Minimum/Minimalwert (relativer) Tiefpunkt Oberbegriff (relative) Extremalstelle (relatives) Extremum/Extremalwert (relativer) Extremalpunkt","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#wendepunkte-und-sattelpunkte-ev-loschen","title":"Wendepunkte und Sattelpunkte (ev. l\u00f6schen)","text":"<p>Eine Wendepunkt, ist wenn eine Rechtskurve in eine Linkskurve,  oder umgekehrt, geht. Ein Spezialfall ist es, wenn \\(f'(x)=0\\) ist, dann spricht man von einem <code>Sattelpunkt</code>. </p> <p></p> <p>Wenn \\(f''(x_0)=0\\) und \\(f'''(x_0)\\neq 0\\) ist, dann ist es sicherlich einen <code>Wendepunkt</code>. </p> <p>Wenn zus\u00e4tzlich noch \\(f'(x_0)=0\\) gilt, dann ist es ein <code>Sattelpunkt</code></p>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#fragen-fur-die-kurvendiskussion-ev-loschen","title":"Fragen f\u00fcr die Kurvendiskussion (ev. l\u00f6schen)","text":"<ol> <li>Definitionsbereich?</li> <li>Symmetrieeigenschaften (gerade/ungerade), Periode?</li> <li>Schnittpunkte mit Achsen, Polstellen?</li> <li>Randpunkte, bzw. Verhalten, wenn \\(x\\) gegen die Grenzen des Definitionsbereichs strebt?</li> <li>Kandidaten f\u00fcr Extrema bestimmen und untersuchen</li> <li>Wendepunkte suchen</li> <li>Tabelle von Werten aufstellen (falls noch n\u00f6tig)</li> </ol>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#extremaufgaben-ev-loschen","title":"Extremaufgaben (ev. l\u00f6schen)","text":"<ol> <li>Zielgr\u00f6sse identifizieren</li> <li>Unabh\u00e4ngige Variable identifizieren</li> <li>Definitionsbereich bestimmen</li> <li>Zielgr\u00f6sse als Funktion mit unabh\u00e4ngigen Variabeln als Argument ausdr\u00fccken</li> <li>Relative Maxima/Minima bestimmen; Randpunkte auch ber\u00fcrcksichtigen!</li> <li>Welche relative Extrema sind auch absolute?</li> </ol>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#ableiten","title":"Ableiten","text":"Name Formel \\(x^k=k\\cdot x^{k-1}\\) Faktorregel \\((c\\cdot f)'(x)=c\\cdot f'(x)\\) Summenregel \\((f+g)'(x)=f'(x)+g'(x)\\) Produktregel \\((u\\cdot v)'(x)=u'(x)\\cdot v(x)+u(x)\\cdot v'(x)\\) Quotientenregel \\((\\frac u v)'(x)=\\frac{u'(x)\\cdot v(x)-u(x)\\cdot v'(x)}{v(x)^2}\\) Kettenregel \\((F\\circ u)'(x)=F'(x)\\cdot u'(x)\\) sin \\(sin(x)'=cos(x)\\) cos \\(cos(x)'=-sin(x)\\) tan \\(\\tan(x)'=\\frac 1 v{\\cos^2(x)}\\) arcsin \\(\\arcsin(x)'=\\frac 1 {\\sqrt{1 - x^2}}\\) arccos \\(\\arccos(x)'=-\\frac 1 {\\sqrt{1-x^2}}\\) arctan \\(\\arctan(x)'=\\frac 1 {1+x^2}\\) \\(e^x\\) \\((e^x)'=e^x\\) \\((a^x)'\\) \\((a^x)'=a^x\\cdot \\ln(a)\\) \\(\\ln(x)'\\) \\(\\ln(x)'=\\frac 1 x\\) \\(\\log_a(x)'\\) \\(\\log_a(x)'=\\frac 1 {x\\cdot \\ln(a)}\\) Funktionsgleichung f\u00fcr Tangente \\(y(x)=f'(x_0)\\cdot (x-x_0)+f(x_0)\\) <p>Achtung: Nicht jede Funktion ist differenzierbar. Die Ableitung einer Funktion darf keine pl\u00f6tzliche Spr\u00fcnge machen</p>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#newton-verfahren","title":"Newton Verfahren","text":"<p>\\(x_{n+1}=x_n-\\frac{f(x_n)}{f'(x_n)}\\)</p>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#integrieren","title":"Integrieren","text":"<p>Ableiten: \\(a\\cdot x^n\\rightarrow \\frac{a}{n+1}\\cdot x^{n+1}\\)</p> <p>Schreibweise von Integral von der Fl\u00e4che zwischen \\([a;b]\\):  \\(\\int^b_a f(x) \\mathrm d x =F(b)-F(a)\\)$</p> <ul> <li>\\(\\int a^x \\mathrm d x =\\frac {a^x}{\\ln(a)} + C\\)</li> <li>\\(\\int e^{ax}=ae^{ax}\\)</li> <li>\\(\\int \\ln(x)\\mathrm dx=x\\cdot \\ln(x)-x + C\\)</li> <li>\\(\\int \\log_a(x)\\mathrm dx=\\frac 1 {\\ln(a)}\\cdot (x \\cdot \\ln(x) -x) + C\\)</li> <li>\\(\\int \\sin(x)\\mathrm dx=-\\cos(x)+C\\)</li> <li>\\(\\int \\cos(x)\\mathrm dx=\\sin(x)+C\\)</li> <li>\\(\\int \\tan(x)\\mathrm dx = -\\ln |\\cos(x)|+C\\)</li> <li>\\(\\int u^{-1}\\mathrm dx=\\ln(|u|)\\)</li> </ul>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#substition","title":"Substition","text":"<ol> <li>Substitutionsgleichung f\u00fcr \\(x: u = g(x)\\)</li> <li>Substitionsgleichung f\u00fcr \\(\\mathrm dx: \\frac {\\mathrm du}{\\mathrm dx}=g'(x) \\Rightarrow \\mathrm dx = \\frac{\\mathrm du}{g'(x)}\\)</li> <li>Integralsubstition: \\(\\mathrm dx\\) und \\(x\\) durch \\(\\mathrm du\\) und \\(u\\) ersetzen (Es darf nach dem k\u00fcrzen kein \\(x\\) im Integral mehr haben)</li> <li>Integration: Bei bestimmten Integralen m\u00fcssen die Integralsgrenzen auch durch \\(u(x)\\) gelassen werden</li> <li>R\u00fccksubstition (nur bei unbestimmten Integralen): Alle \\(u\\)s m\u00fcssen durch \\(u(x)\\) ersetzt werden</li> </ol> <p>Wenn \\(u(x)\\) linear ist, kann der Satz \\(\\int f(ax + b)\\mathrm dx =\\frac 1 a\\cdot F(ax + b)\\) f\u00fcr das integrieren genutzt werden. (Dabei muss \\(f(x)\\) nicht gleich \\(u(x)\\) sein)</p>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#partielle-integration","title":"Partielle-Integration","text":"<p>\\(\\int u(x)\\cdot v'(x)\\mathrm dx = u(x)\\cdot v(x) - \\int u'(x)\\cdot v(x)\\mathrm dx\\) oder \\(\\int^b_a u(x)\\cdot v'(x)\\mathrm dx = \\left[u(x)\\cdot v(x)\\right]^b_a - \\int^b_a u'(x)\\cdot v(x)\\mathrm dx\\)</p> <p>\\(u(x)\\) muss einfach abgeleitet werden k\u00f6nnen und \\(v(x)\\) sollte nicht komplizierter in der Stammfunktion werden.</p>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#partielbruchzerlergung","title":"Partielbruchzerlergung","text":"<p>Es braucht ein Integral der Form \\(\\int \\frac {g(x)}{h(x)}\\mathrm dx=\\int f(x)\\mathrm dx\\)</p> <ol> <li>Nullstellen in \\(h(x)\\) bestimmen: Erraten, mit Hornerschema oder faktorisieren</li> <li>Jeder Nullstelle eine Summe von Br\u00fcchen zuweissen</li> <li>\\(x_1\\) ist eine einfache Nullstelle \\(\\rightarrow \\frac A {x-x_1}\\)</li> <li>\\(x_2\\) ist eine doppelte Nullstelle \\(\\rightarrow \\frac{B_1}{x-x_2}+\\frac{B_2}{(x-x_2)^2}\\)</li> <li>\\(x_3\\) ist eine r-fache Nullstelle \\(\\rightarrow \\frac {C_1}{x-x_3}+\\frac{C_2}{(x-x_3)^2}+...+\\frac{C_r}{(x-x_3)^r}\\)</li> <li>\\(f(x)\\) mit der Summe aller Partialbr\u00fcche gleichgesetzt</li> <li>Konstante (\\(A_i\\), \\(B_i\\), \\(C_i\\), ...) bestimmen</li> <li>Alle Partialbr\u00fcche auf den selben Nenner bringen. Da auf beiden Seiten derselbe Nenner steht, m\u00fcssen die Z\u00e4hler auch gleich sein</li> <li>F\u00fcr das Gleichungssystem der Z\u00e4hler die Nulstellen in \\(x\\) einsetzen</li> <li> <p>Lineares Gleichungssystem l\u00f6sen</p> </li> <li> <p>Integrieren</p> </li> <li>\\(\\int \\frac 1 {x-x_0}\\mathrm dx=\\ln\\vert x-x_0\\vert + C\\)</li> <li>\\(\\int \\frac 1 {(x-x_0)^2}\\mathrm dx=-\\frac 1 {1(x-x_0)}+C\\)</li> <li>\\(\\int \\frac 1 {(x-x_0)^3}\\mathrm dx=-\\frac 1 {2(x-x_0)^{2}}+C\\)</li> <li>\\(\\int \\frac 1 {(x-x_0)^r}\\mathrm dx=\\frac 1 {(1 - r)(x-x_0)^{r-1}}+C\\)</li> </ol>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#uneigentliche-integrale","title":"Uneigentliche Integrale","text":"<ul> <li>\\(\\int ^\\infty_a f(x)\\mathrm dx = \\lim_{t\\to \\infty}\\int ^t_a f(x) \\mathrm dx=\\lim_{t\\to \\infty}F(t)-F(a)\\)</li> <li>Zuerst die Stammfunktion berechnen und danach \\(F(t)-F(a)\\) berechnen mit \\(t\\) nach \\(\\infty\\) gehen lassen</li> <li>\\(\\int^b_a f(x)\\mathrm dx=\\lim_{t \\to a} f(x)\\mathrm dx=\\lim_{t\\to a}F(b) - F(a)\\)</li> </ul>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#differentialgleichungen","title":"Differentialgleichungen","text":"<p>Eine Funktion, in welcher die die gesuchte Funktion \\(f\\) und die Ableitung dieser Funktion \\(f'\\) Beispiel: </p> <ul> <li>\\(y'=0\\rightarrow y=c\\) </li> <li>\\(y'=y\\rightarrow y=c\\cdot e^x\\)</li> <li> <p>\\(y'=7y\\rightarrow y=e^{7x}\\)</p> </li> <li> <p>Ordnung einer Ableitung ist die Ordnung der h\u00f6chsten vorkommenden Ableitung</p> </li> <li>Die Partikul\u00e4re L\u00f6sung?: </li> <li>Anfangsbedingungen: vorgegebene Werte f\u00fcr \\(y(x_0), y'(x_0),...,y^{(n-1)}(x_0)\\)</li> <li>Randbedinungen: vorgegebene Werte f\u00fcr \\(y(x_1), y(x_2),...,y(x_n)\\)</li> </ul>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#gewohliche-differentialgleichung-1-ordnung","title":"Gew\u00f6hliche Differentialgleichung 1. Ordnung","text":"<p>\\(y'=F(x, y)\\)</p>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#richtungsfeld","title":"Richtungsfeld","text":"","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#euler-schritte","title":"Euler-Schritte","text":"<p>\\(x_n=x_{n-1}+h\\) und  \\(y_n=y_{n-1}+h\\cdot F(x_{n-1}, y_{n-1})\\) </p> <p>Dabei ist \\(h\\) die Schrittgr\u00f6sse. Je kleiner, desto genauer ist die Approximation</p>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#separierbare-differentialgleichungen","title":"Separierbare Differentialgleichungen","text":"\\[ y'=f(x)\\cdot g(y) \\] <p>Die Differentialgleichung darf umgeformt werden, damit sie in diese Form passt (\\(x+y\\cdot y'=0 \\Rightarrow y\\cdot y'=-x\\Rightarrow y'=-x\\cdot \\frac 1 y\\))</p> <ol> <li>\\(y'=\\frac{\\mathrm dy}{\\mathrm dx}=f(x)\\cdot g(y)\\)</li> <li>Trennung der Variablen: \\(\\frac {\\mathrm dy}{g(y)}=f(x)\\cdot \\mathrm dx\\)</li> <li>Integration auf beiden Sieten(\\(+C\\) nicht vergessen): \\(\\int \\frac 1{g(y)}\\mathrm dy=\\int f(x)\\mathrm dx\\)</li> <li>Aufl\u00f6sen nach \\(y\\)</li> </ol>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#autonome-differentialgleichung","title":"Autonome Differentialgleichung","text":"\\[ y'=f(y) \\] <p>Autonome Differentialgleichungen sind separierbar.</p> <ul> <li>autonom:</li> <li>\\(y'=y^2 + 6\\)</li> <li>\\(y'=y^2\\cdot \\sqrt{1 - \\sin(y)}-\\ln(y)\\)</li> <li>nicht autonom</li> <li>\\(y' = x + y\\)</li> <li>\\(y'=\\frac y x\\)</li> </ul>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#lineare-differentialgleichungen","title":"Lineare Differentialgleichungen","text":"\\[ y'+f(x)\\cdot y=g(x) \\] <ol> <li>\\(f(x)\\) und \\(g(x)\\) bestimmen</li> <li>Stammfunktion \\(F(x)\\) und \\(G(x)\\) bestimmen</li> <li>In die Formel \\(y_0=C\\cdot e^{-F(x)}\\) einsetzen</li> <li>\\(C\\) durch \\(K(x)\\) ersetzen: \\(y=K(x)\\cdot e^{-F(x)}\\)</li> <li>\\(K(x)\\) berechnen (\\(+C\\) nicht vergessen): \\(K(x)=\\int g(x)\\cdot e^{F(x)}\\mathrm dx\\) </li> <li>Einstezen von \\(K(x)\\) in \\(y=K(x)\\cdot e^{-F(x)}\\)</li> </ol>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#anwendung-von-integrale","title":"Anwendung von Integrale","text":"","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#mittelwert","title":"Mittelwert","text":"<p>\\(\\mu=\\frac 1 {b - a}\\cdot \\int^b_a f(x)\\mathrm dx\\)</p>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#arbeitsintegral","title":"Arbeitsintegral","text":"<p>Die Formel f\u00fcr die Arbeit ist: \\(Arbeit=Kraft \\cdot Weg\\).  Somit kann mit der Funktion \\(f(x)\\), welche die Kraft an einer Strecke zur\u00fcck gibt, integriert werden. </p>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#rotationskorper","title":"Rotationsk\u00f6rper","text":"<p> $$ \\text{Horizontal: } &amp; V=\\pi \\cdot \\int^b_a(f(x))^2\\mathrm dx\\ \\text{Vertikal: } &amp; V=\\pi\\cdot \\int^d_c(g(y))^2 \\mathrm dx\\ \\text{wobei gilt: } &amp;c \\le y \\le d \\text{ und } g(y)=x \\text{ ist die Umkehr-Funktion von } f(x) $$</p>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#bogenlange","title":"Bogenl\u00e4nge","text":"<p> $$ s=\\int^b_a\\sqrt{1+(y')^2}\\mathrm dx $$</p>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#mantelflache-eines-rotationskorpers","title":"Mantelfl\u00e4che eines Rotationsk\u00f6rpers","text":"\\[ M=2\\pi \\cdot \\int^b_a y\\cdot \\sqrt{1 + (y')^2}\\mathrm dx \\]","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#schwerpunkt-einer-flache-von-zwischen-zwei-kurven","title":"Schwerpunkt einer Fl\u00e4che von zwischen zwei Kurven","text":"<p> $$ x_s=&amp;\\frac 1 A \\int^b_a x\\cdot (f_o(x) - f_u(x))\\mathrm dx\\ y_s=&amp;\\frac 1 {2A}\\int^b_a(f^2_o(x)-f^2_u(x))\\mathrm dx $$</p>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#schwerpunkt-eines-rotationoskorper","title":"Schwerpunkt eines Rotationosk\u00f6rper","text":"<p> $$ x_s=&amp;\\frac \\pi V \\int^b_a x\\cdot f^2(x) \\mathrm dx\\ y_s=&amp;0\\ z_s=&amp;0 $$</p>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#taylor-reihen","title":"Taylor-Reihen","text":"\\[ p_n=\\sum^n_{k=0}\\frac{f^{(k)}(x_0)}{k!}\\cdot (x-x_0)^k \\] Funktion \\(x_0\\) Taylor-Reihe Radius \\(e^x\\) 0 \\(\\sum^\\infty_{k=0}\\frac {x^k}{k!}=1+x+\\frac {x^2} {2!} + \\frac{x^3}{3!}+...\\) \\(\\infty\\) \\(e^{-2x}\\) 0 \\(\\sum^\\infty_{k=0}\\frac{-x^{2k}}{k!}=1-x^2-\\frac {x^4}{2!} - \\frac{x^6}{3!}+...\\) \\(\\infty\\) \\(\\sin(x)\\) 0 \\(\\sum^\\infty_{k=0}(-1)^k\\cdot\\frac{x^{2k+1}}{(2k+1)!}=x-\\frac{x^3}{3!}+\\frac{x^5}{5!}-\\frac{x^7}{7!}\\) q \\(\\cos(x)\\) 0 \\(\\sum^\\infty_{k=0}(-1)^k\\cdot \\frac{x^{2k}}{(2k)!}=1-\\frac{x^2}{2!}+\\frac{x^4}{4!}-\\frac{x^6}{6!}+...\\) \\(\\ln(x)\\) 1 \\(\\sum^\\infty_{k=0}(-1)^{k}\\cdot\\tfrac 1 {k+1}(x-1)^{k+1}=(x-1)-\\tfrac 1 2(x-1)^2+\\tfrac 1 3(x-1)^3-\\tfrac 1 4 (x-1)^4+...\\) \\(x^{-1}=\\frac 1 x\\) 1 \\(\\sum^\\infty_{k=0}(-1)^k\\cdot(x-1)^k=1-(x-1)+(x-1)^2-(x-1)^3+(x-1)^4-...\\)","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#komposition","title":"Komposition","text":"\\[ T_{h,x_0}\\text{ bezeichnet die Taylor-Reihe von } h(x) \\text{ um } x_0\\\\ T_{g,f(x_0)}(f(x))=T_{g\\circ f),x_0}(x_0) \\] <p>Beispiel: $$ f(x)=-x^2\\ g(x)=e^x\\ x_0=0\\ g(x)=e^2\\approx T_{g,0}(z)=1+z+\\frac {z^2}{2!}+\\frac{z^3}{3!}+...\\ g(f(x))=e^{-x^2}\\approx T_{(g\\circ f), x_0}=T_{g, f(x_0)}=1+(-x^2)+\\frac{(-x^2)^2}{2!} \\frac{(-x^2)^3}{3!}+...=1-x^2+\\frac{x^4}{2!}-\\frac{x^6}{3!}+... $$</p>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#konvergenz","title":"Konvergenz","text":"\\[ f(x)=\\sum^\\infty_{k=0}a_k(x-x_0)^k\\\\ r=\\lim_{k\\to\\infty}\\left\\vert\\frac{a_k}{a_{k+1}}\\right\\vert\\\\ x_1=\\vert x - x_0\\vert\\\\ x_2 = \\vert x + x_0\\vert \\] <p>\\(r\\) ist der Radius um \\(x_0\\), in welchem das Taylor-Polynom genau ist, wenn \\(k\\) gegen Unendlich geht. \\(x_1\\) und \\(x_2\\) stellen die \u00e4usserst m\u00f6glichsten Punkte, welche vom Taylor-Polynom genau bestimmt werden k\u00f6nnen. </p>","tags":["summary","AN"]},{"location":"22FS/AN2/summary_2022_06_20.html#hopital-regel","title":"Hopital-Regel","text":"\\[ \\lim_{x\\to x_0}\\frac{f(x)}{g(x)}=\\lim_{x\\to x_0}\\frac{f'(x)}{g'(x)} \\]","tags":["summary","AN"]},{"location":"22FS/Communication2/01_Presentation.html","title":"Presentation","text":""},{"location":"22FS/Communication2/01_Presentation.html#presentation_1","title":"Presentation","text":"<ol> <li>Too Much    Don't present too much</li> <li>Too Complex    Don't present a topic too complex</li> </ol>"},{"location":"22FS/Communication2/01_Presentation.html#fachtext","title":"Fachtext","text":"<ol> <li>Ziel-Publikum</li> <li>Struktur von anderen Fachtext \"kopieren\"</li> <li>present findings of the research topic</li> <li>Der Text soll informieren (nicht einen anderen Text kommentieren oder appellieren): Informieren mit Neigkeiten (nicht durch Strenge)</li> </ol> <p>Form: 5-10 seitigen Bericht mit Autorenangaben, Titel, Abstract </p> <p>Fachtext:</p> <ul> <li>kein \"man\"</li> <li>Umformung ins Passiv</li> <li>Umformung ins Ersatzpassiv</li> <li>Nominalsierung statt Verbalisierung</li> </ul>"},{"location":"22FS/Communication2/01_Presentation.html#poster","title":"Poster","text":"<ul> <li>Example?</li> <li>Coaching about Presentation?</li> <li>The poster has to contain the most important information. The presentation should add something</li> <li>Important points:</li> <li>What is the goal/aim of the presentation?</li> <li>What is the take-home message?</li> <li>Call-To-Action in Presentation</li> <li>Reader should be able to absorbe the main content in 2 min</li> <li>50% text - 50% images ratio</li> <li>clear structure (columns, circles, rectangles, ...)</li> </ul> <p>Poster Critic</p> <p></p> <p></p> <p></p> <ul> <li>Plaza</li> </ul>"},{"location":"22FS/Communication2/Presentation_Script.html","title":"Presentation Script","text":"<p>Welcome to my presentation about 5G's adaptive antennas.</p> <p>Today, nearly everybody has a cellphone. Using it in public to browse social media sites, like Twitter and Facebook, or watch a Video on Netflix or YouTube, is socially accepted and a common occurrence. </p> <p>Because of this increase in usage of cellular data, new standards were developed. From 2G to 3G, which allowed mobile users to browse the internet with acceptable loading times, to 4G, with which, the populous could watch videos on the go. The most recent standard is 5G, which boasts up to 10Gbit/s in an optimal situation. As you can see on this graph, the data rates have increased exponentially. All of these standards are full duplex systems, meaning a device can send and receive simultaneously. </p> <p>As a side note: The maximum speed of 5G in Switzerland is lower than the theoretical maximum, which can also be seen on the graph. This is because the higher frequency bands used in other countries aren't permitted for use with 5G in Switzerland. Using a higher frequency band yields increased the speed, but comes at the cost of range.</p> <p>With the need for more speed, data through-put and broader coverage, its tempting to let the the antennas send with more power. But this would cause higher radiation levels for people around the antenna and wasting energy by blasting electromagnetic radiation everywhere instead of just the device of the user.</p> <p>The solution to these problems are adaptive antennas which can, thanks to multiple subarrays, steer their beam towards the receiving device. This enables operating these antennas at a higher power level but with similar radiation levels resulting in better coverage, higher data rates and improved energy efficiency. </p> <p>However, in Switzerland the law did not distinguish between \"normal\" antennas and adaptive antennas. To remedy this, the Swiss government instructed the BAFU to research adaptive antennas and find a correction factor which can be applied to the power level of an antenna. This would enable the antenna to send at a higher power level as the actual power level is corrected to a lower level while simultaneously reducing the consumed energy. Because the maximal power level is multiplied with a correction factor, the law which specifies the maximum permitted energy levels does not need to be modified, which should help these laws getting through parlament.</p> <p>As you can see in this graph, the more sub-arrays an antenna has, the lower the correction factor gets. This is because as the number of sub-arrays increases the amount of control over the direction of the beam becomes more accurate, resulting in lower radiation levels. The correction factor is between 0.4 and 0.1. Because the power level is multiplied with a number between one and zero, the result will be less then the original power level.</p> <p>To address the safety of these antennas,  an automated limiter needs to be installed which will reduce the power level if it is too higher over a span of 6 minute. This will ensure that the radiation threshold isn't exceeded by an antenna.</p> <p>Another important detail of the provision specifies that applying the correction factor to an already existing antenna doesn't count as modifying the antenna resulting in hopefully lower administrative burden.</p> <p>An other obstacle towards adaptive antennas comes from the federalistic structure of the Swiss government. Each canton has its own law regarding the accepted radiation level of antennas and how companies apply for building and changing antennas. The report does lay the legal foundation to allow the cantons to change their law without fearing legal repercussion. With the hype around 5G, companies, like Swisscom, are anxious to build new antennas and will surly pressure the cantons to hurry up with these laws, however law-makers aren't known the be rapid. </p> <p>To monitor how effective these antennas are, the BAFU started to monitor the electromagnetic pollution and will publish a report later in 2022. It will be interesting to see, if the electromagnetic pollution will stay stable at the current level or will increase.</p>"},{"location":"22FS/KT/00_Glossar.html","title":"Glossar","text":"Begriff Definition Protokoll Definiert, wie Daten versendet werden Dienst Etwas, was eine Schicht, der n\u00e4chst h\u00f6hreren Schicht anbietet. Schittstelle SAP Service Application Point = eine Schnittstelle Schicht Peer-To-Peer Wenn zwei Ger\u00e4te direkt miteinander verbunden sind Shared-Medium Wenn mehrere Ger\u00e4te miteinander verbunden sind Simplex Die Kommunikation funktioniert nur in eine Richtung Half-Duplex Es kann Empfangen und Gesendet werden, aber nicht beides gleichzeitig Full-Duplex Es kann Empfangen und Gesendet weden zur selben Zeit"},{"location":"22FS/KT/01_OSI-Modell.html","title":"OSI-Modell","text":"<p>Die Schicht \\(i-1\\) bietet der h\u00f6hreren Schicht \\(i\\) einen Dienst an, w\u00e4hrend die Schicht \\(i\\) eine Schnittstellen oder Service Access Protocol (SAP) implementiert. Wenn sich die Schnittstelle/Dienst \u00e4ndert, hat dies auswirkungen auf die Schichten darum herum. Das Protokoll einer Schicht kann allerdings ge\u00e4ndert werden, da dies nur von derselben Schicht bei der anderen Anwendung ben\u00fctzt wird. </p> <p>Ein Protokol legt das Format und die Bedeugng von Nachrichten, welche zwischen denselben Schichten ausgetauscht werden.</p> <p></p> <p>Die Schicht 1-4 wird \u00fcbllicherweisse vom OS abgedeckt. Die Schichten 5-7 werden oft zusammen gefasst als eine.</p> <p>Daten werden von jeder Schicht bearbeitet und an die n\u00e4chste Schicht weitergegeben. Wenn ein Packet verschickt wird, werden die Daten zuerst vom Layer 7 zum Layer 1 verpackt und beim Empf\u00e4nger vom Layer 1 wird bis zum Layer 7 enpackt.</p> <p>Veschiedene Protokolle weden in verschiedene Layers eingeteilt. Unten folgt ein Bild mit den meist verwendeten Protokolle.</p> <p></p>"},{"location":"22FS/KT/01_OSI-Modell.html#physical-layer-bitubertragungsschicht","title":"Physical Layer (Bit\u00fcbertragungsschicht)","text":"<p>Das physikalische Medium, was die Ger\u00e4te verbindet. Dies kann ausgetauscht werden und die anderen Schichten bleiben umbetroffen.</p>"},{"location":"22FS/KT/01_OSI-Modell.html#data-link-layer-sicherungsschicht","title":"Data Link Layer (Sicherungsschicht)","text":"<p>Stellt eine sichere Verbindung den h\u00f6hreren Schichten zu verf\u00fcgung. </p> <p>Dieser Layer muss folgendes sicherstellen:</p> <ul> <li>sichere Verbindung zwischen zwei Punkten. Daf\u00fcr braucht es Massnahmen zur Fehlererkennung und Fehlerkorrektur</li> <li>Framing bzw. Datenbl\u00f6cke vom Network Layer werden verpackt, um die Funktionalit\u00e4t des Layers sicherzustellen</li> <li>Fluss-Steuerung, dass der Sender nicht schneller sendet, als es der Empf\u00e4nger verstehen kann</li> </ul> <p>Wenn an das \u00dcbertragungsmedium mehr als zwei Teilnehmer angeschlossen sind, muss der Layer zus\u00e4tzlich auch noch:</p> <ul> <li>Jeder Teilnehmer adressieren. Hierbei werden die MAC-Adressen verwenden (IP-Adressen werden vom Layer 3 verwendet)</li> <li>Steuerung des Zugriffs auf das Medium. Wenn mehrere Teilnehmer auf das Medium zugreifen k\u00f6nnen, muss definiert werden, wann, wer darf.</li> </ul>"},{"location":"22FS/KT/01_OSI-Modell.html#kommunikations-art","title":"Kommunikations-Art","text":"<p>Je nachdem wie das \u00dcbertragungsmedium aufgebaut ist, ist die Art der Kommunikation verschieden:</p> <ul> <li>Simples: Es ist nur einen Kanal in eine Richtung vorhanden (Radio, TV)</li> <li>Half-Duplex: Es ist nur ein Kanal vorhanden. Dieser wird aber abwechslungsweise genutzt (einfaches Funkger\u00e4t)</li> <li>Full-Duplex: Es sind f\u00fcr beide Richtungen ein Kanal vorhanden (Telefon)</li> </ul>"},{"location":"22FS/KT/01_OSI-Modell.html#network-layer-vermittlungsschicht","title":"Network Layer (Vermittlungsschicht)","text":"<p>Dieser Layer stellt sicher, dass das Packet vom Sender zum Empf\u00e4nger durch ein Netzwerk von Konten gesendet werden. Daf\u00fcr gibt es eine netzweite eindeutige Layer 3 Adressierung (IPv4 oder IPv6 im Fall des IP-Protokolls), wie auch ein Verfahren, mit welchem eine Route durchs Netzwerk gefunden wird.</p>"},{"location":"22FS/KT/01_OSI-Modell.html#verbindungsorientierter-dienst","title":"Verbindungsorientierter Dienst","text":"<p>In einem verbindungsoritentierem Netzwerk Layer wird eine Verbindung f\u00fcr ein (oder mehrere) Packete aufgebaut. Durch diese Verbindung k\u00f6nnen Daten gesendet werden, welche in derselben Reihenfolge ankommen, wie sie gesendet werden. Nach dem alle Daten gesendet wurden, muss die Verbindung wieder abgebaut werden.</p> <p>Um dies zu bewerkstelligen kann jedes Paket mit einer Verbindungs-Nummer ausgestattet werden. Anhand dieser, wissen die Knoten im Netzwerk zu welcher Verbindung das Paket geh\u00f6rt und wohin es gesendet werden muss.</p> <p></p> <p>Es gibt Verbindungen, welche permantent stehen. Diese werden Permanent Virtual Circuit (PVC) genannt. Eine Verbindung, welche jedes mal aufgebaut und danach abgebaut wird, nennt sich Switched Virtual Circuits (SVC).</p> <p>Diese Art von Dienst wird bei Provider Backbones mit dem Multi Protocol Label Switching (MPLS) Protkoll verwendet.</p>"},{"location":"22FS/KT/01_OSI-Modell.html#fragen","title":"Fragen","text":"<ul> <li>Wie wird diese Pfad gefunden?</li> </ul>"},{"location":"22FS/KT/01_OSI-Modell.html#verbindungsloser-dienst","title":"Verbindungsloser Dienst","text":"<p>Bei einem verbindungsloser Dienst wird die Zieladresse mit jedem Paket mit geschickt. Wie bei z.B. der Post gibt es keine Garantie in welcher Reihenfolge die Pakete ankommen. </p> <p>Jeder Knoten im Netzwerk muss das Netzwerk verstehen und wissen, wohin ein Paket gesendet werden muss, damit es beim Empf\u00e4nger ankommt. Daf\u00fcr gibt es Routing-Tables, in welchen diese Informationen stehen. </p> <p>Wenn sich das Netzwerk \u00e4ndert, kann es sein, dass ein Paket ein anderen Weg zum Ziel nimmt.</p> <p></p> <p>Ein typisches Beispiel ist das IP-Protokoll.</p>"},{"location":"22FS/KT/01_OSI-Modell.html#vorteile-und-nachteile","title":"Vorteile und Nachteile","text":"<ul> <li>Bei einem verbindungsorientiertem Dienst muss zuerst eine Verbindung aufgebaut werden, w\u00e4hrend bei einem verbindungsloser Dienst spontan ein Paket gesendet werden kann</li> <li>Da eine Verbindung bei einem verbindungsorientiertem Dienst aufgebaut wird, k\u00f6nnen geforderte Eigenschaften, wie Latenz oder Durchsatz, eingehalten werden. Bei einem verbindungslosem Dienst k\u00f6nnen diese Eigenschaften von Paket zu Paket anders sein.</li> <li>Verbindungsorienterte Dienste k\u00f6nnen Verkehrsstr\u00f6me gezielt lenken und so das Netzwerk verteilter auslasten</li> <li>Verbindslose Dienste k\u00f6nnen von selbst eine andere Route ben\u00fctzten, wenn eine Route ausgelastet oder unterbrochen ist</li> <li>Die Reihenfolge muss bei einem Verbindungslosem Dienst durch den Transport Layer sicher gestellt werden.</li> </ul>"},{"location":"22FS/KT/01_OSI-Modell.html#transport-layer-transportschicht","title":"Transport Layer (Transportschicht)","text":"<p>Die Aufgabe des Transport Layers ist es, die ben\u00f6tigte Qualit\u00e4t des Netzwerks sicher zu stellen. Wenn die Layer 1-3 unzuverl\u00e4ssig arbeiten, muss der Transport Layer diese Zuverl\u00e4ssigkeit wiederherstellen. Wenn die Reihenfolge darauf ankommt und dies nicht von den unteren Layers sichergestellt wird, dann wird dies zur Aufgabe des Transport Layers. Das heisst auch, dass der Transport Layer auf die unteren und oberen Schichten abgestimmt werden muss.</p> <p>Im Transport Layer gibt es nur noch der Sender und den Empf\u00e4nger. Die weiteren Konten werden von den Layers 1-3 abstrahiert und werden daher von dem Transport Layer nicht mehr ben\u00f6tigt.</p> <p></p> <p>Zwei wichtige Layer 4 Protokolle sind User Data Protocol (UDP), welches ein verbindungsloser, unsicherer Dienst sicherstellt und das Transmission Control Protocol (TCP), welches eine verbindungsorientierter sicherer Dienst sicherstellt.</p>"},{"location":"22FS/KT/01_OSI-Modell.html#session-layer-kommunikationsschicht","title":"Session Layer (Kommunikationsschicht)","text":"<p>Der Session Layer stellt eine sichere Verbindung bereit. Wenn der Transport Layer zusammen bricht, ist es die Aufgabe des Session Layers, diese Verbinung wieder aufzubauen und es f\u00fcr die Layers weiter oben, so auszusehen zu lassen, als ob nichts passiert w\u00e4re.</p>"},{"location":"22FS/KT/01_OSI-Modell.html#presentation-layer-darstellungsschicht","title":"Presentation Layer (Darstellungsschicht)","text":"<p>Die Aufgabe des Presentations Layers ist es, die Informationen des Applikations Layers in eine neutrale Form zu bringen.</p> <p>Ein Beispiel w\u00e4re Unicode oder ASCII.</p>"},{"location":"22FS/KT/01_OSI-Modell.html#applikations-layer-verarbeitungsschicht","title":"Applikations Layer (Verarbeitungsschicht)","text":"<p>Der Applikations Layer ist das Bindeglied zwischen dem Netzwerk und der Anwendung. </p> <p>Beispiele w\u00e4ren:</p> <ul> <li>File Transfer Protocol (FTP)</li> <li>Simple Mail Transfer Protocol (SMTP)</li> <li>Hyper Text Transport Protocol (HTTP)</li> <li>Domain Name System (DNS)</li> </ul>"},{"location":"22FS/KT/03_%C3%9Cbertragunsmedien.html","title":"\u00dcbertragungsmedien (Layer 1)","text":"Begriff Erkl\u00e4rung Freiraum \u00dcbertragung Medien, wie WLAN, 5G, welche ohne Kabel \u00fcbertragen symmetrische Leiter Twinax verdrillte Kupferader assymetrisch"},{"location":"22FS/KT/03_%C3%9Cbertragunsmedien.html#physik-ausbreitungsgeswindigkeit","title":"Physik - Ausbreitungsgeswindigkeit","text":"<p>Die Lichtgeschwindigkeit im Glas mit dem Brechungsindex \\(n=1.5\\) ist: \\(c_{Glass}=\\frac{c_0}{n}=\\frac{299'792'458}{1.5}\\approx200'000\\frac{km} s\\)</p> <p>In einem elektrischen Leiter ist es ebenfalls \\(200'000\\frac{km}s\\)</p>"},{"location":"22FS/KT/03_%C3%9Cbertragunsmedien.html#signaldampfung","title":"Signald\u00e4mpfung","text":"<p>Wie viel Leistung (in Dezibel) geht auf dem Weg zwischen \\(U_1\\) und \\(U_2\\) verloren.</p> <p>Die D\u00e4mpfung ist \\(10\\cdot \\log(\\frac {P1}{P2})\\). Dabei ist \\(P1\\) die Eingangsleistung und \\(P2\\) die Ausgangsleistung. Dies kann auch als \\(Signald\u00e4mpfung [dB] = 20\\cdot \\log(\\frac{U1}{U2})\\), wobei \\(U1\\) die Eingangs- und \\(U2\\) die Ausgangsleistung ist. Ebenfalls gilt \\(\\frac{P1}{P2}=\\left(\\frac{U1}{U2}\\right)^2\\)</p>"},{"location":"22FS/KT/03_%C3%9Cbertragunsmedien.html#cat-kabel","title":"CAT-Kabel","text":"<p>Bei \u00dcbertragungsmedien wird die Signald\u00e4mpfung meistens in \\(\\left[\\frac{dB}{100m}\\right]\\) oder \\(\\left[\\frac{dB}{km}\\right]\\) angegben. Diese Gr\u00f6sse wird D\u00e4mpfungsbelag genannt.</p> <p></p> Bezeichung Frequenzberreich Erkl\u00f6rung CAT-1-4 0.4/4/16/20 MHz F\u00fcr Telefone und Modemleitungen oder langsames LAN CAT-5 100 MHz Weitverbreitet. Erlaubt eine max. Bitrate von 1000Mbit/s bis zu 100m CAT-6 250 MHz Wird meistens f\u00fcr Gigabit (1000 Mbit/s) ben\u00fctzt CAT-7 600 MHz Geeigent f\u00fcr 10 Gigabit.  Es werden aber S/FTP Kabel ben\u00f6tigt CAT-8 2000 MHz Datenraten bis 40 Gigabit bis zu 30m"},{"location":"22FS/KT/03_%C3%9Cbertragunsmedien.html#signal-noise","title":"Signal-Noise","text":"<p>Nach einer gewissen Zeit nimmt die Signalst\u00e4rke ab</p>"},{"location":"22FS/KT/03_%C3%9Cbertragunsmedien.html#kabel-arten","title":"Kabel-Arten","text":""},{"location":"22FS/KT/03_%C3%9Cbertragunsmedien.html#koaxialkabel","title":"Koaxialkabel","text":"<p>Ein Koaxialkabel besteht aus einem Leiter. Sie sind geeignet f\u00fcr hochfrequente Signale und haben im Vergleich mit paarsymmetrischen Kabel einen kleinen D\u00e4mpfungsbelag und sind unempfindlicher gegen\u00fcber elektromagnetischen St\u00f6rungen. Die Kabel sind daf\u00fcr relativ empfindlich.</p> <p></p>"},{"location":"22FS/KT/03_%C3%9Cbertragunsmedien.html#paarsymmetrische-kabel-twisted-pair","title":"Paarsymmetrische Kabel (Twisted Pair)","text":"<p>Bei paarsymmetrischen Kabeln wird zwischen geschirmten Kabeln (Shielded Twisted Pair/STP) und ungeschirmten Kabeln (Unshielded Twisted Pair/UTP) unterschieden. Geschirmte Kabel sind st\u00f6rsicherer, aber auch teurer, schwerer und steifer. </p> <p>Das Namensschema von Twisted Pairs ist wie folgt: \\(xx/y\\text{TP}\\) (Beispiel: U/UTP, S/UTP, ...)</p> Werte f\u00fcr \\(xx\\) Werte f\u00fcr \\(y\\) Erkl\u00e4rung U U ungeschirmt F F Folienschirm S S Geflechtschirm SF &lt;gibt es nicht&gt; Schirm aus Geflecht und Folie <p>Schirme funktionieren nur, wenn sie gut geerdet sind!</p>"},{"location":"22FS/KT/03_%C3%9Cbertragunsmedien.html#twisted-pair-und-storungen","title":"Twisted pair und St\u00f6rungen","text":"<p>Zwei Leitungen, welche parallel gef\u00fchrt werden, verhalten sich, wie Sender und Empf\u00e4nger .</p> <p>Dies kann minimiert werden, in dem auf zwei Leitungen ein komplement\u00e4res Signal gesendet wird. Der Empf\u00e4nger kann danach die zwei Leitungen zusammen rechnen, und die herauskommende Spannung ist das St\u00f6rsignal.</p> <p></p> <p>Wenn ein Magnetfeld eine St\u00f6rung induziert (Induktiver Effekt), wirkt sich diese auf die beide Leiter umgekehrt aus. Aus diesem Grund werden die Kabel verdreht. Dadurch entstehen kleinere Schleifen und in der benachbarten Schleife ist die St\u00f6rung verkehrt, was die St\u00f6rung gr\u00f6sstenteils aufhebt.</p> <p></p>"},{"location":"22FS/KT/03_%C3%9Cbertragunsmedien.html#glassfaser","title":"Glassfaser","text":"<p>Glassfaser-Kabel funktionieren dank der totalen Reflektio.</p> <p></p>"},{"location":"22FS/KT/03_%C3%9Cbertragunsmedien.html#dispersion","title":"Dispersion","text":"<p>Es wird von Dispersion gesprochen, wenn das Signal verzert und nicht mehr erkannt wird. Es gibt mehrere Ursachen daf\u00fcr, die offensichtlichste die Modendispersion. Dies passiert, da unterschiedliche Lichtstrahlen einen k\u00fcrzeren oder l\u00e4ngeren Weg (je nachdem wie sie vom Kabel abprallen) haben und so zu verschiedenen Zeiten ankommen. Dieses wird auch Delay Skew genannt. Bei zu hoher Distanz oder zu hoher Pulsdichte kann dies zu Problemem f\u00fchren.</p>"},{"location":"22FS/KT/03_%C3%9Cbertragunsmedien.html#stufenfaser","title":"Stufenfaser","text":"<p>Kann mit einfachen Leuchtdioten angesprochen werden, hat aber viel Dispersion und Delay Skew (50 ns/km)</p>"},{"location":"22FS/KT/03_%C3%9Cbertragunsmedien.html#gradientenfasern","title":"Gradientenfasern","text":"<p>Der \u00dcbergang zwischen Glaskern und Schirmung ist ein Verlauf. Dies bewirkt, dass die Moden mit dem k\u00fcrzesten Weg gebremst werden und sie gleichzeitig mit den L\u00e4ngeren ankommen. Gradientenfasern haben eine Delay Skew von ca. 0.5ns/km</p>"},{"location":"22FS/KT/03_%C3%9Cbertragunsmedien.html#monomode-faser","title":"Monomode-Faser","text":"<p>Es werden Laser-Dioden ben\u00f6tigt, da die Faser zu d\u00fcnn ist f\u00fcr eine Lichtdiode. Dies macht die Monomode-Fasern auch teuer.</p>"},{"location":"22FS/KT/04_Data%20Link.html","title":"Data Link Layer (Layer 2)","text":""},{"location":"22FS/KT/04_Data%20Link.html#layer-2-protokolle","title":"Layer 2 Protokolle","text":"<ul> <li>HDLC</li> <li>PPP</li> <li>X.25 / Frame Relay</li> <li>MPLS</li> <li>ATM</li> </ul>"},{"location":"22FS/KT/04_Data%20Link.html#ubertragungsverfahren","title":"\u00dcbertragungsverfahren","text":"<p>Daten k\u00f6nen seriell oder parallel \u00fcbertragen werden. Bei der parallelen \u00dcbertragungen werden mehrere Bits gleichzeitig \u00fcbertragen. Dies funktioniert nur auf kurze Distanz, da sonst die Toleranzen zu gross w\u00e4ren.</p> <p>Bei der seriellen \u00dcbertragen werden die Bits nacheinander \u00fcbertragen. Hier sind sehr viel h\u00f6hrere Datenraten auf l\u00e4ngere Distanzen m\u00f6glich, da nicht mehrere Leitungen synchronisiert werden m\u00fcssen.</p> <p>Die serielle \u00dcbertragung kann noch weiter in synchrone und asynchrone serielle \u00dcbertragung unterteilt werden. Bei der asynchronen Verbindung wird kein Clock Signal \u00fcbertragen. Die Clock des Empf\u00e4nger und Senders sind daher nicht zusammen. Damit es trotzdem funktioniert, wird die Bitrate, die Start- und Stop-Bits abemacht. F\u00fcr jedes Zeichen wird ein Startbit gesendet und zum Abschluss ein Stopbit. Zu erst wird das niederwertigste (LSB = Least Significant Bit) \u00fcbertragen und zu letzt das h\u00f6chstwertige (MSB Most Significant Bit). (wirklich?)</p> <p>Der Emfp\u00e4nger tastet sehr schnell ab, bis das Startbit findet. Danach wird in der abgemachten Bitrate abgetastet. Der Takt darf nicht mehr als die halbe Bitzeit T abweichen, da sonst das falsche Bit gelesen w\u00fcrde werden.</p> <p></p> <p>Dagegen steht die synchrone \u00dcbertragung. Bei dieser sendet der Sender ein Takt mit den Daten mit. Daher werden auch keine Start und Stop-Bits ben\u00f6tigt.</p>"},{"location":"22FS/KT/04_Data%20Link.html#gleichspannungsfreiheit","title":"Gleichspannungsfreiheit","text":"<p>Der Sender und Empf\u00e4nger sind galvanisch (elektrisch nicht direkt verbunden) getrennt. Dies sch\u00fctzt die Ger\u00e4te davon, dass Falls beim anderen Ger\u00e4t ein Blitz einschl\u00e4gt oder es anderweitig eine \u00dcberspannung gibt.</p> <p>Da dies mit Capacitor gearbeitet wird, m\u00f6chte man, dass das Signal nicht immer bei 1 oder bei 0 ist, sondern m\u00f6glichst oft wechselt. Dies nennt sich gleichspannungsfrei. Daf\u00fcr kann z.B. eine Codierung, wie AMI, HDB3 oder PAM3 verwendet werden.</p>"},{"location":"22FS/KT/04_Data%20Link.html#taktruckgewinnung","title":"Taktr\u00fcckgewinnung","text":"<p>Das Ziel der Taktr\u00fcckgewinnung ist, ein Taktsignal aus dem normalen Datenstrom zu lesen. Daf\u00fcr darf der Datenstrom aber nicht zu lange nur <code>1</code> oder nur <code>0</code> senden, da sonst der Empf\u00e4nger kein Takt daraus lesen kann.</p>"},{"location":"22FS/KT/04_Data%20Link.html#ami-codierung","title":"AMI-Codierung","text":"<p>Ein <code>0</code> wird in Ami als <code>0</code> encodiert. Ein <code>1</code> wird alternativ als <code>U+</code> und <code>U-</code> gesendet. D</p> <p>Daher ist die Taktr\u00fcckgewinnung schwierig, wenn l\u00e4nger <code>0</code> gesendet werden. Daher ist AMI nicht f\u00fcr die Taktr\u00fcckgewinnung geignet. Es wird anstatt HDB3 ben\u00fctzt.</p> <p>Bei der HDB3-Encoding wird zus\u00e4tzlich nach <code>000</code> eine <code>1</code> gesendet. Diese <code>1</code> hat den selben Pegel, wie die letzte <code>1</code>, also entweder <code>U+</code> oder <code>U-</code>. Da normalerweise immer zwischen <code>U+</code> und <code>U-</code> gewechselt wird, kann der Empf\u00e4nger dieses Bit korrekt interpretieren. Bei langen Sequenzen von <code>0</code> w\u00fcrde dabei die Gleichspannungsfreiheit verletzt werden, daher wird wenn wenn weniger als zwei <code>1</code> seit dem letzten <code>000V</code> gesendet wurden, anstatt <code>000V</code> ein <code>B00V</code> gesendet. Dabei verhaltet sich das <code>B</code> wie ein normales Datenbit und wechselt zwischen <code>U+</code> und <code>U-</code> hin und her.</p>"},{"location":"22FS/KT/04_Data%20Link.html#pam3-4b3t-codierung","title":"PAM3 (4B3T-Codierung)","text":"<p>In dieser werden 4Bit Daten zu 3 ten\u00e4re Symbolen (Ein Symbol mit 3 Werten) \u00fcbersetzt</p> <p></p>"},{"location":"22FS/KT/04_Data%20Link.html#datenubertragung","title":"Daten\u00fcbertragung","text":"<p>Zehnerpotenzen: kBit = 103 Bit kbps = 103 bps MBit = 106 Bit Mbps = 106 bps GBit = 109 Bit Gbps = 109 bps</p>"},{"location":"22FS/KT/04_Data%20Link.html#baud-rate","title":"Baud-Rate","text":"<p>Die Anzahl Symbole pro Sekunde. Ein Symbol ist dabei ein Zustand im Datenstrom</p>"},{"location":"22FS/KT/04_Data%20Link.html#bitrate-nyquist","title":"Bitrate (Nyquist)","text":"<p>\\(f_s\\le2B\\), dabei ist \\(f_s\\) die Symbolrate/Baudrate und \\(B\\) die Bandbreite des Kanals in Hz.</p> <p>Diese Formel besagt, dass die Symbolrate in Baud (oder Nyquist Rate) doppelt so gross, wie die Frequenz des \u00dcbertragungskanal ist.</p>"},{"location":"22FS/KT/04_Data%20Link.html#maximale-bitrate-hartleys-gesetzt","title":"Maximale Bitrate (Hartley's Gesetzt)","text":"<p>Die Bitrate \\(R [bit/s] \\le 2B [Hz] \\cdot \\log_2(M)\\) </p> <p>wobei \\(M\\) folgendermassen definiert ist: \\(M=1+\\frac A {\\Delta V}\\)</p> <p>TODO</p>"},{"location":"22FS/KT/04_Data%20Link.html#kanalkapazitat-theorem-von-shanon","title":"Kanalkapazit\u00e4t (Theorem von Shanon)","text":"<p>\\(C_s=B\\cdot \\log_2(1+\\frac S N)\\), wo bei \\(C_s\\) die Kanalkapazit\u00e4t, \\(B\\) die Baudrate, \\(S\\) die Signal-Aplitude und \\(N\\) die Noise-Aplitude ist. \\(\\frac S N\\) ist die Signal-to-Noise Ratio</p>"},{"location":"22FS/KT/04_Data%20Link.html#synchrone-ubertragung","title":"Synchrone \u00dcbertragung","text":"<p>Bei der synchronen \u00dcbertragung wird immer gesendet, auch wenn keine Daten \u00fcbertragen werden. In diesem Fall werden konstant Flags \u00fcbertragen. Folgeadermassen wird eine M\u00f6glichkeit aufgezeichnet, wie dies gestaltet werden k\u00f6nnte.</p> <p> </p> <p>Ein Flag ist der Start bzw. Ende eines Datenrahmens. Da ein Flag <code>01111110</code> ist, kann dies nicht im Datenblock vorkommen. Daher wird nach f\u00fcnf <code>1</code> eine <code>0</code> eingesetzt. Diese <code>0</code> wird vom Empf\u00e4nger verworfen. Dies wird auch Bit-Stopfen (engl. \"Bit-Stuffing\")</p> <p></p>"},{"location":"22FS/KT/04_Data%20Link.html#asynchrone-ubertrageethernet","title":"Asynchrone \u00dcbertrage/Ethernet","text":""},{"location":"22FS/KT/04_Data%20Link.html#wieso-immer-noch-ethernet","title":"Wieso immer noch Ethernet?","text":"<p>Alle Ethernet-Standard ben\u00fctzten den RJ45 Stecker von 10MBit/s bis zu 10Gbit/s. Diese R\u00fcckwarts-Kompatibilit\u00e4t ist enorm wertvoll.</p> <p></p>"},{"location":"22FS/KT/04_Data%20Link.html#ethernet-standard","title":"Ethernet-Standard","text":"<p>Das prominentiste Beispiel der asynchronen \u00dcbertragung ist Ethernet, daher wird die asynchrone \u00dcbertragung an Ethernet vorgestellt.</p> <p></p>"},{"location":"22FS/KT/04_Data%20Link.html#preamble","title":"Preamble","text":"<p>Die Preamble werden 7 Bytes, welche aus Abwechslungsweise <code>0</code> und <code>1</code> bestehen. Das 8 Byte hat die Form <code>10101011</code>.</p>"},{"location":"22FS/KT/04_Data%20Link.html#bytes-korrekt-lesen","title":"Bytes korrekt lesen","text":"<p>Daten werden Umgekehrt gesendet (Zuerst das LSB und dann das MSB). Wenn man es von Hand lesen m\u00f6chte, m\u00fcssen die Bits umgedreht werden.</p>"},{"location":"22FS/KT/04_Data%20Link.html#frame-grosse","title":"Frame-Gr\u00f6sse","text":"<p>Da der Overhead fix ist, wird der Overhead eine kleinere Prozentanteil, je mehr Daten gesendet werden.</p> <p>Auf der anderen Seite, je gr\u00f6sser der Frame, desto h\u00f6her die Wahrscheinlichkeit, dass ein Fehler bei der \u00dcbertragung auftritt. Wenn ein Medium von mehreren Nutzer genutzt wird, m\u00fcssen die anderen Nutzer lange warten, wenn grosse Frames \u00fcbertragen werden.</p> <p></p>"},{"location":"22FS/KT/04_Data%20Link.html#sende-zeit","title":"Sende Zeit","text":"<p>Es braucht die Zeit \\(t_{frame}&gt;2\\cdot(n\\cdot t_{transfer}+ n\\cdot t_{forwarding})\\) und \\(t_{frame}&gt;2\\cdot t_{transfer}\\)</p> <p>Dabei ist \\(t_{frame}=\\frac{Framesize_{min}}{Bitrate}\\) und \\(t_{transfer}=\\frac{d_{max}}{c_{line}}\\)</p> <p>Aus dem allen geht herfor: \\(\\frac{Framesize_{min}}{Bitrate}&gt;2\\cdot \\frac{d_{max}}{c_{line}}\\)</p> <p>F\u00fcr die Framerate gilt: \\(Framerate = \\frac{Preabmle + SFD+DestinationAddress + SourceAddress+LT+Data+FCS+InterFrameGap}{Bitrate}\\) </p> <p>Die Interfrace Gap muss nur dazu gerechnet werden, wenn die Framerate berechet wird.</p>"},{"location":"22FS/KT/04_Data%20Link.html#collission-domain-und-broadcasat-domain","title":"Collission Domain und Broadcasat Domain","text":""},{"location":"22FS/KT/04_Data%20Link.html#repeater-vs-l2-switchbridge","title":"Repeater vs L2-Switch/Bridge","text":"<ul> <li>wegen kollision, k\u00f6nnen nicht beliebig Repeater hintereinander geh\u00e4nkt werden. Es verk\u00fcrzt die Collision </li> <li>Der Switch verk\u00fcrzt die Collision Domain</li> </ul>"},{"location":"22FS/KT/04_Data%20Link.html#bit-rahmenfehlerwahrscheinlichkeit","title":"Bit-/Rahmenfehlerwahrscheinlichkeit","text":"\\[ P_{Erfolg}=(1-p_e)\\\\ P_{Erfolg,Frame}=(1-p_e)^N\\\\ P_{Fehler,Frame}=1-(1-p_e)^N \\]"},{"location":"22FS/KT/04_Data%20Link.html#kollision-bei-shared-medium","title":"Kollision bei Shared-Medium","text":""},{"location":"22FS/KT/04_Data%20Link.html#autonegotiation","title":"Autonegotiation","text":"<p>Dieses Protokoll wird ab 100BASE-T unterst\u00fctzt und schaut, dass der Empf\u00e4nger und Sender die selbe Geschwindigkeit unterst\u00fctzt.</p>"},{"location":"22FS/KT/04_Data%20Link.html#vlan","title":"VLAN","text":"<p>Mit einem VLAN k\u00f6nnen seperate virtuelle Gruppen in einem LAN erstellen. Die Kommunikation zwischen VLANs sind meistens eingeschr\u00e4nkt oder nicht m\u00f6glich.</p>"},{"location":"22FS/KT/04_Data%20Link.html#vlan-tag","title":"VLAN-Tag","text":"<p>Damit dies auch in einem Netzwerk mit mehreren Switches m\u00f6glich ist, wird in VLAN-Tag im Ethernet-Frame eingef\u00fchrt.</p> <p></p> <p>Dieser Tag besteht aus:</p> <ul> <li>Tag Protocol Identifier:</li> <li>User Priority: (3 Bit),</li> <li>Cannonical Format Identifier</li> <li>VLAN-Identifier: (12-Bit)</li> </ul> <p></p>"},{"location":"22FS/KT/05_LAN.html","title":"LAN","text":"<p>LAN steht f\u00fcr Local Area Network ist ein r\u00e4umliches begrenztes Netzwer.</p>"},{"location":"22FS/KT/05_LAN.html#topologien","title":"Topologien","text":""},{"location":"22FS/KT/05_LAN.html#bus-topologie","title":"Bus-Topologie","text":"<p>Alle Ger\u00e4te sind direkt am \u00dcbertragungsmedium angeschlossen und werden nur aktiv, wenn sie senden.</p> <p></p>"},{"location":"22FS/KT/05_LAN.html#linien-topologie","title":"Linien-Topologie","text":"<p>Bei der Linien-Topologie sind die jeweils benachbarten Knoten miteinander verbunden. Wenn eine Nachricht von A zu D  geschickt wird, muss sie von B und C weiter geleitet werden. </p> <p>Diese Topologie ist zudem recht anf\u00e4llig, da wenn ein Knoten aussteigt, die Verbindung unterbrochen ist.</p> <p></p>"},{"location":"22FS/KT/05_LAN.html#ring-topologie","title":"Ring-Topologie","text":"<p>Eine Ring-Topologie wurde eine Linien-Topologie an den Enden verbunden. Dies verbessert die Redundanz, da bei einem Ausfall, jeder Knoten von der anderen Seite erreichbar ist. Um die Redundanz noch weiter zu erh\u00f6hen, wird manchmal auch eine doppelte Ring-Topologie verwendet.</p> <p>Bei der Ring-Topologie muss sichergestellt werden, dass sich eine Nachricht nicht im Kreis dreht.</p> <p></p>"},{"location":"22FS/KT/05_LAN.html#stern-topologie","title":"Stern-Topologie","text":"<p>Bei der Stern-Topologie geht alles \u00fcber einen Switch oder Hub. Dies hat zur folge, dass ein Knoten aussteigen kann ohne, dass das ganze Netzwerk lahm gelegt wird. Allerdings wenn der Switch oder Hub aussteigt, kann nicht mehr kommuniziert werden.</p> <p></p>"},{"location":"22FS/KT/05_LAN.html#baum-topologie","title":"Baum-Topologie","text":"<p>Die Baum-Topologie kann aus mehreren Stern-Topologien hergestellt werden.</p> <p></p>"},{"location":"22FS/KT/05_LAN.html#ubertragungsarten","title":"\u00dcbertragungsarten","text":"Art Erkl\u00e4rung Unicast Ein Paket hat wird genau an ein Ziel gesendet. Das Paket wird mit einer Adresse ausgestattet, so dass es am Ziel sicher ankommt. (Netflix) Broadcast Das Paket wird an alle Knoten im Netzwerk gesendet. Das Paket wird mit einer Broadcast-Adresse ausgestattet (Live-Stream/Twitch) Multicast Das Paket wird an eine Gruppen von Knoten gesendet. (Radio) (Anycast) Mehrere Server mit den selben Adressen. Der Knoten davor entscheidet, an welchen Knoten \u00fcbertragen wird"},{"location":"22FS/KT/05_LAN.html#ieee-namensgebung","title":"IEEE Namensgebung","text":"<ul> <li>1000BASE-T = Ethernet mit Basisband-Kanalcodierung mit einer Bitrate von 1Gbit/s mit Twisted-Pairs</li> <li>10BASE5 = 10Mbit/s Basisband-Ethernet mit max 500m Segmentenl\u00e4nge</li> </ul>"},{"location":"22FS/KT/05_LAN.html#manchester-codierung-10mbits","title":"Manchester-Codierung (10Mbit/s)","text":"<p>In Ethernet wird die Manchester-Codierung zwischen 0V und -2V angewendet.</p> <ul> <li>Eine steigene Flanke ist eine <code>1</code></li> <li>eine sinkende Flanke ist eine <code>0</code> </li> </ul> <p>Um z.B. zwei <code>1</code>  senden zu k\u00f6nnen, muss nach dem ersten <code>1</code> zuerst auf -2V gehen, damit eine zweite steigende Flanke gebildet werden kann. Da diese sinkende Flanke ausserhalb des Clocksignal ist, erkennt der Sender dies nicht.</p> <p>Ein Nachteil der Manchester-Codierung ist, dass nur die H\u00e4lfte der Bandbreite genutzt werden kann, da f\u00fcr zwei <code>1</code> das Signal 4 Flanken machen muss. Daher wird bei Geschwindigkeit h\u00f6her als 10Mbit/s keine Manchester-Codierung verwendet</p> <p></p>"},{"location":"22FS/KT/05_LAN.html#nrz-i-100mbits","title":"NRZ-I (100Mbit/s)","text":"<ul> <li>bei einer <code>1</code> wechselt der Pegel</li> <li>bei einer <code>0</code> bleibt der Pegel </li> </ul>"},{"location":"22FS/KT/05_LAN.html#shared-ethernet","title":"Shared-Ethernet","text":"<p>Das urspr\u00fcngliche Ethernet wurde f\u00fcr eine Bus-Topologie entwickelt. Dabei wurden Koaxial-Kabel verwendet, welche angebohrt wurden (Daher auch der Name Tick-Wire-Ethernet)</p> <p></p>"},{"location":"22FS/KT/05_LAN.html#mac-adresse","title":"MAC-Adresse","text":"<ul> <li>Individual/Group</li> <li>0 = individual address</li> <li>1 = group address</li> <li>Universally / Locally </li> <li>0 = universally administrated address (Normalfall)</li> <li>1 = locally administrated address</li> </ul>"},{"location":"22FS/KT/05_LAN.html#ethernet-frame-format","title":"Ethernet Frame Format","text":""},{"location":"22FS/KT/06_Network%20Layer.html","title":"Network Layer (Layer 3)","text":""},{"location":"22FS/KT/06_Network%20Layer.html#ip-adressen","title":"IP-Adressen","text":"<p>Mit hilfe von IP-Adressen routen Router die Pakete umher. IP-Adressen sind hirarchisch aufgebaut.</p>"},{"location":"22FS/KT/06_Network%20Layer.html#classful-vs-classless","title":"Classful vs Classless","text":"Klassen Adressbereich Anzahl Netze Interfaces pro netz A 1.0.0.0 - 127.255.255.255 127 16'777'214 B 128.0.0.0 - 191.255.255.255 16'384 65'534 C 192.0.0.0-223.255.255.255 2'097'152 254 <p>Die Klasse D (224.0.0.0 - 239.255.255.255) sind f\u00fcr Multicast-Adressen vorgesehen. Dies ist ein separates Protokoll mit separaten Adressierung.</p> <p>Die Klasse E (224.0.0.0 - 255.255.255.255) ist reserviert f\u00fcr zuk\u00fcnftige Netzwerke.</p> <p>Die folgenden privaten Netzwerke gibt es:</p> Klasse Netzadresse Subnetmaske A 10.0.0.0 255.0.0.0 B 172.16.0.0 - 172.31.0.0 255.255.0.0 C 192.168.0.0 - 192.168.255.0 255.255.255.0"},{"location":"22FS/KT/06_Network%20Layer.html#netmask","title":"Netmask","text":"<p>Die IP-Adresse ist in zwei Teile aufgeteilt: Die Netzadresse und Host-Adressen. Die Netzmaske unterteilt eine IP-Adresse in die Netzadresse und Hostadresse.</p> <p></p> <p>Alternativ schreibweisse ist \"/24\" f\u00fcr eine Subnetzmaske mit 24 <code>1</code> und 8 <code>0</code>. Daher gibt es \\((32-24)^2-2=255-2=254\\) addressierbare Hosts. Es werden noch zwei Adressen abgezogen, da zwei Adressen f\u00fcr die Broadcast- und Netzwerk-Adresse ben\u00f6tigt werden.</p>"},{"location":"22FS/KT/06_Network%20Layer.html#routing","title":"Routing","text":"<p>Dank routing weiss ein Router wohin ein Paket gesendet werden muss. Dies wird anhand der IP-Adresse gemacht.</p>"},{"location":"22FS/KT/06_Network%20Layer.html#routing-tabelle","title":"Routing-Tabelle","text":"<p>In der Routing-Tabelle steht, \u00fcber welcher Port welches Netzwerk ansprechbar ist. Darin steht der Port, an dem das Netzwerk erreichbar ist, die Netzwerkadresse und Netzmaske. Zus\u00e4tzlich gibt es ein Default-Gateway. \u00dcber diesen werden alle Pakete weitergeleitet, welche zu keinem anderen Netzwerk passt. Es kann f\u00fcr ein Netzwerk mehrere Eintr\u00e4ge geben.</p> <p>Die Routing-Tabelle ist geordnet nach der Netzmaske. Dabei ist das kleinste Netzwerk zu oberst (die h\u00f6chste Subnetz). Die Routing-Tabelle wird von oben nach unten durch geschafft. Zum ersten Hit wird das Paket gesendet.</p>"},{"location":"22FS/KT/06_Network%20Layer.html#flaches-vs-hirarchisches-routing","title":"Flaches- vs Hirarchisches- Routing","text":"<p>Bei Flachem-Routing kennt jeder Router jedes m\u00f6gliche Ziel im Netzwerk und andere Zielnetzwerke. Das Netzwerk Verhalten kann besser vorausgesagt werden und es k\u00f6nnen alternative Routings festgelegt werden, welche verwendet werden, wenn die schnellste Route ausf\u00e4llt. Die Routing-Tabellen aktuell zu halten, ist allerdings ein sehr grossen Aufwand.</p> <p>Beim Hirarchieschen-Routing hat jeder Host zwei Eintr\u00e4ge in der Routing-Tabelle. Ein Eintrag f\u00fcr das lokale Netz und ein Eintrag f\u00fcr alles andere, was an Router weitergeleitet wird.</p> <p></p>"},{"location":"22FS/KT/06_Network%20Layer.html#internet-protokoll-ip-format","title":"Internet Protokoll (IP) Format","text":"<p>Das folgende Diagramm zeigt der Header des IP-Protokolles:</p> <p></p> <ul> <li> <p>Version (4 Bit)   Gibt die Version des IP-Headers an. Es ist somit m\u00f6glich mehrere IP-Version (IPv4 oder IPv6) zu betreiben.</p> </li> <li> <p>Internet Header Length (IHL) (4 Bit)    Gibt die L\u00e4nge allen Headers an. Der gelesene Wert wird mit dem Faktor 4 multipliziert. Wenn also 5 gelesen wird, sind die Headers 20 Bytes lang. IHL muss zwiscehn 5 (20 Bytes) und 15 (60 Bytes) sein. Der fixe Teil eines IP-Headers sind 20 Bytes, also bleiben 40 Bytes f\u00fcr Optionale Felder.</p> </li> <li> <p>Type of Service (8 Bit)   Gibt an, was f\u00fcr eine Art von Leitung es ist. Ein Sender kann danach entscheiden, ob er eine Leitung, welche eine hoche Bandbreite hat, daf\u00fcr ein schlechten Ping (wie eine Satelitenverbindung) oder lieber eine \"normale\" Glassfasserleitung ben\u00fctzt. Dies wurde nie von allen Service-Providern unterst\u00fctzt.</p> </li> <li> <p>Total Length (16 Bit)   Die totale L\u00e4nget des IP-Paketes mit Headers  und Daten. </p> </li> <li> <p>Identifiaction (16 Bit)   Ein Wert, welches ein Paket eindeutig identifiziert. Dieser Wert wird ben\u00fctzt, um fragmentierte Pakete wieder zu einem Paket zusammen zusetzen.</p> </li> <li> <p>Flags (3 Bit)   Beinhaltet Kontrollflags f\u00fcr die Fragmentierung</p> </li> </ul> Feld Position Wert Funktion Erkl\u00e4rung Bit 0 reserved, must be zero Reserviert, immer Null DF Bit 1 0/1 May / Don't Fragment keine Fragmentierung MF Bit 2 0/1 Last / More Fragments Ob ein Folgefragment kommt <ul> <li> <p>Fragment Offset (13 Bit)   An welcher stelle ein fragmentiertes Paket in das ganze Paket gesetzt werden soll. Der gelesen Wert wird mit dem Faktor 8 multipliziert. (Aus 90 wird 720 Bytes)</p> </li> <li> <p>Time to Live (TTL) (8 Bit)   Gibt die Anzahl Sekunden an, welche das Paket noch im Netz sein darf. Wenn der Wert 0 wird, wird das Paket verworfen. In der Praxis ist es schwierig zu messen, wie lange ein Paket unterwegs ist und daher dekrementiert der Router der Wert um <code>1</code> wenn er es weiter sendet.    Wenn ein Router ein Paket mit TTL=1 erhaltet, dekrementiert er es zu <code>0</code> und verwirft es.</p> </li> <li> <p>Protocol (8Bit)   Das Protokol, welches im Datenteil \u00fcbertragen wird. Folgendes sind die wichtigsten Beispiele:</p> </li> </ul> Protocol Keyword Protokollbezeichnung 1 ICMP Internet Control Message 6 TCP Transmission Controll Protocol 17 UDP User Datagram Protocol <ul> <li> <p>Header Checksum (16 Bit)   Eine Pr\u00fcfsumme, welche nur \u00fcber den IP-Header gebildet wird. Diese muss von jedem Router neu berechnet werden, da gewisse Felder vom Router modifiziert werden.</p> </li> <li> <p>Source Address (32 Bit)   Die IP-Adresse des Senders</p> </li> <li> <p>Destination Address (32 Bit)   Die IP-Adresse des Empf\u00e4ngers</p> </li> <li> <p>Options und Padding (max. 40 Bytes)   Optionale Felder</p> </li> </ul>"},{"location":"22FS/KT/06_Network%20Layer.html#maximum-transfer-unit-mtu","title":"Maximum Transfer Unit (MTU)","text":"<p>Die MTU gibt an, wie viel Bytes \u00fcber eine Leitung geschickt werden k\u00f6nnen. Dabei werden aber nur die Daten-Bytes des Ethernet-Frames gez\u00e4hlt. Die Bytes des Ethernet-Headers gelten nicht. </p> <p>Headers von gekapselten Protokollen, wie IP oder ICMP, m\u00fcssen nat\u00fcrlich mit gez\u00e4hlt werden, da sie teil der Daten-Bytes des Ethernet-Frames sind.</p>"},{"location":"22FS/KT/06_Network%20Layer.html#addressauflosung","title":"Addressaufl\u00f6sung","text":"<p>TODO</p>"},{"location":"22FS/KT/06_Network%20Layer.html#address-resolution-protocoll-arp","title":"Address Resolution Protocoll (ARP)","text":"<p>ARP ist ein Layer 2 Protokoll, da es die Namensaufl\u00f6sung von IP-Adressen zu MAC-Adressen zul\u00e4sst.</p> <p>Ger\u00e4te haben typischerweisse eine ARP-Tabelle, in welcher ARP-Responses gecachet weden.</p> <p>TODO: Beispiel</p>"},{"location":"22FS/KT/06_Network%20Layer.html#gratuitous-arp","title":"Gratuitous ARP","text":"<p>Gratuitous heisst unn\u00f6tigt/unbegr\u00fcndet.</p> <p>TODO</p>"},{"location":"22FS/KT/06_Network%20Layer.html#fragmentieren-und-reassembly","title":"Fragmentieren und Reassembly","text":"<p>Fragmentieren wird gebraucht, wenn ein Paket \u00fcber eine Leitung geschickt werden soll, welche eine kleinere Maximum Transfer Unit (MTU) hat, als die Gr\u00f6sse des Paketes. In diesem Fall wird das Paket aufgeteilt/fragmentiert.</p> <p>TODO</p>"},{"location":"22FS/KT/06_Network%20Layer.html#internet-control-message-protocol-icmp","title":"Internet Control Message Protocol (ICMP)","text":"<p>ICMP Pakete werden der Schicht 3 zugeordnet, obwohl sie in einem IP-Paket gekapselt werden.</p> <p>Es gibt einige Typen von ICMP Paketen: (4 - Source Quench ist depricated - hiess, dass der Sender langs\u00e4mer soll senden. Hat sich er\u00fcbrigt, da es in TCP eingebaut w) </p> <p></p> ICMP-Type Bedeutung Beispiel 3 Destination Unreachable Wenn der Router ein Node nicht erreiche kann, weil z.B. die MTU zu klein ist, das h\u00f6here Protokoll deaktiviert ist beim Host, das Paket fragmentiert werden muss aber DF gesetzt ist oder der Node ausgesteckt wurde: TODO Code Protocol Unreachable=Node kommuniziert nicht \u00fcber das Protokol;  Port Unreachable = Kein Program h\u00f6rt auf diesen Port; 13 Communication adminstrativvely prohibited = Die Firewall blockiert etwas.Destination Unreachable kann auch genutzt werden, um die MTU einer Leitung zu finden 4 Source Quench Der Puffer des Routers ist voll 5 Redirct Wird an ein Host geschickt, wenn der Router feststellt, dass ein Paket an den falschen Router geschickt wurde 11 Time Exceeded Wenn das TTL-Feld =0 ist, wird es vom Router nicht mehr weitergesendet. Dies kann f\u00fcr Trace-Rout genutzt weden. Jeder Router reduziert das TTL-Feld um 1. Wenn der Router ein Paket mit TTL=1 bekommt wird dies um <code>1</code> reduziert und danach verworfen. 12 Parameter Problem Falls der Host oder Router im IP-Header einen ung\u00fcltigen Wert hat 0 Echo Reply Die Antowort auf ein Echo Request 8 Echo (-Request) Pingt ein Knoten an, welcher ein Echo Reply senden sollte 13 Timestamp Verhalten sich gleich wie Echo-Requests/-Replies aber senden noch die Zeit des Senders und Empf\u00e4ngers 14 Timestamp Reply Siehe 13 - Timestamp"},{"location":"22FS/KT/06_Network%20Layer.html#destination-unreachable-type-3","title":"Destination Unreachable (Type 3)","text":"<ul> <li>Code-Feld: 0 = net unreachable; 1 = host unreachable; 2= protocol unreachable; 3 = port unreachable; 4 fragmentation needed and DF set; 5 source route failed; 13 = communication administratively prohibited</li> <li>Internet Header + 64 Bits of Original Datagram enth\u00e4lt den ersten Teil des Datagramms,   das die ICMP-Meldung ausgel\u00f6st hat. Damit ist der urspr\u00fcngliche Absender in der Lage, den   Fehler genauer zu bestimmen.</li> </ul>"},{"location":"22FS/KT/06_Network%20Layer.html#time-exceeded-message-type-11","title":"Time Exceeded Message (Type 11)","text":"<p>Das Format ist gleich, wie bei Destination Unreachable (Type 3). Das Code-Feld kann folgende Werte haben: 0 = time to live exceeded in transit; 1 = fragment reassembly time exceeded.</p>"},{"location":"22FS/KT/06_Network%20Layer.html#echo-request-reply-message-type-8-type-0","title":"Echo-Request/-Reply Message (Type 8 / Type 0)","text":"<ul> <li>Identifier: ID, damit der Sender die Echo-Reply zu einem Prozess kann. In der Reply steht die selbe Zahl</li> <li>Sequence Number: Wird bei jedem Echo-Request inkrementiert. In der Reply steht die selbe Zahl.</li> <li>Code-Feld: ist null</li> </ul>"},{"location":"22FS/KT/06_Network%20Layer.html#struktur-von-icmp-pakete","title":"Struktur von ICMP-Pakete","text":"<p>Das ICMP Paket wird in einem IP-Paket verschachtelt (<code>Protocol=1</code> steht f\u00fcr den IP-Header).</p> <p></p>"},{"location":"22FS/KT/06_Network%20Layer.html#anwendungen","title":"Anwendungen","text":"<ul> <li>MTU einer Leitung finden   Daf\u00fcr kann das Don't Fragment auf <code>1</code> gesetzt werden und versucht werden, wie hoch </li> <li>Traceroute</li> <li>ping</li> </ul>"},{"location":"22FS/KT/06_Network%20Layer.html#ipv6","title":"IPv6","text":"<p>IPv6 bnutzt 128 Bits, bzw. 16 Bytes und erm\u00f6glicht es \\(2^{128}\\) Adressen zu generieren. IPv6 bringt zus\u00e4tzlich noch mehr Vorteile:</p> <ul> <li>Entlastung der Router</li> <li>Quality of Service: Flow Labels</li> <li>Verbessertes Routing: Routing Header</li> <li>Verbesserte Sicherheitsmechanismen</li> <li>Die MTU wird durch den Absender ermittelt und es gibt daher keine Fragmentierung, was den Router weiter entlastet</li> <li>Ein Interface kann mehrere IPv6 Adressen haben</li> </ul> <p>Eine IPv6 Adresse wird Hexadezimal dargestellt: <code>2001:0620:0000:0004:0A00:20FF:FE9C:7E4A</code>. Dabei k\u00f6nnen Nullen zu begin von Zahlen weggelassen werden (<code>...:0620:...</code>=<code>...:620:...</code>). Aus dem ergibt sich <code>2001:620:0:4:A00:20FF:FE9C:7E4A</code>. Zus\u00e4tzlich k\u00f6nnen lange Nullfolgen durch 2 Doppelpunkte ersetzt weden: <code>1023:0000:0000:0000:1736:a673:88a0:a620</code> = <code>1023::1736:a673:88a0:a620</code>. </p> <p>Der Doppelpunkt darf nur einmal genutzt werden.</p>"},{"location":"22FS/KT/06_Network%20Layer.html#ipv6-adressraume","title":"IPv6 Adressr\u00e4ume","text":"<p>Es gibt eine Loopback Adresse: <code>::1/28</code></p>"},{"location":"22FS/KT/06_Network%20Layer.html#ipv6-header","title":"IPv6 Header","text":"<p>Ein IPv6 Header ist 40 Bytes lang (ein IPv4 hat nur 20 Bytes)</p> <p></p>"},{"location":"22FS/KT/06_Network%20Layer.html#header-extension","title":"Header Extension","text":"<p>Im <code>Next Header</code> Feld kann angegeben, was der n\u00e4chste Header oder Protokol ist. Dies reduziert die Gr\u00f6sse, da nur die n\u00f6tigen Headers geschickt werden m\u00fcssen. Ebenfalls gibt es f\u00fcr den Router weniger zu tun, da es weniger Felder zu verarbeiten gibt.</p> <p></p> <p>In der folgenden Tabele sind die Header-Extension Types und Protokol-Types f\u00fcr das <code>Next Header</code>-Feld im IPv6 Header</p> <p></p> <ul> <li>Hop-by-hop (typ=0)   enth\u00e4lt Optionen, die von allen IPv6-Knoten auf der Strecke vom   Sender zum Empf\u00e4nger beachtet werden m\u00fcssen. Typisches Beispiel ist die Jumbogram   Option. Dieser Extension Header muss immer zuerst stehen.</li> <li>Routing Header (type = 43)    Wird vom Sender verwendet, um den Pfad zum Empf\u00e4nger zu   bestimmen. Er enth\u00e4lt eine Liste von Routern, \u00fcber die das betreffende IPv6 Paket geleitet   wird. Diese Option wurde als Sicherheitsrisiko erkannt und wird nur noch in modifizierter Form   f\u00fcr \u00abMobile IPv6\u00bb eingesetzt.</li> <li>Fragment Header (type = 44)   Enth\u00e4lt Informationen f\u00fcr das Reassembly analog zu IP V4</li> <li>Authentication Header AH (type = 51) und Encapsulating Security Payload Header (Type =51)   Enthalten Daten, welche die Vertraulichkeit eines IPv6 Pakets sicherstellen (RFC 4302).</li> <li>Destination Options (type = 60)   Dieser Header enth\u00e4lt Optionen, welche nur vom Endger\u00e4t   beachtet werden m\u00fcssen (im Gegensatz zu den Hop-by-Hop Options).</li> </ul> <p>Im folgenden Bild ist ein Beisiel f\u00fcr das <code>Next Header</code>-Feld:</p> <p></p>"},{"location":"22FS/KT/06_Network%20Layer.html#neigbor-discovery-protcol-ndp","title":"Neigbor Discovery Protcol (NDP)","text":""},{"location":"22FS/KT/06_Network%20Layer.html#icmpv6","title":"ICMPv6","text":""},{"location":"22FS/KT/06_Network%20Layer.html#autokonfigurieren","title":"Autokonfigurieren","text":""},{"location":"22FS/KT/07_Transport%20Layer.html","title":"Transport Layer (Layer 4)","text":"<p>[toc]</p>"},{"location":"22FS/KT/07_Transport%20Layer.html#adressierung","title":"Adressierung","text":"<p>Im Layer 4 werden \"Teilnehmer\" bzw. Applikationen mit Ports adressiert. Es gibt dabei ein Source- und ein Destination-Port. E</p> <p>Ein Port ist eine Zahl zwischen 1 und 65'536 und sind folgendermassen unterteilt:</p> <ul> <li>1-1023: Well-Known Port Nummern, wie z.B. 80 f\u00fcr HTTP</li> <li>1024-49'151: Reservierte Bereiche f\u00fcr herstellerspezifischen Applikationen</li> <li>49'152-65'536: Dynamische/Private Ports, welche beliebig verwendet werden k\u00f6nnen</li> </ul> <p>Die folgende Tabelle enth\u00e4lt die wichtigsten Well-Known Ports:</p> <p></p> <p>(465/TCP - SMTPS sollte heissen \"SMTP over SSL/TLS\")</p> <p>Um eine Kommunikationsbeziehung eindeutig zu bestimmen braucht es folgende 5 Parameter:</p> <ol> <li>Source Port</li> <li>Destination Port</li> <li>Source IP-Adresse</li> <li>Destination IP-Adresse</li> <li>Das Protokol (UDP oder TCP)</li> </ol>"},{"location":"22FS/KT/07_Transport%20Layer.html#tcp-transmission-control-protocol","title":"TCP (Transmission Control Protocol)","text":"<p>TCP bietet folgendes f\u00fcr eine Applikation:</p> <ol> <li>Verbindungsorientierte \u00dcbetragung: Eine Verbindung muss zuerst aufgebaut werden und eine TCP-Verbindung hat genau 2 Endpunkte (Multicast wird nicht unterst\u00fctzt)</li> <li>Hohe Zuverl\u00e4ssigkeit: TCP garantiert die Daten\u00fcbertragung ohne Verluste in der richtigen Reihenfolge</li> <li>**Vollduplex\u00fcbertragung: ** In einer TCP Verbindung k\u00f6nnen Daten in beide Richtungen fliessen</li> <li>**Stream-Schnittstelle: ** Eine Andwenung kann ein Stream von Bytes senden, welche vom Empf\u00e4nger in derselben Reihenfolge wieder empfangen werden.</li> <li>Zuverl\u00e4ssiger Verbindungsaufbau: Es muss zuerst eine Verbindung aufgebaut werden. Pakete von einer vorherigen Verbindungen sind danach nicht mehr g\u00fcltig</li> <li>Eleganter Verbindungsabbau: Beide Seiten k\u00f6nnen die Verbindung trennen und sie wird sauber abgebaut</li> <li>Siebes Merkmal: ?</li> </ol> <p>Im folgenden Diagramm wird aufgezeichnet, wie ein Verbindungsaufbau, das Senden/Empfangen von Nachrichten und der Verbindungsabbau beschreiben.</p> <p></p> <p>Im folgenden Diagramm sind die feinen Zust\u00e4nde eines Clients oder Server aufgezeichnet:</p> <p></p>"},{"location":"22FS/KT/07_Transport%20Layer.html#probleme","title":"Probleme","text":"<p>Die folgenden Probleme m\u00fcssen von TCP gel\u00f6st werden:</p> <ul> <li>Eine Verbindung soll zuverl\u00e4ssig auf- und abgebaut werden k\u00f6nnen</li> <li>Eine TCP-Nachricht k\u00f6nnen verloren, verf\u00e4lscht, dupliziert oder verstauscht werden. TCP muss diese Nachrichten trotzdem wieder korrekt zusammen setzen und der Applikationsschicht \u00fcbergeben. Hierf\u00fcr werden Techniken, wie Sequenznummern, Adaptiver Timeout, Sliding Window Protokoll ben\u00fctzt.</li> <li>Der Empf\u00e4nger soll nicht \u00fcberschwemmt werden. Hier f\u00fcr wird Flow Control mit Advertized Window Size gen\u00fctzt.</li> <li>Das Netzwerk dazwischen soll nicht \u00fcberlastet werden. Hier f\u00fcr gibt es Congestion Control mit Slow Start Algorithmus.</li> </ul>"},{"location":"22FS/KT/07_Transport%20Layer.html#tcp-header","title":"TCP-Header","text":"<ul> <li>TCP Source Port und Destination Port: Der genutzte Port auf dem Sender und Empf\u00e4nger</li> <li>Sequence Number: (Bezieht sich auf die Ausgangsdaten) Anhand dieser Zahl k\u00f6nnen Daten in der richtigen Reihenfolge der Applikation \u00fcbergeben werden und es wird die Acknowledgement Number damit berechnet</li> <li>Acknowledgment Number: (Bezieht sich auf die Eingangsdaten) </li> <li>Header Length/Data Offset: Gibt an, wo der TCP-Header mit optionalen Headers aufh\u00f6rt und die Daten beginnen</li> <li>Control Bits: Flags, welche z.B. den Verbindungsaufbau und -abbau einleiten      Diese Flags haben die folgende bedeutung:</li> <li>URG: Urgent-Pointer-Feld enh\u00e4lt einen g\u00fcltigen Wert</li> <li>ACK: Acknowledgment Feld enh\u00e4lt einen g\u00fcltigen Wert</li> <li>PSH: (= Push) Empf\u00e4nger soll Daten sofort an die Applikation weiterleiten</li> <li>RST (=Reset) Verbindung zur\u00fccksetzen</li> <li>SYN (=Synchronize) Verbindung aufbauen</li> <li> <p>FIN: Der Sender hat keine Daten mehr zu \u00fcbertragen. Verbindung abbauen</p> </li> <li> <p>Window: Gibt die noch verf\u00fcgbare Buffer-Gr\u00f6sse des Senders an. Wenn ein Empf\u00e4nger <code>0</code> im Window-Feld erh\u00e4lt, stoppt er zu senden, bis eine Retransmission mit einem gr\u00f6sseren Window-Feld ankommt.</p> </li> <li>Checksum: Die Checksume des TCP-Pakets</li> <li>Urgent Pointer: Falls <code>URG</code> gesetzt ist, zeigt dieses Feld an, wo die \"Urgent-Daten\" im Datenblock gefunden werden k\u00f6nnen</li> <li>Options: Optionen, wie \"SACK\" oder die maximale Segmentl\u00e4nge (MSS) k\u00f6nnen als optionale Option \u00fcbertragen werden</li> </ul>"},{"location":"22FS/KT/07_Transport%20Layer.html#verbindungsaufbau","title":"Verbindungsaufbau","text":"<p>Im folgenden Sequenz-Diagramm ist der 3-Way-Handshake eines TCP-Verbindungsaufbaus. Ein 3-Way-Handshake ist n\u00f6tig, da der Client, wie auch der Server sicher sein m\u00fcssen, dass sie eine Verbindung hat. Bei einem 2-Way-Handshake (mit nur 2 Nachrichten), weiss nur der Client sicher, dass eine Verbindung steht.</p> <p></p> <p>Das Sequenzdiagram von oben ist auch noch  in folgendem Zustandsdiagram abgebildet.</p> <p></p>"},{"location":"22FS/KT/07_Transport%20Layer.html#datenaustausch","title":"Datenaustausch","text":"<p>Im folgenden Diagram sieht man ein Austausch von Datenpaketen, nach dem letzten <code>ACK</code> Paket.</p> <p>Eine Nachricht vom Sender m\u00fcssen vom Client immer mit einem Paket, welches das <code>ACK</code>-Flag Gesetzt hat, best\u00e4tigen werden. Vor dem senden startet der Sender ein Timer. Falls dieser abl\u00e4uft, bevor der Empf\u00e4nger das Paket best\u00e4tigt hat, wird das Paket erneut versendet. Es gibt eine Retransmission.</p> <p>Die <code>Seq</code> Zahl der Antwort des Servers ist die <code>Ack</code> Zahl des Requests. Die <code>Ack</code> Zahl der Antwort des Servers ist die <code>Seq</code>-Zahl + die Anzahl empfangenen Bytes.</p> <p>Der Server kann zur Best\u00e4tigung ein leeres Datenpaket zur\u00fcck senden oder selber Daten senden, welche vom Client best\u00e4tigt werden m\u00fcssen.</p> <p></p>"},{"location":"22FS/KT/07_Transport%20Layer.html#verbindungsabbau","title":"Verbindungsabbau","text":"<p>Im folgenden Sequenzdiagram ist ein Verbinungsabbau aufgezeichnet. Dies ist nur noch ein \"2-Way-Hanshake\" und kann vom Client, wie auch vom Server initialisiert werden.</p> <p></p> <p>MSL=Maximum Segment Length</p> <p>Das Timeout am Ende ist n\u00f6tig, falls das letzte <code>ACK b+m+1</code> nicht ankommt. In diesem Fall w\u00fcrde die Passive-Seite noch mals ein <code>FIN b+m</code> Paket senden.</p> <p>Das folgende Zustandsdiagram zeigt der Verbindungsabbau.</p> <p></p>"},{"location":"22FS/KT/07_Transport%20Layer.html#adaptive-elemente-von-tcp","title":"Adaptive Elemente von TCP","text":""},{"location":"22FS/KT/07_Transport%20Layer.html#adaptives-timeout","title":"Adaptives Timeout","text":"<p>Das Timeout von TCP wird adaptiv bestimmt und \u00e4ndert sich \u00fcber die Lebenszeit der Verbindung.</p> <p>Daf\u00fcr werden folgende Formeln ben\u00fctzt: $$ RTO_n=SRTT_n + 4\\cdot RTTVAR_n\\ SRTT_n = (1 - \\alpha )\\cdot SRTT_{n-1}+\\alpha\\cdot RTT_n\\ RTTVAR_n=(1 - \\beta)\\cdot RTTVAR_{n - 1}+\\beta \\cdot \\vert SRTT_n - RTT_n \\vert $$</p> <p>Dabei steht \\(RTO\\) f\u00fcr <code>Retransmission Time-Out</code>, \\(SRTT\\) f\u00fcr <code>Smoothed Round-Trip-Time</code> und ist ein gewichteter Mittelwert, \\(RTT\\) f\u00fcr <code>Round-Trip-Time</code> und \\(RTTAV\\) f\u00fcr <code>Round-Trip-Time Variance</code> und ist der gewichteter Mittelwert der Abweichung, bzw. die Streuung.</p> <p></p> <p>Wenn die Roud-Trip-Time \u00fcberschritten wird, wird der Sender das Paket erneut senden.</p>"},{"location":"22FS/KT/07_Transport%20Layer.html#bestatigung-von-paketen","title":"Best\u00e4tigung von Paketen","text":"<p>In TCP wird das Sliding-Window Verfahren f\u00fcr die Best\u00e4tigung von Paketen gen\u00fctzt. Der Sender sendet alle Pakete im Fenster und schiebt das Fenster weiter, wenn die \u00e4lteste Nachricht best\u00e4tigt wurde.</p> <p></p> <p>Im folgenden Bild sieht man auf der linken Seite ein Verfahren, bei dem auf die Best\u00e4tigung des Empf\u00e4ngers gewartet wird. Auf der rechten Seite wird das Sliding-Window Verfahren bent\u00fczt.</p> <p>Sliding</p>"},{"location":"22FS/KT/07_Transport%20Layer.html#fluss-steuerung","title":"Fluss-Steuerung","text":"<p>Im folgenden Paket wird angenommen, dass der Empf\u00e4nger mit einer Buffergr\u00f6sse von 2'500 Bytes hat. Der Empf\u00e4nger sendet die verbleibende Buffergr\u00f6sse im <code>Window</code> Feld zur\u00fcck. Wenn der Sender eine Best\u00e4tigung mit <code>Window=0</code> empf\u00e4ngt, wartet er, bis er dieselbe Best\u00e4tigung mit einer h\u00f6heren <code>Window</code> Feld empf\u00e4ngt.</p> <p></p>"},{"location":"22FS/KT/07_Transport%20Layer.html#uberlastung-des-netzwerks-vermeiden","title":"\u00dcberlastung des Netzwerks vermeiden","text":"<p>Beim Slow-Start Algorithmus beginnt der Sender mit einer kleinen vordefinierten Gr\u00f6sse und verdoppelt dies mit jedem gesendetem Paket bis er die erste Schwelle erreicht. Danach wird die Paketgr\u00f6sse linear vergr\u00f6ssert bis ein Timeout entsteht. </p> <p>Bei einem Timeout wird die n\u00e4chste Schwelle auf die H\u00e4lfte des Paketes, bei welchem das Timeout entstand. Danach wird wieder ein Slow-Start ausgef\u00fchrt.</p> <p></p> <p>Es gibt f\u00fcr den Slow-Start Algorithmus folgende Kritikpunkte</p> <ul> <li>Die \"S\u00e4gezahnkurven\" verschiedener TCP-Sessions tendieren dazu, sich zu synchronisieren</li> <li>Die Annahme gilt f\u00fcr Wireless-Netze nicht mehr unbedingt, wo relativ viel Paketverlust durch Bitfehler   w\u00e4hrend der \u00dcbertragung vorkommt</li> <li>Slow-Start bei kurzen Transfers immer slow (www)</li> <li>Abh\u00e4ngig von Round Trip Time</li> </ul>"},{"location":"22FS/KT/07_Transport%20Layer.html#udp-user-datagram-protocol","title":"UDP (User Datagram Protocol)","text":"<p>UDP, wie auch TCP, ist ein Layer 4 Protokol und ben\u00fctzt Ports zur adressierung. Es ist aber nicht zuverl\u00e4ssig und erledigt nichts gegen Paket Verluste oder vertauschte Pakete.</p>"},{"location":"22FS/KT/07_Transport%20Layer.html#header","title":"Header","text":"<p>Der UDP Header besteht aus 8 Bytes und beinhaltet folgendes:</p> <p></p>"},{"location":"22FS/KT/08_Application_Layer.html","title":"Application Layer","text":"<ul> <li>Application Layer<ul> <li>DNS<ul> <li>Record Arten</li> <li>Root Servers</li> <li>Ablauf eines Namensaufl\u00f6sung</li> <li>Reverse DNS</li> </ul> </li> <li>BOOTP / DHCP<ul> <li>Nachteile</li> </ul> </li> <li>DHCP</li> <li>TFTP</li> <li>NAT<ul> <li>Port Mapping</li> <li>NAT und OSI</li> </ul> </li> <li>SMTP<ul> <li>Befehle</li> <li>Nachrichten</li> </ul> </li> <li>MIME<ul> <li>Base 64</li> <li>Quote Printable</li> </ul> </li> <li>HTTP</li> </ul> </li> </ul>"},{"location":"22FS/KT/08_Application_Layer.html#dns","title":"DNS","text":"<p>Jeder Full Qualified Domain Name (FQDN) muss eindeutig sein. Dass heisst, Geschwister-Knoten d\u00fcrfen nicht den selben Namen haben.</p> <p></p>"},{"location":"22FS/KT/08_Application_Layer.html#record-arten","title":"Record Arten","text":"<p>Es gibt mehrere Typen von Records, welche verschiedene Informationen enthalten.</p> <p></p>"},{"location":"22FS/KT/08_Application_Layer.html#root-servers","title":"Root Servers","text":"<p>Ein Root Server ist ein DNS-Server, welcher weiss wo z.B. der <code>ch</code> DNS-Server ist. Er ist auf der obersten Stufe. Weltweit gibt es fast 4000 Root Servers.</p>"},{"location":"22FS/KT/08_Application_Layer.html#ablauf-eines-namensauflosung","title":"Ablauf eines Namensaufl\u00f6sung","text":""},{"location":"22FS/KT/08_Application_Layer.html#reverse-dns","title":"Reverse DNS","text":""},{"location":"22FS/KT/08_Application_Layer.html#bootp-dhcp","title":"BOOTP / DHCP","text":"<p>BOOTP l\u00e4uft auf dem UDP Port 67 f\u00fcr den Server und 68 f\u00fcr den Client.</p> <p>Zu begin kenn ein BOOTP-Client nur seine eigene Mac-Adresse (nicht aber seine IP-Adresse). Daher sendet er ein Broadcast-Adresse mit seiner Mac-Addresse. Der BootP-Server empf\u00e4ngt dieser und sendet die n\u00f6tigen Netzwerk-Daten zur\u00fcck und wo das Image-File liegt, dass der Client dies herunter laden kann. BOOTP ben\u00f6tigt zwei Ports, da der Client ein Brodcast auf dem Port  67 schickt und der Server eine Antwort als Broadcast an den Port 68.</p> <p></p> <p>Wenn dies \u00fcber Netzwerkgrenzen funktionieren soll, muss der Router wissen, dass Pakete an den Port 67 und 68 weiter geleitet werden soll.</p> <p></p> <p>Ein BootP-Server kann ein Broadcast an alle Clients senden, wenn ein Update des Boot-Image gibt und so die Client benachrichtigen. Dies kann auch vom Server kommen ohne das ein Client anfragt.</p> <p></p> <p>Folgenden Screenshot ist das Paket Format gezeigt:</p> <p></p> <p>(fortsetzung des oberen Screenshots)</p>"},{"location":"22FS/KT/08_Application_Layer.html#nachteile","title":"Nachteile","text":"<ul> <li>Nachteile:</li> <li>Alles Statisch: Eine gesetzte IP-Adresse ist besetzt, auch wenn das Ger\u00e4t nicht online ist</li> <li>Manuelle Verwaltung: Alles muss manuell eingetragen werden</li> </ul>"},{"location":"22FS/KT/08_Application_Layer.html#dhcp","title":"DHCP","text":"<p>DHCP (Dynamic Host Configuration Protocol) ist r\u00fcckw\u00e4rtskompatibel mit BOOTP und benutzt dasselbe Paketformat und dieselben Ports. Damit der DHCP-Server noch weiss, ob ein Client noch gibt, m\u00fcssen Clients ein DHCP-Response senden, bevor die Lease-Time ablauft. Sonst w\u00fcrde die Adresse wieder freigegeben werden.</p> <p>Ein DHCP schickt mindestens:</p> <ul> <li>IP-Adresse</li> <li>Subnetzmaske</li> <li>Default Gateway Adresse</li> <li>DNS-Server Adresse</li> <li>Dynamischer Hostname</li> <li>Domain Name (z.B. \"zhaw.ch\")</li> </ul> <p>Optional k\u00f6nnte unter anderem auch noch ein TFTP-Server und ein Boot Image File gesendet werden.</p> <p>Ablauf eines DHCP-Reuqests.</p> <p></p>"},{"location":"22FS/KT/08_Application_Layer.html#tftp","title":"TFTP","text":"<p>TFTP ist der \"sehr kleine Bruder\" zu FTP und ben\u00fctzt den UDP Port 69.</p> <p>TODO</p>"},{"location":"22FS/KT/08_Application_Layer.html#nat","title":"NAT","text":"<p>NAT steht f\u00fcr Network Address Translation und wird ben\u00fctzt, da es zu wenig IPv4 Adressen hat, um jeden eine solche Adresse zu verteilen.  </p> <p></p> <p>Dabei hat nur noch der Router eine \u00f6ffentliche IP Adresse. Interne IP-Adressen sind in einem privaten Adressen bereich (wie 192.168.X.X, 172.X.X.X oder 10.X.X.X).</p> <p>TODO: Genaues vorgehen beschreiben</p> <p></p> <p></p>"},{"location":"22FS/KT/08_Application_Layer.html#port-mapping","title":"Port Mapping","text":"<p>TODO</p>"},{"location":"22FS/KT/08_Application_Layer.html#nat-und-osi","title":"NAT und OSI","text":"<p>NAT folgt nicht dem OSI-Schichten Model, da der Router die TCP/UDP Pakete lesen und schreiben muss. Daher muss die IP-Adresse und Port unverschl\u00fcsselt bleiben.</p> <p></p>"},{"location":"22FS/KT/08_Application_Layer.html#smtp","title":"SMTP","text":"<p>SMTP steht f\u00fcr Simple Mail Protocol und ben\u00fctzt den TCP Port 25.</p> <p></p>"},{"location":"22FS/KT/08_Application_Layer.html#befehle","title":"Befehle","text":"<p>Es gibt mehrere Befehle, welche an den Server geschickt werden. Der Server Antwortet mit Status-Codes, \u00e4hnlich wie in HTTP.</p> <ul> <li><code>HELLO ethz.ch</code>   Client meldet sich beim Server</li> <li><code>MAIL FROM max.muster@ethz.ch</code>   Client meldet den Sender</li> <li><code>RCPT TO hans.muster@zhaw.ch</code>   Client meldet den Empf\u00e4nger. Es k\u00f6nnen mehrere <code>RCPT TO</code> versendet werden.</li> <li><code>DATA</code>   Client m\u00f6chte Mail versenden.  Die Daten sind fertig, wenn ein einzelnen <code>.</code> auf einer Zeile steht</li> <li><code>QUIT</code>   Baut die SMTP Verbindung ab</li> </ul> <p>Hier nun ein Beispiel:</p> <pre><code>&gt; telnet mail.zhaw.ch 25\nS: 220 mail.zhaw.ch ESMTP \u2026 ready\nC: HELO zhaw.ch\nS: 250 mail.zhaw.ch\nC: MAIL FROM: &lt;muth@zhaw.ch&gt;\nS: 250 OK\nC: RCPT TO: &lt;klsr@zhaw.ch&gt;\nS: 250 &lt;klsr@zhaw.ch&gt;... Recipient ok\nC: RCPT TO: &lt;ksha@zhaw.ch&gt;\nS: 250 &lt;ksha@zhaw.ch&gt;... Recipient ok\nC: DATA\nS: 354 Enter mail, end with \".\" on a line by itself\nC: Date: Sat,6 Jan 2099 16:34:25 +0100\nC: To: klsr@zhaw.ch\nC: Cc: ksha@zhaw.ch\nC: Subject: Test einer Mail.\nC:\nC: Damit ist der SMTP-Teil beendet.\nC:\nC: Gruss Thomas -- und jetzt?\nC: .\nS: 250 OK\nC: QUIT\nS: 221 mail.zhaw.ch closing connection\n</code></pre>"},{"location":"22FS/KT/08_Application_Layer.html#nachrichten","title":"Nachrichten","text":"<p>Nachrichten in SMTP werden mit 7-Bit ASCII verschickt. Dabei gibt es mehrere Header-Zeilen, welche von zwei Carriage Return und Line Feeds (<code>\\r\\n\\r\\n</code>) von der Nachricht getrennt sind.</p>"},{"location":"22FS/KT/08_Application_Layer.html#mime","title":"MIME","text":"<p>MIME steht f\u00fcr Multipurpose Internet Mail Extensions und stellt eine Codierung da, beliebige Daten \u00fcber 7-Bit ASCII zu verschicken.</p> <p>Dabei gibt es ein Mime-Separator, welcher die verschiedene MIME Teile teilt. Dieser wird mit dem Header <code>Boundary</code> angegeben. Der <code>Content-Type</code> der ganzen Nachricht ist <code>multipart/mixed</code>. Nach jedem Mime-Seperator gibt es zudem noch ein <code>Content-Type</code> Header, welcher die Art der Daten zwischen den Seperator darstellt.</p> <p>Die Nachrichten selbst kann als Base64 oder Quote-Printable enkodiert werden.</p> <pre><code>MIME-Version: 1.0\nContent-Type: Multipart/Mixed; \nBoundary=\"Mime-Separator-WAB02622.926626671\"\n\nMime-Separator-WAB02622.926626671\nContent-Type: text/plain\n\nHier folgt der Text... bla... fasel\n\nMime-Separator-WAB02622.926626671\nContent-Type: text/html\n\n&lt;HTML&gt;...&lt;/HTML&gt;\n</code></pre> <p></p> <p>TODO: SMTP Status Codes</p>"},{"location":"22FS/KT/08_Application_Layer.html#base-64","title":"Base 64","text":"<p>TODO</p>"},{"location":"22FS/KT/08_Application_Layer.html#quote-printable","title":"Quote Printable","text":"<p>TODO</p>"},{"location":"22FS/KT/08_Application_Layer.html#http","title":"HTTP","text":"<p>HTTP steht f\u00fcr Hypertext Transfer Protocol und funktioniert auf dem TCP Port 80.</p> <p>TODO: HTTP</p>"},{"location":"22FS/KT/summary.html","title":"Summary","text":"Hex Dez Bin Hex Dez Bin 0 0 0 8 8 1000 1 1 1 9 9 1001 2 2 10 A 10 1010 3 3 11 B 11 1011 4 4 100 C 12 1100 5 5 101 D 13 1101 6 6 110 E 14 1110 7 7 111 F 15 1111","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#physical-layer-bitubertragungsschicht-layer-1","title":"Physical Layer (Bit\u00fcbertragungsschicht) (Layer 1)","text":"<p>Das physikalische Medium, was die Ger\u00e4te verbindet. Dies kann ausgetauscht werden und die anderen Schichten bleiben umbetroffen.</p> <p></p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#formeln","title":"Formeln","text":"Begriff Erkl\u00e4rung Baud-Rate Anzahl Symbole pro Sekunde. Ein Symbol ist ein Zustand im Datenstrom Bitrate (Nyquist) \\(f_s \\le 2B\\) Dabei ist\\(f_S\\) die Baud-Rate und \\(B\\) die Bandbreite des Kanals in Hz Frame-Rate \\(F\\) \\(F=\\frac B {(7+1+6+6+2+P+4+12)\\cdot 8}=\\frac B {38\\cdot 8 + P\\cdot 8}\\) Die Anzahl Ethernet-Frames pro Sekunde (wobei \\(P\\) die Payload-Bytes ist) (min. Datenblock 46 Bytes) Nutz Bitrate \\(N\\) \\(N=F\\cdot P=\\frac{P\\cdot 8 \\cdot B}{38\\cdot 8 + P \\cdot 8}\\) - Die Bitrate, welche f\u00fcr Daten nutzbar ist Delay von Store-Forwards Switch \\(t_{delay}\\) \\(t_{delay}=t_{frame}=\\frac{Framesize}{Bitrate}\\) - Wie lange das Senden eines Frames ben\u00f6tigt Transfer Delay \\(t_{transfer}\\) \\(t_{transfer}=\\frac d {C_{wire}}\\), wobei \\(d\\) die Distanz ist und \\(C_{wire}\\) Lichtgeschwindigkeit im Kabel ist. Wie lange die Daten im Transfer sind Zeichenrate \\(\\frac{Bitrate}{Bits/Zeichen}\\): Wieviel Zeichen pro Sekunde durch die Leitung passen Zust\u00e4nde \\(M=1+\\frac A {\\Delta V}\\)  wobei gilt: \\(A\\) ist die max. Amplitude \\(\\Delta V\\) die Ungenauigkeit des Empf\u00e4ngers Max Bitrate (Hartley's Gesetzt) \\(R [bit/s] \\le 2B [Hz] \\cdot \\log_2(M)\\), wobei \\(R\\) die max. Bitrate und \\(M\\) die Anzahl Zust\u00e4nde ist Informationsgehalt (Bit) \\(\\log_2(M)\\) Der Informationsgehalt eines Symboles (\\(M\\) = Anzahl Symbole) Kanalkapazit\u00e4t (\\(C\\)) \\(C=B\\cdot \\log_2\\left(1+\\frac S N\\right)\\), wobei \\(B\\) die Kanal-Bandbreite in Hz ist, \\(S\\) die Signalleistung und \\(N\\) die Rauschleistung Nettobitrate \\(Nettobitrate=Brutobitrate\\cdot\\frac{Nutzdaten}{Nutzdaten + Header}\\) Hamming-Distanz TODO <p>Beispiel: Mit AMI k\u00f6nnen 3 Werte pro Symbol \u00fcbertragen werden. Informationsgehalt: \\(I_S=\\log_2(3)=1.58 \\left[\\frac{Bit}{Symbol}\\right]\\) , da aber nur ein Bit pro Symbol \u00fcbertragen wird, liegt die Effizienz bei \\(\\frac 1 {1.58}=63\\%\\)</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#physik-ausbreitungsgeswindigkeit","title":"Physik - Ausbreitungsgeswindigkeit","text":"<p>Die Lichtgeschwindigkeit im Glas mit dem Brechungsindex \\(n=1.5\\) ist: \\(c_{Glass}=\\frac{c_0}{n}=\\frac{299'792'458}{1.5}\\approx200'000\\frac{km} s\\) In einem elektrischen Leiter ist es ebenfalls \\(200'000\\frac{km}s\\)</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#signaldampfung","title":"Signald\u00e4mpfung","text":"<p>Die D\u00e4mpfung ist \\(Signald\u00e4mpfung [dB] = 10\\cdot \\log\\left(\\frac {P1}{P2}\\right)=20\\cdot \\log\\left(\\frac {U1}{U2}\\right)\\), Dabei ist \\(P\\) die Leistung und \\(U\\) die Anzahl Spannung (Volt).</p> <p>Die D\u00e4mpfung von 6dB heisst eine Leistungsabnahme von 4 und eine Spannungsabnahme von 2</p> <p>Der D\u00e4mpfungsbelag ist wieviel D\u00e4mpfung \u00fcber 100m oder 1km statfindet (Masseinheit: <code>db/100m</code> oder <code>db/km</code>)</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#kabel-arten","title":"Kabel-Arten","text":"","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#koaxialkabel","title":"Koaxialkabel","text":"<p>Bestehen aus einem Leiter und sind geeignet f\u00fcr hochfrequente Signale, haben einen kleinen D\u00e4mpfungsbelag und sind unempfindlich gegen\u00fcber von elektromagnetischen St\u00f6rungen. Die Kabel selbst sind daf\u00fcr relative empfindlich.</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#paarsymetrische-kabel-twisted-pair","title":"Paarsymetrische Kabel (Twisted Pair)","text":"<p>Das Namensschema von Twisted Pairs ist wie folgt: \\(xx/y\\text{TP}\\).</p> Werte f\u00fcr \\(xx\\) Werte f\u00fcr \\(y\\) Erkl\u00e4rung U U ungeschirmt F F Folienschirm S S Geflechtschirm SF &lt;gibt es nicht&gt; Schirm aus Geflecht und Folie <p>Schirme funktionieren nur, wenn sie gut geerdet sind!</p> <ul> <li>St\u00f6rsignale werden minimiert, in dem auf zwei Kabeln das invertierte gesendet wird. </li> <li>F\u00fcr Elektromagnetische Str\u00f6ungen, sind die Kabel verdrillt. So heben sich die St\u00f6rungen auf</li> <li>Zudem werden noch die Leitung geschirmt. Diese Schirme m\u00fcssen geerdet sein und galvanisch getrennt sein</li> </ul>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#cat-kabel","title":"CAT-Kabel","text":"Bezeichung Frequenzberreich Data Rate Erkl\u00e4rung CAT-1-4 0.4/4/16/20 MHz 1 /  4 / 10 / 16 Mbps F\u00fcr Telefone und Modemleitungen oder langsames LAN CAT-5 100 MHz 100 Mbps Weitverbreitet. Erlaubt eine max. Bitrate von 1000Mbit/s bis zu 100m CAT-5e 1 Gbps Ethernet, Fastether, Gigabit Ethernet CAT-6 250 MHz 10 Gbps Wird meistens f\u00fcr Gigabit (1000 Mbit/s) ben\u00fctzt CAT-7 600 MHz 10Gbps Geeigent f\u00fcr 10 Gigabit.  Es werden aber S/FTP Kabel ben\u00f6tigt CAT-8 2000 MHz 40 Gbps Datenraten bis 40 Gigabit bis zu 30m","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#glassfasser","title":"Glassfasser","text":"<p>Vorteile von Glassfasser: </p> <ul> <li>Vollst\u00e4nstig unempfindlich gegen\u00fcber elektromagnetischen St\u00f6rungen</li> <li>Kleine Signald\u00e4mpfung und grosse Distanzen</li> <li>Grosse Bandbreite und somit grosse \u00dcbertragunsraten</li> </ul> <p>Nachteil:</p> <ul> <li>Dispersion (gewisse Photonen sind schneller und l\u00e4ngs\u00e4mer, was das Signal verzerrt.)</li> <li>Delay Skew: Die Zeitabweichung, welche durch die verschiedene Laufzeiten zustande kommen</li> </ul> <p></p> <ul> <li>Multimode Stufenfasern: Das Kabel und Mantel ist klar abgegrenzt (ca. Delay Skew 50ns/km)</li> <li>Multimode Gradientenfasern: Der Kern und Mantel haben einen Gradient (ca. Delay Skew 0.5 ns/km)</li> <li>Monomod</li> </ul> <p></p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#asynchrone-und-synchrone-serial-vs-parallel","title":"(Asynchrone und synchrone) Serial vs Parallel","text":"<p>Bei der paralleln \u00dcbertragung werden mehrere Signale aufsmal \u00fcbertragen. Bei hohen Takten m\u00fcssen alle Leitungen genau Lange sein und daher kommt es nur auf kurze Distanzen zum einsatz.</p> <p>Bei serieln Verbindungen wird zuerst das LSB (= Least Significant Bit) \u00fcbertragen und zuletzt das MSB (=Most Significant Bit)</p> <p>Bei der synchronen serieln \u00dcbertragung wird ein Clock-Signal \u00fcbertragen. Es werden daher keine Start- und Stop-Bits ben\u00f6tigt</p> <p>Bei der asynchroner serieln \u00dcbertragung wird kein Clock-Signal \u00fcbertragen. Anstatt gibt es ein Start und Stop bit. Wenn der Empf\u00e4nger das Start-Bit erh\u00e4lt. stellt er seine eigene Clock auf diese Zeit ein. Der Takt darf nicht mehr als die halbe Bitzeit T abweichen (\\(\\text{Frequenz Abweichung in Prozent}=\\frac{0.5T}{9.5T}\\)). Die Clock startet nach dem Start-Flag. (Zuerst wird das LSB und zuletzt das MSB verschickt)</p> <p></p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#gleichspannungsfreei","title":"Gleichspannungsfreei","text":"<p>Der Sende rund Empf\u00e4nger sind galvanisch getrennt. Dies sch\u00fctzt die Ger\u00e4te, falls beim anderen ein Blitz einschl\u00e4gt. Da hierbei oft mit Capacitors umgesetzt wird, sollte das Signal nicht immer bei <code>1</code> oder <code>0</code> sein, sonder m\u00f6glicht oft wechseln.</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#codierungen","title":"Codierungen","text":"<p>Bei der AMI-Codierung wird ein <code>0</code> als <code>0V</code> encodiert und <code>1</code> abwechslungsweise als <code>U+</code> und <code>U-</code></p> <p>Bei der HDB3 Codierung wird zus\u00e4tzlich nach <code>000</code> eine <code>1</code> mit demselben Pegel wie die letzte <code>1</code> gesendet (<code>0001</code> ist gr\u00fcn in der Grafik) . Wenn die Anzahl <code>1</code> seit der letzten Regelverletztung gerade ist, wird anstelle <code>1001</code>  (rot in der Grafik) versendet</p> <p></p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#manchester-codierung-10mbits","title":"Manchester-Codierung (10Mbit/s)","text":"<p>In Ethernet wird die Manchester-Codierung zwischen 0V und -2V angewendet und daher nicht gleichspannungsfrei.</p> <ul> <li>Eine steigene Flanke ist eine <code>1</code></li> <li>eine sinkende Flanke ist eine <code>0</code> </li> </ul> <p></p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#nrzi-codierung-non-return-to-zero-invert-on-ones","title":"NRZI-Codierung (Non Return to Zero, Invert on Ones)","text":"<p>Diese Codierung wird bei 100BASE-TX verwendet. Bei einer <code>0</code> bleibt der Pegel, bei einer <code>1</code> wechselt der Pegel.</p> <p></p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#data-link-layer-layer-2","title":"Data Link Layer (Layer 2)","text":"<p>Aufgaben:</p> <ul> <li>Sichere Verbindung zwischen zwei Teilnehmer (Fehlerkorrektur und erkennung)</li> <li>Verpacking der Daten in Frames (Framing)</li> <li>Frame Erkennung</li> <li>Flow-Controll (Fluss Steuerung)</li> <li>Adresseriung der Teilnehmer (wenn mehrere Teilnehmer im Netz sind)</li> <li>Medium Zugriff (wenn meherere Teilnhemer das Medium teilen)</li> </ul> <p>In der Regel wird immer zuerst das MSB und zu letzt das LSB versendet (als wenn auf dem Kabel <code>010011</code> gesendet wird, wird das Zeichen <code>110010</code> empfangen)</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#ethernet-frame","title":"Ethernet Frame","text":"<ul> <li>Preamble und Start Frame Delimiter (SFD)</li> </ul> <p>Die Preamble werden 7 Bytes, welche aus Abwechslungsweise <code>0</code> und <code>1</code> bestehen (<code>01010101</code> = \\(84_{10}=55_{16}\\), <code>10101010</code>=\\(170_{10}=AA_{16}\\)). Das 8 Byte (das SFD) hat die Form <code>10101011</code> (=\\(171_{10}=AB_{16}\\))</p> <ul> <li> <p>Length/Type   Wenn der Wert \\(\\le 1500_{10}=05DC_{16}\\) ist, stellt es die Anzahl von Bytes im <code>Data</code> Feld dar (ohne <code>PAD</code>). Sonst wird angegeben, was f\u00fcr ein h\u00f6heres Protokoll im Datenfeld enthalten ist. 0x8100 (=33024) ist der VLAN-Tag Typ. 0x0800 (=2048) ist IP.</p> </li> <li> <p>Data/PAD   Die Daten (zwischen 0 - 1500 Bytes). Falls die Daten kleiner als 46 Bytes sind, wird dies mit PAD aufgef\u00fcllt</p> </li> <li> <p>Frame Check Sequence   CRC32 Checksume</p> </li> <li> <p>Interframe Gap   minimaler zeitlichen Abstand zwischen zwei Frames</p> </li> </ul>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#framing-synchrone-und-asynchrone-ubertragung","title":"Framing - synchrone und asynchrone \u00dcbertragung","text":"<ul> <li>asynchroner \u00dcbertragung   Es wird ein Frame (Anzahl Elemente; Datenblock mit \\(n\\) Elementen; Fehlererkennung) gesendet und danach ist Ruhe, bis zum n\u00e4chsten Frame</li> <li>synchroner \u00dcbertragung   Es wird kontinuierlich Frames gesendet, falls n\u00f6tig auch leere. Es gibt ein Start- und End Flag (meist <code>01111110</code>). Es wird bit-stuffing verwendet, um zu verhindern, dass das Flag im Daten-Block vorkommt. Wenn 5x<code>1</code> gesendet wurde, wird eine <code>0</code> gesendet, welche vom Empf\u00e4nger ignoriert wird</li> </ul>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#lange-eines-frames","title":"L\u00e4nge eines Frames","text":"<p>\\(Nettobitrate=Brutobitrate\\cdot\\frac{Nutzdaten}{Nutzdaten + Header}\\)</p> <p>Je l\u00e4nger ein Frame ist, desto h\u00f6her ist die Nettobitrate.  Nachteile: Durchsatz (Wahrscheinlichkeit, dass ein Fehler w\u00e4hrend eines Frames auftritt); Effizienz (Wenn ein Fehler auftritt, ist das es verloren); Zuverl\u00e4ssigkeit (Wahrscheinlichkeit, dass ein undetektierbarer Fehler auftritt steigt); Jitter (Variation der Zeitabst\u00e4nde zwischen Frames)</p> <p>Durchsatz h\u00e4ngt von der Nettobitrate und der Frame-Fehlerwarscheinlichkeit ab $$ \\text{Frame-Erfolgswahrscheinlichkeit: } (1-p_e)^N\\ \\text{Frame-Fehlerwahrscheinlichkeit: } 1-(1-p_e)^N\\ \\text{Optimale Frame-L\u00e4nge: } \\sqrt{\\frac{H}{p_e}}\\ $$ Dabei ist \\(N\\) die L\u00e4nge des Frames, \\(H\\) die L\u00e4nge des Headers und \\(p_e\\) die Bitfehlerwahrscienlichkeit.</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#flusskontrolle","title":"Flusskontrolle","text":"<ul> <li>Start-Stop-Meldungen: Wenn der Emp\u00e4ngerbuffer voll l\u00e4uft wird eine Stop-Meldung verschickt. Wenn der Buffer leer wird, wird eine Start-Meldung verschickt</li> <li>Stop-and-Wait: Jede Meldung wird quitiert. Wenn der Buffer voll l\u00e4uft, wird die Quitierung erst sp\u00e4ter gesendet.</li> </ul>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#fehlererkennung","title":"Fehlererkennung","text":"<ul> <li>Backward Error Correction: Fehler kann erkennt werden und die Daten neuangefordert werden</li> <li>Forward Error Correction: Die Fehler k\u00f6nnen erkennt und zu einem gewissen Punkt korrigiert werden</li> </ul> <p>Blockcodes:</p> <ul> <li>Das Hamming-Gewicht=die kleinste Anzahl <code>1</code> auf einer Linie der Generator-Matrix   Das Hamming-Gewicht ist gleich die Hamming Distanz \\(d_{min}\\)</li> <li>Erkennbare Fehler: \\(d_{min}-1\\) und korrigierbare Fehler: \\(\\frac{d_{min}-1}2\\)</li> </ul>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#fehlerkorrigierende-codes","title":"Fehlerkorrigierende Codes","text":"<p>\\(\\frac {d_{min}-1}2\\) korrigierbar </p> <p>Generatormatrix Bedinungen:</p> <ol> <li>f\u00fcr \\(d_{min}=3\\) muss jeder Code (ausser dem 0-Code) min. 3x<code>1</code> haben</li> <li>Mindestens eine <code>1</code> muss in der Einheitsmatrix sein</li> <li>Jede Pari\u00e4tsmatrix-Zeile muss 2x<code>1</code> beinhalten</li> </ol>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#crc","title":"CRC","text":"<p>Das Datenpolynom wird um die Anzahl Stellen des Generatorpolynoms verschoben und anschliessend durch das Generatorpolynom geteilt. Das Resultat wird zum Datenpolynom hinzu addiert. Dabei werden die entstandenen <code>0</code> des Datenpolynoms gef\u00fcllt. </p> <p>Der Empf\u00e4nger kann den empfangenen Wert durch das Generatorpolynom teilen und muss <code>0</code> erhalten.Flusssteuerung</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#lan","title":"LAN","text":"Art Erkl\u00e4rung Unicast Ein Paket hat wird genau an ein Ziel gesendet. Das Paket wird mit einer Adresse ausgestattet, so dass es am Ziel sicher ankommt. (Netflix) Broadcast Das Paket wird an alle Knoten im Netzwerk gesendet. Das Paket wird mit einer Broadcast-Adresse ausgestattet (Live-Stream/Twitch) Multicast Das Paket wird an eine Gruppen von Knoten gesendet. (Radio) (Anycast) Mehrere Server mit den selben Adressen. Der Knoten davor entscheidet, an welchen Knoten \u00fcbertragen wird","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#topologien","title":"Topologien","text":"Topologie Beschreibung Bustopologie Alle Knoten sind an einer Leitung angeschlossen Linientopologie Ein Knoten ist mit dem N\u00e4chsten verbunden. Ringtopologie Eine Linientopologie, mit zusammen gef\u00fcgte Enden Sterntopologie Alle Knoten h\u00e4ngen an einem Hub/Switch Baumtopologie Entsteht, wenn die Sterntopologie hirarchisch kombiniert wird","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#rj-45","title":"RJ-45","text":"<p>Der Stecker beseitzt 4 Adernpaar, bzw. 8 Adern. </p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#ieee-namensgebung","title":"IEEE Namensgebung","text":"<p><code>(Bitrate in Mbit/s) (BASE|BROAD)-(Art/Medium L\u00e4nge)</code></p> <ul> <li>1000BASE-T = Ethernet mit Basisband-Kanalcodierung mit einer Bitrate von 1Gbit/s mit Twisted-Pairs (T)</li> <li>10BASE5 = 10Mbit/s Basisband-Ethernet mit max 500m (5) Segmentenl\u00e4nge und bis zu 100 Knoten. Es braucht ein dickes Kabel als Shared-Medium</li> <li>10BASE2 = Thin-Wire-Ethernet, was eine flexiblere und billigere Alternative zu 10BASE5 ist. Der BNC-T \"Stecker\" wurde benutzt.</li> <li>100BASE-XX: 100 MBit/s Standardt</li> <li>100BASE-TX: 2 Paar UTP Cat 5 mit max Segmentl\u00e4nge 100m</li> <li>100BASE-FX: 2 MMF (62.5 \\(\\mu\\)m) mit 2000m Segmentl\u00e4nge</li> <li>100BASE-T4/2: 4 Paar UTP Cat. 3 mit 100m Segmentl\u00e4nge</li> </ul> <p></p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#fast-ethernet-vs-10mbits","title":"Fast-Ethernet vs 10Mbit/s","text":"<p>Es wird das selbe Frame-Format und Fehlererkennung ben\u00fctzt wie f\u00fcr 10MBit/s. Die Kollisiondomain ist 10 mal kleiner, da die Geschwindikgeit 10 mal gr\u00f6sser ist.</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#shared-ethernet","title":"Shared-Ethernet","text":"<p>Bevor ein Knoten sendet, wartet er, bis die Leitung frei ist. W\u00e4hrend dem Senden wird der Pegel auf der Leitung kontroliert, um kollisisionen fest zu stellen.</p> <p>Wenn eine Kollision festgestellt wurde, wird ein Jamming Signal gesendet und ein zuf\u00e4lliges Vielfache von der Slot-Zeit \\(t_s\\). Bei der 1. Kollision wird <code>0x</code> oder <code>1x</code> gewartet, bei jedem n\u00e4chsten wird der Zeitbereich verdoppelt. Bis zu 16 Versuche, danach wird die \u00dcbertragung abgebrochen. Der andere Sender erkennt nur, dass ein Signal eine Kollision verursacht hat, wenn er w\u00e4hrend des Sendens ein Jamming Signal erhaltet.</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#medium-access-control-mac","title":"Medium Access Control (MAC)","text":"<ul> <li>Master/Slave-Verfahren: (deterministisch) Der Master fragt zyklisch jeden Slave ab und der Slave antwortet mit den vorhanden Daten. So gibt es nie Kollisionen und das Verfahren ist deterministisch, aber der Master ist der single point of failure.</li> <li>Token Passing:(deterministisch) Es wird ein Token von Node zu Node Peer-to-Peer gereicht. Ein Node darf nur senden, wenn er der Token hat. Da der Token verloreren gehen kann, muss es eine M\u00f6glichkeit geben, diesen zu regenerieren. </li> <li>Zeitgesteuerter Zugriff: (deterministisch) Jeder Node hat ein Sende-Slot. Mit diesem Verfahren kann eine hoche Auslastung des Netzes erreicht werden, allerdings muss jeder Node den \"Fahrplan\" und die genaue Zeit kennen.</li> <li>Carrier Sense Multiple Access (CSMA) (undeterministisch): Jeder Knoten pr\u00fcft zuerst ob der Bus frei ist und sendet, wann er will. </li> <li>Carrier Sense Multiple Access / Collision Detection (CSMA/CD) (undeterministisch): Zus\u00e4tzlich werden Kollisionen festgestellt und danach nach einer zuf\u00e4lligen Zeit wieder versucht</li> <li>Carrier Sense Multiple Access with Collision Resolution (CSMA/CR) (undeterministisch): Es gibt ein dominateter Pegel (1 oder 0), welcher gewinnt bei Konflikten. Nur der Verlierer kann dies allerdings feststellen und bricht die \u00dcbertragung ab.</li> </ul>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#collision-domain","title":"Collision Domain","text":"<p>Collision Domain Die Collision Domain ist der Bereich des Netzwerks, in welchem ein Fehler erkennt wird. Da der urspr\u00fcngliche Sender nur die Kollision erkennt, wenn er das Jamming Signal w\u00e4hrend des Sendens empf\u00e4ngt, muss die Collision-Domain kleiner als die Halbe-Ausbreitungsdistanz des k\u00fcrzesten Paket (46Bytes Daten) $$ t_{frame} &gt; 2\\cdot t_{transfer}\\ t_{frame} = \\frac{Framesize_{min}}{Bitrate} \\ t_{transfer}=\\frac{d_{max}}{C_{Medium}}\\ d_{max}&lt;\\frac 1 2 \\frac{Framesize_{min}}{Bitrate}\\cdot C_{Medium} $$</p> <p>Dabei ist \\(d_{max}\\) die Maximale Distanz der Collision Domain</p> <p>Wenn ein Repeater/Hub im Spiel ist, muss die Formel \\(t_{frame} &gt; 2\\left(\\sum t_{transfer} + \\sum t_{forwarding}\\right)\\) benutzen, da der Router das eigentliche Signal, wie auch das Jamming Signal verz\u00f6gert.</p> <p>Die Broadcast-Domain ist der Bereich im Netzwerk, in welcher ein Broadcast-Frame ankommt.</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#hub-vs-l-2-switch-bridge","title":"Hub vs L-2 Switch (Bridge)","text":"<p>Ein Hub ist ein \"dummes\" Ger\u00e4t, welcher alle Informationen an alle Ports senden. Ein Switch liest die Layer 2 Headers and sendet das Paket nur an die n\u00f6tigen Ports. Dadurch wird die Collision Domain unterbrochen. Dies wird auch Transparent Bridging genannt, da die Sender und Empf\u00e4nger nichts davon wissen.</p> <p>Ein Switch merkt sich die Mac-Adressen der Sender und speichert diese mit dem Port in der Filtering Database ab. Dank dieser Datenbank, muss der Switch ein Paket nur an einen Port senden (ausser Broadcast-Frames). Nach einer gewissen Zeit wird ein Eintrag wieder gel\u00f6scht. (Address Learning)</p> <p>Ein Switch hat folgende Leistungsmerkmale: Filterrate, Transferrate, Gr\u00f6sse der MAC-Adresstabelle</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#vlan","title":"VLAN","text":"<p>Bei VLAN wird ein VLAN-Tag zwischen <code>Source-Adress</code> und <code>Length/Type</code> eingef\u00fcgt. Mit diesem Tag kann ein Switch ein Paket einem bestimmten Virtuellen LAN zuordnen. Diese Zuordnung wird in einer Tabelle geregelt. Ein Virtuelles Lan bildet eine Broadcast Domain.</p> <p>Dieser Tag besteht aus:</p> <ul> <li>Tag Protocol Identifier:</li> <li>User Priority/Priority Code Point: (3 Bit) Eine Priorit\u00e4t, um z.B. gewisse Applikationen zu priorisieren</li> <li>Cannonical Format Identifier</li> <li>VLAN-Identifier: (12-Bit)</li> </ul>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#rapid-spanning-tree-protocol","title":"(Rapid) Spanning Tree Protocol","text":"<p>Beim Rapid Spanning Tree Protocol werden einige Pfade deaktiviert, um Loops zu \"entfernen\".</p> <p>Es muss ein Root-Switch im Baum gefunden werden. Der Root ist der Switch mit der tiefsten Bridge Identifier. Falls zwei die gleiche Haben, entscheided die Mac-Adresse. </p> <p>Zu begin preist jeder Switch sich selbst als Root-Switch an. \u00dcbernimmt aber ein anderen Root-Switch, sobald er eine Nachricht erhaltet, in welchem ein \"besseren\" Root-Switch erw\u00e4hnt wird. In diesen Bridge Protocol Data Unit (BPDU) Nachrichten teilt jeder Switch seinen Nachbarn mit, welches nach seiner Wissen, der n\u00e4chste Root-Switch ist und wie viel der Weg dorthin kostet. Der Root-Port eines Switches ist der Port, \u00fcber welcher der Root-Switch \u00fcber den k\u00fcrzesten Weg erreichbar ist. </p> <p>Alle Bridges senden BPDU-Nachrichten all 2 Sekunden. Falls diese Ausbleiben, wird das Netzwerk neu konfiguriert.</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#mac-adresse","title":"Mac-Adresse","text":"<p><code>04-0A-E0-13-14-26</code></p> <p>Im ersten Byte (oben <code>04</code>) <code>0000 00xy</code>, ist \\(x\\), ob es eine Group Adress (<code>1</code>) oder individual Address (<code>0</code>) ist und \\(y\\), ob es eine Locally administered Address (<code>1</code>) oder Universally adinistered address (<code>0</code>) ist.</p> <p>Die ersten 3 Bytes ist die ID der Hersteller, die letzten 3 Bytes eine Laufnummer (<code>aa-aa-aa-bb-bb-bb</code>, a ist die ID des Herstellers, b die Laufnummer)</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#network-layer-layer-3","title":"Network Layer (Layer 3)","text":"<p>Die Aufgabe des Layer 3 ist es die Kommunikation zwischen zwei Konten bereit zu stellen. Dies soll m\u00f6glich sein, unabh\u00e4ngig von den Layern 1 und 2. Daher wird eine netzweite Adressierung (IP-Adressen) ben\u00f6tigt.</p> <p>Grob kann der Layer 2 in verbindungsorientierte ** Dienste und verbindungslose Dienste** unterteilt werden. Ein verbindungsorientierter Dienst muss zuerst eine Verbindung aufbauen und kann sich wie ein Schlauch vorgestellt werden. Alle Daten gehen durch diesen Schlauch. </p> <p>Ein verbindungsloser Dienst funktioniert wie die Post.</p> Klassen Adressbereich Anzahl Netze Interfaces pro netz A 1.0.0.0 - 127.255.255.255 127 16'777'214 B 128.0.0.0 - 191.255.255.255 16'384 65'534 C 192.0.0.0-223.255.255.255 2'097'152 254 <p>Die folgenden privaten Netzwerke gibt es:</p> Klasse Netzadresse Subnetmaske A 10.0.0.0 255.0.0.0 B 172.16.0.0 - 172.31.0.0 255.255.0.0 C 192.168.0.0 - 192.168.255.0 255.255.255.0 APIPA-Netz 169.254.1.0 - 169.254.244.255 255.255.0.0 <p>Anzahl addressierbare Hosts: \\(2^{(32 - subnet)} - 2\\) (f\u00fcr \"/24\" \\(2^{(32-24)}-2=2^8-2=254\\))</p> <p>Die Netzadresse ist die tiefste Adresse, die Broadcast-Adresse ist die h\u00f6chste Adresse</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#ip-header","title":"IP Header","text":"<ul> <li> <p>Version (4 Bit)   Gibt die Version des IP-Headers an. Es ist somit m\u00f6glich mehrere IP-Version (IPv4 oder IPv6) zu betreiben.</p> </li> <li> <p>Internet Header Length (IHL) (4 Bit)    Gibt die L\u00e4nge allen Headers an. Der gelesene Wert wird mit dem Faktor 4 multipliziert. Wenn also 5 gelesen wird, sind die Headers 20 Bytes lang. IHL muss zwiscehn 5 (20 Bytes) und 15 (60 Bytes) sein. Der fixe Teil eines IP-Headers sind 20 Bytes, also bleiben 40 Bytes f\u00fcr Optionale Felder.</p> </li> <li> <p>Type of Service (8 Bit)   Gibt an, was f\u00fcr eine Art von Leitung es ist. Ein Sender kann danach entscheiden, ob er eine Leitung, welche eine hoche Bandbreite hat, daf\u00fcr ein schlechten Ping (wie eine Satelitenverbindung) oder lieber eine \"normale\" Glassfasserleitung ben\u00fctzt. Dies wurde nie von allen Service-Providern unterst\u00fctzt.</p> </li> <li> <p>Total Length (16 Bit)   Die totale L\u00e4nget des IP-Paketes mit Headers  und Daten. </p> </li> <li> <p>Identifiaction (16 Bit)   Ein Wert, welches ein Paket eindeutig identifiziert. Dieser Wert wird ben\u00fctzt, um fragmentierte Pakete wieder zu einem Paket zusammen zusetzen.</p> </li> <li> <p>Flags (3 Bit)   Beinhaltet Kontrollflags f\u00fcr die Fragmentierung</p> </li> </ul> Feld Position Wert Funktion Erkl\u00e4rung Bit 0 reserved, must be zero Reserviert, immer Null DF Bit 1 0/1 May / Don't Fragment keine Fragmentierung (<code>1</code>) MF Bit 2 0/1 Last / More Fragments Ob ein Folgefragment kommt (<code>1</code>) <ul> <li> <p>Fragment Offset (13 Bit)   An welcher stelle ein fragmentiertes Paket in das ganze Paket gesetzt werden soll. Der gelesen Wert wird mit dem Faktor 8 multipliziert. (Aus 90 wird 720 Bytes)</p> </li> <li> <p>Time to Live (TTL) (8 Bit)   Gibt die Anzahl Sekunden an, welche das Paket noch im Netz sein darf. Wenn der Wert 0 wird, wird das Paket verworfen. In der Praxis ist es schwierig zu messen, wie lange ein Paket unterwegs ist und daher dekrementiert der Router der Wert um <code>1</code> wenn er es weiter sendet.    Wenn ein Router ein Paket mit TTL=1 erhaltet, dekrementiert er es zu <code>0</code> und verwirft es.</p> </li> <li> <p>Protocol (8Bit)   Das Protokol, welches im Datenteil \u00fcbertragen wird. Folgendes sind die wichtigsten Beispiele:</p> </li> </ul> Protocol Keyword Protokollbezeichnung 1 ICMP Internet Control Message 6 TCP Transmission Controll Protocol 17 UDP User Datagram Protocol <ul> <li> <p>Header Checksum (16 Bit)   Eine Pr\u00fcfsumme, welche nur \u00fcber den IP-Header gebildet wird. Diese muss von jedem Router neu berechnet werden, da gewisse Felder vom Router modifiziert werden.</p> </li> <li> <p>Source Address (32 Bit)   Die IP-Adresse des Senders</p> </li> <li> <p>Destination Address (32 Bit)   Die IP-Adresse des Empf\u00e4ngers</p> </li> <li> <p>Options und Padding (max. 40 Bytes)   Optionale Felder</p> </li> </ul>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#maximum-transfer-unit-mtu","title":"Maximum Transfer Unit (MTU)","text":"<p>Die MTU gibt an, wie viel Bytes \u00fcber eine Leitung geschickt werden k\u00f6nnen. Dabei werden aber nur die Daten-Bytes des Ethernet-Frames gez\u00e4hlt. Die Bytes des Ethernet-Headers gelten nicht. </p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#fragmentation-und-reassembly","title":"Fragmentation und Reassembly","text":"<p>Es gibt folgende F\u00e4lle beim Reassembly:</p> <ul> <li>Flag <code>MF</code>=0 und <code>Fragment Offset</code>=0: Es wurde nicht fragmentiert</li> <li>Flag <code>MF</code>=1 und <code>Fragment Offset</code>=0: Dies ist das erste Fragment</li> <li>Flag <code>MF</code>=1 und <code>Fragment Offset</code>&gt;0: Dies ist ein Zwischen-Fragment</li> <li>Flag <code>MF</code>=0 und <code>Fragment Offset</code>&gt;0: Dies ist das letzte Fragment</li> </ul> <p>Reassembly wird erst beim Ziel-Host erledigt, um Routers zu entlasten und es zu erm\u00f6glichen, dass Fragmente verschiedene Pfade durchs Netzwerk nehmen k\u00f6nnten.</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#address-resolution-protocol-arp-layer-2","title":"Address Resolution Protocol (ARP) [Layer 2]","text":"<p>Ein ARP-Request wird als Broadcast-Message verschickt, die Antwort hingegen nicht.</p> <p></p> <p>F\u00fcr Requests (Bild von oben), ist die <code>Ethernet-Hardware-Address</code> auf die Broadcast-Adresse angegeben und das Feld <code>Hardware Address of Traget</code> ist <code>null</code>, da es nicht bekannt ist.</p> <p>Bei der Reply ist die <code>Ethernet Address of Destintation)</code> und <code>Hardware Address of Target</code> gesetzt.</p> <p>In einem ARP-Cache werden die Mac-Ip Paare gecached.</p> <p>Ein Gratuitous ARP Request   wird von einem Konten beim Booten oder Adresse-Ver\u00e4nderung versendet. Wenn keine Antwort zur\u00fcck kommt, ist die IP-Adresse nicht vergeben. So k\u00f6nnen Adress-Konflikte erkannt werden.</p> <p>Ein Gratuitous ARP Reply wird von Knoten beim Booten oder Adress-Ver\u00e4ndrung versendet um den ARP-Cache anderer Knoten zu berechtigen oder setzen. Da die Reply ohne Request verschickt wurde, wird sie an die Broadcast-Adresse geschickt.</p> <p>Reverse Address Resolution Protocol (RARP) kann genutzt werden, um von einer MAC-Adresse die IP-Adresse zu bekommen von einem zentralen Server. Z.B. von einer Maschine nach einem Reboot.</p> <p></p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#internet-control-message-protocol-icmp-layer-3","title":"Internet Control Message Protocol (ICMP) [Layer 3]","text":"<p>ICMP Pakete werden der Schicht 3 zugeordnet, obwohl sie in einem IP-Paket gekapselt werden.</p> ICMP-Type Bedeutung Beispiel 3 Destination Unreachable Wenn der Router ein Node nicht erreiche kann, weil z.B. die MTU zu klein ist, das h\u00f6here Protokoll deaktiviert ist beim Host, das Paket fragmentiert werden muss aber DF gesetzt ist oder der Node ausgesteckt wurde: TODO Code Protocol Unreachable=Node kommuniziert nicht \u00fcber das Protokol;  Port Unreachable = Kein Program h\u00f6rt auf diesen Port; 13 Communication adminstrativvely prohibited = Die Firewall blockiert etwas.Destination Unreachable kann auch genutzt werden, um die MTU einer Leitung zu finden 4 Source Quench Der Puffer des Routers ist voll 5 Redirct Wird an ein Host geschickt, wenn der Router feststellt, dass ein Paket an den falschen Router geschickt wurde 11 Time Exceeded Wenn das TTL-Feld =0 ist, wird es vom Router nicht mehr weitergesendet. Dies kann f\u00fcr Trace-Rout genutzt weden. Jeder Router reduziert das TTL-Feld um 1. Wenn der Router ein Paket mit TTL=1 bekommt wird dies um <code>1</code> reduziert und danach verworfen. 12 Parameter Problem Falls der Host oder Router im IP-Header einen ung\u00fcltigen Wert hat 0 Echo Reply Die Antowort auf ein Echo Request 8 Echo (-Request) Pingt ein Knoten an, welcher ein Echo Reply senden sollte 13 Timestamp Verhalten sich gleich wie Echo-Requests/-Replies aber senden noch die Zeit des Senders und Empf\u00e4ngers 14 Timestamp Reply Siehe 13 - Timestamp","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#destination-unreachable-type-3","title":"Destination Unreachable (Type 3)","text":"<ul> <li>Code-Feld: 0 = net unreachable; 1 = host unreachable; 2= protocol unreachable; 3 = port unreachable; 4 fragmentation needed and DF set; 5 source route failed; 13 = communication administratively prohibited</li> <li>Internet Header + 64 Bits of Original Datagram enth\u00e4lt den ersten Teil des Datagramms,   das die ICMP-Meldung ausgel\u00f6st hat. Damit ist der urspr\u00fcngliche Absender in der Lage, den   Fehler genauer zu bestimmen.</li> </ul>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#time-exceeded-message-type-11","title":"Time Exceeded Message (Type 11)","text":"<p>Das Format ist gleich, wie bei Destination Unreachable (Type 3). Das Code-Feld kann folgende Werte haben: 0 = time to live exceeded in transit; 1 = fragment reassembly time exceeded.</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#echo-request-reply-message-type-8-type-0","title":"Echo-Request/-Reply Message (Type 8 / Type 0)","text":"<ul> <li>Identifier: ID, damit der Sender die Echo-Reply zu einem Prozess kann. In der Reply steht die selbe Zahl</li> <li>Sequence Number: Wird bei jedem Echo-Request inkrementiert. In der Reply steht die selbe Zahl.</li> <li>Code-Feld: ist null</li> </ul>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#transport-layer-layer-4","title":"Transport Layer (Layer 4)","text":"<p>Die Aufgabe des Layer 4 ist es eine effiziente Verbindung zwischen zwei Knoten f\u00fcr den Session Layer (Layer 5) zu bereit stellen.  Dabei soll die Qualit\u00e4t der Verbindung gew\u00e4hrgeleistet sein</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#adressierung","title":"Adressierung","text":"<p>Ein Port ist eine Zahl zwischen 1 und 65'536 und sind folgendermassen unterteilt:</p> <ul> <li>1-1023: Well-Known Port Nummern, wie z.B. 80 f\u00fcr HTTP</li> <li>1024-49'151: Reservierte Bereiche f\u00fcr herstellerspezifischen Applikationen</li> <li>49'152-65'536: Dynamische/Private Ports, welche beliebig verwendet werden k\u00f6nnen</li> </ul> <p>Die folgende Tabelle enth\u00e4lt die wichtigsten Well-Known Ports:</p> <p></p> <p>(465/TCP - SMTPS sollte heissen \"SMTP over SSL/TLS\")</p> <p>Um eine Kommunikationsbeziehung eindeutig zu bestimmen braucht es folgende 5 Parameter: Source Port; Destination Port; Source IP-Adresse; Destination IP-Adresse; Das Protokol (UDP oder TCP)</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#tcp-transmission-control-protocol","title":"TCP (Transmission Control Protocol)","text":"<p>TCP bietet folgendes f\u00fcr eine Applikation:</p> <ol> <li>Verbindungsorientierte \u00dcbetragung: Eine Verbindung muss zuerst aufgebaut werden und eine TCP-Verbindung hat genau 2 Endpunkte (Multicast wird nicht unterst\u00fctzt)</li> <li>Hohe Zuverl\u00e4ssigkeit: TCP garantiert die Daten\u00fcbertragung ohne Verluste in der richtigen Reihenfolge</li> <li>**Vollduplex\u00fcbertragung: ** In einer TCP Verbindung k\u00f6nnen Daten in beide Richtungen fliessen</li> <li>**Stream-Schnittstelle: ** Eine Andwenung kann ein Stream von Bytes senden, welche vom Empf\u00e4nger in derselben Reihenfolge wieder empfangen werden.</li> <li>Zuverl\u00e4ssiger Verbindungsaufbau: Es muss zuerst eine Verbindung aufgebaut werden. Pakete von einer vorherigen Verbindungen sind danach nicht mehr g\u00fcltig</li> <li>Eleganter Verbindungsabbau: Beide Seiten k\u00f6nnen die Verbindung trennen und sie wird sauber abgebaut</li> </ol> <p>Im folgenden Diagramm wird aufgezeichnet, wie ein Verbindungsaufbau, das Senden/Empfangen von Nachrichten und der Verbindungsabbau beschreiben.</p> <p></p> <p>Im folgenden Diagramm sind die feinen Zust\u00e4nde eines Clients oder Server aufgezeichnet:</p> <p></p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#probleme","title":"Probleme","text":"<p>Die folgenden Probleme m\u00fcssen von TCP gel\u00f6st werden:</p> <ul> <li>Eine Verbindung soll zuverl\u00e4ssig auf- und abgebaut werden k\u00f6nnen</li> <li>Eine TCP-Nachricht k\u00f6nnen verloren, verf\u00e4lscht, dupliziert oder verstauscht werden. TCP muss diese Nachrichten trotzdem wieder korrekt zusammen setzen und der Applikationsschicht \u00fcbergeben. Hierf\u00fcr werden Techniken, wie Sequenznummern, Adaptiver Timeout, Sliding Window Protokoll ben\u00fctzt.</li> <li>Der Empf\u00e4nger soll nicht \u00fcberschwemmt werden. Hier f\u00fcr wird Flow Control mit Advertized Window Size gen\u00fctzt.</li> <li>Das Netzwerk dazwischen soll nicht \u00fcberlastet werden. Hier f\u00fcr gibt es Congestion Control mit Slow Start Algorithmus.</li> </ul>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#tcp-header","title":"TCP-Header","text":"<ul> <li>TCP Source Port und Destination Port: Der genutzte Port auf dem Sender und Empf\u00e4nger</li> <li>Sequence Number: (Bezieht sich auf die Ausgangsdaten) Anhand dieser Zahl k\u00f6nnen Daten in der richtigen Reihenfolge der Applikation \u00fcbergeben werden und es wird die Acknowledgement Number damit berechnet</li> <li>Acknowledgment Number: (Bezieht sich auf die Eingangsdaten) </li> <li>Header Length/Data Offset: Gibt an, wo der TCP-Header mit optionalen Headers aufh\u00f6rt und die Daten beginnen</li> <li>Control Bits: Flags, welche z.B. den Verbindungsaufbau und -abbau einleiten      Diese Flags haben die folgende bedeutung:</li> <li>URG: Urgent-Pointer-Feld enh\u00e4lt einen g\u00fcltigen Wert</li> <li>ACK: Acknowledgment Feld enh\u00e4lt einen g\u00fcltigen Wert</li> <li>PSH: (= Push) Empf\u00e4nger soll Daten sofort an die Applikation weiterleiten</li> <li>RST (=Reset) Verbindung zur\u00fccksetzen</li> <li>SYN (=Synchronize) Verbindung aufbauen</li> <li> <p>FIN: Der Sender hat keine Daten mehr zu \u00fcbertragen. Verbindung abbauen</p> </li> <li> <p>Window: Gibt die noch verf\u00fcgbare Buffer-Gr\u00f6sse des Senders an. Wenn ein Empf\u00e4nger <code>0</code> im Window-Feld erh\u00e4lt, stoppt er zu senden, bis eine Retransmission mit einem gr\u00f6sseren Window-Feld ankommt.</p> </li> <li>Checksum: Die Checksume des TCP-Pakets</li> <li>Urgent Pointer: Falls <code>URG</code> gesetzt ist, zeigt dieses Feld an, wo die \"Urgent-Daten\" im Datenblock gefunden werden k\u00f6nnen</li> <li>Options: Optionen, wie \"SACK\" oder die maximale Segmentl\u00e4nge (MSS) k\u00f6nnen als optionale Option \u00fcbertragen werden</li> </ul>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#verbindungsaufbau","title":"Verbindungsaufbau","text":"","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#datenaustausch","title":"Datenaustausch","text":"<p>Eine Nachricht vom Sender m\u00fcssen vom Client immer mit einem Paket, welches das <code>ACK</code>-Flag Gesetzt hat, best\u00e4tigen werden. Vor dem senden startet der Sender ein Timer. Falls dieser abl\u00e4uft, bevor der Empf\u00e4nger das Paket best\u00e4tigt hat, wird das Paket erneut versendet. Es gibt eine Retransmission.</p> <p>Die <code>Seq</code> Zahl der Antwort des Servers ist die <code>Ack</code> Zahl des Requests. Die <code>Ack</code> Zahl der Antwort des Servers ist die <code>Seq</code>-Zahl + die Anzahl empfangenen Bytes.</p> <p></p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#verbindungsabbau","title":"Verbindungsabbau","text":"<p>MSL=Maximum Segment Length</p> <p>Das Timeout am Ende ist n\u00f6tig, falls das letzte <code>ACK b+m+1</code> nicht ankommt. In diesem Fall w\u00fcrde die Passive-Seite noch mals ein <code>FIN b+m</code> Paket senden.</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#sliding-window","title":"Sliding Window","text":"","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#adaptive-elemente-von-tcp","title":"Adaptive Elemente von TCP","text":"","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#adaptives-timeout","title":"Adaptives Timeout","text":"<p>Das Timeout von TCP wird adaptiv bestimmt und \u00e4ndert sich \u00fcber die Lebenszeit der Verbindung.</p> <p>Daf\u00fcr werden folgende Formeln ben\u00fctzt: $$ RTO_n=SRTT_n + 4\\cdot RTTVAR_n\\ SRTT_n = (1 - \\alpha )\\cdot SRTT_{n-1}+\\alpha\\cdot RTT_n\\ RTTVAR_n=(1 - \\beta)\\cdot RTTVAR_{n - 1}+\\beta \\cdot \\vert SRTT_n - RTT_n \\vert $$</p> <p>Dabei steht \\(RTO\\) f\u00fcr <code>Retransmission Time-Out</code>, \\(SRTT\\) f\u00fcr <code>Smoothed Round-Trip-Time</code> und ist ein gewichteter Mittelwert, \\(RTT\\) f\u00fcr <code>Round-Trip-Time</code> und \\(RTTAV\\) f\u00fcr <code>Round-Trip-Time Variance</code> und ist der gewichteter Mittelwert der Abweichung, bzw. die Streuung.</p> <p>Wenn die Roud-Trip-Time \u00fcberschritten wird, wird der Sender das Paket erneut senden.</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#bestatigung-von-paketen","title":"Best\u00e4tigung von Paketen","text":"<p>In TCP wird das Sliding-Window Verfahren f\u00fcr die Best\u00e4tigung von Paketen gen\u00fctzt. Der Sender sendet alle Pakete im Fenster und schiebt das Fenster weiter, wenn die \u00e4lteste Nachricht best\u00e4tigt wurde.</p> <p>Ohne Sliding-Window Verfahren muss der Sender immer auf eine Best\u00e4tigung warten. Mit dem Sliding-Window k\u00f6nnen mehrere Pakete versendet werden.</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#fluss-steuerung","title":"Fluss-Steuerung","text":"<p>Im folgenden Paket wird angenommen, dass der Empf\u00e4nger mit einer Buffergr\u00f6sse von 2'500 Bytes hat. Der Empf\u00e4nger sendet die verbleibende Buffergr\u00f6sse im <code>Window</code> Feld zur\u00fcck. Wenn der Sender eine Best\u00e4tigung mit <code>Window=0</code> empf\u00e4ngt, wartet er, bis er dieselbe Best\u00e4tigung mit einer h\u00f6heren <code>Window</code> Feld empf\u00e4ngt.</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#uberlastung-des-netzwerks-vermeiden","title":"\u00dcberlastung des Netzwerks vermeiden","text":"<p>Beim Slow-Start Algorithmus beginnt der Sender mit einer kleinen vordefinierten Gr\u00f6sse und verdoppelt dies mit jedem gesendetem Paket bis er die erste Schwelle erreicht. Danach wird die Paketgr\u00f6sse linear vergr\u00f6ssert bis ein Timeout entsteht. </p> <p>Bei einem Timeout wird die n\u00e4chste Schwelle auf die H\u00e4lfte des Paketes, bei welchem das Timeout entstand. Danach wird wieder ein Slow-Start ausgef\u00fchrt.</p> <p>Es gibt f\u00fcr den Slow-Start Algorithmus folgende Kritikpunkte</p> <ul> <li>Die \"S\u00e4gezahnkurven\" verschiedener TCP-Sessions tendieren dazu, sich zu synchronisieren</li> <li>Die Annahme gilt f\u00fcr Wireless-Netze nicht mehr unbedingt, wo relativ viel Paketverlust durch Bitfehler   w\u00e4hrend der \u00dcbertragung vorkommt</li> <li>Slow-Start bei kurzen Transfers immer slow (www)</li> <li>Abh\u00e4ngig von Round Trip Time</li> </ul>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#udp-user-datagram-protocol","title":"UDP (User Datagram Protocol)","text":"<p>UDP, wie auch TCP, ist ein Layer 4 Protokol und ben\u00fctzt Ports zur adressierung. Es ist aber nicht zuverl\u00e4ssig und erledigt nichts gegen Paket Verluste oder vertauschte Pakete. Daf\u00fcr kann ein Knoten sofort senden, da es keinen Verbindungsaufbau gibt, es gibt weniger Overhead und ist weniger rechnungsintensiv.</p> <p>Es kann, wie auch TCP, Daten anhand von einer Port-Nummer der richtigen Anwendung zuweissen (Demultiplexing) und umgekehrt (Multiplexing).</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#header","title":"Header","text":"<p>Der UDP Header besteht aus 8 Bytes und beinhaltet folgendes:</p> <p></p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#application-layer-layer-7","title":"Application Layer (Layer 7)","text":"","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#dns-udp53","title":"DNS (UDP/53)","text":"Type Beschreibung A IPv4 Adresse des gesuchten Hosts (32 Bit) AAAA IPv6 Adresse des gesuchten Hosts (128 Bit) MX Mail Exchange (Mail Server) NS Name Server f\u00fcr eine Zone CNAME Canonical Name; Alias zum Host TXT Text Record; in Antowrten f\u00fcr verschiedenste Angaben verwendet <p>Die 13 Root Server wissen wo die NS-Server der Top-Level Domains sind.</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#ablauf-einer-namensauflosung","title":"Ablauf einer Namensaufl\u00f6sung","text":"<p>Resolver ist die lokale Software.</p> <ol> <li>Host fragt DNS-Server nach einer Adresse <code>hello.example.com.</code></li> <li>DNS Server fragt Root-Server nach dem <code>com.</code> NS</li> <li>DNS Server fragt <code>.com</code>-NS nach <code>example.com.</code></li> <li>DNS Server fragt <code>example.com.</code>-NS nach <code>hello.example.com</code></li> </ol> <p>F\u00fcr Reverse DNS werden dieselben Schritte ausgef\u00fchrt, aber mit einer IP Adresse. </p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#dhcp-bootp-udp67-udp68","title":"DHCP / BOOTP (UDP/67; UDP/68)","text":"<p>Der Client fragt den Server nach einer Konfiguration auf dem UDP Port 67 als Broadcast-Nachricht. Die Antwort wird an die MAC-Adresse des Client gesendet. BOOTP funktioniert auch \u00fcber Netzwerk-Grenzen. Dabei ist der Router so konfiguriert, dass er den BOOTP-Request liest und per Unicast an den BOOTP-Server sendet. Die Antwort wird wieder an den Client zur\u00fcck geleitet.</p> <p>Es werden folgende Infos gesendet:</p> <ul> <li>Netzwerk Configuration: IP-Adresse; Subnet; Gateway IP</li> <li>Boot File Name</li> </ul> <p>Nachteile von BootP sind: </p> <ul> <li>Bei grossen Anzahl von Knoten, m\u00f6chte man IP-Adressen gemeinsam nutzen, was mit BootP nicht praktikabel ist</li> <li>Mehraufwand, da f\u00fcr jeden Knoten eine Konfiguration eingetragen werden muss</li> </ul> <p>DHCP ist abw\u00e4rtskompatibel mit BootP.</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#network-address-translation-nat","title":"Network Address Translation (NAT)","text":"<p>Wenn ein Paket gesendet wird, wird die Source-Adresse und ev. den Port durch die des Gateways ersetzt und an den Server weitergeleitet. Anhand des Ports kann der Gateway eingehende Pakete unterscheiden und dem korrekten Client senden. Daf\u00fcr wird wieder der Header modifiziert.</p> <p>Probleme von NAT:</p> <ul> <li>OSI-Model wird verletzt, da die IP und Port ver\u00e4ndert werden und auch Checksummen neu gerechnet werden m\u00fcssen</li> <li>Die Verbindung kann nicht auf Layer 1-3 Verschl\u00fcsselt werden, da die Informationen vom Gateway ben\u00f6tigt werden</li> </ul>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#autoconfiguration-mit-ipv4-automatic-private-ip-addressing-apipa","title":"Autoconfiguration mit IPv4 - Automatic Private IP Addressing (APIPA)","text":"<p>Wenn kein DHCP-Server gefunden wird, wird eine zuf\u00e4lle IP-Adresse zwischen 169.254.1.0 bis 169.254.244.255 (Netzwerk 169.254.0.0/16) gew\u00e4hlt und mit einem Gratuious ARP-Request \u00fcberpr\u00fcft, ob die IP-Adresse bereits besetzt ist.</p> <p>Um mit dieser IP-Adresse ins Internet zu kommen, muss der Router ARP-Requests f\u00fcr alle IP-Adressen ausserhalb des Netzwerks erkennen und auf sich leiten. Der Router kann die Pakete danach an den korrekten Host weiterleiten.</p> <p>Um Ger\u00e4te ohne DHCP und DNS Server zu finden, kann multicast DNS (mDNS) verwendet werden, welches ein verteilter DNS Server ist. Es wird ein \"normalen\" DNS Request an <code>244.0.0.251</code> mit dem UDP Port 5353 geschickt. Wenn nach <code>services.dns-sd.udp.local.</code> gefragt wird, antworten alle mDNS f\u00e4higen Ger\u00e4te.</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#trivial-file-transfer-protocol-tftp-udp69","title":"Trivial File Transfer Protocol (TFTP) [UDP/69]","text":"<p>Es gibt f\u00fcnf Operationen:</p> <ul> <li>Read Request (RRQ): Fordert eine Datei an</li> <li>Write Request (WRQ): Shickt eine Datei an den Host</li> <li>Acknowledgment (ACK): Best\u00e4tigt das korrekte Empfangen von WRQ- oder DATA-Pakete. Es wird die Block-Nummer angegeben</li> <li>Data (DATA): \u00dcbermittelt die eigentlichen Daten-Bl\u00f6cke. Ein Block ist 512 Bytes (wenn nicht anderst angegeben in WRQ oder RRQ Request). Wenn ein Block kleiner ist, wird das als Ende der Datei interpretiert.</li> <li>Error (ERROR): Beschreibt den aufgetretener Fehler</li> </ul> <p>Wird ein ACK oder DATA Paket nicht innerhalbs einer Zeit empfangen, wird die letzte ACK- oder DATA Nachricht nochmals versendet.</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#simple-mail-transfer-protocol-smtp-tcp25","title":"Simple Mail Transfer Protocol (SMTP) [TCP/25]","text":"<p>Sendet ein Mal zu einem Mail-Server, welcher das Mail ebenfalls weiterleitet oder zwischen Speichert damit der Nutzer dies via POP3 oder IMAP abholen kann.</p> <p>Ablauf:</p> <ol> <li>Verbinden mit dem Server und identifizieren und authentifizieren</li> <li>Client sendet <code>MAIL FROM &lt;absender&gt;</code> und <code>RCPT TO &lt;empf\u00e4nger&gt;</code> um die Empf\u00e4nger zu definieren</li> <li>Mit <code>DATA</code> wird das Mail versendet</li> <li><code>QUIT</code> wird vom Client gesendet, was vom Server mit <code>Bye-Bye</code> quitiert wird</li> </ol> <p>Der Server-Antwortet auf die Befehle mit 3-stelligen Zahlen Codes (wie HTTP-Status Codes)</p> <pre><code>S: 220 mail.zhaw.ch ESMTP Sendmail 8.8.8/8.8.8\nC: HELO zhaw.ch\nS: 250 mail.zhaw.ch Hello mth@mail.zhaw.ch, pleased to meet you\nC: MAIL FROM:&lt;mth@zhaw.ch&gt;\nS: 250 OK\nC: RCPT TO:&lt;kls@zhaw.ch&gt;\nS: 250 &lt;kls@zhaw.ch&gt;... Recipient ok\nC: DATA\nS: 354 Enter mail, end with \".\" on a line by itself\nC: Date: 06 Jan 2099 16:34:25 +0100\nC: To: kls@zhaw.ch\nC: Subject: Test einer Mail.\nC:\nC: Damit ist der SMTP-Teil beendet.\nC: .\nS: 250 OK\nC: QUIT\nS: 221 mail.zhaw.ch closing connection\n</code></pre>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#zeichensatz","title":"Zeichensatz","text":"<p>SMTP ben\u00fctzt ein 7-Bit ASCII Zeichen-Satz.</p> <p>Folgende Headers werden gesetzt, um MIME zu verwenden. Der Mime-Seperator wird eingesetzt wenn</p> <pre><code>MIME-Version: 1.0\nContent-Type: Multipart/Mixed;\nBoundary=\"Mime-Separator-WAB02622.926626671\"\n\nMime-Separator-WAB02622.926626671\nContent-Type: text/plain\nHallo! Hier folgt der Text.\n</code></pre>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#quoted-printable","title":"Quoted-Printable","text":"<p>Jedes 8-bit Zeichen wird durch <code>=xx</code> ersetzt, wobei <code>xx</code> eine Hex-Zahl ist. (<code>1</code> -&gt; <code>=31</code>). Dies ist sehr ineffizient (Effizienz: 30%)</p>","tags":["summary","KT"]},{"location":"22FS/KT/summary.html#base64","title":"Base64","text":"<p>Alle Texte werden auf 6-Bit Zeichen aufgeteilt. Wenn es nicht aufgeht, wird mit <code>=</code> ein (6-Bit) null-Byte eingesetzt. Ausdem folgt, das ein Vielfaches von drei 8-Bit Bytes kein Padding ben\u00f6tigten. (Effiizienz: 73%)</p>","tags":["summary","KT"]},{"location":"22FS/LA/01_Lineare%20Gleichungssysteme.html","title":"Lineare Gleichungssystem","text":"<p>Eine Gleichung ist lineare, wenn sie die folgende Form entspricht: \\(ax+by+cz=d\\)</p>"},{"location":"22FS/LA/01_Lineare%20Gleichungssysteme.html#koeffizienten-matrix","title":"Koeffizienten Matrix","text":"<p>Ein lineares Gleichungssystem kann als eine Matrize Multiplikation geschrieben werden. $$ \\text{} \\begin{cases} i_1x+i_2y=c_1\\ i_3x+i_4y=c_2\\ i_5x+i_6y=c_2 \\end{cases}  \\ \\begin{pmatrix} i_1 &amp; i_2 \\ i_3 &amp; i_4\\ i_5 &amp; i_6 \\end{pmatrix} \\cdot  \\begin{pmatrix} x \\ y \\end{pmatrix} = \\begin{pmatrix} i_1x+i_2y\\ i_3x+i_4y\\ i_5x+i_5y \\end{pmatrix} = \\begin{pmatrix} c_1\\ c_2\\ c_3 \\end{pmatrix} $$ Dies kann vereinfacht als eine erweiterte Koeffizienten Matrix geschreiben werden: $$ \\left( \\begin{array}{cc|cr} i_1 &amp; i_2 &amp; c_1\\ i_3 &amp; i_4 &amp; c_2\\ i_5 &amp; i_6 &amp; c_3 \\end{array} \\right) $$</p>"},{"location":"22FS/LA/01_Lineare%20Gleichungssysteme.html#homogene-gleichungssysteme","title":"Homogene Gleichungssysteme","text":"<p>Homogene Gleichungssysteme sind Gleichungssysteme bei denen das Resultat bei allen Gleichungen <code>0</code>  ist. Es kann eine oder unendlich viele L\u00f6sungen haben. Es ist nicht m\u00f6glich, dass es keine L\u00f6sung hat.</p>"},{"location":"22FS/LA/01_Lineare%20Gleichungssysteme.html#zeilenstufenform","title":"Zeilenstufenform","text":"<p>Die Zeilenstufenform ist definiert durch die folgenden Regeln:</p> <ul> <li>Alle Zeilen mit nur <code>0</code> stehen zu unterst</li> <li>Wenn eine Zeile nicht nur aus <code>0</code> besteht, ist die erste Zahl, welche keine <code>0</code> ist, eine <code>1</code>. Diese <code>1</code> wird als f\u00fchrende Eins bezeichnet</li> <li>Eine f\u00fchrende Eins, welche weiter unten steht, muss auch weiter rechts stehen, als die anderen f\u00fchrenden Einsen</li> </ul> <p>Zus\u00e4tzlich gibt es noch die reduzierte Zeilenstufenform, bei welcher noch die Regel gilt, dass in den Spalten mit einer f\u00fchrenden Eins, die weiteren Elemente <code>0</code> sein m\u00fcssen.</p> <p>Bei der erweiterten Koeffizientenmatrix sind die Resultat-Werte (die \\(c_i\\) Werte) von den Regel ausgenommen werden.</p> <p></p> <p>Folgendes Matrix ist in der Zeilenstufenform: </p>"},{"location":"22FS/LA/01_Lineare%20Gleichungssysteme.html#losung-aus-der-zeilenstufenform","title":"L\u00f6sung aus der Zeilenstufenform","text":"<p>Um aus einer Zeilenstufenform die L\u00f6sung zu lesen, werden die Variablen in f\u00fchrende Unbekannte und freie Unbekannte unterteilt. F\u00fchrende Unbekannte sind all diese Variable, welche in ihrer Spalte eine f\u00fchrende <code>1</code> haben, die anderen Variablen sind freie Unbekannte.</p> <p></p> <p>F\u00fcr die freien Unbekannte werden nun eine beliebige Variable gleichgesetzt. Oft werden grichische Buchstaben verwendet, um die Verwechslungsgefahr gering zu halten.</p> <p>Im oberen Beispiel: $$ x_2=\\lambda\\ x_4=\\mu $$ Jede f\u00fchrende Unbekannte wird nun</p> <p>in eine Gleichung \u00fcbersetzt. Wieder f\u00fcr das Beispiel oben: $$ x_1-2x_2+3x_4=5 \\rightarrow x_1=5+2x_2-3x_4\\ x3-x4=3\\rightarrow  x_3=3+x_4 $$ Nun kann das Gleichungssystem von unten (also \\(x_4\\) in diesem Fall) gel\u00f6st werden: $$ \\begin{align} x_4&amp;=\\mu\\ x_3&amp;=3+\\mu\\ x_2&amp;=\\lambda\\ x_1&amp;=5+2\\lambda-3\\mu \\end{align} $$ In diesem Fall gibt es zwei Unbekannte \\(\\lambda\\) und \\(\\mu\\). Dank diesen gibt es unendlich viele L\u00f6sungen. Es kann auch eine spezifische L\u00f6sung oder gar keine L\u00f6sung geben.</p>"},{"location":"22FS/LA/01_Lineare%20Gleichungssysteme.html#parameterdarstellung","title":"Parameterdarstellung","text":"<p>Die Parameterdarstellung ist eine alternative Darstellungsm\u00f6glichkeit von des Resultats. Das untere Beispiel zeigt das Beispiels-Gleichungssystem von oben: $$ \\vec x=\\begin{pmatrix}x_1\\x_2\\x_3\\_x4\\end{pmatrix}= \\begin{pmatrix}5 \\0\\3\\0\\end{pmatrix} +\\lambda \\begin{pmatrix}2\\1\\0\\0\\end{pmatrix}+ \\mu\\begin{pmatrix}-3\\0\\1\\1\\end{pmatrix} $$ Anzumerken ist, dass \\(x_2\\) bei der \\(\\lambda\\) Matrix ein <code>1</code> hat. Dies liegt daran, dass \\(x_2=\\lambda\\) ist. Dasselbe gilt auch mit \\(x_4=\\mu\\) und der \\(\\mu\\) Spalte bei \\(x_4\\)</p>"},{"location":"22FS/LA/01_Lineare%20Gleichungssysteme.html#zeilenstufenform-herleiten-gauss-verfahren-und-gauss-jordan-verfahren","title":"Zeilenstufenform herleiten (Gauss-Verfahren und Gauss-Jordan-Verfahren)","text":"<p>Ein Gleichungssystem, welches bereits in der Zeilenstufenform ist zu l\u00f6sen, ist einfach. Die Frage ist nun, wie jemand ein solches Form herleiten kann.</p> <ol> <li>Wir nennen die am weitesten links stehende Spalte mit Element \\(\\neq0\\) Pivot-Spalte</li> <li>Wenn die Zeile mit dem f\u00fchrenden Eins nicht zu oberst ist, wird sie mit der obersten Zeile getauscht</li> <li>Die oberste Zeile wird durch die erste Element \\(\\neq 0\\) in der Spalte geteilt. So wird eine f\u00fchrende Eins erzeugt</li> <li>Um <code>0</code> in der Pivot-Spalte unter der obersten Zeile zu erzeugen, wird jede Zeile unter der obersten Zeile mit einem Vielfachen der obersten Zeile addiert um <code>0</code> zu forderst zu erzeugen</li> <li>Schritte 1-5 wiederholen, bis eine Zeilenstufenform vorhanden ist</li> </ol> <p>Wenn eine reduzierte Zeilenstufenform verlangt wird, muss danach ein Vielfaches der unterste Zeile auf die oberen Zeile addiert werden, so dass diese <code>0</code> ergeben. Wenn man mithilfe der reduzierten Form die Gleichung l\u00f6st, spricht man vom Gauss-Jordan-Verfahren, ansonsten nur vom Gauss-Verfahren.</p> <p>Das folgende Beispiel wird an dem folgenden Gleichungssystem durchgef\u00fchrt:</p> \\[ \\left(\\begin{array} {ccc|c}     1 &amp; -1 &amp; 1 &amp; 0\\\\     3 &amp; 1 &amp; 0 &amp; 18\\\\     0 &amp; 1 &amp; 2 &amp; 10 \\end{array}\\right) \\] Schritt Beispiel A1. Die erste Spalte ist die Pivot-SpalteA2. Das oberste Element der Pivot-Spalte ist bereits \\(\\neq 0\\)A3. Es wird von der zweiten Zeile drei mal die erste Zeile abgezogen. Die dritte Zeile hat bereits eine <code>0</code> in der Pivot-Spalte $\\left(\\begin{array} {ccc B1. Die zweite Spalte ist nun die Pivot-SpalteB2. Das oberste Element (die erste Zeile wird ignoriert, daher ist dies in der zweiten Zeile), ist eine <code>4</code>, daher wird die zweite Zeile durch eine <code>4</code> geteilt $\\left(\\begin{array} {ccc B3. Es wird das \\((-1)\\) Fache von der Zeile 2 zu der Zeile 3 addiert $\\left(\\begin{array} {ccc C1. Die dritte Spalte ist nun die Pivot-SpalteC2. Die ersten zwei Zeilen werden ignoriert, daher wird die letzte Zeile durch <code>2.75</code> geteilt, damit eine <code>1</code> zu forderst steht. $\\left(\\begin{array} {ccc <p>Die Matrix ist nun in der Zeilenstufenform. Wenn die reduzierte Stufenzeilenform verlangt wird, muss der f\u00fcnfte Schritt noch durch gef\u00fchrt werden:</p> Schritt Beispiel A5. Die zweite Zeile wird mit dem \\((-0.75)\\) Fachen der Zeile drei addiert und die erste Zeile mit der Zeile drei addiert (also \\(\\cdot 1\\)) $\\left(\\begin{array} {ccc B5. Die erste Zeile wird mit der zweiten Zeile addiert $\\left(\\begin{array} {ccc <p>Nun ist die Matrix in der reduzierten Zeilenstufenform.</p>"},{"location":"22FS/LA/01_Lineare%20Gleichungssysteme.html#losbarkeit-von-linearen-gleichungssystemen","title":"L\u00f6sbarkeit von linearen Gleichungssystemen","text":"<p>Ein lineares Gleichungssystem hat drei verschiedene L\u00f6sungsm\u00f6glichkeiten: Keine L\u00f6sung, eine L\u00f6sung, unendliche L\u00f6sungen.</p> <p>Graphisch gezeichnet, sieht dies so aus:</p> <p>Um nicht jedes mal ein Gleichungssystem zeichen zu m\u00fcssen, kann man den Rang des Gleichungssystems zu hilfe ziehen:</p> <p>Der Rang \\(rg(A)\\) des Gleichungssystems \\(A\\) ist definiert als \\(rg(A)=\\text{Gesamtanzahl Zeilen} - \\text{Anzahl Nullzeilen}\\) in der Zeilenstufenform</p> <p>\\(rg(A)\\) ist dabei die Matrix ohne die Koeffizienten \\(\\vec c\\) (also ohne die Zahlen nach dem langen Strich). \\(rg(A|\\vec c)\\) ist der Rang der kompletten Matrix (mit den Zahlen nach dem Strich inklusive)</p> <ul> <li>Ein lineares Gleichungssystem ist l\u00f6sbar, wenn \\(rg(A)=rg(A|\\vec c)\\)</li> <li>Es hat genau eine L\u00f6sung, wenn gilt: \\(rg(A)=n\\) , \\(n\\) ist die Anzahl Spalten von \\(A\\)</li> <li>Es hat unendlich viele L\u00f6sungen, wenn gilt: \\(rg(A)&lt;n\\), \\(n\\) ist die Anzahl Spalten von \\(A\\)</li> </ul> <p>Ein homogenes Gleichungssystem (alle Koeffizienten sind \\(0\\)) ist immer l\u00f6sbar, da \\(rg(A)=rg(A|\\vec c)\\) immer gilt. </p> <p>Wenn mit Restklassen gearbeitet werden, kann es vorkommen, dass ein Gleichungssystem keine L\u00f6sung hat, da es kein multiplikatives Invers einer Restklasse gibt und somit die Zeilenstufenform nicht geformt werden kann.</p>"},{"location":"22FS/LA/02_Vektoren.html","title":"Vektoren","text":"\\[ \\DeclareMathOperator{\\orth}{\\bot} \\] <p>Vektor Ein Vektor wird durch seine Richtung und Betrag definiert (Nicht aber der Ort)</p> <p>Nullvektor Ein Nullvektor \\(\\vec 0\\) hat den Betrag <code>0</code> und hat keine Richtung</p> <p>Einheitsvektor/normierter Vektor Ein Vektor \\(\\vec e\\) oder \\(\\vec e_a\\), welchen der Betrag <code>1</code> hat und kann folgendermassen berechnet werden: \\(\\vec e_a=\\frac{\\vec a}{\\vert a \\vert}\\)</p> <p>Gegenvektor Der Gegenvektor zum Vektor \\(\\vec a\\) ist \\(-\\vec a\\). Es ist also ein Vektor welcher parallel zu \\(\\vec a\\) ist, denselben Betrag hat, aber in die entgegengesetzte Richtung zeigt.</p>"},{"location":"22FS/LA/02_Vektoren.html#addition","title":"Addition","text":"<p>Wenn zwei Vektoren addiert werden, werden sie graphisch aneinander geh\u00e4ngt.</p> <p>Diese Operation ist kommutativ und assoziativ:</p>"},{"location":"22FS/LA/02_Vektoren.html#skalare-multiplikation","title":"Skalare Multiplikation","text":"<p>Wenn ein Vektor mit einer Zahl multipliziert wird, wird der Vektor gestreckt, bzw. geschrumpft. Oft wird der Faktor als griechischen Buchstaben ausgedr\u00fcckt, um Verwechslung zwischen Vektoren und Faktoren zu vermeiden.</p>"},{"location":"22FS/LA/02_Vektoren.html#linearkombination","title":"Linearkombination","text":"<p>Eine Linearkombination ist das kombinieren von mehreren skallierten Vektoren: $$ \\lambda_1\\cdot\\vec a_1+\\lambda_2\\cdot\\vec a_2+...+\\lambda_n\\cdot\\vec a_n $$</p>"},{"location":"22FS/LA/02_Vektoren.html#betrag","title":"Betrag","text":"<p>Der Betrag eines Vektores ist seine L\u00e4nge.  $$ \\begin{align} \\left\\vert\\begin{pmatrix}x\\y\\end{pmatrix}\\right\\vert&amp;=\\sqrt{x^2 + y^2}\\  \\left\\vert\\begin{pmatrix}x\\y\\z\\end{pmatrix}\\right\\vert&amp;=\\sqrt{x^2 + y^2+z^2}\\ \\end{align} $$</p>"},{"location":"22FS/LA/02_Vektoren.html#kollinear","title":"Kollinear","text":"<p>Zwei Vektoren sind kollinear, wenn es eine Gerade gibt, zu der beide parallel sind. Mathematisch kann dies als \\(\\vec a = \\lambda\\cdot\\vec b\\) ausgedr\u00fcckt werden</p>"},{"location":"22FS/LA/02_Vektoren.html#komplanar","title":"Komplanar","text":"<p>Drei Vektoren heissen komplanar, wenn es eine Ebene gibt, zu der alle drei parallel sind.</p> <p></p>"},{"location":"22FS/LA/02_Vektoren.html#linear-unabhangig","title":"Linear (Un)abh\u00e4ngig","text":"<p>Vektoren werden linear unabh\u00e4ngig genannt, wenn es nur eine M\u00f6glichkeit gibt, mit einer Linearkombination den \\(\\vec 0\\) zu bekommen. $$ \\lambda_1 \\cdot \\vec a_1+\\lambda_2\\cdot \\vec a_2 +...+\\lambda_n\\cdot \\vec a_n=\\vec 0 $$ Diese Definition ist kompatible mit Komplanar und Kollinear.</p> <p>Wenn nur ein Vektor \\(\\vec v\\) gegeben ist, welcher ungleich \\(\\vec 0\\) ist, ist dieser linear unabh\u00e4ngig. Der \\(\\vec 0\\) ist linear abh\u00e4ngig.</p> <p>Wenn \\(\\vec a\\) und \\(\\vec b\\) linear unabh\u00e4ngig sind, dann ist \\(\\begin{vmatrix}a_x &amp; b_x\\\\ a_y &amp; b_y\\end{vmatrix}\\neq 0\\). Wenn der Determinant nicht ausgerechnet werden kann, kann man sich \u00fcberlegen, ob zwei Vektoren vielfaches voneinander sind, \u00fcber den Rang oder \u00fcber ein lineares Gleichungssystem. </p> <p>Ein weiterer Tip: in \\(\\R^m\\) k\u00f6nnen maximal \\(m\\) Vektoren linear unabh\u00e4ngig sein. Wenn es mehr Vektoren sind, k\u00f6nnen sie nicht linear unabh\u00e4ngig sein.</p> <p>Eigenschaften:</p> <ul> <li>\\(\\det(A)\\neq 0\\)</li> <li>\\(\\Leftrightarrow\\) Spalten sind linear unabh\u00e4ngig</li> <li>\\(\\Leftrightarrow\\) Zeilen sind linear unabh\u00e4ngig</li> <li>\\(\\Leftrightarrow rg(A)=n\\)</li> <li>\\(\\Leftrightarrow\\) A ist regul\u00e4r, bzw. invertierbar</li> <li>\\(\\Leftrightarrow A\\cdot \\vec x=\\vec 0\\) ist eindeutig l\u00f6sbar   </li> </ul>"},{"location":"22FS/LA/02_Vektoren.html#satz-1","title":"Satz 1","text":"<p>Es l\u00e4sst sich der Vektor \\(\\vec c\\) als Linearkombination der Vektoren \\(\\vec a\\) und \\(\\vec b\\) im 2D-Raum darstellen, wenn</p> <ul> <li>\\(\\vec a\\), \\(\\vec b\\) und \\(\\vec c\\) komplanar zueinander sind</li> <li>\\(\\vec a\\) und \\(\\vec b\\) nicht kollinear sind</li> </ul>"},{"location":"22FS/LA/02_Vektoren.html#satz-2","title":"Satz 2","text":"<p>Wen drei Vektoren \\(\\vec a\\), \\(\\vec b\\) und \\(\\vec c\\) nicht komplanar sind, l\u00e4sst sich jeder Vektor \\(\\vec d\\) in \\(\\R^3\\) als eine Linearkombination von \\(\\vec a\\), \\(\\vec b\\) und \\(\\vec c\\) darstellen</p>"},{"location":"22FS/LA/02_Vektoren.html#kordinaten-system","title":"Kordinaten-System","text":"<p>Ein Kordinaten-System im Raum \\(\\R^2=R\\times R\\) hat folgendes:</p> <ul> <li>Ein Punkt \\(O\\) als Ursprung</li> <li>Ein Einheitsvektor \\(\\vec e_1\\)</li> <li>Ein zweiten Einheitsvektor \\(\\vec e_2\\), welcher 90\u00b0 im Gegenurzeigersinn zu \\(\\vec e_1\\) ist</li> </ul> <p>Jeder Vektor in diesem Kordinatensystem kann als Linearkombination von \\(\\vec e_1\\) und \\(\\vec e_2\\) gebildet werden.</p> <p></p> <p>Ein Kordinaten-System im Raum \\(R^3\\) hat folgenedes:</p> <ul> <li>Einen Punkt \\(O\\) als Ursprung</li> <li>Einen Einheitsvektor \\(\\vec e_1\\) (typischerweisse kommt dieser aus dem Display)</li> <li>Einen zweiten Einheitsvektor \\(\\vec e_2\\), welcher druch eine 90\u00b0 Drehung gegen den Urzeigensinn von \\(\\vec e_1\\)</li> <li>Einen dritten Einheitsvektor \\(\\vec e_3\\), welcher ortogonal (Rechtwinlig) zu \\(\\vec e_1\\) und \\(\\vec e_2\\) ist</li> </ul> <p></p>"},{"location":"22FS/LA/02_Vektoren.html#ortsvektor","title":"Ortsvektor","text":"<p>Ein Ortsvektor ist ein Vektor, welcher im Ursprung festgeheftet wurde. $$ \\vec r(P)=x\\cdot \\vec e_1+y\\cdot \\vec e_2=\\begin{pmatrix}x\\y\\end{pmatrix} $$ Der Ortsvektor \\(\\vec r(P)\\) ist der Vektor vom Ursprung zum Punkt \\(P\\). Dies wird zum Teil auch als \\(\\vec{OP}\\) dargestellt</p>"},{"location":"22FS/LA/02_Vektoren.html#vektor-zwischen-zwei-punkten","title":"Vektor zwischen zwei Punkten","text":"\\[ \\vec{PQ}=\\begin{pmatrix}x_Q-x_P\\\\y_Q-y_P\\end{pmatrix}=\\vec r(Q)-\\vec r(P) \\]"},{"location":"22FS/LA/02_Vektoren.html#skalar-produkt","title":"Skalar Produkt","text":"<p> $$ \\vec a \\cdot \\vec b = \\vert \\vec a \\vert \\cdot \\vert \\vec b\\vert \\cdot \\cos(\\varphi)\\ \\vec a \\cdot \\vec b=a_1b_1+a_2b_2+a_3b_3 $$ Ein Speziallfal ist, wenn \\(\\vec a\\) oder \\(\\vec b\\) den Nullvektor \\(\\vec 0\\) ist. In diesem Fall ist das Skalarprodukt \\(0\\).</p> <p>Da es zwei Definition f\u00fcr das Skalarprodukt gibt, k\u00f6nnen diese gleichgesetzt werden und nach dem Zwischenwinkel afugel\u00f6st werden. $$ \\varphi =cos^{-1}\\left(\\frac{\\vec a \\cdot \\vec b}{|\\vec a|\\cdot |\\vec b|}\\right) $$</p> <p>Wenn das Skalarprodukt \\(\\vec a \\cdot \\vec b=0\\) ist, dann ist der Winkel zwischen \\(\\vec a\\) und \\(\\vec b\\) \\(90\u00b0=\\frac 2 \\pi\\)</p>"},{"location":"22FS/LA/02_Vektoren.html#senkrechte-projektion","title":"Senkrechte Projektion","text":"<p> $$ \\vec b_a =\\frac{\\vec a \\cdot \\vec b}{|\\vec a|^2}\\cdot \\vec a\\ |\\vec b_a|=\\frac{|\\vec a \\cdot \\vec b|}{|\\vec a|} $$</p>"},{"location":"22FS/LA/02_Vektoren.html#vektorprodukt","title":"Vektorprodukt","text":"<p> $$ \\vec a \\times \\vec b \\in \\R^3\\ |\\vec a \\times \\vec b| = |\\vec a|\\cdot |\\vec b|\\cdot \\sin(\\varphi)\\ ... $$</p> <p>Das Vektorprodukt ist nur f\u00fcr Vektoren im Raum \\(\\R^3\\) definiert.</p> <p>Der resultierende Vektor ist senkrecht zu \\(\\vec a\\) und \\(\\vec b\\). Der Betrag von \\(|\\vec a \\times \\vec b|\\) ist die Fl\u00e4che eines Paralelogrammes aufgespannt von \\(\\vec a\\) und \\(\\vec b\\).</p>"},{"location":"22FS/LA/02_Vektoren.html#gerade-als-vektoren","title":"Gerade als Vektoren","text":"<p>Eine Gerade kann folgendermassen dargestellt werden: \\(\\vec r(P)+\\lambda\\cdot \\vec {PQ}\\), wobei \\(\\vec r(P)\\), ein Ortsvektor ist, \\(\\lambda\\) ein beliebiger Faktor und \\(\\vec{PQ}\\) ein Richtungsvektor, welcher die Richtung der Gerade anzeigt.</p> <p></p>"},{"location":"22FS/LA/02_Vektoren.html#wie-stehen-zwei-vektoren-zu-einander","title":"Wie stehen zwei Vektoren zu einander","text":""},{"location":"22FS/LA/02_Vektoren.html#abstand-eines-punktes-zu-einer-gerade","title":"Abstand eines Punktes zu einer Gerade","text":"<p>Es gibt 3 Varianten den Abstand zwischen einem Punkt und einer Gerade zu bestimmen: In der folgenden Erkl\u00e4rung wird mit der Geraden \\(g: \\pmatrix{1 \\\\ 13 \\\\ -5}+ \\lambda \\cdot \\pmatrix{3 \\\\ 5 \\\\ -4}\\) und dem Punkt \\(A=(3;-1;4)\\) gearbeitet.</p> <ol> <li>L\u00f6sungsweg </li> <li>Bestimme den Vektor \\(\\vec r(B)\\), abh\u00e4ngig von \\(\\lambda\\) \\(\\vec r(B)=\\pmatrix{1+3\\lambda\\\\ 13 + 5\\lambda \\\\ -5 -4\\lambda}\\)</li> <li>Bestimme den Vektor \\(\\vec{BA}=\\vec r(A) - \\vec r(B)=\\pmatrix{2 - 3\\lambda \\\\ -14  -5\\lambda \\\\ 9 + 4\\lambda}\\)</li> <li>\u00dcber das Skalarprodukt \\(\\lambda\\) bestimmen:       \\(\\vec {BA}\\orth \\vec a \\Leftrightarrow \\vec {BA} \\cdot \\vec a = 0\\\\\\pmatrix{2 - 3\\lambda \\\\ -14  -5\\lambda \\\\ 9 + 4\\lambda} \\cdot \\pmatrix{3\\\\ -1 \\\\ 4}=-100-50\\lambda=0 \\rightarrow \\lambda = 2\\)</li> <li>Nun kann die L\u00e4nge bestummen werden       \\(l=\\vert\\vec{BA}\\vert=9\\)</li> <li>L\u00f6sungsweg </li> <li>\\(\\vec{PA}\\) bestimmen       \\(\\vec{PA}=\\pmatrix{3 -1 \\\\ -1 -13 \\\\ 5 - (-5)}=\\pmatrix{2 \\\\ -14\\\\ 9}\\)</li> <li>Fl\u00e4che \\(F\\) des Parallelogrammes bestimmen       \\(F=\\vert\\vec{PA}\\times \\vec a \\vert=\\left\\vert \\pmatrix{2 \\\\ -14 \\\\ 9}\\times \\pmatrix{3 \\\\ 5 \\\\ -4} \\right\\vert=\\left\\vert \\pmatrix{11 \\\\ 35\\\\ 52}\\right\\vert=45 \\sqrt 2\\)</li> <li>Die L\u00e4nge \\(l\\) bestimmen       \\(F=\\vert\\vec{PA}\\times \\vec a \\vert \\\\F = \\vert \\vec a \\vert \\cdot l \\\\ l=\\frac{\\vert \\vec {PA} \\times \\vec a\\vert}{\\vert \\vec a \\vert}=\\frac{45\\sqrt 2}{5\\sqrt 2}=9\\)</li> <li>L\u00f6sungsweg </li> <li>\\(\\vec{PA}\\) bestimmen       \\(\\vec{PA}=\\pmatrix{3 -1 \\\\ -1 -13 \\\\ 5 - (-5)}=\\pmatrix{2 \\\\ -14\\\\ 9}\\)</li> <li>\\(\\vec{PB}\\) mit einer Projektion bestimmen       \\(\\vert \\vec{PB}\\vert=\\frac{\\vert \\vec{PA} \\cdot \\vec a \\vert}{\\vert \\vec a \\vert}=2 \\cdot \\sqrt{50}\\)</li> <li>\\(l\\) mit Pytaghoras bestimmen       \\(l=\\overline{AB}=\\sqrt{\\vert \\vec{PA}\\vert^2 - \\vert\\vec{PB}\\vert^2}\\)</li> </ol>"},{"location":"22FS/LA/02_Vektoren.html#projektion-von-einem-vektor-auf-einen-anderen","title":"Projektion von einem Vektor auf einen anderen","text":"<p>TODO</p>"},{"location":"22FS/LA/02_Vektoren.html#koordinatendarstellung-von-geraden","title":"Koordinatendarstellung von Geraden","text":"<p>Die Geradendarstellung \\(\\vec r(P)+\\lambda\\cdot \\vec{PQ}\\) kann umgestellt werden in \\(ax+bx+c=0\\). Dies kann auch gelesen werden als, alle Punkte \\(P(x, y)\\), welche diese Gleichung erf\u00fcllt, ist auf der Gerade.</p> <p>Eine Gerade kann nur in \\(\\R^2\\) in der Koordinatendarstellung dargestellt werden. </p>"},{"location":"22FS/LA/02_Vektoren.html#normalvektor","title":"Normalvektor","text":"<p>Der Normalvektor einer Gerade ist einfach aus der Koordinatendarstellung zu lesen. Die Gerade \\(ax+bx+c=0\\) hat den Normalvektor \\(\\pmatrix{a\\\\b}\\). Dieser steht orthogonal (rechtwinklig) auf der Geraden</p>"},{"location":"22FS/LA/02_Vektoren.html#umformen-von-parameterdarstellung-zu-koordinatendarstellung","title":"Umformen von Parameterdarstellung zu Koordinatendarstellung","text":"<p>Um eine Gerade in der Parameterdarstellung in die Koordinatendarstellung um zu wandeln, m\u00fcssen die \\(\\lambda\\),  \\(\\mu\\) und co. eliminiert werden. Daf\u00fcr kann man quasi den \"Gauss\" anwenden. $$ g:\\pmatrix{x\\y}=\\pmatrix{7\\1}+\\lambda\\cdot \\pmatrix{-2\\-4}\\ \\text{Aus dieser Paramterdarstellung kann nun folgendes Gleichungssystem gebaut werden:}\\ \\begin{align} x &amp;=7 -2\\cdot \\lambda \\tag 1\\ y &amp;= 1 -4 \\cdot \\lambda \\tag2 \\ 2\\cdot(1)-(2): 2x-y -13 &amp;= 0 \\end{align} $$</p>"},{"location":"22FS/LA/02_Vektoren.html#umformen-von-koordinatendarstellung-zu-parameterdarstellung","title":"Umformen von Koordinatendarstellung zu Parameterdarstellung","text":"<p>Um von der Koordinatnedarstellung in die Parameterdarstellung einer Gerade zu wechseln, m\u00fcssen zwei Punkte auf der Gerade gefunden werden. Von diesen kann die Form \\(g: \\vec r(P)+\\lambda\\cdot \\vec{PQ}\\) gebildet werden.</p> <p>Um zwei Punkte aus der Koordinatendarstellung zu lesen, hilft es, die \\(x\\) oder \\(y\\) auf  <code>0</code> zu setzen und der andere Parameter zu \u00e4ndern bis <code>0</code> erreicht wird.</p>"},{"location":"22FS/LA/02_Vektoren.html#normalisieren-der-parameterdarstellung","title":"Normalisieren der Parameterdarstellung","text":"<p>TODO</p>"},{"location":"22FS/LA/02_Vektoren.html#darstellung-einer-ebenen","title":"Darstellung einer Ebenen","text":""},{"location":"22FS/LA/02_Vektoren.html#parameterdarstellung-von-ebenen","title":"Parameterdarstellung von Ebenen","text":"<p>Eine Ebene kann mit drei Punkten beschrieben werden: \\(E: \\vec r(P)+\\lambda \\cdot \\vec{PR}+\\mu\\cdot \\vec{PQ}\\), dabei sind \\(\\lambda\\) und \\(\\mu\\) beliebige Zahlen. Der Punkt \\(P\\) heisst Aufpunkt, die Vektoren \\(\\vec{PR}\\) und \\(\\vec{PQ}\\) heissen Richtungsvektoren.</p>"},{"location":"22FS/LA/02_Vektoren.html#koordinatendarstellung-von-ebenen","title":"Koordinatendarstellung von Ebenen","text":"<p>Die Koordinatendarstellung einer Ebenen ist definiert als: \\(E: ax+by+cz+d=0\\).  Die Variablen \\(a\\), \\(b\\) und \\(c\\) bestimmen die Ausrichtung der Ebene. Die Variable \\(d\\) verschiebt die Ebene parallel.</p> <p>Die Koordinatendarstellung heisst normiert, wenn \\(|\\vec n|=1\\) (der Normalvektor) ist.</p>"},{"location":"22FS/LA/02_Vektoren.html#normalvektor-einer-ebene","title":"Normalvektor einer Ebene","text":"<p>Aus von einer Ebene kann der Normalvektor berechnet werden. Dieser steht senkrecht auf der Ebene und ist folgendermassen definiert: \\(\\vec n=\\pmatrix{a\\\\b\\\\c}\\)</p> <p>Wenn wir nicht die Koordinatendarstellung haben, sondern die Parameterdarstellung \\(E: \\vec{r}(P)+\\lambda \\cdot \\vec a+\\mu\\cdot\\vec b\\), dann ist \\(\\vec n = \\vec a \\times \\vec b\\).</p>"},{"location":"22FS/LA/02_Vektoren.html#umrechnung-von-parameterdarstellung-zu-koordinatendarstellung","title":"Umrechnung von Parameterdarstellung zu Koordinatendarstellung","text":"<p>Die Umrechnung der Parameterdarstellung zur Koordinatendarstellung einer Ebene funktioniert gleich, wie bei der Gerade. Der einzige Unterschied ist, dass es drei Gleichungen statt zwei hat.</p> <p></p> <p>Eine zweite Art, wie dasselbe bewerkstelligt werden kann, ist \u00fcber den Normalvektor. Wenn man den Normalvektor einer Ebene weiss, kann davon sehr einfach die Koordinatendarstellung abgelesen werden. Ebenfalls ist bekannt, dass der Normalvektor senkrecht/orthogonal auf der Eben steht. Mit diesen Informationen kann folgende Gleichung abgeleitet werden: $$ E: \\pmatrix{2\\4\\1}+\\lambda\\cdot\\pmatrix{1\\3\\1}+\\mu \\cdot \\pmatrix{2\\2\\-4}\\ \\vec n=\\pmatrix{1\\3\\1}\\times \\pmatrix{2\\2\\-4}=\\pmatrix{-14\\6\\-4}\\ E: -14x+6y-4z+d=0\\ \\text{Nun muss noch P eingesetzt werden, um d zu bestimmen:}\\ -14\\cdot 2 + 6\\cdot 4 -4\\cdot 1+d=0\\Rightarrow d = 8\\ E: -14x + 6y - 4z + 8 = 0 $$</p>"},{"location":"22FS/LA/02_Vektoren.html#umrechnung-von-koordinatendarstellung-zu-parameterdarstellung","title":"Umrechnung von Koordinatendarstellung zu Parameterdarstellung","text":"<p>Wie bereits bei der Gerade, m\u00fcssen drei Punkte auf der Ebenen gefunden werden. Dies ist am einfachsten, wenn ein Parameter auf <code>0</code> gesetzt wird und die anderen entsprechend ver\u00e4ndert werden, dass das Ergebnis <code>0</code> ergibt.</p> <p></p>"},{"location":"22FS/LA/02_Vektoren.html#liegt-ein-punkt-auf-einer-ebene","title":"Liegt ein Punkt auf einer Ebene","text":"<p>Wenn \u00fcberpr\u00fcft werden soll, ob ein Punkt auf einer Ebene liegt, kann die Parameterdarstellung einfach dem Punkt gleichgesetzt werden. Wenn es f\u00fcr diese Gleichung einen Wert f\u00fcr \\(\\lambda\\) und \\(\\mu\\) gefunden werden kann, dann ist der Punkt auf der Ebene.</p> <p>Bei der Koordinatendarstellung m\u00fcssen Werte f\u00fcr \\(a\\), \\(b\\), \\(c\\) und \\(d\\) gefunden werden, damit die Form \\(ax+by+cz+d=0\\) stimmt.</p>"},{"location":"22FS/LA/02_Vektoren.html#liegt-eine-gerade-auf-einer-ebene","title":"Liegt eine Gerade auf einer Ebene","text":"<p>TODO</p> <ol> <li>Parameterform gleichsetzten</li> <li>Ebene Koordiatenform, Gerade parameterform. Punkt von Gerade allgemein ausdr\u00fccken und danach in der Koordiatenform der Ebenen einsetzten</li> </ol>"},{"location":"22FS/LA/02_Vektoren.html#wie-ebenen-zu-einander-stehen","title":"Wie Ebenen zu einander stehen","text":"<p>Ebenen k\u00f6nnen entweder identisch, parallel oder schneidend zu einander stehen.</p>"},{"location":"22FS/LA/02_Vektoren.html#parallel","title":"Parallel","text":"<p>Wenn \u00fcberpr\u00fcft werden soll, ob zwei Ebenen \\(E\\) und \\(F\\) parallel zu einander sind, muss \u00fcberpr\u00fcft werden, ob die beiden Richtungsvektoren von \\(E\\) komplanar zu den Richtungvektoren von \\(F\\) sind. </p> <p>Wenn die Koordinatenformen der Ebenen gegeben sind, m\u00fcssen entweder ein Faktor \\(p\\) f\u00fcr folgende Gleichungen gefunden werden.</p> <p>Beispiel:  $$ E: a_1x+b_1y+c_1z+d_1=0\\ F: a_2x+b_2y+c_2z+d_2=0 $$ In diesem Fall muss es ein Faktor \\(p\\) geben, f\u00fcr welche gilt: $$ a_1=a_2\\cdot p\\ b_1=b_2\\cdot p\\ c_1=c_2\\cdot p\\ d_1\\neq d_2\\cdot p $$ Eine weitere M\u00f6glichkeit ist, dass die Normalvektoren ausgerechnet werden k\u00f6nnen. Diese stehen Senkrecht auf der Ebene \\(E\\). Der Normalvektor von \\(F\\) koolinear zu dem von \\(E\\) ist, dann sind die Ebenen parallel.</p>"},{"location":"22FS/LA/02_Vektoren.html#identisch","title":"Identisch","text":"<p>Wenn \u00fcberpr\u00fcft werden soll, ob zwei Ebenen identisch sind und sie in der Koordinatensform gegeben sind, muss folgendes g\u00fcltig sein (die letzte Gleichung ist anderst): $$ a_1=a_2\\cdot p\\ b_1=b_2\\cdot p\\ c_1=c_2\\cdot p\\ d_1=d_2\\cdot p $$</p>"},{"location":"22FS/LA/02_Vektoren.html#schneidend","title":"Schneidend","text":"<p>Wenn zwei Ebenen schneidend sind und sie gleichgesetzt werden, dann kommt dabei eine Geradegleichung heraus. Bei der Koordinatenform m\u00fcssen die Gleichungen der beiden Ebenen in dasselbe Gleichungssystem eingef\u00fcgt werden, bei der Parameterform m\u00fcssen die Gleichungen gleichgesetzt werden. $$ E: x-2y+2z-1=0\\ F: 2x-3y-z+2=0 $$ Diese zwei Gleichungen k\u00f6nnen in folgendes Gleichungssystem umgewandlet werden: $$ \\begin{align} x-2y+2z&amp; =1\\ 2x-3y-z&amp; =-2 \\end{align} $$ Daraus kann mit dem Gaus nach \\(x\\), \\(y\\) und \\(z\\) gel\u00f6st werden: $$ \\left( \\begin{array}{ccc|cr} 1 &amp; -2 &amp; 2 &amp; 1\\ 2 &amp; -3 &amp; -1 &amp; -2   \\end{array} \\right) \\Rightarrow \\left( \\begin{array}{ccc|cr} 1 &amp; 0 &amp; -8 &amp; -7\\ 0 &amp; 1 &amp; -5 &amp; -4   \\end{array} \\right)\\ \\ \\begin{align} x&amp;=-7+8\\lambda\\ y&amp;=-4+5\\lambda\\ z&amp;=\\lambda\\ \\end{align} $$</p> <p>Aus diesen Gleichungen kann die Parameterform abgeleitet werden: \\(\\pmatrix{x\\\\y\\\\z}=\\pmatrix{-7\\\\-4\\\\0}+\\lambda\\cdot\\pmatrix{8\\\\5\\\\1}\\)</p>"},{"location":"22FS/LA/02_Vektoren.html#abstand-von-punkt-zu-ebene","title":"Abstand von Punkt zu Ebene","text":"<p>Um den Abstand \\(l\\) zu berechnen, wird ein beliebiger Punkt \\(P\\) gew\u00e4hlt. Danach wird der Vektor \\(\\vec{PA}\\) auf den Normalvektor \\(\\vec n\\) projiziert. Die L\u00e4nge dieser Projektion ist \\(l\\). $$ \\text{Wenn die Ebene nicht normiert sind: } l=\\frac{|ax_A+by_A+cz_A+d|}{|\\vec n|}\\ \\text{Wenn die Ebene normiert ist: } l=|ax_A+by_A+cz_A+d| $$ In der Formel obenen kommen \\(x_A\\), \\(y_A\\) und \\(z_A\\) von den Koordinaten von \\(A\\) und \\(a\\), \\(b\\) und \\(c\\) von der Koordinatenform der Ebene.</p>"},{"location":"22FS/LA/03_Matrix.html","title":"Matrix","text":"\\[ \\DeclareMathOperator{\\rg}{rg} \\] <p>Eine Matrix ist ein rechteckiges Zahlenfeld, wie z.B. diese 3x2 Matrix: \\(\\begin{bmatrix}7 &amp; 6 &amp; 2\\\\2 &amp; 3 &amp; 3\\end{bmatrix}\\)</p>"},{"location":"22FS/LA/03_Matrix.html#spezial-typen","title":"Spezial-Typen","text":"<ul> <li>Null-Matrix   Eine Matrix, bei denen alle Elemente \\(0\\) sind</li> <li>Spaltenmatrix   Eine Matrix, welche nur eine Spalte haben und sind dasselbe, wie Vektoren</li> </ul>"},{"location":"22FS/LA/03_Matrix.html#addition-und-subtraktion","title":"Addition und Subtraktion","text":"<p>Matrizen addieren und subtrahieren ist denkbar einfach. Jede Zahl wird mir der Zahl an der gleichen Stelle in der anderen Matrix addiert, bzw. subtrahiert. $$ \\begin{bmatrix}x_1 &amp; x_2 &amp; x_3 \\ x_4 &amp; x_5 &amp; x_6\\end{bmatrix} -  \\begin{bmatrix}y_1 &amp; y_2 &amp; y_3 \\ y_4 &amp; y_5 &amp; y_6\\end{bmatrix} =  \\begin{bmatrix}x_1-y_1 &amp; x_2-y_2 &amp; x_3-y_3 \\ x_4-y_4 &amp; x_5-y_5 &amp; x_6-y_6\\end{bmatrix} $$ Dasselbe gilt auch f\u00fcr die Addition.</p> <p>F\u00fcr die Addition und Subtraktion m\u00fcssen beide Matrizden dieselbe Gr\u00f6sse haben, sonst ist das Ergebnis undefiniert.</p>"},{"location":"22FS/LA/03_Matrix.html#skalar-multiplikation","title":"Skalar Multiplikation","text":"<p>Wenn eine Matrix mit einem Wert, wie 3 multipliziert wird, entsteht eine neue Matrix, in welcher alle Werte mit diesem Wert multipliziert wurden: $$ c \\cdot \\begin{bmatrix}x_1 &amp; x_2 &amp; x_3 \\ x_4 &amp; x_5 &amp; x_6\\end{bmatrix}=  \\begin{bmatrix}c\\cdot x_1 &amp; c\\cdot x_2 &amp; c\\cdot x_3 \\ c\\cdot x_4 &amp; c\\cdot x_5 &amp; c\\cdot x_6\\end{bmatrix} $$</p>"},{"location":"22FS/LA/03_Matrix.html#matrix-multiplikation","title":"Matrix Multiplikation","text":"<p>Wenn zwei Matrizen multipliziert werden, wie \\(A\\cdot B\\), dann muss die Breite von \\(A\\) gleich die H\u00f6he von \\(B\\) sein.  Das Resultat ist eine Matrix, welche so hoch ist, wie \\(A\\) und so breit ist, wie \\(B\\).</p> <p></p> <p> $$ \\begin{bmatrix}x_{11} &amp; x_{21} &amp; x_{31} \\ x_{12} &amp; x_{22} &amp; x_{32}\\end{bmatrix} \\cdot \\begin{bmatrix}y_{11} &amp; y_{21} \\ y_{12} &amp; y_{22} \\ y_{13} &amp; y_{23}\\end{bmatrix} =  \\begin{bmatrix}     x_{11}\\cdot y_{11} + x_{21}\\cdot y_{12} + x_{31}\\cdot y_{13} &amp;      x_{11}\\cdot y_{21} + x_{21}\\cdot y_{22} + x_{21}\\cdot y_{23} \\     x_{12}\\cdot y_{12} + x_{22}\\cdot y_{12} + x_{32}\\cdot y_{13} &amp;      x_{12}\\cdot y_{21} + x_{22}\\cdot y_{22} + x_{22}\\cdot y_{23}  \\end{bmatrix} $$ Wegen dieser Rechnenart, ist die Multiplikation mit zwei Matrizen nicht kommunikativ.</p> <p>Eine weitere wichtige Eigenschaften von Matrix-Multiplikation ist, dass folgendes nicht gilt: \\(A\\cdot B=C \\text { und } A \\cdot D = C  \\not \\Rightarrow B=D\\), da es m\u00f6glich ist, dass \\(B\\) und \\(D\\) verschiedene Matrix sein k\u00f6nnen, welche beide dasselbe Ergebniss \\(C\\) gibt, wenn mit \\(A\\) multipliziert. </p>"},{"location":"22FS/LA/03_Matrix.html#rechnungsregeln","title":"Rechnungsregeln","text":"<p>Die folgenden Rechenregeln funktioniert f\u00fcr gleichgrosse Matrizen.</p> <ul> <li>Kommutativ-Gesetz: \\(A+B=B+A\\) (Geht NICHT bei Multiplikation)</li> <li>Assoziativ-Gesetzt: \\(A+(B+C)=(A+B)+C\\)</li> <li>Distributiv-Gesetzt: \\(\\lambda\\cdot(A+B)=\\lambda\\cdot A + \\lambda \\cdot B\\) </li> <li> <p>Aber Achtung: \\(\\lambda\\cdot A + B\\cdot \\lambda\\) kann nicht ausgeklammert werden (In k\u00f6nnte einfach \\(\\lambda \\cdot A\\) und \\(B\\cdot \\lambda\\) ausgerechnet werden)</p> </li> <li> <p>Distributiv-Gesetzt mit Transportierten Matrizen: </p> </li> <li>\\((A\\cdot B)^T=B^T \\cdot A^T\\) (Beachte die Reihenfolge von A und B)</li> <li>\\((A+B)^T=A^T+B^T=B^T+A^T\\)</li> <li>\\((A-B)^T=A^T-B^T=B^T-A^T\\)</li> </ul>"},{"location":"22FS/LA/03_Matrix.html#einheitsmatrix","title":"Einheitsmatrix","text":"<p>Eine Einheitsmatrix, ist eine quadratische Matrix, welche Diagonal \u00fcberall eine <code>1</code> hat und sonst <code>0</code>: $$ \\begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; 0\\ 0 &amp; 1 &amp; 0 &amp; 0\\ 0 &amp; 0 &amp; 1 &amp; 0\\ 0 &amp; 0 &amp; 0 &amp; 1 \\end{bmatrix} $$ Diese Matrix hat die Eigenschaft, dass wenn eine Matrix \\(A\\) mit einer Identit\u00e4tsmatrix multipliziert wird, dass wieder die Matrix \\(A\\) herauskommt.</p>"},{"location":"22FS/LA/03_Matrix.html#inverse-matrix","title":"Inverse Matrix","text":"<p>Die Inverse Matrix, ist die Matrix \\(A^{-1}\\), welche mit der Matrix \\(A\\), eine Identit\u00e4tsmatrix \\(I\\) ergibt:</p> <p>\\(A\\cdot A^{-1}=I\\)</p> <p>Das Inverse Skalar-Multiplikationen kann folgendermassen gebildet werden: \\((3A)^{-1}=\\frac 1 3 A^{-1}\\)</p> <p>Das Inverse einer Matrix kann gebildet werden, wenn die \\(\\mathrm{det}(A)\\neq 0\\) ist, bzw. die \"Vektoren\" in der Matrix linear unabh\u00e4ngig sind.</p>"},{"location":"22FS/LA/03_Matrix.html#inverse-matrix-von-2x2-matrix","title":"Inverse Matrix von 2x2-Matrix","text":"<p>F\u00fcr 2x2-Matrizen gibt es eine Formel, um das Inverse zu errechnen. Dabei gilt aber: \\(ad\\neq bc\\) $$ \\pmatrix{a &amp; b\\ c &amp; d}^{-1}=\\frac 1 {ad-bc}\\cdot \\pmatrix{d &amp; -b \\ -c &amp; a} $$</p>"},{"location":"22FS/LA/03_Matrix.html#singulare-und-regulare-matrizen","title":"Singul\u00e4re und regul\u00e4re Matrizen","text":"<p>Eine Matrix wird regul\u00e4r genannt, wenn es ein Inverse von der Matrix gibt. Ansonsten wird sie Singul\u00e4r genannt.</p>"},{"location":"22FS/LA/03_Matrix.html#gauss-jordan-verfahren-zur-berechnung-der-inverse","title":"Gauss-Jordan Verfahren zur Berechnung der Inverse","text":"<p>TODO</p>"},{"location":"22FS/LA/03_Matrix.html#transponierte-matrix","title":"Transponierte Matrix","text":"<p>Eine transponierte Matrix \\(A^T\\) von \\(A\\) ist, wenn die Spalten in \\(A\\) zu Reihen werden und die Reihen in \\(A\\) zu Spalten werden. Man kann es sich auch vorstellen, als ob man die Matrix um 90\u00b0 gegen den Uhrzeigersinn dreht: $$ B= \\begin{bmatrix} 1 &amp; 2 &amp; 3\\ 3 &amp; 4 &amp; 5 \\end{bmatrix}\\ B^T= \\begin{bmatrix} 1 &amp; 3 \\ 2 &amp; 4\\ 3 &amp; 5 \\end{bmatrix} $$ Es gilt folgendes Gesetzt: \\((A\\cdot B)^T=B^T\\cdot A^T\\)</p> <p>Bemerke, dass sich die Reihenfolge von \\(A\\) und \\(B\\) sich \u00e4ndert.</p>"},{"location":"22FS/LA/03_Matrix.html#gleichheit","title":"Gleichheit","text":"<p>Zwei Matrizen sind gleich, wenn alle Elemente der Matritzen gleich sind.</p>"},{"location":"22FS/LA/03_Matrix.html#determinanten","title":"Determinanten","text":"<p>Wenn die Determinanten einer gr\u00f6sseren Matrix als 3x3 Berechnet werden soll, kann ein Verfahren nach Laplace eingesetzt werden:</p> <ol> <li> <p>Es wird eine feste Spalte oder Zeile gew\u00e4hlt</p> </li> <li> <p>Nun wird nach der folgenden Formel entwickelt:    $$    \\text{Entwicklung nach i-ten Zeilen: }\\det(A)=\\sum^n_{j=1} (-1)^{i+j}\\cdot a_{ij}\\cdot\\det(A_{ij})\\    \\text{Entwicklung nach j-ten Spalte: }\\det(A)=\\sum^n_{i=1} (-1)^{i+j}\\cdot a_{ij}\\cdot\\det(A_{ij})\\    $$    Dabei  ist \\(a_{ij}\\), das Element an \\(i\\)-ter Zeile und \\(j\\)-ter Spalte und \\(A_{ij}\\) die Matrix, bei welcher die \\(i\\)-te Zeile und \\(j\\)-Spalte weggelassen wurden</p> </li> </ol>"},{"location":"22FS/LA/03_Matrix.html#eigenschaften","title":"Eigenschaften","text":"<p>Wenn der Determinant \\(\\neq 0\\) ist, dann gilt:</p> <ul> <li>\\(\\rg(A)=0\\)</li> <li>Die Matrix ist invertierbar</li> </ul> <p>Wenn der Determinant \\(=0\\) ist, dann gilt:</p> <ul> <li>\\(\\rg(A) &lt; n\\) (wobei \\(n\\) die Anzahl Spalten der Matrix \\(A\\) ist)</li> </ul>"},{"location":"22FS/LA/03_Matrix.html#rechenoperation-mit-bilder","title":"Rechenoperation mit Bilder","text":"<p>Man kann die einzelnen Elemente einer Matrix als Pixel in einem Bild darstellen.</p> <p></p>"},{"location":"22FS/LA/03_Matrix.html#skalaroperation","title":"Skalaroperation","text":"<p>Mit einer Skalarmultiplikation kann das ganze Bild heller oder dunkler gestalltet werden. Wenn zwei Matrizen addiert werden, \u00fcberlagern sich ihre Pixel.</p> <p></p>"},{"location":"22FS/LA/03_Matrix.html#matrixen-produkt","title":"Matrixen Produkt","text":"<p>Mit dem Matrizen-Produkt k\u00f6nnen Zeilen vertauscht werden.</p> <p></p> <p></p>"},{"location":"22FS/LA/03_Matrix.html#transponieren","title":"Transponieren","text":"<p>Wenn eine Matrix transponiert wird, wird das Bild entlang der Hauptdiagonalen g</p> <p></p>"},{"location":"22FS/LA/05_Vektorr%C3%A4ume.html","title":"Vektorr\u00e4ume","text":""},{"location":"22FS/LA/05_Vektorr%C3%A4ume.html#definition-von-vektorraumen","title":"Definition von Vektorr\u00e4umen","text":"<p>Ein Vektorraum ist eine Menge \\(V\\) mit den Funktionen Addition und Skalar-Multiplikation:  $$ +:V \\times V \\rightarrow V\\ \\cdot : \\R \\times V \\rightarrow V $$ Dabei m\u00fcssen folgende Gesetze existieren:</p> <ul> <li>Kommutativgesetz: \\(a + b = b + a\\)</li> <li>Assoziativgesetzt: \\(a + (b + c)=(a + b) + c\\)</li> <li>Es gibt ein neutrales Element \\(\\vec 0\\), f\u00fcr welches gilt \\(a + 0v = \\vec a\\) und \\(0v \\in V\\)</li> <li>F\u00fcr jedes Element \\(a \\in V\\) muss es ein inverses Element \\(-a \\in V\\) geben, so dass \\(a + (-a) = 0v\\) ergibt.</li> <li>Assoziativgesetzt: \\(\\lambda \\cdot (\\mu \\cdot a) = (\\lambda \\cdot \\mu) \\cdot a\\)</li> <li>Distributivgesetzt: \\(\\lambda \\cdot(a + b) = \\lambda \\cdot a + \\lambda \\cdot b\\)</li> <li>Distirbutgesetzt: \\((\\lambda + \\mu)\\cdot a = \\lambda \\cdot a + \\mu \\cdot a\\)</li> <li>F\u00fcr jedes Element \\(a \\in V\\) gibt es ein neutrales Element \\(1\\cdot a = a\\),</li> </ul> <p>Frage: muss das Skalar \u00fcber \\(\\R\\) erstellt werden oder k\u00f6nnte auch eine andere Menge genommen werden.</p>"},{"location":"22FS/LA/05_Vektorr%C3%A4ume.html#reeler-vektoraum","title":"Reeler Vektoraum","text":"\\[ +:V \\times V \\to V: (\\vec a; \\vec b) \\mapsto \\vec a + \\vec b\\\\ \\cdot : \\R \\times V \\to V : (\\lambda; \\vec a) \\mapsto \\lambda \\cdot \\vec a \\] <p>Das neutrale Element bei der Addition ist der Nullvektor \\(\\vec 0\\) und das neutrale Element bei der Skalarmultiplikation ist \\(1\\).</p>"},{"location":"22FS/LA/05_Vektorr%C3%A4ume.html#unterraume","title":"Unterr\u00e4ume","text":"<p>Eine Teilmenge \\(U\\) eines Vektorraums \\(V\\) heisst Unterraum von \\(V\\), wenn \\(U\\) selbst auch ein Vektorraum ist. Daf\u00fcr m\u00fcssen folgende Kriterien erf\u00fcllt sein:</p> <ul> <li>F\u00fcr beliebige Element \\(a, b \\in U\\) ist auch \\(a+b\\in U\\)</li> <li>F\u00fcr jeden Skalar \\(\\lambda \\in \\R\\) und jedes Element \\(a\\in U\\) ist auch \\(\\lambda \\cdot a\\in U\\)</li> <li>Die neutralen Elemente der Addition und Skalarmultiplikation m\u00fcssen ebenfalls in \\(U\\) sein.</li> </ul>"},{"location":"22FS/LA/05_Vektorr%C3%A4ume.html#linearer-spann","title":"Linearer Spann","text":"<p>\\(spann(\\vec a_1, \\vec a_2, ..., \\vec a_n)\\) ist definiert als alle m\u00f6glichen Vektoren von der Linearkombination \\(\\lambda_1\\cdot \\vec a_1 + \\lambda_2\\cdot \\vec a_2 +...+\\lambda_n\\cdot \\vec a_n\\)\u00a7</p> <p>Die Vektoren \\(\\vec a_1, \\vec a_2, ...\\vec a_n\\) spannen den linearen Spann auf und formen eine geometrische Form.</p> <p></p>"},{"location":"22FS/LA/05_Vektorr%C3%A4ume.html#geometrische-objekte","title":"Geometrische Objekte","text":"<p>Jenachdem, wie viele Vektoren gegeben sind, wird ein anderes geometrisches Objekt gebildet:</p> <ul> <li>Bei <code>1</code> Vektor, wird eine Ursprungs-Gerade gebildet</li> <li>Bei <code>2</code> Vektoren, wird eine Ursprungs-Ebene</li> <li>Bei <code>3</code> Vektoren, wird ein \"Ursprungs-K\u00f6rper\" gebildet</li> </ul>"},{"location":"22FS/LA/05_Vektorr%C3%A4ume.html#erzeugendensystem","title":"Erzeugendensystem","text":"<p>Eine Menge von Vektoren \\(\\{\\vec b_1, \\vec b_2, ..., \\vec b_N\\}\\) bildet ein Erzeugendensystem von \\(V\\), falls \\(V=span(\\vec b_1, \\vec b_2, ..., \\vec b_n)\\). Dies ist nur der Fall, wenn die Vektoren nicht kollinear, bzw. komplanar sind.</p> <p>Aus dem gehen die folgenden folgende Bedingungen: $$ \\begin{align} &amp; V=span(\\vec b_1, \\vec b_2, ..., \\vec b_n)\\ \\Leftrightarrow \\text{ } &amp; B\\cdot \\vec x = \\vec a \\text { f\u00fcr jedes } \\vec a \\in \\R^m\\ \\Leftrightarrow \\text{ } &amp; rg(B)=m \\end{align} $$</p> <p>Mit den Vektoren \\(\\vec b_i\\) in einem Erzeugendensystem k\u00f6nnen alle anderen Vektor \\(V\\) (also z.B. \\(\\R^2\\)) bilden.</p>"},{"location":"22FS/LA/05_Vektorr%C3%A4ume.html#basis-und-dimensionen","title":"Basis und Dimensionen","text":"<p>Ein Vektor \\(\\vec a = \\pmatrix{a_1 \\\\ a_2}\\) kann auch als \\(\\vec a = a_1\\cdot \\vec e_1 + a_2 \\cdot \\vec e_2\\) geschrieben werden. Anstatt der Vektormenge \\(\\mathcal S=\\{\\vec e_1; \\vec e_2\\}\\) kann auch eine andere Menge \\(\\mathcal B=\\{\\vec b_1; \\vec b_2\\}\\) ben\u00fctzt werden. Der Vektor \\(\\vec a = \\pmatrix{\\alpha_1\\\\ \\alpha_2}_\\mathcal{B}\\) ist nun equivalent zu \\(\\vec a=\\alpha_1 \\cdot \\vec b_1 + \\alpha_2 \\cdot \\vec b_2\\).</p> <p>In diesem Beispiel sind die Vektoren \\(\\vec a\\), \\(\\vec c\\) und \\(\\vec d\\) die selben, nur die Vektormenge, durch welche das Koordinatensystem definiert wird, \u00e4ndert sich.</p> <p></p> <p>Damit dies m\u00f6glich ist, muss die Vektormenge folgende Eigenschaften erf\u00fcllen:</p> <ul> <li>\\(\\mathcal B=\\{\\vec b_1, \\vec b_2, ...,\\vec b_n\\}\\) muss ein Erzeugendensystem sein</li> <li>\\(\\vec b_1\\), \\(\\vec b_2\\), ..., \\(\\vec b\\) m\u00fcssen linear unabh\u00e4ngig sein</li> </ul> <p>Oder in Deutsch: Es darf nur genau eine m\u00f6gliche Linearkombination f\u00fcr jeden Vektor  geben</p> <p>Aus diesen zwei Regeln gehen folgende S\u00e4tze hervor:</p> <ul> <li>Eine Basis \\(\\R^n\\) besteht genau aus \\(n\\) Vektoren</li> <li>\\(\\rm rg(B)=n\\) (wobei \\(B\\) alle Vektoren in eine Matrix gesteckt werden)</li> <li>\\(\\det(B)\\neq 0\\)</li> <li>\\(B\\) ist invertierbar</li> <li>Das lineare Gleichungssystem \\(B\\cdot \\vec x=\\vec c\\) hat genau eine eindeutige L\u00f6sung</li> </ul>"},{"location":"22FS/LA/05_Vektorr%C3%A4ume.html#dimensionen","title":"Dimensionen","text":"<p>Die Dimension \\(\\dim(V)\\) gibt an, wie viel Dimensionen ein Vektorraum oder Basis hat. </p> <p>Bei einer Basis \\(\\mathcal B\\) ist die Basis die Anzahl Vektoren, welche die Basis definiert. Das heisst \\(\\dim(\\R^n)=n\\) und \\(\\mathrm{dim}(\\mathbb P_n[x])=n+1\\) </p> <p>Bei einem Vektorraum ist die Anzahl Dimensionen gleich der Anzahl Vektoren, welche den Spann des Vektorraumes definieren. Bei Vektorr\u00e4ume gilt auch, dass ein Unterraum \\(R\\) von \\(V\\) : \\(\\dim(R) \\le \\dim(V)\\). Die Dimension des Vektorraums \\(\\{\\vec 0\\}\\) ist gleich \\(\\dim(\\{\\vec 0\\})=0\\)</p> <p>TODO: Matrixen</p>"},{"location":"22FS/LA/05_Vektorr%C3%A4ume.html#umwandeln-zwischen-komponentendarstellungen","title":"Umwandeln zwischen Komponentendarstellungen","text":"<p>Um einen Vektor \\(\\vec v_{\\mathcal B}\\) in den Vektor \\(\\vec v_{\\mathcal{S}}\\) zu umwandeln, kann folgendes getan werden: \\(\\vec v_{\\mathcal B}=v_1\\cdot \\vec b_1+v_2\\cdot \\vec b_2+...+v_n\\cdot \\vec b_n\\)</p> <p>In die umgekehrte Richtung gibt es ein Lineares Gleichungssystem: \\(\\vec v_\\mathcal{S}\\cdot B=\\vec v_\\mathcal{B}\\)</p> <p></p>"},{"location":"22FS/LA/06_Lineare%20Abbildung.html","title":"Lineare Abbildung","text":"<p>$$ \\DeclareMathOperator{\\im}{im} \\DeclareMathOperator{\\span}{span} \\DeclareMathOperator{\\rg}{rg} $$ Eine Lineare Abbildung wird mit Hilfe einer Funktion \\(f: V \\to W\\) , welche ein Parameter vom Typ \\(V\\) nimt und als R\u00fcckgabetyp \\(W\\) zur\u00fcck gibt. Wichtig ist, dass die Funktion folgende zwei Rechungsregeln einh\u00e4lt:</p> <ul> <li>\\(f(x+y)=f(x)+f(y)\\)</li> <li>\\(f(\\lambda\\cdot x)=\\lambda\\cdot f(x)\\)</li> </ul> <p>Wenn bewiesen werden soll, dass eine Funktion eine Abbildungsfunktion ist, dann m\u00fcssen diese zwei Gesetze allgemein gezeigt werden. Um es zu widerlegen, reicht ein Gegenbeispiel.</p> <p></p>"},{"location":"22FS/LA/06_Lineare%20Abbildung.html#lineare-abbildung-eines-vektorraumes","title":"Lineare Abbildung eines Vektorraumes","text":"<p>Wenn die Abbildungsfunktion \\(f\\) komplett definiert ist, f\u00fcr die Einheitsvektoren \\(\\vec e_1\\), \\(\\vec e_2\\), ..., \\(\\vec e_n\\), dann gilt follgendes: $$ \\vec x=x_1 \\cdot \\vec e_1 + x_2 \\cdot \\vec e_2\\ f(\\vec x)=f(x_1 \\cdot \\vec e_1 + x_2 \\cdot \\vec e_2)=f(x_1\\cdot \\vec e_1)+ f(x_2\\cdot \\vec e_2)=x_1\\cdot f(\\vec e_1)+x_2\\cdot f(\\vec e_2)\\ $$ Da das letzte Resultat eine Linearkombination ist, kann diese auch als Matrix geschrieben werden.</p> <p></p> <p>Um diese Matrix zu finden, gibt es zwei M\u00f6glichkeiten:</p> <ol> <li>Die Einheitsvektoren in \\(f(x)\\) ein setzten und aus den Resultaten eine Matrix bauen</li> <li>Zeile f\u00fcr Zeile durchgehen und die Matrixzeilen davon ableiten</li> </ol> <p></p> <p>Zus\u00e4tzlich k\u00f6nnen Matrixen (und auch Abbildngsfunktionen) auch zwischen Basen konvertieren:</p> <p></p> <p>Bei der Matrix \\(_CA_B\\) und der linearen Abbildung \\(f: V \\to W\\) bezieht sich \\(_B\\) auf \\(V\\) und \\(_C\\) auf \\(W\\).</p>"},{"location":"22FS/LA/06_Lineare%20Abbildung.html#abbildungen-im-raum","title":"Abbildungen im Raum","text":"<p>In den folgenden Kapiteln werden Beispiele gezeigt, wie eine Abbildung aussehen kann</p> <p></p>"},{"location":"22FS/LA/06_Lineare%20Abbildung.html#in-2-dimensionalen-vektorraumen","title":"In 2-Dimensionalen Vektorr\u00e4umen","text":"<p>Die folgenden Beispielen beziehen sich alle auf einen zweidimensionalen Vektorraum</p> <p></p> <p></p>"},{"location":"22FS/LA/06_Lineare%20Abbildung.html#zweidimensionale-spezialfalle","title":"Zweidimensionale Spezialf\u00e4lle","text":""},{"location":"22FS/LA/06_Lineare%20Abbildung.html#orthogonale-projektion-auf-eine-allgemeine-gerade-durch-den-ursprung","title":"Orthogonale Projektion auf eine allgemeine Gerade durch den Ursprung","text":"<p> Wenn auf eine Gerade projektiert werden soll, welche nicht die x-, y- oder z-Achse ist, muss folgende Formel verwendet werden. Dabei wird erwartet, dass die Gerade in der Kordinatendarstelung (\\(ax + by = 0\\)) normiert ist (\\(a^2 + b^2 = 1\\)). $$ P= \\begin{pmatrix} 1 - a^2 &amp; -ab\\ -ab &amp; 1-b^2 \\end{pmatrix}\\ \\text{Wobei gilt: }\\ ax + by = 0\\ a^2+ b^2 = 1 $$</p>"},{"location":"22FS/LA/06_Lineare%20Abbildung.html#spiegelung-an-einer-allgemeinen-gerade-durch-den-ursprung","title":"Spiegelung an einer allgemeinen Gerade durch den Ursprung","text":"<p>Wenn alle Vektoren bei einer Gerade, welche durch den Ursprung geht, gespiegelt werden soll, kann folgende Formel ben\u00fctzt werden. Dabei muss aber die Gerade in der Koordinatendarstellung (\\(ax + by=0\\)) normiert ist (\\(a^2+b^2 = 1\\)). $$ S= \\begin{pmatrix} 1 - 2a^2 &amp; -2ab\\ -2ab &amp; 1 - 2b^2 \\end{pmatrix}\\ \\text{Wobei gilt: }\\ ax + by = 0\\ a^2+ b^2 = 1 $$</p>"},{"location":"22FS/LA/06_Lineare%20Abbildung.html#in-dreidimensionalen-vektorraumen","title":"In dreidimensionalen Vektorr\u00e4umen","text":""},{"location":"22FS/LA/06_Lineare%20Abbildung.html#dreidimensionale-spezialfalle","title":"Dreidimensionale Spezialf\u00e4lle","text":""},{"location":"22FS/LA/06_Lineare%20Abbildung.html#orthogonale-projektion-auf-eine-allgemeine-ebene-durch-den-ursprung","title":"Orthogonale Projektion auf eine allgemeine Ebene durch den Ursprung","text":"<p>Wenn alle Vektoren auf eine Ebene, welche durch den Ursprung geht, projektiert werden sollen, kann folgende Formel ben\u00fctzt werden. Dabei muss aber die Koordinatendarstellung der Ebene (\\(ax + by + cz = 0\\)) normiert sein (\\(a^2 + b^2 + c^2=1\\)). $$ P=\\begin{pmatrix} 1 - a^2 &amp; -ab &amp; -ac\\ -ab &amp; 1 - b^2 &amp; -bc\\ -ac &amp; -bc &amp; 1 - c^2 \\end{pmatrix}=E-\\vec n \\cdot \\vec n^T\\ \\text{Wobei gilt:}\\ ax + by + cz = 0\\ a^2 + b^2 + c^2 = 1 $$ Im folgenden Bild wird noch eine andere Schreibweise gezeigt:</p> <p></p>"},{"location":"22FS/LA/06_Lineare%20Abbildung.html#spiegelung-an-einer-allgemeinen-ebene-durch-den-ursprung","title":"Spiegelung an einer allgemeinen Ebene durch den Ursprung","text":"<p>Wenn alle Vektoren bei einer Ebene, welche durch den Ursprung geht, gespiegelt werden sollen, kann folgende Formel ben\u00fctzt werden. Dabei m\u00fcssen die Ebene in der Koordinatendarstellung normiert sein: $$ S=\\begin{pmatrix} 1 - 2a^2 &amp; -2ab &amp; -2ac\\ -2ab &amp; 1 - 2b^2 &amp; -2bc\\ -2ac &amp; -2bc &amp; 1 - 2c^2 \\end{pmatrix}=E-\\vec n \\cdot \\vec n^T\\ \\text{Wobei gilt:}\\ ax + by + cz = 0\\ a^2 + b^2 + c^2 = 1 $$</p>"},{"location":"22FS/LA/06_Lineare%20Abbildung.html#rotation-um-eine-allgemeine-achse-durch-den-ursprung","title":"Rotation um eine allgemeine Achse durch den Ursprung","text":"<p>Wenn alle Vektoren um eine allgemeine Achse, welche durch den Ursprung geht, gedreht werden soll, kann folgende Formel ben\u00fctzt werden. Dabei muss die Koordinatendarstellung der Achse/Gerade normiert sein.</p> <p></p>"},{"location":"22FS/LA/06_Lineare%20Abbildung.html#kern-und-bild-einer-abbildung","title":"Kern und Bild einer Abbildung","text":"<p>Wenn wir eine Abbildung \\(f: V \\to W, \\vec x \\mapsto f(\\vec x)=A \\cdot \\vec x\\) haben, dann ist der Kern alle Vektoren \\(\\vec x\\), welche die Gleichung \\(A \\cdot \\vec x=\\vec 0\\)   erf\u00fcllen. Der Nullvektor \\(\\vec 0\\) ist dabei immer in \\(\\ker(A)\\) enthalten. $$ \\ker(A)={\\vec x \\in V \\vert A\\cdot \\vec x = \\vec 0} $$ Das Bild der Abbildung ist der Spalten der Vektoren von \\(A\\) $$ \\im(A)=\\span(\\vec a_1, \\vec a_2, ..., \\vec a_n)={\\lambda_1 \\vec a_1 + \\lambda_2 \\vec a_2 + ... + \\lambda_n\\vec a_n \\vert \\lambda_k \\in \\R} $$ Eine Wichtige Beobachtung ist, dass die Dimension von \\(\\ker(A)\\) und \\(\\im(A)\\) zusammen \\(\\dim(A)\\) ergeben: $$ \\dim(\\ker(A)) + \\dim(\\im(A)) = \\dim(A)\\ \\dim(\\im(A)) = \\rg(A) $$</p> <p>Um die Dimensionen zu bestimmen gibt es mehrere M\u00f6glichkeiten:</p> <ol> <li>Mit der Zeilenstuffenform von \\(A\\) den Rang ablesen. Von diesem kann die Dimension von \\(\\im(A)\\) abgelesen werden und dank des Satzes von oben auch \\(\\dim(\\ker(A))\\) bestimmen</li> <li>Da die Menge, welche von \\(\\ker(A)\\) zur\u00fcck gegeben werden, auch ein Unterraum ist, kann eine Basis mit \\(A\\) erstellt werden. Es m\u00fcssen alle Vektoren \\(a_i\\) gefunden werden, welche linear Unabh\u00e4ngig sind</li> </ol>"},{"location":"22FS/LA/summary.html","title":"LA Summary","text":"\\[ \\newcommand{\\len}[1]{\\vert #1 \\vert} \\DeclareMathOperator{\\rg}{rg} \\DeclareMathOperator{\\span}{span} \\DeclareMathOperator{\\dim}{dim} \\DeclareMathOperator{\\im}{im} \\] <ul> <li>LA Summary<ul> <li>Linearen Gleichungssysteme (LGS)<ul> <li>L\u00f6sung aus Zeilenstufenform</li> <li>L\u00f6sung aus reduzierter Zeilenstufenform</li> <li>L\u00f6sbarkeit von LGS</li> </ul> </li> <li>Vektoren<ul> <li>Linear Unabh\u00e4ngig</li> <li>S\u00e4tze</li> <li>3D-Koordinatensystem</li> <li>Skalarprodukt</li> <li>Orthogonale Projektion</li> <li>Vektorprodukt</li> </ul> </li> <li>Gerade<ul> <li>Wie stehen zwei Gerade zueinander</li> <li>Abstand eines Punktes</li> </ul> </li> <li>Ebene<ul> <li>Wie stehen zwei Ebene zueinander</li> <li>Abstand von einem Punkt zu einer Ebene</li> </ul> </li> <li>Matrix<ul> <li>Transponierte Matrix</li> <li>Inverse Matrix</li> <li>Determinante</li> </ul> </li> <li>Vektorr\u00e4ume<ul> <li>Unterr\u00e4ume</li> <li>Linearer Spann</li> <li>Erzeugendensystem</li> <li>Basis</li> <li>Dimension</li> </ul> </li> <li>Lineare Abbildung<ul> <li>Basis-wechselnde Abbildung</li> <li>Abbildung in der Ebene<ul> <li>Orthogonale Projektion auf eine allgemeine Gerade durch den Ursprung</li> <li>Spiegelung an einer allgemeinen Gerade durch den Ursprung</li> </ul> </li> <li>Abbildung im Raum</li> <li>Kern und Bild</li> <li>Verkn\u00fcpfung von Abbildungen</li> </ul> </li> </ul> </li> <li>Rest Klassen<ul> <li>Prime Restklassen</li> <li>Modulare Arithmethik</li> </ul> </li> </ul>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#linearen-gleichungssysteme-lgs","title":"Linearen Gleichungssysteme (LGS)","text":"<ul> <li>Zeilenstufenform: Alle nicht-<code>0</code> Zeilen, haben eine f\u00fchrende <code>1</code>; Alle <code>0</code>-Zeilen stehen zu unterst; Je weiter unten, desto weiter rechts steht eine f\u00fchrende <code>1</code></li> <li>reduzierte Zeilenstufenform: Zus\u00e4tzlich gilt: Eine Spalte mit einer f\u00fchrenden <code>1</code>, darf nur noch <code>0</code> enthalten</li> </ul>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#losung-aus-zeilenstufenform","title":"L\u00f6sung aus Zeilenstufenform","text":"<ol> <li>Unterscheiden zwischen Spalten mit f\u00fchrenden <code>1</code> und mit freien Unbekannten.</li> <li>F\u00fcr alle freie Unbekannte kann ein Unbekannte gleichgesetzt werden (z.B. \\(\\lambda\\))</li> <li>Alle Zeilen mit einer f\u00fchrenden-<code>1</code> werden in eine Gleichung umgewandelt werden</li> </ol>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#losung-aus-reduzierter-zeilenstufenform","title":"L\u00f6sung aus reduzierter Zeilenstufenform","text":"<p>Das Resultat kann abgeschaut werden.</p>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#losbarkeit-von-lgs","title":"L\u00f6sbarkeit von LGS","text":"<p>\\(\\rg(A)=\\text{Anzahl Zeilen}-\\text{Anzahl Nullzeilen}\\) (in der Zeilenstuffen form)</p> <p>\\(n\\) ist die Anzahl Spalten von \\(A\\)</p> <p></p> <p></p> <p>Eigenschaften, wenn \\(rg(A)=n\\) gilt:</p> <ul> <li>\\(\\det(A)\\neq 0\\)</li> <li>\\(\\Leftrightarrow\\) Spalten sind linear unabh\u00e4ngig</li> <li>\\(\\Leftrightarrow\\) Zeilen sind linear unabh\u00e4ngig</li> <li>\\(\\Leftrightarrow rg(A)=n\\)</li> <li>\\(\\Leftrightarrow\\) A ist regul\u00e4r, bzw. invertierbar</li> <li>\\(\\Leftrightarrow A\\cdot \\vec x=\\vec 0\\) ist eindeutig l\u00f6sbar   </li> </ul>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#vektoren","title":"Vektoren","text":"<ul> <li>Ortsvektor   Ein Vektor \\(\\vec r(P)\\), welcher am Ursprung festgehaftet ist</li> <li>Nullvektor \\(\\vec 0\\)   Ein Vektor mit dem Betrag 0 und keiner Richtung</li> <li>Gegenvektor: \\(\\vec a\\rightarrow -\\vec a\\)</li> <li>Kollinear:   Wenn zwei Vektoren parallel sind oder \\(\\vec a = \\lambda \\cdot \\vec b\\)</li> <li>Komplanar   Drei Vektoren heissen komplanar, wenn es eine Ebene gibt, zu der alle drei parallel sind.</li> <li>Vektor zwischen zwei Punkten \\(\\vec{PQ}=\\begin{pmatrix}x_Q-x_P\\\\y_Q-y_P\\end{pmatrix}=\\vec r(Q)-\\vec r(P)\\)</li> </ul>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#linear-unabhangig","title":"Linear Unabh\u00e4ngig","text":"<p>Vektoren sind linear Unabh\u00e4ngig, wenn es nur eine M\u00f6glichkeit gibt mit einer Linearkombination \\(\\vec 0\\) zu erreichen: \\(\\lambda_1\\cdot \\vec a_1 + \\lambda_2 \\cdot \\vec a_2 + ... + \\lambda_n \\cdot \\vec a_n=\\vec 0\\)</p> <p>Eigenschaften die daraus folgen:</p> <ul> <li>\\(\\det(A)\\neq 0\\)</li> <li>\\(\\Leftrightarrow\\) die Inversematrix kann gebildet werden</li> <li>\\(\\Leftrightarrow\\) Spalten sind linear unabh\u00e4ngig</li> <li>\\(\\Leftrightarrow\\) Zeilen sind linear unabh\u00e4ngig</li> <li>\\(\\Leftrightarrow rg(A)=n=\\text{Anzahl Spalten}\\)</li> <li>\\(\\Leftrightarrow\\) A ist regul\u00e4r, bzw. invertierbar</li> <li>\\(\\Leftrightarrow A\\cdot \\vec x=\\vec 0\\) ist eindeutig l\u00f6sbar   </li> </ul>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#satze","title":"S\u00e4tze","text":"<ol> <li>Satz 1: Es l\u00e4sst sich der Vektor \\(\\vec c\\) als Linearkombination der Vektorn \\(\\vec a\\) und \\(\\vec b\\) im 2D-Raum darstellen, wenn</li> <li>\\(\\vec a\\), \\(\\vec b\\) und \\(\\vec c\\) komplanar sind</li> <li>\\(\\vec a\\) und \\(\\vec b\\) nicht kollinear sind</li> <li>Satz 2: Es l\u00e4sst sich den Vektor \\(\\vec d\\) als Linearkombinatino der Vektoren \\(\\vec a\\), \\(\\vec b\\) und \\(\\vec c\\) im 3D-Raum darstellen, wenn \\(\\vec a\\), \\(\\vec b\\) und \\(\\vec c\\) nicht komplanar sind</li> </ol>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#3d-koordinatensystem","title":"3D-Koordinatensystem","text":"","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#skalarprodukt","title":"Skalarprodukt","text":"<p>  $$ \\vec a \\cdot \\vec b = \\vert \\vec a \\vert \\cdot \\vert \\vec b\\vert \\cdot \\cos(\\varphi)\\ \\vec a \\cdot \\vec b=a_1b_1+a_2b_2+a_3b_3\\ \\varphi =cos^{-1}\\left(\\frac{\\vec a \\cdot \\vec b}{|\\vec a|\\cdot |\\vec b|}\\right)\\ \\vec a \\cdot \\vec b = 0\\Rightarrow \\varphi=90\u00b0=\\frac 2 \\pi $$ Folgende Gesetzte gelten:</p> <ul> <li>Kommuntativ-Gesetzt: \\(\\vec a \\cdot \\vec b=\\vec b \\cdot \\vec a\\)</li> <li>Distributive-Gesetzt: \\(\\vec a \\cdot (\\vec b + \\vec c)=\\vec a \\cdot \\vec b + \\vec a \\cdot \\vec c\\)</li> <li>Gemischtes Assoziativ-Gesetzt: \\(\\lambda\\cdot (\\vec a \\cdot \\vec b)=(\\lambda \\cdot \\vec a)\\cdot \\vec b=\\vec a \\cdot (\\lambda \\cdot \\vec b)\\)</li> <li>\\(\\vec a \\cdot \\vec a=\\vert \\vec a \\vert ^2\\)</li> </ul>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#orthogonale-projektion","title":"Orthogonale Projektion","text":"<p> $$ \\vec b_a =\\frac{\\vec a \\cdot \\vec b}{|\\vec a|^2}\\cdot \\vec a\\ |\\vec b_a|=\\frac{|\\vec a \\cdot \\vec b|}{|\\vec a|} $$</p>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#vektorprodukt","title":"Vektorprodukt","text":"<p>Folgende Gesetze gelten: </p> <ul> <li>\\(\\len {\\vec a \\times \\vec b}=\\len {\\vec a}\\cdot \\len {\\vec b}\\cdot \\sin(\\varphi)\\)</li> <li>\\(\\vec a \\times \\vec b\\) ist orthogonal zu \\(\\vec a\\) und \\(\\vec b\\)</li> <li>\\(\\vec a\\) und \\(\\vec b\\) sind kollinear, wenn \\(\\vec a \\times \\vec b=\\vec 0\\) gilt</li> <li>\\(\\vec a \\times \\vec a = \\vec 0\\)</li> <li>Antikommutativ-Gesetz: \\(\\vec a \\times \\vec b = -(\\vec b \\times \\vec a)\\)</li> <li>Distributiv-Gesetzt: \\(\\vec a \\times (\\vec b + \\vec c)=\\vec a \\times \\vec b + \\vec a \\times \\vec c\\) und \\((\\vec a + \\vec c)\\times \\vec c = \\vec a \\times \\vec c + \\vec b \\times \\vec c\\)</li> <li>Gemischtes Assoziativ-Gesetz: \\(\\lambda \\cdot (\\vec a \\times \\vec b)=(\\lambda \\cdot \\vec a)\\times \\vec b=\\vec a \\times (\\lambda \\cdot \\vec b)\\)</li> <li>Das Assoziative-Gesetzt gilt nicht: \\(\\vec a \\times (\\vec b \\times \\vec c)\\neq (\\vec a \\times \\vec b)\\times\\vec c\\)</li> <li>\\(\\vec a \\times \\vec b\\) ist die Fl\u00e4che eines Parallelogrammes aufgespannt durch \\(\\vec a\\) und \\(\\vec b\\) </li> </ul>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#gerade","title":"Gerade","text":"<ul> <li> <p>Parameterdarstellung \\(g: \\vec r(P)+ \\lambda \\cdot \\vec{PQ}\\)</p> </li> <li> <p>Zu Kordinatendarstellung umrechnen</p> <p>Als LGS schreiben und \\(\\lambda\\) eliminieren</p> </li> <li> <p>Kordinatendarstellung (nur in 2D)   \\(g: ax+by+c=0\\)</p> </li> <li> <p>Normalvektor \\(n=\\pmatrix{a \\\\ b}\\)     Normalvektor steht senkrecht auf der gerade</p> </li> <li> <p>Zu Paramterdarstellung umrechnen:     Zwei Punkte auf \\(g\\) finden und damit \\(\\vec{PQ}\\) berechnen</p> </li> <li> <p>Normierte Kordinatendarstellung (Nur in 2D)   Die L\u00e4nge des Normalvektors is \\(0\\). Um dies zu berechnen, den Normalvektor normieren (also durch die L\u00e4nge des Normalvektors teilen)</p> </li> </ul>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#wie-stehen-zwei-gerade-zueinander","title":"Wie stehen zwei Gerade zueinander","text":"","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#abstand-eines-punktes","title":"Abstand eines Punktes","text":"<p>TODO</p>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#ebene","title":"Ebene","text":"<ul> <li>Parameterdarstellung   \\(E: \\vec r(P)+\\lambda \\cdot \\vec{PR}+\\mu\\cdot \\vec{PQ}\\) </li> <li>Normalvektor \\(\\vec n = \\vec{PR}\\times \\vec{PQ}\\)</li> <li> <p>Zu Koordinatendarstelung umwandeln</p> <ul> <li>Variante 1   Normalvektor \\(\\vec n\\) ausrechnen und in Koordinatenform einsetzen.    Daraus ergibt sich eine Gleichung mit einer Unbekannte \\(d\\). Diese L\u00f6sen</li> <li>Variante 2   Die drei Gleichungen in einem LGS schreiben und \\(\\lambda\\) und \\(\\mu\\) eliminieren</li> </ul> </li> <li> <p>Koordinatendarstellung   \\(E: ax+by+cz+d=0\\)</p> </li> <li>Normalvektor: \\(\\vec n=\\pmatrix{a\\\\b\\\\ c}\\)     Normalvektor steht orthogonal auf der Ebene</li> <li> <p>Zu Parameterdarstellung umwandeln     Drei Punkte auf der Ebene finden und daraus die Parameterdarstellung bilden</p> </li> <li> <p>Normierte Koordinatendarstellung   Der Normalvektor \\(\\vec n\\) ist normiert (durch \\(\\vert \\vec n \\vert\\) geteilt) (\\(d\\) muss auch durch \\(|\\vec n |\\) geteilt werden)</p> </li> </ul>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#wie-stehen-zwei-ebene-zueinander","title":"Wie stehen zwei Ebene zueinander","text":"<ul> <li>Parallel: </li> <li> <p>Parameterdarstellung     \u00dcberpr\u00fcfen, ob die Richtungsvektoren komplanar zu einander sind</p> </li> <li> <p>Koordinatendarstellung     Es muss ein Faktor \\(p\\) in folgendem System geben $$     a_1=a_2\\cdot p\\     b_1=b_2\\cdot p\\     c_1=c_2\\cdot p\\     d_1\\neq d_2\\cdot p $$     Alternativ: Die Normalvektoren beider Ebenen  m\u00fcssen koolinear sein</p> </li> <li> <p>Identisch</p> </li> <li> <p>Parameterdarstellung     Wenn die zwei Ebenen gleichgesetzt werden, m\u00fcssen unendlich viele L\u00f6sungen, mit zwei nicht gefixte Grade, heraus kommen</p> </li> <li>Koordinatendarstellung:     F\u00fcr die Koordinatendarstellung muss folgendes g\u00fcltig sein (die letzte Gleichung ist anderst)</li> </ul> <p>$$   a_1=a_2\\cdot p\\   b_1=b_2\\cdot p\\   c_1=c_2\\cdot p\\   d_1=d_2\\cdot p   $$</p> <ul> <li> <p>Schneident</p> </li> <li> <p>Parameterdarstellung     Wenn die zwei Ebenen gleichgesetzt werden, m\u00fcssen unendlich viele L\u00f6sungen, mit einer nicht gefixte Grade, heraus kommen. Das Resultat ist eine Gerade in der Parameterdarstellung</p> </li> <li>Koordinatendarstellung     Die beiden Ebenen in dasselbe Gleichungssystem tun und zu einem Gauss umwandeln (\\(d\\) auf die andere Seite nehmen). Wenn dies aufgel\u00f6st wird, m\u00fcsste eine Geradegleichung dabei herauskommen</li> </ul>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#abstand-von-einem-punkt-zu-einer-ebene","title":"Abstand von einem Punkt zu einer Ebene","text":"\\[ \\text{Wenn die Ebene nicht normiert sind: } l=\\frac{|ax_A+by_A+cz_A+d|}{|\\vec n|}\\\\ \\text{Wenn die Ebene normiert ist: } l=|ax_A+by_A+cz_A+d| \\]","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#matrix","title":"Matrix","text":"<ul> <li>Null-Matrix: Eine Matrix mit nur Nullen</li> <li>Spalten-Matrix: Eine Matrix mit nur einer Spalte. Verh\u00e4lt sich gleich, wie ein Vektor</li> </ul> <p>Die folgenden Rechenregeln funktioniert f\u00fcr gleichgrosse Matrizen.</p> <ul> <li>Kommutativ-Gesetz: \\(A+B=B+A\\) (Geht NICHT bei Multiplikation)</li> <li>Assoziativ-Gesetzt: \\(A+(B+C)=(A+B)+C\\)</li> <li>Distributiv-Gesetzt: \\(\\lambda\\cdot(A+B)=\\lambda\\cdot A + \\lambda \\cdot B\\) </li> <li> <p>Aber Achtung: \\(\\lambda\\cdot A + B\\cdot \\lambda\\) kann nicht ausgeklammert werden (In k\u00f6nnte einfach \\(\\lambda \\cdot A\\) und \\(B\\cdot \\lambda\\) ausgerechnet werden)</p> </li> <li> <p>Distributiv-Gesetzt mit Transportierten Matrizen: </p> </li> <li>\\((A\\cdot B)^T=B^T \\cdot A^T\\) (Beachte die Reihenfolge von A und B)</li> <li>\\((A+B)^T=A^T+B^T=B^T+A^T\\)</li> <li>\\((A-B)^T=A^T-B^T=B^T-A^T\\)</li> </ul>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#transponierte-matrix","title":"Transponierte Matrix","text":"\\[ B= \\begin{bmatrix} 1 &amp; 2 &amp; 3\\\\ 3 &amp; 4 &amp; 5 \\end{bmatrix}\\\\ B^T= \\begin{bmatrix} 1 &amp; 3 \\\\ 2 &amp; 4\\\\ 3 &amp; 5 \\end{bmatrix} \\] <p>Es gilt folgendes Gesetzt: \\((A\\cdot B)^T=B^T\\cdot A^T\\) (Bemerke, dass sich die Reihenfolge von \\(A\\) und \\(B\\) sich \u00e4ndert)</p>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#inverse-matrix","title":"Inverse Matrix","text":"<p>Die inverse Matrix kann von einer Quadratischen-Matrix gebildet werden, bei welcher \\(\\det(A)\\neq 0\\) gilt $$ \\pmatrix{a &amp; b\\ c &amp; d}^{-1}=\\frac 1 {ad-bc}\\cdot \\pmatrix{d &amp; -b \\ -c &amp; a} $$</p> <p>F\u00fcr gr\u00f6ssere Matrizen folgendes Gleichungssystem muss aufgel\u00f6st werden: $$ \\pmatrix{     a_{11} &amp; a_{12} &amp; a_{13} \\      a_{21} &amp; a_{22} &amp; a_{23} \\      a_{31} &amp; a_{32} &amp; a_{33} }^{-1} \\Rightarrow  \\left(\\begin{array}{ccc|cr}     a_{11} &amp; a_{12} &amp; a_{13} &amp; 1 &amp; 0 &amp; 0\\      a_{21} &amp; a_{22} &amp; a_{23} &amp; 0 &amp; 1 &amp; 0\\      a_{31} &amp; a_{32} &amp; a_{33} &amp; 0 &amp; 0 &amp; 1 \\end{array}\\right ) $$</p>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#determinante","title":"Determinante","text":"<p>Wenn die Determinanten einer gr\u00f6sseren Matrix als 3x3 Berechnet werden soll, kann ein Verfahren nach Laplace eingesetzt werden:</p> <ol> <li> <p>Es wird eine feste Spalte oder Zeile gew\u00e4hlt</p> </li> <li> <p>Nun wird nach der folgenden Formel entwickelt:    $$    \\text{Entwicklung nach i-ten Zeilen: }\\det(A)=\\sum^n_{j=1} (-1)^{i+j}\\cdot a_{ij}\\cdot\\det(A_{ij})\\    \\text{Entwicklung nach j-ten Spalte: }\\det(A)=\\sum^n_{i=1} (-1)^{i+j}\\cdot a_{ij}\\cdot\\det(A_{ij})\\    $$    Dabei  ist \\(a_{ij}\\), das Element an \\(i\\)-ter Zeile und \\(j\\)-ter Spalte und \\(A_{ij}\\) die Matrix, bei welcher die \\(i\\)-te Zeile und \\(j\\)-Spalte weggelassen wurden</p> </li> </ol> <p> </p> <p>Der Determinante einer 2x2-Matrix, ist der Fl\u00e4cheninhalt des Parallelogrammes, wenn die Spalten als Vektoren aufgefasst werden. Der Determinante einer 3x3-Matrix ist der Volumeninhalt des Spates, von den Spalten der Matrix aufgespannt wird.</p> <p>Eigenschaften:</p> <ul> <li>Einheitsmatrix haben den Determinanten \\(1\\)</li> <li>F\u00fcr nxn Matrix gilt: \\(\\det(A\\cdot B)=\\det(A)\\cdot \\det(B)\\)</li> <li>F\u00fcr invertierbare Matrix gilt: \\(\\det(A^{-1})=\\frac 1 {\\det(A)}\\)</li> <li>F\u00fcr \\(A^T\\) gilt: \\(\\det(A^T)=\\det(A)\\)</li> </ul> <p>Wenn:</p> <ul> <li>\\(\\det(A)\\neq 0\\)</li> <li>\\(\\Leftrightarrow\\) Die Spalten und Zeilen sind linear unabh\u00e4ngig</li> <li>\\(\\Leftrightarrow \\rg(A)=n=m\\)</li> <li>\\(\\Leftrightarrow A\\) ist invertierbar</li> <li>\\(\\Leftrightarrow\\) Das LGS \\(A\\cdot \\vec x = \\vec c\\) hat eine eindeutige L\u00f6sung </li> <li>$\\Leftrightarrow $ Die Vektoren in \\(A\\) sind eine Basis</li> </ul>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#vektorraume","title":"Vektorr\u00e4ume","text":"\\[ +:V \\times V \\rightarrow V\\\\ \\cdot : \\R \\times V \\rightarrow V \\] <p>Dabei m\u00fcssen folgende Gesetze existieren:</p> <ul> <li>Kommutativgesetz: \\(a + b = b + a\\)</li> <li>Assoziativgesetzt: \\(a + (b + c)=(a + b) + c\\)</li> <li>Es gibt ein neutrales Element \\(\\vec 0\\), f\u00fcr welches gilt \\(a + 0v = \\vec a\\) und \\(0v \\in V\\)</li> <li>F\u00fcr jedes Element \\(a \\in V\\) muss es ein inverses Element \\(-a \\in V\\) geben, so dass \\(a + (-a) = 0v\\) ergibt.</li> <li>Assoziativgesetzt: \\(\\lambda \\cdot (\\mu \\cdot a) = (\\lambda \\cdot \\mu) \\cdot a\\)</li> <li>Distributivgesetzt: \\(\\lambda \\cdot(a + b) = \\lambda \\cdot a + \\lambda \\cdot b\\)</li> <li>Distirbutgesetzt: \\((\\lambda + \\mu)\\cdot a = \\lambda \\cdot a + \\mu \\cdot a\\)</li> <li>F\u00fcr jedes Element \\(a \\in V\\) gibt es ein neutrales Element \\(1\\cdot a = a\\),</li> </ul> <p>Allgemein bekannte Vektorr\u00e4ume:</p> <ul> <li>\\(\\R^n\\) - Vektorraum von allen Vekotren mit \\(n\\) reellen Komponente</li> <li>$ \\R^{m\\times n}$ - Vektorraum von allen reelen \\(m\\times n\\)-Matrizen</li> <li>\\(\\mathbb P_n[x]\\) - Vektorraum der Polynome von Grad \\(\\le n\\)</li> </ul>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#unterraume","title":"Unterr\u00e4ume","text":"<ul> <li>F\u00fcr beliebige Element \\(a, b \\in U\\) ist auch \\(a+b\\in U\\)</li> <li>F\u00fcr jeden Skalar \\(\\lambda \\in \\R\\) und jedes Element \\(a\\in U\\) ist auch \\(\\lambda \\cdot a\\in U\\)</li> <li>(Die neutralen Elemente der Addition und Skalarmultiplikation m\u00fcssen ebenfalls in \\(U\\) sein.)</li> </ul>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#linearer-spann","title":"Linearer Spann","text":"\\[ \\span(\\vec a_1, \\vec a_2 , ..., \\vec a_n)=\\lambda_1\\cdot \\vec a_n1 + \\lambda_2\\cdot \\vec a_2 + ... + \\lambda_n \\cdot \\vec a_n \\] <p>Jenachdem, wie viele linear unabh\u00e4ngige Vektoren gegeben sind, wird ein anderes geometrisches Objekt gebildet:</p> <ul> <li>Bei <code>1</code> Vektor, wird eine Ursprungs-Gerade gebildet</li> <li>Bei <code>2</code> Vektoren, wird eine Ursprungs-Ebene</li> <li>Bei <code>3</code> Vektoren, wird ein \"Ursprungs-K\u00f6rper\" gebildet</li> </ul>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#erzeugendensystem","title":"Erzeugendensystem","text":"<p>Eine Menge von Vektoren \\(\\{\\vec b_1, \\vec b_2, ..., \\vec b_N\\}\\), falls die Vektoren nicht komplanar und kolinear zueinander sind, bilden ein Erzeugendensystem von \\(V\\): \\(V=\\span(\\vec b_1, \\vec b_2, ..., \\vec b_n)\\)</p> <p>Ein Erzeugendensystem hat folgende eigenschaften: $$ \\begin{align} &amp; V=span(\\vec b_1, \\vec b_2, ..., \\vec b_n)\\ \\Leftrightarrow \\text{ } &amp; B\\cdot \\vec x = \\vec a \\text { f\u00fcr jedes } \\vec a \\in \\R^m\\ \\Leftrightarrow \\text{ } &amp; rg(B)=m = \\text{Anzahl Zeilen} \\end{align} $$</p>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#basis","title":"Basis","text":"<p>Eine Basis ist eine Menge von Vektoren, welche</p> <ul> <li>ein Erzeugendensystem sind </li> <li>linear unabh\u00e4ngig sind </li> </ul> <p>(Auf Deutsch: Es darf nur eine M\u00f6glichkeit geben, jeden Vektor zu Bilden)</p> <p>Es kann auch \u00fcberpr\u00fcft werden, ob \\(\\det(A)\\neq 0\\) ist (siehe Determinante)</p> <p></p> <p>Wichtige Basen:</p> <ul> <li>F\u00fcr \\(\\R^n\\) : \\(\\mathcal S=\\{\\vec e_1, \\vec e_2, ..., \\vec e_n\\}\\) - Standardbasis </li> <li>F\u00fcr \\(\\mathbb P_n[x]\\) \\(\\mathcal M=\\{1, x, x^2, ..., x^n\\}\\) - Monombasis</li> </ul> <p></p>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#dimension","title":"Dimension","text":"<p>Die Anzahl Vektoren in der Basis eines Vektorraumes: \\(\\dim(V)\\)</p> <p>Die Dimension von \\(\\{\\vec 0\\}\\) ist \\(0\\)</p>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#lineare-abbildung","title":"Lineare Abbildung","text":"<p>Eine Lineare Abbildung ist eine Funktion \\(f: V \\to W\\), welche folgende zwei Regeln einh\u00e4lt: $$ f(x+y)=f(x)+f(y)\\ f(\\lambda \\cdot x)=\\lambda \\cdot f(x) $$</p> <p>Eine lineare Abbildung kann auch als Matrix geschrieben werden. Um dies zu erreichen, gibt es zwei m\u00f6glichkeiten:</p> <ol> <li> <p>Die Einheitsvektoren in \\(f(x)\\) einsetzen und aus den Resultaten eine Matrix bauen </p> </li> <li> <p>Zeile f\u00fcr Zeile durchgehen und die Matrixzeilen davon ableiten    $$    A\\cdot\\pmatrix{x \\ y \\ z} = \\pmatrix{x\\ z - y \\ y - x \\ 2x - y} \\Rightarrow A = \\pmatrix{1 &amp; 0 &amp; 0 \\ 0 &amp; -1 &amp; 1 \\ -1 &amp; 1 &amp; 0 \\ 2 &amp; -1 &amp; 0}    $$</p> </li> </ol>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#basis-wechselnde-abbildung","title":"Basis-wechselnde Abbildung","text":"<p>\\(_CA_B\\) beschreibt die Lineare Abbildung \\(f: V_B \\to W_C\\) (Achtung Reihenfolge) und wird wie folgt gebraucht: \\(_CA_B\\cdot \\vec x_B=f(\\vec x)\\).</p> <p>Es kann wie folgt gebildet werden: </p> <p>Die Matrix \\((_CA_B)^{-1}={}_BA_C\\)</p>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#abbildung-in-der-ebene","title":"Abbildung in der Ebene","text":"","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#orthogonale-projektion-auf-eine-allgemeine-gerade-durch-den-ursprung","title":"Orthogonale Projektion auf eine allgemeine Gerade durch den Ursprung","text":"<p> Wenn auf eine Gerade projektiert werden soll, welche nicht die x-, y- oder z-Achse ist, muss folgende Formel verwendet werden. Dabei wird erwartet, dass die Gerade in der Kordinatendarstelung (\\(ax + by = 0\\)) normiert ist (\\(a^2 + b^2 = 1\\)). $$ P= \\begin{pmatrix} 1 - a^2 &amp; -ab\\ -ab &amp; 1-b^2 \\end{pmatrix}\\ \\text{Wobei gilt: }\\ ax + by = 0\\ a^2+ b^2 = 1 $$</p>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#spiegelung-an-einer-allgemeinen-gerade-durch-den-ursprung","title":"Spiegelung an einer allgemeinen Gerade durch den Ursprung","text":"<p>Wenn alle Vektoren bei einer Gerade, welche durch den Ursprung geht, gespiegelt werden soll, kann folgende Formel ben\u00fctzt werden. Dabei muss aber die Gerade in der Koordinatendarstellung (\\(ax + by=0\\)) normiert ist (\\(a^2+b^2 = 1\\)). $$ S= \\begin{pmatrix} 1 - 2a^2 &amp; -2ab\\ -2ab &amp; 1 - 2b^2 \\end{pmatrix}\\ \\text{Wobei gilt: }\\ ax + by = 0\\ a^2+ b^2 = 1 $$</p>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#abbildung-im-raum","title":"Abbildung im Raum","text":"","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#kern-und-bild","title":"Kern und Bild","text":"\\[ \\ker(A)=\\{\\vec x \\in V \\vert A\\cdot \\vec x = \\vec 0\\}\\\\ \\im(A)=\\span(\\vec a_1, \\vec a_2, ..., \\vec a_n)=\\{\\lambda_1 \\vec a_1 + \\lambda_2 \\vec a_2 + ... + \\lambda_n\\vec a_n \\vert \\lambda_k \\in \\R\\} \\] <p>Der Kern \\(\\ker(A)\\) besteht aus alle Vektoren \\(\\vec x\\), welche die Gleichung \\(A\\cdot \\vec x=\\vec 0\\) erf\u00fcllen</p> <p>Das Bild \\(\\im(A)\\) ist der Spalten der Vektoren von \\(A\\)</p> <p>Zus\u00e4tzlich gilt f\u00fcr \\(\\im(A)\\) und \\(\\ker(A)\\): $$ \\dim(\\ker(A)) + \\dim(\\im(A)) = \\dim(A)\\ \\dim(\\im(A)) = \\rg(A) $$ Um die Dimensionen zu bestimmen gibt es mehrere M\u00f6glichkeiten:</p> <ol> <li>Mit der Zeilenstuffenform von \\(A\\) den Rang ablesen. Von diesem kann die Dimension von \\(\\im(A)\\) abgelesen werden und dank des Satzes von oben auch \\(\\dim(\\ker(A))\\) bestimmen</li> <li>Da die Menge, welche von \\(\\ker(A)\\) zur\u00fcck gegeben werden, auch ein Unterraum ist, kann eine Basis mit \\(A\\) erstellt werden. Es m\u00fcssen alle Vektoren \\(a_i\\) gefunden werden, welche linear Unabh\u00e4ngig sind</li> </ol>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#verknupfung-von-abbildungen","title":"Verkn\u00fcpfung von Abbildungen","text":"\\[ g: V \\to W \\mapsto g(\\vec x)=A \\cdot \\vec x\\\\ f: U  \\to W \\mapsto f(\\vec x)=B \\cdot \\vec x \\\\ g(f(\\vec x)) = (g \\circ f)(\\vec x)=B \\cdot A \\cdot \\vec x \\]","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#rest-klassen","title":"Rest Klassen","text":"<p>In der Restklasse \\([x]_n\\) sind alle Zahlen \\(a\\), welche durch \\(n\\) geteilt den Rest \\(x\\) ergeben</p> Formel Erkl\u00e4rung \\(\\Z/n=\\{[z]_n\\|z\\in \\Z\\}\\) Die Menge aller Restklasse \\(\\Z^*_{/n}\\) Das Primes Restklassenssytem, welches nur die Restklassen enth\u00e4lt, welche zu n teilerfremd sind. Alle Restklassen in diesem System k\u00f6nnen multipliziert werden (Siehe Prime Restklassen) \\([z]_n=\\overline{z}\\) Die Restklasse, bzw. \u00c4quivalenzklasse mit dem Teiler n und dem Vertreter \\(z\\)","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#prime-restklassen","title":"Prime Restklassen","text":"<p>Prime Restklassen sind die Restklassen, welche ein Inverseselement f\u00fcr die Multiplikation besitzen. Dies wird mit einem Stern geschrieben, wie hier zu sehen: \\(\\Z_{/7}^{*}\\) .</p> <p>Beispiel:</p> <p>\\(\\Z^*_{/7}=\\{[1], [2], [3], [4], [5], [6]\\}\\)</p> <p>\\(\\Z^*_{/6}=\\{[1], [5]\\}\\)</p>","tags":["summary","LA"]},{"location":"22FS/LA/summary.html#modulare-arithmethik","title":"Modulare Arithmethik","text":"<p>f\u00fcr Multiplikation:</p> <ul> <li>neutrales Element: \\([1]_n\\)</li> <li>inverses Element:</li> <li>Nur Zahlen, welche teilefrmed sind (\\(ggT(Zahl, N)=1\\))</li> <li>Eine Zahl multipliziert mt ihrem inversen Element gibt \\(1\\)</li> <li>Kann mit dem Erweiterten Euklidischen Algorithmus berechnet werden:     \\(Zahlenbereich \\cdot x + Zahl \\cdot y=1\\) \\(\\Rightarrow y\\) ist das multiplikative Inverse. (Zahl muss kleiner sein als Zahlenbereich, sonst muss gewechselt werden)</li> </ul>","tags":["summary","LA"]},{"location":"22FS/PM2/Massnahmen.html","title":"Massnahmen","text":"<ul> <li>Zu begin haben Manuel und ich vermehrt unser Fachwissen eingebracht</li> <li>Dies hat sich \u00fcber PM1 ge\u00e4ndert. Tanija und Jonas konnten sich immer mehr einbringen</li> <li>Wir haten keinen Team-Leader</li> <li>Jemand, welcher den Progress des Projekts \u00fcberwacht, w\u00e4re sinvoll</li> <li>Wissensl\u00fccken haben versucht bei Design-Meetings zu stopfen</li> <li>Designs-Meetings beibehalten</li> <li>W\u00f6chtentliche Stand-Ups, um so den Fortschritt zu beobachten. Jemand soll \"T\u00e4tsch-Meister\" sein</li> <li> <p>Tickets mit Abh\u00e4ngikeites versehen; ev. sogar Gantt Diagram erstellen</p> </li> <li> <p>Projekt-Idee: Markdown-Editor mit Share-Features</p> </li> <li></li> </ul>"},{"location":"22FS/PM2/Pitch.html","title":"Pitch","text":"<p>Hallo,  Wir sind CodeBrewery. Ich darf vorstellen: Michael Ziegler, unser Wirtschaftsinformatiker. Er bringt Know-How \u00fcber die Budgetierung und das Finanzwesen. Ebenfalls Jonas Costa, welcher dank seiner Mediamatiker ausbildung Grafiken und Designs anfertigen kann. Manuel Thalman und Ich, Sebastian Zumbrunn haben beide einen Informatiker Hintergrund und bringen Technisches Know-How zu unserem Team. Zu viert hatten wir die Idee, ein virtuelles Haustier zu entwickeln. Dies wird Sie Tags \u00fcbers Bespassen und kann, dank einer App, Ihnen sogar auf einen Sparziergang Gesellschaft leisten. Daf\u00fcr brauchen wir aber Ihre Unterst\u00fctzung, um dies zu verwirklichen. Manuel Thalman wird Ihnen nun mehr \u00fcber unsere Idee erz\u00e4hlen. Bitte Manuel...</p> <p>Unser n\u00e4chstes Ziel ist ein ersten Prototyp zu entwickeln. ~~Dieser soll unsere Vision greifbarer machen.~~ Es wird bereits m\u00f6glich sein, ein Tomodachi auf seinen Desktop zu zaubern und damit zu interagieren. Ebenfalls wird es ab und zu von selbst Aktionen ausf\u00fchren, ~~wie z.B. ein Power-Nap einzulegen, um danach mit voller Energie Sie zu belustigen.~~ Um Ihnen dabei nicht in den Weg zu kommen, wird es m\u00f6glich sein, das Tomodachi mit dem Mauszeiger per Drag'n'drop zu verschieben. Auch werden wir ein Zuhause f\u00fcr das Tomodachi entwickeln, in welches es sich zur\u00fcck ziehen kann. </p> <p>Falls Sie Interesse an Ikitomo haben, w\u00e4ren wir froh, um Ihre Expertise, finanzielle Unterst\u00fcrzung und Ihr Netzwerk. </p> <p>Danke f\u00fcr Ihre Aufmerksamkeit...</p> <p>Unser n\u00e4chstes Ziel ist es ein ersten Prototyp zu entwickeln. In diesem soll Tomodachi auf dem Desktop herum laufen und es soll m\u00f6glich sein, damit zu interagieren. Per Drag'n'Drop muss es verschiebbar sein und von selbst, soll es ab und zu selbst Aktionen ausf\u00fchren. Auch soll es ein ein Zuhause f\u00fcr das Tomodachi geben, in welches es sich zur\u00fcck ziehen kann.</p>"},{"location":"22FS/PM2/Pitch.html#things-to-look-out-for","title":"Things to look out for","text":"<ul> <li>handover</li> <li> <p>sign posting (einerseit - anderseit. 1. 2. 3. ,...)</p> </li> <li> <p>handover expliziter gestalten (was das n\u00e4chste thema ist)</p> </li> <li>F\u00fcr mich, zu Beginn das Thema bereits sagen</li> <li>Wir sind, die, welche programmieren</li> <li>Konkurenz erw\u00e4hnen</li> </ul>"},{"location":"22FS/PM2/Projektskizze.html","title":"Projektskizze","text":""},{"location":"22FS/PM2/Projektskizze.html#ideen","title":"Ideen","text":"<ul> <li>UML Modelierungs app (zu gross)</li> <li>latex text editor (zu gross)</li> <li>markdown editor </li> <li>Care Taker App / Eat.ch f\u00fcr Lebensmittel?</li> <li> <p>Gantt</p> </li> <li> <p>Vorratsschrank Verwaltung</p> </li> <li>Buchhaltsungs App</li> <li>Hex-Editor (mit Pattern Matching)</li> <li>Sound Board</li> <li>Funny Voice Filter Program</li> <li>Desktop Pet</li> </ul>"},{"location":"22FS/PROG2/-1_Stuff.html","title":"Stuff","text":""},{"location":"22FS/PROG2/-1_Stuff.html#javadoc-l1","title":"Javadoc (L1)","text":"<p>Beschreiben Sie in Javadoc den Zweck der von Ihnen erstellten Klassen und Interfaces.</p> <p>Dokumentieren Sie ausserdem Methoden in Interfaces, abstrakte  Methoden sowie \u00f6ffentliche Methoden von Klassen, die die Rolle von  internen Schnittstellen einnehmen wie zum Beispiel Data Access Objects.  F\u00fcr Methoden ist es wichtig, dass der Javadoc-Kommentar den Vertrag  zwischen Methode und anwendendem Code beschreibt:</p> <ul> <li>Es ist erkl\u00e4rt, was die Methode macht.</li> <li>Es sind s\u00e4mtliche Vorbedingungen aufgelistet (z.B., dass Argument nicht <code>null</code> sein darf).</li> <li>Es sind s\u00e4mtliche Nachbedingungen aufgelistet (z.B., dass retournierte Collection nie <code>null</code> sein kann).</li> <li>Es ist jede Exception aufgelistet, die auftreten kann und in welcher Situation das passiert.</li> <li>Jeder Parameter ist beschrieben.</li> <li>Sofern sinnvoll ist der R\u00fcckgabewert beschrieben.</li> </ul> <p>F\u00fcr abstrakte Methoden ist ausserdem wichtig, dass Sie beschreiben, welche Erwartungen an eine Implementierung gestellt werden.</p>"},{"location":"22FS/PROG2/-1_Stuff.html#gute-commits-l2","title":"Gute Commits (L2)","text":"<p>Tim Pope hat 2008 auf seinem Blog beschrieben, was eine gute Commit-Nachricht f\u00fcr Git ausmacht. Und hat dazu diese Modell-Nachricht verfasst:</p> <pre><code>Capitalized, short (50 chars or less) summary\n\nMore detailed explanatory text, if necessary.  Wrap it to about 72\ncharacters or so.  In some contexts, the first line is treated as the\nsubject of an email and the rest of the text as the body.  The blank\nline separating the summary from the body is critical (unless you omit\nthe body entirely); tools like rebase can get confused if you run the\ntwo together.\n\nWrite your commit message in the imperative: \"Fix bug\" and not \"Fixed bug\"\nor \"Fixes bug.\"  This convention matches up with commit messages generated\nby commands like git merge and git revert.\n\nFurther paragraphs come after blank lines.\n\n- Bullet points are okay, too\n\n- Typically a hyphen or asterisk is used for the bullet, followed by a\n  single space, with blank lines in between, but conventions vary here\n\n- Use a hanging indent\n</code></pre> <p>\u2014 Tim Pope A Note About Git Commit Messages</p> <p>Folgen Sie seinem Rat, und Ihre History wird gleichzeitig informativ und einfach zu verfolgen sein:</p>"},{"location":"22FS/PROG2/00_Gradle.html","title":"Gradle","text":""},{"location":"22FS/PROG2/00_Gradle.html#dependencies","title":"Dependencies","text":"Command Explanation <code>implementation 'group:artifactId:version'</code> Dependenciy is needed to compile and run the project <code>testImplementation 'group:artifactId:version'</code> Dependency is only needed to compile and run tests <code>testRuntimeOnly 'group:artifactId:version'</code> Dependency is only needed durring the runtime of tests"},{"location":"22FS/PROG2/01_Concurrency.html","title":"Concurrency","text":""},{"location":"22FS/PROG2/01_Concurrency.html#types-of-concurrencies","title":"Types of Concurrencies","text":"<p>There are multiple types of concurrencies:</p> <ul> <li>True concurrency   On a computer with more multiple cores, each core can run a flow independently</li> <li>Interleaving concurrency   Each flow gets a slice of time. After that time the flow will be paused and the core will work on another flow.   The scheduler controls which core works on which flow</li> </ul>"},{"location":"22FS/PROG2/01_Concurrency.html#strategies-for-interlaving-concurrency","title":"Strategies for Interlaving Concurrency","text":"<ul> <li>Non-Preemptive (cooperative)</li> </ul> <p>The process releases the core voluntarily    Tyes: FCFS(First comes, first served), SNP(shortest process next). This was how it was in the olden days </p> <ul> <li>Preemtive    A scheduler can interrupt a process</li> </ul>"},{"location":"22FS/PROG2/01_Concurrency.html#program-vs-process-vs-thread","title":"Program vs Process vs Thread","text":"<p>A program is a sequence of instructions and can consists of multiple processes.</p> <p>A process executes a program or part of it and can consists of multiple threads. Each process has its own memory, uses IPC (Inter-Process-Communication) to communicate to other processes and switching between processes is expensive.</p> <p>A thread is part of a process and runs one flow. It shares its memory with the other threads in the same process and switching between thread is cheap.</p> <p></p>"},{"location":"22FS/PROG2/01_Concurrency.html#java-concurrency","title":"Java-Concurrency","text":""},{"location":"22FS/PROG2/01_Concurrency.html#thread","title":"Thread","text":"<ul> <li><code>Thread.sleep()</code> doesn't gurantee that sleep doesn't wake up early or late</li> <li><code>Object.yield()</code> will advice the scheduler to release the thread, but there is guarantee that the thread will be suspened</li> <li>With <code>Thread.currentThread</code> one can get the thread which runs the current thread</li> <li><code>Thread.stop()</code>, <code>Thread.suspend()</code> and <code>Thread.resume()</code> are depricated and potentialy unsafe</li> </ul>"},{"location":"22FS/PROG2/01_Concurrency.html#lifecycle-of-a-thread","title":"Lifecycle of a Thread","text":"<p>A Thread is considered \"alive\" and <code>Thread.isAlive()</code> will return true, when the Thread is either ready, running oder suspended (the blocks with the dotted outline). This means that <code>run</code> needs to start running before the Thread is alive.</p>"},{"location":"22FS/PROG2/01_Concurrency.html#executor-framework","title":"Executor Framework","text":""},{"location":"22FS/PROG2/01_Concurrency.html#verifybehaviormodel-neversetpositionanyexecutor-service","title":"verify(behaviorModel, never()).setPosition(any());Executor Service","text":"<p> An <code>Executor</code> just promises to execute a given task.</p> <p>An <code>ExecutorService</code> extends <code>Executor</code> to allow to shutdown the Executor and to track the progress and the state of a task. The <code>shutdownNow()</code> method uses <code>Thread.interrupt()</code> under the hood and is thus not deprecated.</p> <p>The <code>ScheduledExecutorService</code> extends the <code>ExecutorService</code> to allow a task to be scheduled. The method signitures of the new methods are: </p> <ul> <li><code>schedule(Runnable task, long delay, TimeUnit unit)</code>,</li> <li><code>scheduleAtFixedRate(Runnable task, long initialDelay, long period, TimeUnit unit)</code></li> <li><code>scheduleWithFixedDelay(Runnable task, long initialDelay, long delay, TimeUnit unit)</code></li> </ul>"},{"location":"22FS/PROG2/01_Concurrency.html#thread-pools","title":"Thread Pools","text":"<p>A thread pool uses multiple threads which are reused for multiple tasks. Thread pools usually use a queue to hold the tasks to be executed.</p> <p>A special kind of thread pool is a Blocking Queue, which when it's full, will reject newly submitted tasks.</p> <p>Most <code>Executor Services</code> use thread pools underneath.</p>"},{"location":"22FS/PROG2/01_Concurrency.html#different-executors","title":"Different Executors","text":"Executor Name Description <code>Executors.newSingleThreadExecutor()</code> Creates an Executor which only uses one thread <code>Executors.newFixedThreadPool(int numOfThreads)</code> Creates an Executor which has the given number of threads. Those thread will be reused <code>Executors.newCachedThreadPool()</code> Creates new threads as needed. It will retain Threads for an amount of time (approx. up to 60s) and will stop it after. <code>Executors.newScheduledThreadPoool(int numOfThreads)</code> Creates a new scheduled thread pool with the given number of threads. <code>Executors.newSingleThreadExecutor()</code> Creates a new scheduled executor with a single thread"},{"location":"22FS/PROG2/summary.html","title":"PROG2 Summary","text":"","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#gradle","title":"Gradle","text":"","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#concurrency","title":"Concurrency","text":"","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#types-of-concurrencies","title":"Types of Concurrencies","text":"<p>There are multiple types of concurrencies:</p> <ul> <li>True concurrency   On a computer with more multiple cores, each core can run a flow independently</li> <li>Interleaving concurrency   Each flow gets a slice of time. After that time the flow will be paused and the core will work on another flow.   The scheduler controls which core works on which flow</li> </ul>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#strategies-for-interlaving-concurrency","title":"Strategies for Interlaving Concurrency","text":"<ul> <li>Non-Preemptive (cooperative)</li> </ul> <p>The process releases the core voluntarily    Tyes: FCFS(First comes, first served), SNP(shortest process next). This was how it was in the olden days </p> <ul> <li>Preemtive    A scheduler can interrupt a process</li> </ul>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#program-vs-process-vs-thread","title":"Program vs Process vs Thread","text":"<p>A program is a sequence of instructions and can consists of multiple processes.</p> <p>A process executes a program or part of it and can consists of multiple threads. Each process has its own memory, uses IPC (Inter-Process-Communication) to communicate to other processes and switching between processes is expensive.</p> <p>A thread is part of a process and runs one flow. It shares its memory with the other threads in the same process and switching between thread is cheap.</p> <p></p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#java-concurrency","title":"Java-Concurrency","text":"","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#thread","title":"Thread","text":"<ul> <li><code>Thread.sleep()</code> doesn't gurantee that sleep doesn't wake up early or late</li> <li><code>Object.yield()</code> will advice the scheduler to release the thread, but there is guarantee that the thread will be suspened</li> <li>With <code>Thread.currentThread()</code> one can get the thread which runs the current thread</li> <li><code>Thread.stop()</code>, <code>Thread.suspend()</code> and <code>Thread.resume()</code> are depricated and potentialy unsafe</li> </ul> <pre><code>public static void main (String[] args) {\n    System.out.println(\"START: main\");\n    Thread java = new JoinThread(\"Java\");\n    Thread fiji = new JoinThread(\"Fiji\");\n    java.start();\n    fiji.start();\n    System.out.println(\"Wait for theads..\");\n    try {\n        java.join(); // blocks until java ends\n        fiji.join(); // blocks until fiji ends\n    } catch (InterruptedException e) {\n        System.out.println(\"Interrupted\");\n    }\n    System.out.println(\"DONE main\");\n}\n</code></pre>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#lifecycle-of-a-thread","title":"Lifecycle of a Thread","text":"<p>A Thread is considered \"alive\" and <code>Thread.isAlive()</code> will return true, when the Thread is either ready, running oder suspended (the blocks with the dotted outline). This means that <code>run</code> needs to start running before the Thread is alive.</p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#executor-framework","title":"Executor Framework","text":"<pre><code>// Example of a Sheduled Executor\npublic static void main(String[] args) {\n    ScheduledExecutorService scheduledExecutor = Executors.newScheduledThreadPool(2);\n\n    scheduledExecutor.execute(new ScheduledTask(0, System.currentTimeMillis()));\n    Future&lt;?&gt; future = scheduledExecutor.submit(new ScheduledTask(0, System.currentTimeMillis()));\n\n    scheduledExecutor.schedule(new ScheduledTask(1, System.currentTimeMillis()), 4, TimeUnit.SECONDS);\n    scheduledExecutor.scheduleAtFixedRate(new ScheduledTask(2, System.currentTimeMillis()),4,3,TimeUnit.SECONDS);\n\n    scheduledExecutor.scheduleWithFixedDelay(new ScheduledTask(3, System.currentTimeMillis()),2,3,TimeUnit.SECONDS);\n\n    try {\n        TimeUnit.SECONDS.sleep(20); // waiting for 20s\n    } catch (InterruptedException e) { }\n    scheduledExecutor.shutdown();\n}\n\nprivate static record ScheduledTask(int id, long starttime) implements Runnable {\n    @Override\n    public void run() {\n        System.out.println(\"Executing Task \" + id +\n        \" at \" + (System.currentTimeMillis()-starttime) + \" ms after start \" +\n        \" in Thread : \" + Thread.currentThread().getName());\n    }\n}\n</code></pre>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#executor-service","title":"Executor Service","text":"<p> An <code>Executor</code> just promises to execute a given task.</p> <p>An <code>ExecutorService</code> extends <code>Executor</code> to allow to shutdown the Executor and to track the progress and the state of a task. The <code>shutdownNow()</code> method uses <code>Thread.interrupt()</code> under the hood and is thus not deprecated.</p> <p>The <code>ScheduledExecutorService</code> extends the <code>ExecutorService</code> to allow a task to be scheduled. The method signitures of the new methods are: </p> <ul> <li><code>schedule(Runnable task, long delay, TimeUnit unit)</code>,</li> <li><code>scheduleAtFixedRate(Runnable task, long initialDelay, long period, TimeUnit unit)</code></li> <li><code>scheduleWithFixedDelay(Runnable task, long initialDelay, long delay, TimeUnit unit)</code></li> </ul>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#thread-pools","title":"Thread Pools","text":"<p>A thread pool uses multiple threads which are reused for multiple tasks. Thread pools usually use a queue to hold the tasks to be executed.</p> <p>A special kind of thread pool is a Blocking Queue, which when it's full, will reject newly submitted tasks.</p> <p>Most <code>Executor Services</code> use thread pools underneath.</p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#different-executors","title":"Different Executors","text":"Executor Name Description <code>Executors.newSingleThreadExecutor()</code> Creates an Executor which only uses one thread <code>Executors.newFixedThreadPool(int numOfThreads)</code> Creates an Executor which has the given number of threads. Those thread will be reused <code>Executors.newCachedThreadPool()</code> Creates new threads as needed. It will retain Threads for an amount of time (approx. up to 60s) and will stop it after. <code>Executors.newScheduledThreadPoool(int numOfThreads)</code> Creates a new scheduled thread pool with the given number of threads. <code>Executors.newSingleThreadExecutor()</code> Creates a new scheduled executor with a single thread","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#callable-and-futures","title":"Callable and Futures","text":"<pre><code>public interface Callable&lt;V&gt; {\n    V call() throws Exception;\n}\n</code></pre> <p>A <code>Callable</code> will return a result or an exception and can also be submitted to an <code>ExecutorService</code> and a <code>Future&lt;V&gt;</code> will be returned.</p> <pre><code>public static void main(String[] args) throws InterruptedException, ExecutionException, TimeoutException {\n    ExecutorService service = Executors.newSingleThreadExecutor();\n    Future&lt;String&gt; future = service.submit(() -&gt; \"Hello world\");\n    String result = future.get(); // waits until the future completes\n    result = future.get(1, TimeUnit.SECONDS); // will throw TimeoutException after 1 second\n    future.cancel(&lt;mayInterruptIfRunning&gt;); // will cancel the future\n    future.isDone(); // returs if the future is done\n    future.isCancelled(); // returns if the future was cancelled\n}\n</code></pre>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#patterns","title":"Patterns","text":"","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#wait-for-all-tasks-to-finish","title":"Wait for all Tasks to finish","text":"<pre><code>List&lt;Future&lt;?&gt;&gt; futureList = executorService.invokeAll(taskList);\nfor(Future&lt;?&gt; future : futureList) {\n    future.get(); // wait for each future\n}\n</code></pre>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#wait-for-the-fastest-task-to-finish","title":"Wait for the fastest task to finish","text":"<pre><code>String result = executorService.invokeAny(taskList);\n/*\nThe result of the task which completed first, is returned\n*/\n</code></pre>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#share-data-between-multiple-threads","title":"Share Data between Multiple Threads","text":"","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#atomic","title":"Atomic","text":"<p>Use the atomic data types, like <code>AtomicBoolean</code>, <code>AtomicInteger</code>, <code>AtomicLong</code>, <code>AtomicReference</code>, <code>AtomicIntegerArray</code>, <code>AtomicLongArray</code> or <code>AtomicReferenceArray</code>.</p> <pre><code>private static class Account {\n    private final int id;\n    private AtomicInteger balance;\n\n    public Account(int id, int initialAmount) {\n        this.id = id;\n        this.balance = new AtomicInteger(initialAmount);\n    }\n\n    public int getId() { return id; }\n\n    public int getBalance () {\n        return balance.get();\n    }\n\n    public void setBalance(int amount) {\n        this.balance.set(amount);\n    }\n\n    public void transferAmount (int amount) {\n        this.balance.addAndGet(amount);\n    }\n}\n</code></pre>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#synchronized","title":"Synchronized","text":"<pre><code>class Account {\n    private int balance;\n    public synchronized void transferAmount1(int amount) {\n        this.balance += amaount;\n    }\n\n    public void transferAmount2(int amount) {\n        synchronized(this) {\n            this.balance += amaount;\n        }\n    }\n\n    public synchronized static staticLock1() {\n        //do stuff\n    }\n    public static staticLock1() {\n        synchronized(Amount.class) {\n            // do stuff\n        }\n    } \n}\n</code></pre> <p>Never call an other synchronized method which uses a different object. This can cause a dead lock.</p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#monitor","title":"Monitor","text":"<p>A Java object can be used as a locked. </p> <pre><code>class FooBar {\n    private Object monitor;\n\n    public void test() {\n        synchronized(monitor) {\n            // waits for the monitor to be called with monitor.notify() or monitor.notifyAll()\n            monitor.wait();\n        }\n    }\n}\n</code></pre> <p><code>Object.wait()</code> blocks until <code>Object.notify()</code> or <code>Object.notifyAll()</code> is invoked on the same monitor object. <code>notify()</code> only wakes up one waiting Thread while <code>notifyAll()</code> will wake up all waiting threads.</p> <p><code>wait()</code> releases the monitor object. </p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#types-of-synchronization","title":"Types of Synchronization","text":"","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#mutual-exclusion","title":"Mutual Exclusion","text":"<p>Mutual Exclusion means that only only thread can access a shared resource at a time. This usually means, that a section of code needs to be locked (eg. with synchronize) until the thread is done with that code.</p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#conditional-synchronization","title":"Conditional Synchronization","text":"<p>Conditional synchronization is needed when one thread waits for an event to happen in another thread. This is basicly the Producer-Consumer \"Pattern\". The order of events or operations is critical.</p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#producer-consumer","title":"Producer-Consumer","text":"<p>The producer produces some data which can be consumed by the consumer. The consumer tries to access the resource. If it is already ready, then it can just continue. If not it will <code>wait()</code> for the producer to <code>notify()</code> its monitor after which it can access the resource.</p> <p>The producer thread might needs to throttle itself to avoid loosing results when no consumer can consume them.</p> <p></p> <p>Here is an example for a consumer-producer example: The <code>while</code> loop is necessary because when the thread calls <code>wait()</code> it releases the monitor the synchronize block and an other thread can enter the synchronize block and call <code>wait()</code>.</p> <p></p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#synchronized-queue","title":"Synchronized Queue","text":"<p>With a queue the problem of the consumer and producer can be abstracted into a separate class to make it less brittle. Implementing the following becomes trivial:</p> <ul> <li>The producer fills the queue with data</li> <li>The consumer retrieves the data from the queue if available</li> <li>The consumer waits only if the queue is empty</li> <li>The producer waits when the queue is full</li> </ul> <p></p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#locks-and-conditions","title":"Locks and Conditions","text":"<p>A <code>Lock</code> is like a monitor object but instead of using <code>synchronize</code> the methods <code>lock()</code> and <code>unlock()</code> are used (in a try-finally-block). </p> <p>Additionally <code>Conditions</code> can be created with <code>Lock.newCondition()</code>. A condition is connected to its lock and can only be interacted with when its lock is locked. A Condition has <code>await()</code>, <code>signal()</code> and <code>signallAll()</code>, which behaviour like <code>Object.wait()</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code>. The advantage of Conditions is, that each lock can have multiple conditions. </p> <p>With <code>ReentrantLock.hasWaiters(Condition)</code> can be checked, if a thread currently waits for a condition.</p> <p></p> <pre><code>public class ConditionalSyncQueue&lt;E&gt; {\n    private Lock mutex = new ReentrantLock();\n    private Condition notEmpty = mutex.newCondition();\n    private Condition notFull = mutex.newCondition();\n    private LinkedList&lt;E&gt; queue = new LinkedList&lt;E&gt;();\n    private int capacity = 5;\n\n    public void add (E item) throws InterruptedException {\n        mutex.lock(); // enter critical section\n        try { // condition 1: queue not full\n            while(queue.size() &gt;= capacity) {\n                notFull.await();\n            }\n            queue.addLast(item);\n            notEmpty.signal();\n        } finally {\n            mutex.unlock(); // exit critical section\n        }\n    }\n\n    public E remove() throws InterruptedException {\n        E item = null;\n        mutex.lock(); // enter critical section\n        try { // condition 2: queue not empty\n            while (queue.empty()) {\n                notEmpty.await();\n            }\n            item = queue.removeFirst();\n            notFull.signal();\n        } finally {\n            mutex.unlock(); // exit critical section\n        }\n        return item;\n    }\n}\n</code></pre>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#readwritelocks","title":"ReadWriteLocks","text":"<p>A <code>ReadWriteLock</code> is like a <code>Lock</code> but it provides 2 <code>Lock</code> instances:</p> <ul> <li>A write lock: When locked, neither locks are lockable anymore</li> <li>A read lock: When locked, the write lock won't be lockable</li> </ul> <p></p> <p>The <code>ReentrantReadWriteLock</code> has the methods <code>readLock()</code> and <code>writeLock()</code> which return the respective lock instance.</p> <p>This helps reduce the performance impact of synchronizing.</p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#problems-of-lack-of-synchronization","title":"Problems of lack of Synchronization","text":"","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#lost-update","title":"Lost Update","text":"<p>A lost update happens when an write/update was overridden by another thread.</p> <p></p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#deadlocks","title":"Deadlocks","text":"<p>A deadlock occurs when two threads wait for a resource, which is locked by the other thread. It can only occur when all of the following conditions are meth:</p> <ol> <li>Mutual Exclusion: Each resource is available only once</li> <li>Hold and Wait Condition: A thread which already blocks a resource, claims additional resources</li> <li>No Preemption: A blocked resource cannot be taken away by the OS</li> <li>Cyclic waiting Conditions: A chain of processes exists which are waiting for a resource, which is blocked by a successor in the chain</li> </ol>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#how-to-avoid-dead-locks","title":"How to avoid Dead Locks","text":"<p>Generally avoiding shared resources will avoid dead locks as well. This however isn't always possible.  In those cases, insure that a resource is always locked in the same order,</p> <pre><code>public static void transfer(Account from, Account to, int amount) {\n    boolean isLower = from.getId() &lt; to.getId();\n    Account lowerAccount = isLower ? from : to;\n    Account higherAccount = !isLower ? from : to;\n    synchronized( lowerAccount ) {\n        synchronized( higherAccount ) {\n            from.transferAmount(-amount);\n            to.transferAmount(amount);\n        }\n    }\n}\n</code></pre> <p>Another solution is to program a special case for one of the resource which will access the resources in the reverse direction (see Dining Philosophers)</p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#dining-philosophers","title":"Dining Philosophers","text":"<p>There are 5 Philosophers. Each philosophers can either eat or think. For eating a philosopher needs two forks, but there are only 5 forks in total, so not everybody can eat at the same time.</p> <p></p> <p>A naive solution would first let the philosophers take the right and then the left fork. This would result in everybody holding a fork in the right hand and waiting for a fork to be available resulting in a dead lock.</p> <p></p> <p>To prevent this cyclic waiting condition the abstract can be change to always take and release two forks as one atomic action. The situation above should never happen.</p> <p>A second solution is to change the behavior of one philosopher to first take the left and then the right fork.</p> <p></p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#gui","title":"GUI","text":"","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#scene-graph","title":"Scene Graph","text":"<p>A scene Graph is a cycle free graph of nodes. It contains one root node.</p> <p></p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#panes","title":"Panes","text":"<ul> <li> <p>Group   All children keep their size and it is just large enough to contain all children</p> </li> <li> <p>Region   Is the base class of all panes and controlls and defines minimum, maximum and desired size</p> </li> <li> <p>Pane   The size of the pane and the layout of its children can be manually set; clipping is possible</p> </li> <li> <p>HBox/VBox   Aligns the children horizontally or vertically   </p> </li> <li> <p>BorderPane   Defines 5 regions. Nodes are added by <code>setCenter(Node)</code>, <code>setLeft(Node)</code>, ...</p> </li> <li> <p>GridPane   The children are aranged in a table. Nodes are added with <code>add(Node, column, row)</code></p> </li> <li> <p>FlowPane   Automaticly aranges nodes in a new row/column, when the size of the pane is filled.</p> </li> <li> <p>AnchorPane</p> </li> </ul> <p>Nodes can be anchored to multiple edges. This allows for a flexible layout. A node is added with <code>getChildren().add(Node)</code> and can be attached to an edge with <code>setTopAnchor(Node, distance)</code>, <code>setLeftAnchor(Node, distance)</code>, <code>setBottomAnchor(Node, distance)</code> and <code>setRightAnchor(Node, distance)</code>.</p> <ul> <li>TilePane    Every Node gets the same amount of space in a grid. Like in a <code>FlowPane</code>, nodes are wrapped to the next line if the size of the pane is filled. Either a max tile size is set or the biggest child is used as a reference. Nodes are added with <code>getChildren().add(Node)</code>.</li> </ul>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#menus","title":"Menus","text":"<p>The root is <code>MenuBar</code> which contains <code>Menu</code>s  (contain other Menus oder MenuItems) or <code>MenuItem</code>s (contains text and/or graphics), like <code>CheckMenuItem</code> or <code>RadioMenuItem</code></p> <pre><code>MenuBar menuBar = new MenuBar();\nMenu fileMenu = new Menu(\"File\");\nmenuBar.getMenus().add(fileMenu);\n\nMenuItem quitMenuItem = new MenuItem(\"Quit\");\nfileMenu.getItems().add(quitMenuItem);\nImage quitImage = new Image(getClass().getClassLoader().getResourceAsStream(\"quit-icon.png\"));\nquitMenuItem.setGraphic(new ImageView(quitImage));\nquitMenuItem.setAccelerator(KeyCombination.keyCombination(\"ESC\"));\nquitItem.setOnAction(new EventHandler&lt;ActionEvent&gt;() {\n    public void handle(ActionEvent e) { Platform.exit(); }\n});\n// or as lambda expression\nquitMenuItem.setOnAction(e -&gt; Platform.exit());\n\nCheckMenuItem bookMenu = new CheckMenuItem(\"Book\");\nbookMenu.setSelected(true);\nfileMenu.getItems().add(bookMenu);\n</code></pre>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#events","title":"Events","text":"<p>An event has two phases:</p> <ol> <li>Event Capturing Phase:    The event is passed up from the origin node to the stage. On each node, its <code>EventFilter</code> is invoked</li> <li>Event Bubbling Phase    The event is passed back up from the stage to the origin node. On each node, its <code>EventHandler</code> is called.</li> </ol> <p>An event handler can be added to a node via their respective methods:</p> <pre><code>Button button = new Button(\"test\");\nbutton.setOnAction((ActionEvent event) -&gt; {});\nbutton.setOnAction(new EventHandler&lt;ActionEvent&gt; {\n    @Override\n    public void handle(ActionEvent event) {}\n});\nbutton.setOnMouseClicked((MouseEvent event) -&gt; {});\n</code></pre> <p>All event handlers are <code>EventHandler&lt;? extends Event&gt;</code></p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#demo-app","title":"Demo App","text":"<pre><code>public class App extends Application {\n    @Override\n    public void start(Stage primaryStage) throws Exception {\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"test.fxml\"));\n        Parent parent = loader.load();\n        Scene scene = new Scene(parent);\n        stage.setTitle(\"Test\");\n        stage.setScene(scene);\n        stage.setMinWidth(400);\n        stage.setMinHeight(600);\n        // if this is  a new stage\n        stage.initOwner(parentStage);\n        // disables events for owner windows only\n        stage.initModality(Modality.WINDOW_MODAL);\n        // disables events for all app windows\n        stage.initModality(Modality.WINDOW_MODAL);\n        stage.show();\n        // or stage.showAndWait(); to block until modal window is closed\n        // create new Stage (primaryStage= new Stage()) to open a new window\n    }\n}\npublic class Controller {\n    @FXML\n    private BorderPane rootPane;\n\n    @FXML\n    public void initialize() {\n        rootPane.setStyle(\"-fx-bakground-color: red;\");\n        rootPane.setLayoutX(0);\n        rootPane.setLayoutY(0);\n    }\n}\n</code></pre>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#mvc","title":"MVC","text":"<p>Model: Contains the data with the domain logic, but it has to be independent from the View-Classes.</p> <p>View: The UI components which render the data. The view doesn't call the model directly (usually), but it knows about the types of the model (for example via generics).</p> <p>Controller: The glue between the model and the UI. It listens to events from the UI and calls the model accordingly</p> <p></p> <p>The benefits of this pattern are:</p> <ul> <li>Independent development and testing of model and UI</li> <li>Its possible to have multiple views and controllers for one model</li> <li>Changes to the UI or model are far easier</li> </ul>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#fxml","title":"FXML","text":"","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#properties-and-bindings","title":"Properties and Bindings","text":"<pre><code>IntegerProperty prop = new SimpleIntegerProperty(3);\nprop.addListener(new ChangeListener&lt;Number&gt;() {\n    public void changed(ObservableValue&lt;? extends Integer&gt; o, Number oldVal, Number newVal) {}\n});\nprop.getValue(); // returns the value\nprop.setValue(4); // sets the value\nprop.bind(otherProp); // binds the prop to the otherProp\nprop.bindBidirectional(otherProp); // binds the two properties bidirectionally\n</code></pre>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#initialize","title":"Initialize","text":"<p>The method <code>initialize()</code> can be annotated with <code>@FXML</code> and will be called when the controller is initialized.</p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#testing","title":"Testing","text":"<p>Testing is the process of executing a programm with the intent of finding errors.</p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#principles-of-testing","title":"Principles of Testing","text":"<ol> <li>Specification of Input and Output    For each test case the input and the expected output should be specified.</li> <li>Separation of Creation and Testing    The developer of the code shouldn't write the test for their code.</li> <li>Completeness of Tests    Code should always be tested for valid inputs and invalid tests. The natural tendency is to test only the valid inputs.</li> <li>Testing is an investement    Test cases are reused</li> <li>Error Cluster    If an error is found in a section of code,  the probability of more errors increases. Error-prone Sections should be well tested.</li> </ol>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#mock-testing","title":"Mock Testing","text":"<p>Mock testing is used when a class with dependencies should be tested. The dependencies can be mocked that it implements the minimal of behaviour to function. This allows to only test the class under testing and not its dependencies.</p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#different-mocking-types","title":"Different Mocking Types","text":"<p>There are different type of mock classes.</p> <p></p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#dummy","title":"Dummy","text":"<p>Dummies are objects which are never used. They fill parameter lists of methods, if those methods would throw NullPointerExceptions otherwise.</p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#stubs","title":"Stubs","text":"<p>A stub is the minimal implementation of an interface. Void method usually don't do anything and methods with a return value will usually return a hard coded value.</p> <p>Here is an example.</p> <pre><code>public class EmailStub implements EmailServer {\n    public void sendMail(String mailTextt) {\n        // do nothing\n    }\n\n    public String receiveMail() {\n        return \"Mail received\"; // a hard coded value\n    }\n}\n</code></pre> <p>An <code>EmailDummy</code> would return <code>null</code> in <code>receiveMail()</code> because it is just a dummy.</p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#spies","title":"Spies","text":"<p>Spies are similar to stubs, but record which members were invoked. This information can be checked in unit tests.</p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#fakes","title":"Fakes","text":"<p>A fake will implement a class similar to the production class but with shortcuts (e.g. an in-memory database)</p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#mock","title":"Mock","text":"<p>A test double which implements the functions in away which we expect for the test. Depending on how they are implemented, they can function as a dummy, stub, spy or a fake.</p> <p>Mock testing is usually split in multiple phases: </p> <ol> <li>Create: The mock object is created</li> <li>Specify: The expected behaviour is specified</li> <li>Use: The mock object is used in a normal unit test</li> <li>Verify behaviour: The mock object is verified</li> </ol> <pre><code>public class OrderInteractionTester extends MockObjectTestCase {\n    private static String TALISKER = \"Talisker\";\n    public void testFillingRemovesInventoryIfInStock() {\n        // configuration\n        Order order = new Order(TALISKER, 50);\n        Mock warehouseMock = new Mock(Warehouse.class);\n        // expectations\n        warehouseMock\n            .expects(once())\n            .method(\"hasInventory\")\n            .with(eq(TALISKER),eq(50))\n            .will(returnValue(true));\n        warehouseMock\n            .expects(once())\n            .method(\"remove\")\n            .with(eq(TALISKER), eq(50))\n            .after(\"hasInventory\");\n        //exercise\n        order.fill((Warehouse)warehouseMock.proxy());\n        //verify\n        warehouseMock.verify();\n        //verify expected behavior\n        assertTrue(order.isFilled()); //verify state\n    }\n}\n</code></pre>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#blacking-box-vs-white-box-testing","title":"Blacking-Box vs White-Box Testing","text":"<p>In black-box testing (or state testing), only the public interface is known. No assumptions is done about the internal implementaiton. Usually stubbing can be used.</p> <p>In white-box testing (or behaviour testing) the inner working of the class is known and tested. Here, usually mocking can be used.</p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#mockito","title":"Mockito","text":"","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#create-a-mock","title":"Create a Mock","text":"<p>Either the method <code>mock(Class&lt;?&gt; clazz)</code> is used or the annotation <code>@Mock</code> for which <code>MockitoAnnotations.openMocks()</code> needs to be called in the setup method.</p> <pre><code>void testHalf(@Mock Half mockedHalf2) {\n    Half mockedHalf = mock(Half.class);\n}\n</code></pre>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#mock-behaviour","title":"Mock Behaviour","text":"<p>To mock the return value of methods, the <code>when(&lt;method&gt;).thenReturn(&lt;value1&gt;).thenReturn(&lt;value2&gt;)</code> pattern can be used. When the returned value should have a bit more logic than a constant value, the <code>thenAnswer(Answer&lt;T&gt;)</code> method can be used (see example below).</p> <p>To mock an exception throwing method, the <code>doThrow(&lt;exception&gt;).when(&lt;mockObj&gt;).&lt;method&gt;(&lt;args&gt;)</code> pattern needs to be used. The method must support throwing the exception in case of an checked-exception.</p> <p>There are multiple matchers available, which can match an argument of a mocked method:</p> <ul> <li>Any-matchers: <code>anyInt()</code>, <code>anyString()</code>, <code>any(Class&lt;?&gt; clazz)</code>, ...</li> <li>String-matchers: <code>startsWith(String)</code>,  <code>endsWith(String)</code>, <code>contains(String)</code>, ...</li> <li>Object-matchers: <code>isNull()</code>, <code>isNotNull()</code>, ...</li> <li>Compare-matchvers: <code>eq(T obj)</code>, ...</li> <li>Custom-matchers: <code>argThat()...</code>, <code>intThat(...)</code>, ...</li> </ul> <pre><code>Person mock = mock(Person.class);\n\n// mock return values\nwhen(mock.getName()).thenReturn(\"Hans\").thenReturn(\"Max\");\ndoReturn(10).doReturn(20).when(mock).getAge();\nwhen(mock.getMessage(anyString())).thenAnswer((InvocationOnMock invocation) -&gt; \"hello world\");\n\n// mock exception throwing\ndoThrow(new IllegalArgumentException()).when(mock).setAge(-1);\n</code></pre> <p>When an method isn't mocked, then a value is still returned based on the return value:</p> <ul> <li>The return value is an primitive: The \"zero\"-primitive is returned</li> <li>The return value is a primitive wrapper class: Then the \"zero\"-primitive of the wrapper class is returned</li> <li>The return value is a collection: The return value is an empty collection</li> <li>For the toString() method an description of the mock is returned</li> <li>For <code>Comparable#compareTo(T other)</code> returns zero if the references are equal, else a non-zero value</li> <li>Else: <code>null</code> is returned.</li> </ul>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#verify-behaviour","title":"Verify Behaviour","text":"<p>Mockito can verify that a method was invoked. For this, the pattern <code>verify(&lt;mock&gt;).&lt;method&gt;(&lt;args&gt;)</code> can be used. With an additional argument of verify, further conditions can be specified. With <code>verify(&lt;mock&gt;, never()).&lt;method&gt;(&lt;args&gt;)</code> can be checked that the method was never invoked. Other condition includes <code>never()</code>, <code>times(int)</code>, <code>atLeastOnce()</code>, <code>atLeast(int)</code>, <code>atMost(int)</code>, <code>timeout(int milliseconds)</code> (that the method is invoked in the given timeout). These conditions can be combined like <code>timeout(10).times(2)</code></p> <p>Mockito can also verify the order in which methods were called. For this a <code>InOrder</code> object can be created with <code>inOrder(&lt;mockObj&gt;)</code>. On the <code>InOrder</code> object, the <code>verify(...)</code> method can be used.</p> <pre><code>verify(mockedHalf).contractAtrium();\nverify(mockedHalf, times(2)).isAtrioventricularValveOpen();\nverify(mockedList, never()).add(\"ZHAW\");\n\nInOrder inOrder = inOrder(singleMock);\n// Verify the order\ninOrder.verify(singleMock).add(\"second\"); \ninOrder.verify(singleMock).add(\"first\");\n</code></pre>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#spies_1","title":"Spies","text":"<p>A spy object is created based on a \"real\" object. All methods are delegated to this object, but the behaviour of methods can be selectively changed (similar with mocks) and it can verify than methods were called. It can be created with <code>spy(Object obj)</code> and can be used like a mock. Similar to <code>@Mock</code> the <code>@Spy</code> annotation can be used instead of <code>spy(...)</code> (<code>MockitoAnnotations.openMocks()</code> needs to be called in the setup method).</p> <pre><code>List list = new LinkedList();\n// create a spy on the real object instance\nList spy = spy(list);\n// stub the size() method\nwhen(spy.size()).thenReturn(100);\n// add() is not stubbed. So it will use the real method\nspy.add(\"one\"); spy.add(\"two\");\nassertEquals(\"one\", spy.get(0));\nassertEquals(100, spy.size());\n</code></pre>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#io","title":"IO","text":"","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#serializing","title":"Serializing","text":"<p>In order for an object to be serializable in needs to implement the marker interface <code>Serializable</code>.</p> <p></p> <p>Fields can be marked with transient (<code>private transient Date someDate;</code>) if they shouldn't be serialized. This can be usefull for serializing classes which contain unserializable classes (like dates, file descriptor, network sockets or db connections).</p> <pre><code>Employee harry = new Employee(\"Dirty Harry\", 50000, LocalDate.of(1967, 3, 11));\nManager boss = new Manager(\"Walter Smith\", 80000, LocalDate.of(1950, 12, 4)); // Manager is extending Employee\nboss.setAssistant(harry); \n\n// Save (serialize) two objects to the file empolyee.dat\ntry (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(\"employee.dat\"))) {\n    // objects are written in the given order to the file\n    out.writeObject(harry); // write object Dirty Harry\n    out.writeObject(boss); // write object Walter Smith\n    out.writeInt(12); // write value of primitive type int\n}\n// Load (deserialize) two objects from the file employee.dat\ntry (ObjectInputStream in = new ObjectInputStream(new FileInputStream(\"employee.dat\"))) {\n    // number and order of reading the objects must match, also the type must be compatible (match or super class)\n    Employee e1 = (Employee) in.readObject(); // object for Dirty Harry\n    Employee e2 = (Employee) in.readObject(); // object for Walter Smith\n    // e2.getClass().getName() would return type Manager\n    int count = in.readInt(); // read primitive type int\n}\n</code></pre>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#io-streams","title":"IO Streams","text":"<p>A byte stream can be converted to a char stream with <code>InputStreamReader</code> and <code>OutputStreamWriter</code> respectively.</p> <p></p> <p><code>InputStream</code>  and <code>Readers</code> usually allow to skip a number of bytes/chars with <code>skip(long n)</code>. However, <code>OutputStream</code>s  and <code>Writer</code>s don't allow removing or inserting into a file, only appending (<code>FileOutputStream(File file, boolean append)</code>) or replacing is supported.</p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#randomaccessfile","title":"RandomAccessFile","text":"<p>Allows reading from anywhere in the file, not just skipping bytes like an <code>InputStream</code>. This can be done with the <code>seek(long pos)</code> or the <code>skipBytes(long n)</code> methods.</p> <pre><code>// create file and write some data into it\nFile f = new File(\"randomaccessfile.txt\");\ntry (BufferedWriter bw = new BufferedWriter(new FileWriter(f,true))) {\n    for(int i=2; i&lt;=10; i++) { \n        if( i%2 == 0) { \n            bw.write(Integer.toString(i)); bw.newLine(); \n        } \n    }\n}\ntry (RandomAccessFile randomFile = new RandomAccessFile(f,\"rw\")) { // read-write mode\n    for(int i=1; i&lt;=5; i++){\n        randomFile.seek(randomFile.length()); // set file pointer to end of file (EOF)\n        randomFile.writeBytes(Integer.toString(i)); // append \"1\",\"2\",\"3\",\"4\",\"5\" at EOF\n    }\n}\ntry (RandomAccessFile randomFile = new RandomAccessFile(f, \"r\")) { // read-only mode\n    int i = (int) randomFile.length(); // get length of file in bytes\n    System.out.println(\"Length: \" + i);\n    randomFile.seek(i-3); // set file pointer to EOF-3 bytes\n    for(int ct = 0; ct &lt; 3; ct++){\n        byte b = randomFile.readByte(); // read byte(s)\n        System.out.println((char)b);\n    }\n}\n</code></pre>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#charset","title":"Charset","text":"<p>An instance of <code>Charset</code> can be either obtained by <code>Charset.forName(&lt;name&gt;)</code>, <code>Charset.getDefaultCharset()</code> or <code>Charset.getAvailableCharsets()</code>. Alternatively <code>StandardCharsets.UTF_8</code> can be used.</p>","tags":["summary","PROG2"]},{"location":"22FS/PROG2/summary.html#logger","title":"Logger","text":"<p>Each <code>Logger</code> instance has a list of <code>Handlers</code>. A <code>Handler</code> can be used by multiple <code>Loggers</code> and handles the storing of the logging messages (like writing it to a file, or displaying in the console). Both the <code>Logger</code> and the <code>Handler</code> have a Level. And each will only forward messages which have a level higher than their configured level. </p> <p>The possible levels are: <code>SEVERE(1000)</code>, <code>WARNING(900)</code>, <code>INFO(800)</code>, <code>CONFIG(700)</code>, <code>FINE(500)</code>, <code>FINER(400)</code>, <code>FINEST(300)</code>.</p> <p></p> <p>The following properties file is an example logging configuration.</p> <pre><code>## configure handlers\njava.util.logging.ConsoleHandler.level = ALL\n## File handler configuration\n## see https://docs.oracle.com/en/java/javase/11/docs/api/java.logging/java/util/logging/FileHandler.html\njava.util.logging.FileHandler.level = ALL\n# %g = generation number, %u = unique number to resolve conflicts\njava.util.logging.FileHandler.pattern = log-%g-%u.log\n# use SimpleFormatter instead of default XMLFormatter\njava.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter\njava.util.logging.FileHandler.encoding = UTF-8\n# max log file size in byte before switching to next generation (=1kB); 0 = unlimited\njava.util.logging.FileHandler.limit = 1024\n# max number of generations (%g) before overwriting (5 -&gt; 0..4)\njava.util.logging.FileHandler.count = 5\njava.util.logging.FileHandler.append = true\n## configure Formatter (see SimpleFormatter documentation)\njava.util.logging.SimpleFormatter.format = [%1$tc] %4$s: %5$s {%2$s}%6$s%n\n## configure default log level (for all loggers, if not overwritten below)\n.level = INFO\n## configure root logger \"\"\nhandlers = java.util.logging.ConsoleHandler\nlevel = INFO\n## Application specific logger configuration\n# loggers starting with \"ch.zhaw.prog2.io\" -&gt; write to console and file and do not forward to parent handlers\nch.zhaw.prog2.io.level = FINE\nch.zhaw.prog2.io.handlers = java.util.logging.FileHandler, java.util.logging.ConsoleHandler\nch.zhaw.prog2.io.useParentHandlers = false\n# logger for class ch.zhaw.prog2.io.LogConfiguration\nch.zhaw.prog2.io.LogConfiguration.level = FINEST\n</code></pre> <p>A log configuration can be loaded anytime and all already existing loggers will be updated.</p> <pre><code>InputStream logConfig = this.getClass().getClassLoader().getResourceAsStream(\"log.properties\");\nLogManager.getLogManager().readConfiguration(logConfig);\n</code></pre>","tags":["summary","PROG2"]},{"location":"22FS/SNP/01_C.html","title":"C-Sprache","text":""},{"location":"22FS/SNP/01_C.html#typen","title":"Typen","text":"Typ Bytes char 1 Byte int 4 Bytes float 4 Bytes double 8 Bytes Typ Std-Typ Bytes Wertebereich char int8_t 1-Byte/8-Bits -128 bis 127 unsigned char uint8_t 1-Byte/8-Bits 0 bis 255 short int16_t 2-Bytes/16-Bits -32'768 bis 32'767 unsigned short uint16_t 2-Bytes/16-Bits 0 bis 65'535 int int32_t 4-Bytes/32-Bits \\(-2^{31}\\) bis \\(2^{31}-1\\) unsigned int uint32_t 4-Bytes/32-Bits \\(0\\) bis \\(2^{32}-1\\) long int64_t 8-Bytes/64-Bits \\(-2^{63}\\) bis \\(2^{63}-1\\) unsigned long uint64_t 8-Bytes/64-Bits \\(0\\) bis \\(2^{64}-1\\) long double 10-Bytes/80-Bits \\(-1.2\\cdot 10^{4932}\\) bis \\(1.2\\cdot 10^{4932}\\) <ul> <li>Eine Dezimalzahl im Code wird als <code>signed int</code> interpretiert</li> <li>eine oktal und hexadezimal Zahl werden als <code>unsigned int</code> interpretiert</li> <li>Wenn eine Zahl zu gross f\u00fcr einen <code>int</code> ist, wird sie als <code>long</code> abgespeichert</li> <li>mit <code>L</code>  oder <code>l</code> nach einer Zahl als <code>long</code> interpretiert</li> <li>mit <code>LL</code> oder <code>ll</code> wird eine Zahl als <code>long long</code> interpretiert</li> <li>wird <code>U</code> oder <code>u</code> wird eine Zahl als <code>unsigned int</code> interpretiert</li> </ul>"},{"location":"22FS/SNP/01_C.html#preprocessor","title":"Preprocessor","text":""},{"location":"22FS/SNP/01_C.html#define","title":"<code>#define</code>","text":"<p>Mit <code>#define</code> wird eine Variable definiert, welche w\u00e4hrend der Kompilierzeit ersetzt werden.</p> <p>Der Syntax ist der folgende: <code>#define NAME &lt;value&gt;</code></p> <p>Ein Macro darf zus\u00e4tzlich auch Parameter enthalten. Diese Parameter haben keinen Typ, wie z.B. <code>#define circleArea(R) (3.1415*(R)*(R))</code></p>"},{"location":"22FS/SNP/01_C.html#main","title":"Main","text":"<p>Die Main-Methode in C hat eine der folgenden formen:</p> <pre><code>void main(void);\nint main(void);\nvoid main(int argc, char** argv);\nint main(int argc, char** argv)\n</code></pre>"},{"location":"22FS/SNP/01_C.html#definitionen","title":"Definitionen","text":""},{"location":"22FS/SNP/01_C.html#static-variable","title":"static-Variable","text":"<p>Eine static variable ist nur Sichtbar im definierten C File. Zus\u00e4tzlich dazu wird die Variable im Daten-Header in der Memory gespeichert. </p> <p>Wenn eine statische Variable in einer Methode definiert wird, behaltet sie \u00fcber mehrere Aufrufe ihren Wert.</p> <pre><code>int max(int a) {\n    static int maxValue = 0;\n    if(a &gt; maxValue) {\n        maxValue = a\n    }\n    return maxValue;\n}\n</code></pre> <p>In diesem Beispiel behaltet <code>maxValue</code> den Wert, auch wenn max mehrmals aufgerufen wird. Der Initialwert wird nur einmal gesetzt.</p>"},{"location":"22FS/SNP/01_C.html#register-variabeln","title":"Register-Variabeln","text":"<p>Der Compiler versucht die Variable in einem Register zu speichert. Dies wird heute nicht mehr verwendet, da der Compiler dies selbst sehr gut optimieren kann.</p>"},{"location":"22FS/SNP/01_C.html#extern-variabeln","title":"Extern-Variabeln","text":"<p>Der Compiler geht davon aus, dass die Variable in einem anderen File definiert ist.</p>"},{"location":"22FS/SNP/01_C.html#auto-variabeln","title":"Auto-Variabeln","text":"<p>Die Variable wird auf dem Stack gespeichert. Dies wird heute nicht mehr verwendet, da der Compiler dies selbst optimieren kann.</p>"},{"location":"22FS/SNP/01_C.html#konstante","title":"Konstante","text":"<pre><code>// ein konstanter Pointer zu einer int-Variable\nint * const i1; \n// ein Pointer zu einer konstanter int-Variable\nconst int * i2;\n// ein konstanter Pointer zu einer konstanter int-Variable\nconst int * const i3;\n\n// Ausnahme bei typedef Pointers\ntypdef int * int_pntr;\n// ein konstanter Pointer zu einer variablen int-Variable\nconst int_pntr i4;\n// das selbe, wie oben\nint_pntr const i5;\n</code></pre>"},{"location":"22FS/SNP/01_C.html#typ-alias","title":"Typ-Alias","text":""},{"location":"22FS/SNP/01_C.html#enum","title":"Enum","text":"<p>Mit <code>enum week {Monday, Tuesday, Wendsday};</code> kann ein neues Enum erstellt werden. Wenn das Enum ohne Typedef erstellt wurde, kann es mit <code>enum week</code> verwendet werden (<code>enum week weekday_name;</code>). Wenn man daf\u00fcr zu schreibfaul ist, kann mit <code>typeder enum week {Monday, Tuesday, Wendsday} week_t;</code> ein Typalias <code>week_t</code> erstellt werden, welcher anstatt <code>enum week</code> verwendet werden kann.</p>"},{"location":"22FS/SNP/01_C.html#funktionen-als-variable","title":"Funktionen als Variable","text":"<p>Die Funktion <code>void logger(char * msg)</code> kann in der Variable mit der Definition <code>void (*out)(char *)</code>. Sobald zwei Klammern in der Definition einer Variablen stehen, geht es meistens um eine Funktion.</p> <p>Die Zuweissung kann mit <code>out = &amp;logger</code> oder auch <code>out = logger</code> zu gewiessen weden. Dabei machen die beiden Zuweissungen dasselbe. Der Compiler ist beim zweiten schlau genug, die Adresse der Funktion zu speichern.</p> <p><code>(*out)(\"Hello\")</code> oder <code>out(\"Hello\")</code> machen beide dasselbe: Sie rufen die Funktion in <code>out</code> aus. Der Compiler automatisch dereferenziert das zweite Beispiel.`</p> <p>Mit <code>typedef void (*logger_fp_t)(char*)</code> kann ein Typalias f\u00fcr eine Funktion erstellt werden. Danach kann <code>logger_fp_t</code> als Typ verwendet werden (<code>logger_fp_t  logger_fun = logger</code>).</p>"},{"location":"22FS/SNP/01_C.html#arrays","title":"Arrays","text":"<p>Ein Array ist ein Datenblock im Speicher, welcher kontinuierlich ist. Der Variabelnnamen eines Arrays (ohne Klammern), ist ein Pointer und kann zu einem Pointer zu gewissen werden: <code>int arr[4]; int* arrPointer = arr;</code></p> <p>Ein Array kann folgendermassen erstellt werden;</p> <ul> <li><code>int data[100]</code> - das Array wird alloziert, aber nicht initialisiert</li> <li><code>int data[100] = {1}</code> - das Array wird alloziert, das erste Element wird <code>1</code> und der Rest auf <code>0</code> (nur <code>int data[] = {}</code> ist ein Compilerfehler)</li> <li><code>int data[] = {1, 2}</code> - Ein neues Array mit der L\u00e4nge 2 und den Elementen <code>1</code> und <code>2</code></li> </ul> <p>Mit <code>data[7]</code> kann auf den 7. Wert zu gegriffen werden. Es gibt C typischerweisse kein Check, ob das Array gen\u00fcgend gross ist.</p> <p>Ein Konstantes Array (<code>const int data[100]</code>) kann nicht modifiziert wird. Dies wird vom Compiler \u00fcberpr\u00fcft.</p> <p>Wenn ein Array als Parameter \u00fcbergeben wird, wird der Pointer zum Startwert \u00fcbergeben. Auf der Funktionsseite w\u00fcrde man es folgendermassen schreiben:</p> <pre><code>void arrayParamter(int[] data) {\n    // do stuff with data\n}\n</code></pre> <p>In der Funktion weiss man nicht, wie lange das Array ist (<code>sizeof(data)</code> gibt die Gr\u00f6sse des Pointers des Arrays, wenn es als Parameter \u00fcbergeben wird).</p>"},{"location":"22FS/SNP/01_C.html#lange-tricks-bei-arrays","title":"L\u00e4nge Tricks bei Arrays","text":"<ul> <li> <p>Wenn das Array im selben Block alloziert wurde, kann <code>sizeof(data)/sizeof(data[0])</code> die Gr\u00f6sse errechnet werden</p> </li> <li> <p>Die L\u00e4nge wird als Parameter ebenfalls mitgegeben    <pre><code>void arrayParameter(int[] data, size_t size);\n\nint a[100];\nsize_t n = sizeof(a)/sizeof(a[0]);\narrayParameter(a, n);\n</code></pre></p> </li> <li> <p>Es gibt ein Sentry Wert (wie <code>\\0</code> bei Strings/char Arrays)</p> </li> </ul>"},{"location":"22FS/SNP/01_C.html#arrays-vergleichen","title":"Arrays vergleichen","text":"<p>Mit <code>a == b</code> , wenn <code>a</code> und <code>b</code> ein Arrays ist, vergleicht die Start-Adressen des Arrays, nicht die Elemente selbst. F\u00fcr \"normale\" Arrays gibt es keine standardt Methode, welche der Inhalt von Arrays vergleicht. F\u00fcr String gibt es <code>int strcomp(char *s1, char *s2)</code>, welche <code>0</code> zur\u00fcck gibt, wenn die Strings gleich sind, <code>-1</code>, wenn s1 kleiner ist als s2 und <code>1</code>, wenn s1 gr\u00f6sser als s2 ist.</p>"},{"location":"22FS/SNP/01_C.html#mehrdimensionale-arrays","title":"Mehrdimensionale Arrays","text":"<pre><code>int data[2][3] = {{1,2,3}, {4,5,6}};\ndata[1][2] // gibt 5 zur\u00fcck\n</code></pre> <p>In C k\u00f6nnen Mehrdimensionale Arrays erstellt. Diese k\u00f6nnen \"normal\" darauf zugegrifen werden.</p>"},{"location":"22FS/SNP/01_C.html#strings","title":"Strings","text":"<p>Strings in C sind Char-Arrays, welche am Ende ein <code>\\0</code> haben. Dabei k\u00f6nnen ASCI-Zeichen (nicht UTF-8) in einem String stehen.</p> <pre><code>char hello1[] = \"hello, world\"; // Array mit 13 Zeichen\nchar hello2[13] = \"hello, world\"; // Array mit 13 Zeichen\nchar hello3[14] = \"hello, world\"; // Array mit 14 Zeichen. Am ende hat es zwei \\0\nchar hello4[12] = \"hello, world\"; // Array mit 12 Zeichen, aber das \\0 fehlt am ende\nchar hello5[13]; // Array mit 13 Zeichen. Wird nicht initialisiert\n</code></pre> <p>Wenn das <code>\\0</code> am ende eines Strings fehlt, werden die String-Funktionen einfach weiter lesen, bis ein <code>\\0</code> im Speicher gefunden wird. Meistens f\u00fchrt dies zu einem Crash.</p> <ul> <li>mit <code>strncpy()</code> und <code>strncat()</code> k\u00f6nnen mit String</li> </ul> <p>String-Literale wird in Read-Only Teil des Programmes gespeichert und kann daher nicht modifiziert werden. Ein String-Literal kann dazu ben\u00fctzt werden, ein char-Array zu erstellen, welches ge\u00e4ndert werden kann.</p> <pre><code>char* str_literal = \"test\";\nstr_literal[0] = 'H'; // undefined behaviour. str_literal points to read-only memory\nchar[] str_arr = \"test\"; // copies the string_literal to the array\nstr_arr[0] = 'H'; // works\n</code></pre> <p></p>"},{"location":"22FS/SNP/01_C.html#gross-kleinbuchstaben","title":"Gross-/Kleinbuchstaben","text":"<pre><code>'a' &amp; '_' == 'A'; // 0b0110 0001 &amp; 0b0101 1111 = 0b0100 0001\n'A' &amp; '_' == 'A';\n'A' | ' ' == 'a'; // 0b0100 0001 | 0b0010 0000 = 0b0110 0001\n'a' | ' ' == 'a';\n</code></pre>"},{"location":"22FS/SNP/01_C.html#pointers","title":"Pointers","text":"<pre><code>int data[4];\nint* pointer = data; // da data[] bereits ein Pointer ist, kann er direkt zugewissen werden\npointer++; // geht zur n\u00e4chsten Addresse 4 Bytes weiter, da ein int 4 bytes lang ist\nint value = *pointer; // mit *&lt;pointerVar&gt; wird der Pointer dereferenziert\nint intVar = 1;\npointer = &amp;intVar; // setzt die Adresse von intVar zu dem Pointer\n*pointer = intVar; // setzt die Adresse von intVar zu dem Pointer\ndouble **pointerZuPointer; // ein Meehrdimensionalen Pointer\ndouble *pointer, notPointer; // erstellt ein Double-Pointer und ein Double-Variable\nint i2 = dataPointer-&gt;nr; // dereferenziert den Pointer zu einem Struct und gibt nr zur\u00fcck\n</code></pre> <p>Ein Pointer kann mit <code>int* data</code> erstellt werden.</p> <p>Ein Pointer ist eine Adresse, mit welcher gerechnet werden kann. Um den Wert eines Pointers zu bekommen, muss er dereferenziert werden. Dies kann mit <code>*data</code>  bewerkstelligt werden.</p> <p>Wenn man die Adresse einer Variable bekommen m\u00f6chte, kann man diese mit <code>&amp;variable</code> bekommen und z.B. einem Pointer zu weisen. </p> <p>Ein Pointer kann man eine Adresse zu weissen (<code>pointer = &amp;variable</code>), ebenfalls kann ein dereferenzierten Pointer zu gewissen werden (<code>*pointer = variable</code>). Beides funktioniert und bewerkstelligt dasselbe.</p> <p><code>double *d1[20]</code> ist ein Array von 20 Double-Pointers, hingegen <code>double (*d2)[20]</code> ist ein Pointer auf ein Array von Double-Elementen.</p>"},{"location":"22FS/SNP/01_C.html#presedenz-von","title":"Presedenz von *","text":"<pre><code>double *d1[20]; // ein Array von 20 Pointern auf Doubles\ndouble (*d2)[20]; // ein Pointer auf ein Array von 20 Double Elemente\nstruct data {int nr;}\nstruct data *dataPointer, dataObj;\n*dataPointer = dataObj;\nint i1 = (*dataPointer).nr; // *dataPointer.nr w\u00fcrde dataPointer.nr dereferenzieren\nint i2 = dataPointer-&gt;nr; // macht dasselbe, wie oben\n</code></pre>"},{"location":"22FS/SNP/01_C.html#void-pointers","title":"Void-Pointers","text":"<p>Pointers haben immer einen Daten-Typ. Die einzige Ausnahme ist der void-pointer</p>"},{"location":"22FS/SNP/01_C.html#null-pointer","title":"NULL-Pointer","text":"<p>Der Pointer <code>NULL</code> (von <code>stdio.h</code>) ist ein Alias f\u00fcr die Adresse f\u00fcr <code>0</code> und heisst, dass der Pointer auf nichts zeigt. Er soll zur Dokumentation </p>"},{"location":"22FS/SNP/01_C.html#speicher-allozieren","title":"Speicher allozieren","text":"<p>Wenn ein neues Objekt erzeugt wird (z.B. ein <code>int</code>, aber auch ein <code>struct</code> oder ein <code>array</code>), dann wird dies auf dem Stack gespeichert. Mit Methoden, wie <code>malloc(size_t)</code> k\u00f6nnen aber auch Daten auf dem Heap gespeichert werden.</p> <p></p> Methode Erkl\u00e4rung <code>void* malloc(size_t size)</code> Alloziert speicher auf dem Heap <code>void* calloc(size_t nsize, size_t size)</code> <code>void* realloc(void *ptr, size_t size)</code> Setzt die Gr\u00f6sse des gegebenen Pointers auf die gegebene Gr\u00f6sse <code>void free(void *ptr)</code> Gibt allozierten Speicher an der gegebenen Adresse wieder frei"},{"location":"22FS/SNP/01_C.html#methoden","title":"Methoden","text":""},{"location":"22FS/SNP/01_C.html#funktions-parameter","title":"Funktions-Parameter","text":"<p>Standardm\u00e4ssig werden alle Parameter by value \u00fcbergeben. Falls dies nicht gewollt ist, m\u00fcssen Pointers verwendet werden.</p>"},{"location":"22FS/SNP/01_C.html#const-parameter","title":"const-Parameter","text":"<p><code>void write_int(const int a)</code> bewirkt, dass <code>a</code> nicht in der Methode ver\u00e4ndert werden kann.</p> <p>Es ist nat\u00fcrlich erlaubt einen konstanten Pointer zu definieren (<code>void write_char(const char *s)</code>). Dabei kann der Pointer selbst (<code>a = NULL</code>), wie auch der Wert des Pointers (<code>*a=5</code>) nicht mehr ge\u00e4ndert werden. Die konstante Variable darf nicht im linken Teil einer Zuweisung stehen.</p>"},{"location":"22FS/SNP/01_C.html#array-parameter","title":"Array Parameter","text":"<p><code>void write_array(int* a)</code> ist dasselbe, wie <code>void write_array(int a[])</code>. In beiden F\u00e4llen weiss die aufgerufene Methode nicht,  wie gross das Array <code>a</code> ist. </p> <p>Auch bei Arrays k\u00f6nnen mit const ausgestatet werden (<code>void array_method(const int a[])</code>)</p> <p>Bei Mehrdimensionalen Arrays m\u00fcssen alle Dimensionen, ausser die erste, angegeben werden: <code>void print_matrx(double matrix[][3])</code> oder <code>print_matrix(double (*matrix)[3])</code>.</p>"},{"location":"22FS/SNP/01_C.html#variable-anzahl-parameter","title":"Variable Anzahl Parameter","text":"<pre><code>#include &lt;stdarg.h&gt;\n\nint average(unsigned int anzahl, ...) {\n    va_list args;\n    int summe = 0;\n    va_start(args, anzahl);\n    // beginnt bei 1, da das 0. Argument `anzahl` ist\n    for(int i = 1; i &lt;= anzahl; i++) {\n        summe += va_arg(args, int);\n    }\n    va_end(args);\n    return summe / anzahl;\n}\n</code></pre> <p>Damit eine Funktion eine Variable Anzahl von Parameter ben\u00fctzten kann, muss <code>stdarg.h</code> inkludiert sein. Auf die Argumente kann mit der Struktur <code>va_list</code> zugegriffen werden. Diese Struktur muss mit <code>va_start(va_list args, int numberOfArgs)</code> initialisiert werden und mit <code>va_end(va_list args)</code> gel\u00f6scht werden. Der eigentliche Wert kann mit <code>va_arg(va_list args, type)</code> zugegriffen werden.</p>"},{"location":"22FS/SNP/01_C.html#ruckgabe","title":"R\u00fcckgabe","text":"<p>Wenn ein Pointer zur\u00fcck gegeben wird, muss die Variable auf dem Heap gespeichert sein. </p> <p>Folgendes Beispiel w\u00fcrde nicht funktionieren</p> <pre><code>int* create_array() {\n    int arr[10];\n    return arr;\n}\n</code></pre>"},{"location":"22FS/SNP/01_C.html#fehler","title":"Fehler","text":"<ul> <li>Stack-Overflow: Auf dem Stack hat es nicht mehr gen\u00fcgend platz</li> <li>Buffer-Overflow: Wenn ein Buffer (z.B. ein Array) \u00fcber die Grenze \u00fcberschrieben werden</li> </ul>"},{"location":"22FS/SNP/01_C.html#sichererers-programmieren","title":"Sichererers Programmieren","text":"<ul> <li><code>fgets()</code> anstatt <code>gets()</code></li> <li><code>strncpy()</code> und <code>strncat()</code> anstatt <code>strcpy()</code> und <code>strcat()</code></li> <li>Bei <code>malloc()</code> immer \u00fcberpr\u00fcfen, ob der Speicher wirklich alloziert wurde</li> </ul>"},{"location":"22FS/SNP/01_C.html#header-files","title":"Header Files","text":"<p>In einem Header File stehen Funktions-Deklarationen (ohne Code), Structs, Enums, <code>#define</code> und weitere Definitionen. Diese k\u00f6nnen in einem <code>*.c</code> File includiert werden und der Compiler weiss, dass es diese Funktionen und Daten-Typen gibt.</p> <p>Ein Headerfile sollte noch folgendes Boiler-Template haben:</p> <pre><code>#ifndef DEF_H\n#define DEF_H\n\nint add(int, int);\nint sub(int, int);\n#endif\n</code></pre> <p>Dies verhindert, dass das Headerfile zwei mal etwas definiert.</p>"},{"location":"22FS/SNP/01_C.html#binar-operatoren","title":"Bin\u00e4r Operatoren","text":"Op Erkl\u00e4rung Beispiel &amp; und <code>0101 &amp; 0100 = 0100</code> | oder <code>0101 &amp; 0010 = 0111</code> ^ xor <code>0101 ^ 0100 = 0001</code> ~ invert <code>~0101 = 1010</code> &gt;&gt; right shift <code>0100 &gt;&gt; 2 = 0001</code> &lt;&lt; left shift <code>0001 &lt;&lt; 2 = 0100</code>"},{"location":"22FS/SNP/01_C.html#tipps","title":"Tipps","text":""},{"location":"22FS/SNP/01_C.html#variablen-tauschen","title":"Variablen tauschen","text":"<p>Um zwei Variablen zu tauschen, kann drei mal geXORed werden:</p> <pre><code>int a = 2; //0010\nint b = 4; //0100\na = a ^ b; //0110\nb = a ^ b; //0010\na = a ^ b; //0100\n</code></pre>"},{"location":"22FS/SNP/02_Preprocessor%20und%20Compiler.html","title":"Preprocessor und Compiler","text":""},{"location":"22FS/SNP/02_Preprocessor%20und%20Compiler.html#preprocessor","title":"Preprocessor","text":"<p>Der Preprocessor ist eine Textmaschine, welche Text ersetzten, einf\u00fcgen und l\u00f6schen kann.</p> <p>Wenn man den Output nach den Preprocesser sehen m\u00f6chte, kann man dies mit: <code>gcc -E &lt;path&gt;</code></p>"},{"location":"22FS/SNP/02_Preprocessor%20und%20Compiler.html#define-und-undef","title":"<code>#define</code> und <code>#undef</code>","text":"<p>Mit <code>#define VARNAME &lt;value&gt;</code> kann eine Konstante definiert werden, welche vom Preprocessor ersetzt wird. </p> <p>Mit <code>#undef VARNAME</code> kann eine Konstante wieder gel\u00f6scht werden</p> <p>Mit <code>gcc -DVARNAME</code> kann eine Konstante definiert werden. Dies kann hilfreich f\u00fcr die <code>#ifdef</code> Anweisungen sein.</p>"},{"location":"22FS/SNP/02_Preprocessor%20und%20Compiler.html#include","title":"<code>#include</code>","text":"<ul> <li><code>#include &lt;header.h&gt;</code> importiert ein Headerfile, welches mit dem Compiler mit kommt, bzw. beim OS installiert sind</li> <li><code>#include \"header.h\"</code> importiert ein Headerfile, welches im selbe Verzeichnis, wie das File, in welchem die Anweisung steht.</li> </ul>"},{"location":"22FS/SNP/02_Preprocessor%20und%20Compiler.html#if-elif-else-endif-ifdef-und-ifndef","title":"<code>#if</code>, <code>#elif</code>, <code>#else</code>, <code>endif</code>, <code>#ifdef</code> und <code>#ifndef</code>","text":"<p>Mit diesen Anweissungen kann gewissen Code beim Kompilieren ignoriert werden.</p> <p>Beim folgenden Beispiel wird der Debugging Output nur ausgegeben, wenn DEBUG definiert ist. Die selbe Anweissung k\u00f6nne man auch mit <code>#ifdef DEBUG</code> schreiben.</p> <pre><code>#if defined DEBUG\n    printf(\"Program Version 1 (Debugging)\\n\");\n#else\n    printf(\"Programm Version 1 (Production)\\n\");\n#endif\n</code></pre> <p>Mit <code>gcc -DVARNAME</code> kann eine Konstante definiert werden.</p>"},{"location":"22FS/SNP/02_Preprocessor%20und%20Compiler.html#compiler","title":"Compiler","text":"<p>Es kann nur den Compiler (und Preprocessor) mit <code>gcc -c &lt;path_to_file&gt;</code> aufgerufen werden. Dies produziert ein <code>*.o</code> File. In diesem gibt es noch Referenzen zu anderen Modulen und Files. </p>"},{"location":"22FS/SNP/02_Preprocessor%20und%20Compiler.html#linker","title":"Linker","text":"<p>Der Linker kombiniert alle <code>*.o</code> Files in eine ausf\u00fchrbare Datei und l\u00f6st die Referenzen im <code>*.o</code> File aufzul\u00f6sen. Wenn gcc mit <code>*.o</code> Files aufgerufen wird, wird der Linker ben\u00fctzt (Befehl <code>gcc *.o</code>).</p>"},{"location":"22FS/SNP/03_Make.html","title":"Make","text":""},{"location":"22FS/SNP/03_Make.html#makefile","title":"Makefile","text":"<p>Grunds\u00e4tzlichen Syntax:</p> <pre><code>.PHONE: &lt;targets, welche keine File sind&gt;\ntarget: dependency1 dependency2\n    cmd\n</code></pre> <p><code>target</code> ist ein Befehl und den Output des Befehles. Dieser kann mit <code>make target</code> aufgerufen wird.</p> <p><code>dependencies</code> ist eine Liste von Abh\u00e4ngikeiten. Diese m\u00fcssen vorhanden sein f\u00fcr das <code>target</code>. </p> <p><code>cmd</code> wird ausgef\u00fchrt, um das <code>target</code> zu erstellen, nach dem die <code>dependencies</code> erstellt und ausgef\u00fchrt wurden.</p>"},{"location":"22FS/SNP/03_Make.html#variablen","title":"Variablen","text":"Name Erkl\u00e4rung <code>$@</code> Dem Target der aktuellen Regel <code>$^</code> Alle Abh\u00e4ngigkeiten <code>$&lt;</code> Die erste Abh\u00e4ngigkeit"},{"location":"22FS/SNP/03_Make.html#beispiel","title":"Beispiel","text":"<pre><code>TARGET_EXEC := producer\nBUILD_DIR := ./build\nSRC_DIR := ./\n\nSRCS := producer_consumer.c list.c\nOBJS := $(SRCS:%.c=$(BUILD_DIR)/%.o) #producer.c will be turned into producer.o\n\n.DEFAULT_GOAL := $(BUILD_DIR)/$(TARGET_EXEC)\n\n\n$(BUILD_DIR)/$(TARGET_EXEC): $(OBJS)\n    $(CC) $(OBJS) -o $(BUILD_DIR)/$(TARGET_EXEC)\n\n$(BUILD_DIR)/%.o: %.c #builds .o files from .c files\n    mkdir -p $(dir $@)\n# $&lt; is the first dependency, $@ is the target\n    $(CC) $(CFLAGS) -c $&lt; -o $@ \n\n.PHONY: clean all\n\nclean: \n    rm -r $(BUILD_DIR)\n\nall:\n    @make clean\n    @make\n</code></pre>"},{"location":"22FS/SNP/04_Unit%20Tests.html","title":"Unit Tests","text":"<ul> <li><code>CU_ASSERT_EQUAL(actual, expected)</code></li> <li><code>CU_ASSERT_NOT_EQUAL(actual, expected)</code></li> <li><code>CU_ASSERT_STRING_EQUAL(actual, expected)</code></li> <li><code>CU_ASSERT_TRUE(value)</code></li> </ul> <p>Siehe <code>man CUnit</code> f\u00fcr mehr Details.</p>"},{"location":"22FS/SNP/05_OS.html","title":"OS","text":""},{"location":"22FS/SNP/05_OS.html#hardware","title":"Hardware","text":""},{"location":"22FS/SNP/05_OS.html#cpu","title":"CPU","text":"<p>Die CPU f\u00fchrt die Befehle aus und ist Chef des System-Bus. \u00dcber den Bus kann die CPU auf den Speicher oder IO zugreifen.</p> <p>Im <code>PC</code> Register (Program Counter) steht, wo in Memory die n\u00e4chste Maschineninstruktion steht. In <code>IR</code>-Register ( Instruction Register) steht die aktuell ausgef\u00fchrte Instruktion.</p> <p><code>ALU</code> steht f\u00fcr Arithmentic-Logic-Unit, welches mit Integers rechnet. </p>"},{"location":"22FS/SNP/05_OS.html#memory","title":"Memory","text":"<p>Die Memory wird \u00fcber den System-Bus angesprochen.</p>"},{"location":"22FS/SNP/05_OS.html#cpu-entlastung","title":"CPU-Entlastung","text":"<ul> <li>Ablaufbeschleunigung in der CPU</li> <li>Cache:beschleunigter Zugriff auf zwischengespeicherte Daten</li> <li> <p>Pipeline:beschleunigte Ausf\u00fchrung durch gestaffelte Verarbeitung</p> </li> <li> <p>Arbeitsentlastung der CPU</p> </li> <li>IC: Interrupt Controller vermitteln von Interrupts</li> <li>DMA: Direct Memory AccessDaten kopieren ohne CPU Interaktion</li> <li>FPU: Floating-Point UnitRecheneinheit f\u00fcr Gleitkommazahlen</li> <li>DSP: Digital Signal Processorspezielle Daten-Recheneinheit</li> <li>GPU: Graphics Processing Unit spezielle Graphik-Recheneinheit</li> <li>MPU: Memory Protection Unit     \u00dcberwachung von Adresszugriffen</li> </ul>"},{"location":"22FS/SNP/05_OS.html#modi","title":"Modi","text":"<p>Im Supervisor/Kernel-Mode l\u00e4uft der Kernel. So bald ein Program auf Funktionalit\u00e4t des Kernels zu greifen m\u00f6chte, muss ein Sys-Call aufgerufen werden, welcher der Modi wechselt.</p>"},{"location":"22FS/SNP/05_OS.html#schichten","title":"Schichten","text":""},{"location":"22FS/SNP/05_OS.html#linux-startup","title":"Linux Startup","text":""},{"location":"22FS/SNP/05_OS.html#prozess","title":"Prozess","text":"<p>Der Header <code>unistd.h</code> muss inkludiert werden.</p>"},{"location":"22FS/SNP/05_OS.html#prozess-erstellen-fork","title":"Prozess erstellen (<code>fork()</code>)","text":"<p>Mit <code>pid_t fork()</code> kann ein neuen Prozess erstellt werden, welche eine Kopie des aktuellen Prozess ist. Von diesem Punkt ab laufen zwei Threads den gleichen Code. Im aktuellen Prozess gibt <code>fork()</code> die PID des neuen Prozess zur\u00fcck, im neuen Prozess wird <code>0</code> zur\u00fcck gegeben.</p> <p>Falls der Return Value kleiner als <code>0</code> ist, trat ein Fehler auf.</p> <p>Es werden alle File Deskriptoren, Semaphoren, Signal Actions vererbt.</p>"},{"location":"22FS/SNP/05_OS.html#exec-in-neuen-prozessen","title":"<code>exec()</code> in neuen Prozessen","text":"<p><code>execX()</code> Funktionen ersetzt den Code in einem Thread. Dies kann zusammen mit <code>fork()</code> ben\u00fctzt werden, um ein Programm in einem neuen Thread zu starten.</p> <ul> <li><code>int execv(char *pathname, char *argv[])</code>   F\u00fchrt das Programm bei <code>pathname</code> mit den angegebenen Argumenten aus. Der aktuelle Code wird ersetzt</li> <li><code>int system( char *command)</code>   Ist eine Helper-Method, welche mit <code>fork()</code> und <code>execv()</code> ein neues Programm ausf\u00fchrt und wartet bis das Programm fertig ist. Der Return Value des Programmes wird zur\u00fcckgegeben. Der angegebene Befehl wird mit <code>/bin/sh</code> ausgef\u00fchrt.</li> <li><code>FILE *popen(char *command, char *type)</code> und <code>int pclose(FILE *stream )</code>   Funktioniert wie <code>system()</code>. Es wird der Befehl <code>command</code> in <code>/bin/sh</code> ausgef\u00fchrt und ein File-Stream zur\u00fcck gegeben, von welchem mit <code>fgets(char *s, int size, FILE *stream)</code> zugegriffen werden kann.   Der <code>type</code> muss <code>r</code> f\u00fcr zum Lesen und <code>w</code> f\u00fcr zum Schreiben enthalten</li> </ul> <pre><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/wait.h&gt;\n\nint main(void) {\n    pid_t pid = fork();\n    if (pid &gt; 0) {\n        wait(NULL);\n    } else {\n        // using system(...)\n        int exit_code = system(\"ls -la\");\n        printf(\"child exited with %d\\n\\n\", WEXITSTATUS(exit_code));\n\n        // using popen(...)\n        FILE *stream = popen(\"ls -la\", \"r\");\n        char buffer[256];\n        while (fgets(buffer, 256, stream) != NULL)\n            printf(buffer);\n\n        exit_code = pclose(stream);\n        printf(\"child exited with %d\\n\\n\", WEXITSTATUS(exit_code));\n\n        // using execv(...)\n        char *argv[] = {\"ls\", \"-la\", NULL};\n        if (execv(\"/usr/bin/ls\", argv) == -1) ERROR(\"execv\");\n        printf(\"This will never be executed\\n\");\n    }\n}\n</code></pre>"},{"location":"22FS/SNP/05_OS.html#wait-waitpid-syswaith","title":"<code>wait()</code> /<code>waitpid()</code> (sys/wait.h)","text":"<p>Nach dem ein Prozess beendet wurde, gibt es ihn noch als Zombie-Prozess bis der Parent-Prozess <code>pid_t wait(int *wstatus)</code> oder <code>pid_t waitpid(pid_t pid, int *wstatus, int options)</code> aufgerufen hat und den Status so abgeholt hat.</p> <pre><code>pid_t pid = fork();\nif(pid == 0) {\n    int wstatus;\n    pid_t wpid = waitpid(pid, &amp;wstatus, 0);\n    if(wpid != null) {\n        perror(\"waitpid\");\n        exit(1);\n    }\n    printf(\"process %d exited with status %d (%d)\\n\", pid, WEXITSTATUS(wstatus), wstatus);\n\n    wait(&amp;wstatus); // will do the same as waitpid() but with a random child-process\n}\n</code></pre>"},{"location":"22FS/SNP/05_OS.html#threading","title":"Threading","text":""},{"location":"22FS/SNP/05_OS.html#begriffe","title":"Begriffe","text":"<ul> <li>Race Condition: </li> <li>Dead Lock: Zwei Threads warten auf eine Resource, welche vom anderen Thread \"gelockt\" wurde   </li> <li>Live Lock: Zwei Threads haben eine Resource frei gegeben und warten darauf, dass sie der andere Thread lockt</li> <li>Critical Section: Ein St\u00fcck code, in welchem nur ein Thread gleichzeitig l\u00e4uft</li> <li>Starvation: ein blockierter Task kommt nie an die Reihe, da andere Tasks sich vordr\u00e4ngen. Dies sollte vom OS behoben werden.</li> </ul>"},{"location":"22FS/SNP/05_OS.html#volatile","title":"<code>volatile</code>","text":"<p>Das Volatile-Keyword zwingt dem Compiler nicht zu optimieren. Somit wird wirklich ausgef\u00fchrt, was in C geschrieben wurde. Ansonsten kann der Compiler Schreib-Aufrufe verschieben oder Resultate cachen. Dies ist n\u00fctzlich bei Multi-Threading, da eine Variable von mehreren Threads ge\u00e4ndert werden kann und das Cachen problematisch sein k\u00f6nnte.</p> <pre><code>volatile int value = 0; // erstellt ein neuen volatile int\n</code></pre>"},{"location":"22FS/SNP/05_OS.html#pthread_create","title":"<code>pthread_create(...)</code>","text":"<p>Mit <code>int pthread_create(pthread_t *thread, pthread_attr_t *attr, void *(*start_routine)(void *), void *arg)</code> kann einen neuen Thread gestartet werden.</p> <p>Wenn ein neuen Thread erstellt wird, muss entweder <code>pthread_detach()</code> oder <code>pthread_join()</code></p> <pre><code>void *worker(void *arg) {\n    printf(\"worker: hi\\n\");\n    return \"Hello\";\n}\n\nvoid main() {\n    pthread_t thread;\n    pthread_create(&amp;thread, NULL, worker, NULL);\n    void *msg;\n    pthread_join(&amp;thread, &amp;msg); // pthread_join(...) wants void** as the msg\n    printf(\"Thread sent %s\\n\", (char*) status)\n}\n</code></pre>"},{"location":"22FS/SNP/05_OS.html#pthread_detach","title":"<code>pthread_detach(...)</code>","text":"<p><code>int pthread_detach(pthread_t thread)</code> markiert ein Thread als detached und wenn ein solchen Thread sich beendet, werden die System-Resourcen automatisch freigegeben.</p>"},{"location":"22FS/SNP/05_OS.html#pthread_exit","title":"<code>pthread_exit(...)</code>","text":"<p><code>void pthread_exit(void *retval)</code> beendet den akutellen Thread mit dem mit gegebenen Wert. Dieser kann mit <code>int pthread_join(...)</code> abgerufen werden. Processor-Shared-Resources, wie File-Deskriptoren, werden nicht freigegeben.</p>"},{"location":"22FS/SNP/05_OS.html#pthread_join","title":"<code>pthread_join(...)</code>","text":"<p><code>int pthread_join(pthread_t thread, void** retval)</code> wartet bis der angegebene Thread sich beendet. Der \"Exit-Status\" wird in den <code>retval</code> Pointer gespeichert. Die System-Resourcen des Threads werden nach dem <code>int</code></p> <p><code>pthread_join(...)</code> zur\u00fcckkehrt, frei gegeben.</p>"},{"location":"22FS/SNP/05_OS.html#io","title":"IO","text":""},{"location":"22FS/SNP/05_OS.html#inode","title":"INode","text":"<p>Die Repr\u00e4sentation von einem File. Es werden Daten, wie der letzte Zugriffzeitpunkt, Besitzer, L\u00e4nge, physikalischer Ort auf dem Datentr\u00e4ger gespeichert. Aber nicht der Name der Datei.</p>"},{"location":"22FS/SNP/05_OS.html#folder","title":"Folder","text":"<p>Ein einem Ordner hats Name-INode Paare. Diese geben den INodes einen Name.</p>"},{"location":"22FS/SNP/05_OS.html#hardlinks-vs-softlink","title":"Hardlinks vs Softlink","text":"<p>Ein Softlink funktioniert auf dem Filesystem und sagt dem Kernel, das dieses File bei diesem Pfad gefunden wird.</p> <p>Ein Hardlink ist ein \"Link\" auf ein INode. Es kann mehrere Namen f\u00fcr ein INode geben. Der INode ist erst gel\u00f6scht, wenn es keinen Namen daf\u00fcr mehr gibt.</p>"},{"location":"22FS/SNP/05_OS.html#spezielle-files","title":"Spezielle Files","text":"<ul> <li>Character Devices</li> <li>Block Devices</li> <li>Named Pipes</li> <li>Sockets</li> </ul>"},{"location":"22FS/SNP/05_OS.html#file","title":"<code>FILE*</code>","text":"<p>Ein File Deskriptor, welcher auf ein File zeigt.</p> <p>Folgende Funktionen sind relevant zu <code>FILE*</code>. F\u00fcr viele Funktionen muss der Header <code>unistd.h</code> inkludiert werden.</p> <p></p> <p>Die folgenden Operationen sind die wichtigsten:</p> <ul> <li><code>FILE* fopen(char *pathname, char* mode)</code>   \u00d6ffnet ein File zum schrieben. Falls das File nicht ge\u00f6ffnet werden konnte, wird <code>NULL</code> zur\u00fcck gegeben. Wenn f\u00fcr <code>mode</code> folgendes angegeben wird:</li> <li><code>`r</code> : File nur zum lesen ge\u00f6ffnet</li> <li><code>r+</code> :  File wird zum lesen und schreiben ge\u00f6ffnet</li> <li><code>w</code> :  File wird zum lesen ge\u00f6ffnet. Das File wird erstellt oder \u00fcberschrieben</li> <li><code>w+</code>: Wie <code>r+</code>, aber das File wird erstellt oder \u00fcberschrieben</li> <li><code>a</code>: File wird zum schreiben am Ende der Datei ge\u00f6ffnet. Das File wird erstellt, falls es nicht existiert</li> <li><code>a+</code>:  File wird zum lesen und schreiben vom Ende der Datei ge\u00f6ffnet. Falls das Datei nicht existiert, wird es erstellt</li> <li><code>int fclose(FILE *stream)</code>   Flushed und schliesst den angegeben File-Handler. Wenn erfolgreich, <code>0</code> wird zur\u00fcck geben</li> <li><code>int fprintf(FILE *stream, char* format, ...)</code>   Wie <code>fprint(...)</code> aber schreibt auf den angegeben File-Handler. Die Funktion gibt die Anzahl gedruckte Zeichen aus oder einen negative Zahl, wenn ein Fehler aufgetreten ist</li> <li><code>int fgetc(FILE *stream)</code>   Liest von <code>stream</code> ein char und gibt in zur\u00fcck. <code>EOF</code> wird  beim File-Ende zur\u00fcck gebenen. Bei einem Fehler wird einen negativen Wert zur\u00fcck gegeben</li> <li><code>char* fgets(char *s, int size, FILE *stream)</code>   Liest eine Zeile oder bis zum Ende des Streams und schreibt diesen in <code>s</code>. Es wird maximal <code>size-1</code>-Anzahl chars gelesen (<code>-1</code> wegen <code>\\0</code>)</li> <li><code>int sscanf(FILE *stream, char *format, ...)</code>   Wie <code>scanf(...)</code>, aber liest von einem angegeben <code>stream</code></li> <li><code>int fputc(int c, FILE *stream)</code>   Cast <code>c</code> zu einem unsigned char und schreibt diesen in den Stream. Als R\u00fcckgabe-Wert wird <code>c</code> zur\u00fcck gegeben, oder <code>EOF</code> im Fehlerfall.</li> <li><code>int fputs(char *s, FILE *stream)</code>   Schreibt ein String (ohne <code>\\0</code>) in den Stream. Wenn ein Error aufgetreten ist, wird <code>EOF</code> zur\u00fcck geben, sonst eine positive Zahl.</li> </ul> <p>Nach jedem IO Aufruf sollte \u00fcberpr\u00fcft werden, ob die Operation erfolgreich war: </p> <p></p>"},{"location":"22FS/SNP/05_OS.html#buffereing-in-streams","title":"Buffereing in Streams","text":"<ul> <li>unbuffered: Die daten werden sofort weiter geleitet.</li> <li>fully-buffered: Wenn der Buffer voll ist, wird der Buffer geleert</li> <li>line-buffered:   Wenn das Ende der Zeile erreicht wird oder der Buffer voll ist, wird der Buffer geleert</li> </ul> <p><code>stdin</code> und <code>stdout</code> sind normallerweisse fully-buffered, wenn sie nicht mit einem interaktiven Device verbunden sind. <code>stderr</code> ist unbuffere</p>"},{"location":"22FS/SNP/05_OS.html#file-io-beispiel","title":"File IO Beispiel","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    FILE *test_file = fopen(\"./test\", \"w\");\n    char buffer[200];\n    int buffer_size = sizeof(buffer) / sizeof(char);\n    char *buffer_pntr = buffer;\n    for (int input = getchar(); input &gt;= 0 &amp;&amp; input != 'q' &amp;&amp; buffer_pntr &lt; buffer + buffer_size; input = getchar())\n    {\n        *(buffer_pntr++) = (char)input;\n    }\n    buffer[buffer_size - 1] = '\\0';\n    fprintf(test_file, \"%s\", buffer);\n    fclose(test_file);\n\n    test_file = fopen(\"./test\", \"r\");\n    while (fgets(buffer, buffer_size, test_file) != NULL)\n    {\n        printf(\"buffer: %s\", buffer);\n    }\n    fclose(test_file);\n    return 0;\n}\n</code></pre>"},{"location":"22FS/SNP/05_OS.html#mutex-pthreadh","title":"Mutex (pthread.h)","text":"<p>In einer Critical Section ist nur ein Thread gleichzeitig am laufen</p> <p></p> <p>Mit <code>int pthread_mutex_init(pthread_mutex *mutex, NULL)</code> kann ein <code>p_thread_mutex</code> Objekt initialisiert werden. Mit <code>int pthread_mutex_lock(pthread_mutex *mutex)</code> kann der Mutex gelockt werden und mit  <code>int pthread_mutex_unlock(pthread_mutex *mutex)</code> </p> <p>Um Attribute f\u00fcr einen Mutex zu \u00e4ndern, wird der Typ <code>pthread_mutexattr_t</code> genuzt, welcher mit <code>int pthread_mutexattr_init(pthread_mutexattr_t *mutexattr)</code> initialisiert und mit <code>int pthread_mutexattr_settype(pthread_mutex *mutex, int flag)</code>. Ein m\u00f6gliches Flag ist <code>PTHREAD_MUTEX_RECURSIVE</code>, welches bewirkt, dass wenn ein Mutex bereits im Thread a gelockt wurde und Thread a nochmals versucht zu locken, wird nichts getan (sonst g\u00e4be es ein Deadlock).</p>"},{"location":"22FS/SNP/05_OS.html#beispiel-mutex","title":"Beispiel Mutex","text":"<pre><code>#include &lt;pthread.h&gt;\n#include &lt;stdbool.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n\n#define ERROR(M)  ...\n\nstatic pthread_mutex_t mutex;\nstatic volatile bool running = true;\nstatic volatile int value = 0;\n\nvoid *worker(void *arg) {\n    while (running) {\n        if (pthread_mutex_lock(&amp;mutex) == -1) ERROR(\"lock worker\");\n        printf(\"current value: %d\\n\", value);\n        if (pthread_mutex_unlock(&amp;mutex) == -1) ERROR(\"unlock worker\");\n    }\n}\n\nvoid *printer(void *arg) {\n    FILE *random = fopen(\"/dev/urandom\", \"rb\");\n    if (random == NULL) ERROR(\"fopen\");\n    while (running) {\n        int input = -1;\n        if (fread(&amp;input, sizeof(input), 1, random) != 1) ERROR(\"read\");\n        if (pthread_mutex_lock(&amp;mutex) == -1) ERROR(\"lock\");\n        value = input;\n        if (pthread_mutex_unlock(&amp;mutex) == -1) ERROR(\"unlock\");\n    }\n    fclose(random);\n}\n\nint main(void) {\n    pthread_mutex_init(&amp;mutex, NULL);\n    pthread_t worker_thread, printer_thread;\n    if (pthread_create(&amp;worker_thread, NULL, worker, NULL) == -1) ERROR(\"worker thread\");\n    if (pthread_create(&amp;printer_thread, NULL, printer, NULL) == -1) ERROR(\"printer thread\");\n\n    while (getchar() != 'q') {}\n\n    running = false;\n    if (pthread_join(worker_thread, NULL) == -1) ERROR(\"join\");\n    if (pthread_join(printer_thread, NULL) == -1)ERROR(\"join\");\n}\n</code></pre>"},{"location":"22FS/SNP/05_OS.html#beispiel-rekursiver-mutex","title":"Beispiel Rekursiver Mutex","text":"<pre><code>#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;pthread.h&gt;\n\n#define ERROR(M) ..\n\n#define N 1000\n\npthread_mutex_t mutex;\nint value = 0;\n\nvoid calc(int step) {\n    if (pthread_mutex_lock(&amp;mutex) == -1) ERROR(\"lock\");\n    value += step;\n    if (pthread_mutex_unlock(&amp;mutex) == -1) ERROR(\"unlock\");\n}\n\nvoid *count(void *p) {\n    for (int i = 0; i &lt; N; i++)     {\n        if (pthread_mutex_lock(&amp;mutex) == -1) ERROR(\"lock\");\n        calc(*(int *)p);\n        if (pthread_mutex_unlock(&amp;mutex) == -1) ERROR(\"unlock\");\n    }\n}\n\nint main(void) {\n    pthread_mutexattr_t mutex_attr;\n    if (pthread_mutexattr_init(&amp;mutex_attr) != 0) ERROR(\"init mutexattr\");\n    if (pthread_mutexattr_settype(&amp;mutex_attr, PTHREAD_MUTEX_RECURSIVE) != 0) \n        ERROR(\"set recursive type\");\n    if (pthread_mutex_init(&amp;mutex, &amp;mutex_attr) != 0) ERROR(\"init mutex\");\n\n    pthread_t th_inc, th_dec;\n    int inc = 1;\n    int dec = -1;\n    if (pthread_create(&amp;th_inc, NULL, count, &amp;inc) != 0) ERROR(\"create inc thread\");\n    if (pthread_create(&amp;th_dec, NULL, count, &amp;dec) != 0) ERROR(\"create dec thread\");\n\n    if (pthread_join(th_inc, NULL) != 0) ERROR(\"inc thread join\");\n    if (pthread_join(th_dec, NULL) != 0) ERROR(\"dec thread join\");\n    printf(\"value: %d\\n\", value);\n}\n</code></pre>"},{"location":"22FS/SNP/05_OS.html#sempaphors","title":"Sempaphors","text":"<p>Es wird den Include <code>#include &lt;semaphor.h&gt;</code>  (und <code>#include &lt;fcntl.h&gt;</code> f\u00fcr O_CREAT) ben\u00f6tigt. Semaphors k\u00f6nnen f\u00fcr Prozesse, wie auch f\u00fcr Threads verwendet werden.</p> <p>Eine Semaphor ben\u00fctzt ein Counter. Wenn der Counter 0 ist, warten Prozesse, welche <code>int sem_wait(...)</code> aufrufen. Wenn der Counter h\u00f6her ist, wird der Counter um <code>1</code> dekrementiert und den Prozess durchgelassen. <code>int sem_post(...)</code> erh\u00f6ht den Counter um <code>1</code>, was bedeutet, dass ein Prozess mehr durch kann.</p> <p>Semaphors ben\u00fctzen die Struktur <code>sem_t</code>. F\u00fcr eine In-Memory Sempahor kann <code>int sem_init(sem_t *sem, int pshared, unsigned int value)</code>  ben\u00fctzt weden. Bei einer Named-Semaphor muss <code>sem_t *sem_open(char *name, int oflags, mode_t mode, unsigned int value)</code> aufgerufen werden, welches eine neue Semaphor zur\u00fcck gibt. Als <code>oflag</code> kann <code>O_CREAT</code> (ohne E am ende) (in fcntl.h definiert) ben\u00fctzt werden und bewirkt, dass die Sempahore erstellt wird, wenn sie noch nicht existiert. <code>mode_t</code> ist ein Otal-File Mode (wie <code>0700</code>).</p> <p><code>int sem_wait(sem_t *sem)</code> wartet darauf, dass der Counter h\u00f6her ist als <code>0</code>. Wenn ja, wird er um eins dekrementiert und durchgelassen, sonst wird blockiert.</p> <p><code>int sem_post(sem_t *sem)</code> erh\u00f6ht den Counter um eins. Falls ein Prozess bereits <code>int sem_wait(...)</code> aufgerufen hat, wird dieser druchgelassen, bzw. der n\u00e4chste Prozess wird direkt durchgelassen.</p> <p>In-Memory Semaphors werden mit <code>int sem_destroy(sem_t *sem)</code> geschlossen. Named Semaphors werden mit <code>int sem_close(sem_t *sem)</code> geschlossen. Mit <code>int sem_unlink(sem_t *sem)</code> wird die Semaphor gel\u00f6scht, sobald alle Prozesse <code>sem_close(...)</code> darauf aufgerufen haben.</p>"},{"location":"22FS/SNP/05_OS.html#beispiel","title":"Beispiel","text":"<pre><code>#include &lt;semaphore.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;stdbool.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void) {\n    // creates a unnamed in memory semaphore\n    sem_t unamed_sem;\n    //false means that the semaphore should be used for thread-communication\n    // 0 is the initial value\n    if(sem_init(&amp;unamed_sem, false, 0) != 0) \n        perror(\"Couldn't init unnamed semaphore\");\n\n    // creates a named semaphore which can be opend by multiple processes\n    sem_unlink(\"/name\");\n    // 0 is the initial value\n    sem_t *named_sem = sem_open(\"/name\", O_CREAT, 0700, 0);\n    if (named_sem == NULL)\n        perror(\"Couldn't init named semaphore\");\n    sem_unlink(\"/name\");\n}\n</code></pre> <p>Im folgenden Beispiel wurde Sudo-Code geschrieben.</p> <p></p>"},{"location":"22FS/SNP/05_OS.html#barriere","title":"Barriere","text":"<p>Eine Barriere blockiert mehrere Tasks. Eine Barriere l\u00e4sst bloss alle Tasks durch, wenn gen\u00fcgend Tasks da sind. Im Vergleich zu dem Sempaphors: </p> <ul> <li>Semaphoren: der Busfahrer l\u00e4sst solange Passagiere in den Bus, bis er voll ist</li> <li>Barriere: der Busfahrer wartet bis die gesamte Klasse da ist und l\u00e4sst sie erst dann   in den Bus einsteigen</li> </ul>"},{"location":"22FS/SNP/05_OS.html#signale","title":"Signale","text":"<p>Ein Prozess kann einem anderen Prozess Signale mithilfe von <code>kill(pid, signal_code)</code>. Der empfangende Prozess kann entweder sich beenden, das Signal ignorieren oder ein Handler ausf\u00fchren, wenn dieser Code empfangen wird. Das Verhalten von <code>SIGKILL</code> und <code>SIGSTOP</code> kann nicht ver\u00e4ndert werden und beendet immer den Prozess.</p> <p>Ein Prozess kann mit <code>pause()</code> warten, bis ein Signal empfangen wurde.</p> <p>Mit <code>sigaction(int sig, struct sigaction *act, struct sigaction *oact)</code> kann das Verhalten beim Empfangen eines Signal ge\u00e4ndert werden. Der int <code>sig</code> ist die Nummer des Signales,  <code>act</code> ist die neue Action und in <code>oact</code> kann ein <code>sigaction</code> Variable angegeben werden, in welche die alte Action geschrieben wird. Die <code>sigaction</code> kann folgendermassen ben\u00fctzt werden: </p> <p>Der Typ von <code>sigaction.sa_handler</code> hat den Typ <code>void(*) (int)</code>, was ein Pointer auf eine Funktion, wie <code>void test(int a)</code>  ist. Diese kann entweder eine eigene Funktion sein, oder <code>SIG_DFL</code> f\u00fcr den Default und <code>SIG_IGN</code> zum ignorieren, angegeben werden.</p> <p><code>raise(int sig)</code> sendet das Signal zum eigenen Prozess.</p> Signal Erkl\u00e4rung Default Aktion <code>SININT</code> Interrupt-Signal von der Tastatur (CTRL-C) Term <code>SIGQUIT</code> Quit-Signal von der Tastatur (CTRL-) Core <code>SIGABRT</code> Abort-Signal via abort() oder assert() Core <code>SIGKILL</code> Kill-Signal (unver\u00e4nderbar) Term <code>SIGSEGV</code> Unzul\u00e4ssiger Speicherzugriff Core <code>SIGALRM</code> Timer-Signal durch alarm() ausgel\u00f6st Term <code>SIGTERM</code> Terminierungs-Signal Term <code>SIGSTOP</code> Stoppt den Prozess (oder ignoriert falls gestoppt) (unver\u00e4nderbar) Stop <code>SIGCONT</code> Reaktiviert den Prozess (oder ignoriert falls am Laufen) Cont <p>Dabei steht:</p> <ul> <li><code>Ter</code> f\u00fcr das terminieren der Prozesse</li> <li><code>Core</code> f\u00fcr das terminieren der Prozesse und ein Code-Dump zu produzieren</li> <li><code>Ignored</code> f\u00fcr das ignorieren des Signales</li> <li><code>Stop/Cont</code> f\u00fcr das stoppen und reaktivieren des Prozesses (oder ignorieren, falls nicht anwendbar)</li> </ul>"},{"location":"22FS/SNP/05_OS.html#beispiel-sa_siginfo","title":"Beispiel <code>SA_SIGINFO</code>","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;signal.h&gt;\n#include &lt;sys/wait.h&gt;\n#include &lt;fcntl.h&gt;\n\nvoid handler(int sig, siginfo_t *info, void *context) {\n    printf(\"caught (%d): source=%d, this=%d\\n\", sig, info-&gt;si_pid, getpid());\n    raise(SIGTERM); // = kill(getpid(), SIGTERM)\n}\n\nint main(void) {\n    pid_t pid = fork();\n    if (pid == 0) {\n        struct sigaction sa = {0};\n        sa.sa_flags = SA_SIGINFO; // use extended handler\n        sa.sa_sigaction = handler; // set handler\n        // sigfillset specifies that all signals should be ignored while the handler(...) is running\n        if (sigfillset(&amp;sa.sa_mask) == -1) ERROR(\"sigfillset\");\n        if (sigaction(SIGUSR1, &amp;sa, NULL) == -1) ERROR(\"sigaction\");\n\n        if (pause() == -1) ERROR(\"pause()\"); // pause process\n    } else {\n        sleep(1);\n        if (kill(pid, SIGUSR1) == -1) ERROR(\"kill\");\n    }\n}\n</code></pre>"},{"location":"22FS/SNP/05_OS.html#pipes","title":"Pipes","text":"<p><code>int pipe(int filedes[2])</code> erstellt eine unbenannte Pipe mit zwei Filedeskriptoren, welche in das angegebene Array geschrieben wird. Auf diese k\u00f6nnen mit <code>write()</code> und <code>read()</code> geschrieben und gelesen weden. <code>pipe(...)</code> gibt <code>0</code> zur\u00fcck, wenn kein Fehler aufgetreten ist.</p> <p>Eine Pipe geht nur in eine Richtung und daher muss  eine der beiden Deskriptoren von je einem Prozess kreuzweise mit <code>close(int filedesriptor)</code> geschlossen werden, dass die Pipe nutzbar ist. Mit <code>write(int filedes, void *buffer, size_t size)</code></p> <p></p> <p>Eine Pipe kann auch  Non-Blocking genutzt werden. Dies kann folgendermassen gesetzt werden: </p> <p>Nun kann folgendermassen davon gelesen werden: </p> <p>Mit <code>int mkfifo(char* pathname, mode_t mode)</code> wird eine Named-Pipe erstellt. Die Funktion gibt <code>0</code> zur\u00fcck, wenn kein Fehler aufgetreten ist. Die beiden Prozesse k\u00f6nnen vom File bei <code>pathname</code> lesen oder schrieben. </p>"},{"location":"22FS/SNP/05_OS.html#message-queue","title":"Message Queue","text":"<p>Ist eine Queue, welche Strings zwischen Prozessen austauschen kann. Das Programm muss mit dem <code>-lrt</code> Flag kompiliert werden. </p> <p>Mit <code>mqd_t mq_open(char* qname, int flag, int mode, struct mq_attribute *attr)</code>  kann eine neue Queue ge\u00f6ffnet werden. Der QName muss mit einem Slash beginnen und existieren in einem Virtuellen Filesystem <code>/dev/mqueue</code>. Queues k\u00f6nnen auch Non-Blocking ge\u00f6ffnet werden.</p> <p>Mit <code>int mq_close(mqd_t queue)</code> teilt dem Kernel mit, dass der Zugriff auf die Queue abgeschlossen ist. </p> <p>Mit <code>int mq_unlink(char* name)</code> kann die Queue gel\u00f6scht werden. Sie kann danach nicht mehr ge\u00f6ffnet werden und wird gel\u00f6scht, wenn jeder Prozess, welcher ein File-Deskriptor offen hat, diesen mit <code>mq_close(...)</code> geschlossen hat.</p> <p></p>"},{"location":"22FS/SNP/05_OS.html#sockets","title":"Sockets","text":""},{"location":"22FS/SNP/06_Standard%20Library.html","title":"Standard Library","text":""},{"location":"22FS/SNP/06_Standard%20Library.html#stdioh","title":"stdio.h","text":""},{"location":"22FS/SNP/06_Standard%20Library.html#perror","title":"<code>perror</code>","text":"<p><code>void perror(char *s)</code> druckt den letzten Fehler mit der angegebenen Nachricht aus.</p>"},{"location":"22FS/SNP/06_Standard%20Library.html#printfsprintf-man-3-printf","title":"<code>printf</code>/<code>sprintf</code> (man 3 printf)","text":"<p><code>printf(char *format, args...)</code> formatiert die <code>args</code> anhand von dem <code>format</code>. Es gibt 3 relevante Methoden:</p> <ul> <li><code>printf(char *format, args...)</code> druckt den formatierten String in die Konsole</li> <li><code>sprintf(charr *str, char *format, args...)</code> schreibt den formatierten String in die Variable <code>str</code>.</li> <li><code>fprintf(FILE *stream, char *format, args...)</code> schreibt den formatierten String in das File <code>stream</code></li> </ul> <p>Jeder Platzhalter folgt dem Muster <code>%[flags][width][.precision]conversion</code> </p> <p>Die <code>width</code> gibt an, wie viel Platz vor der Variable soll sein. Wenn die Zahl mit einem <code>0</code> prefixt ist (z.B. <code>022</code>), wird die Zahl 0-padded. Dies wird allerdings nur von Zahlen, wie Integers oder Doubles unterst\u00fctzt.</p> <p>Die <code>.precision</code> gibt an, wie viele Stellen nach dem Komma gedruckt werden sollen und wird nur f\u00fcr Kommazahlen unterst\u00fctzt.</p> <p>Anstatt eine Zahl f\u00fcr <code>width</code> und <code>.precision</code> kann auch ein <code>*</code> verwendet werden. Dabei wird der Wert als Input genommen. Beispiel: <code>printf(\"%0*.*f\", 7, 2, 2.456666)</code> w\u00fcrde <code>0002.46</code> ausgeben.</p> <p>Das <code>flag</code> kann <code>-</code> sein, was bewirkt, dass das Feld left-adjusted wird.</p> <p>Folgende Conversions sind g\u00e4ngig:</p> Typ C Erkl\u00e4rung Beispiel int d, i gibt ein int aus. Precission ist nicht unterst\u00fctzt <code>%02i</code> (druckt <code>03</code>) unsinged int u, x/X u gibt die Zahl in dezimal aus, x in Hex als kleine Buchstaben (ff) und X mit grossen Buchstaben (FF) <code>%04u</code> (druckt <code>0022</code>), <code>%X</code> (druckt <code>AF2</code>) double f gibt double aus <code>%.3f</code> = \"2.340\" char c gibt ein char aus. Precission und 0-padding sind nicht unterst\u00fctzt <code>%2c</code>= \"  d\" char* s gibt ein string aus <code>%s</code> = \"Hello world\""},{"location":"22FS/SNP/06_Standard%20Library.html#scanf","title":"<code>scanf</code>","text":"<p><code>scanf(char *format, ...)</code> liest ein Format vom stdin. Es gibt auch <code>fscanf(FILE *stream, char *format, ...)</code>, was von einem File scannt und <code>sscanf(char *str, char *format, ...)</code>, was von einem String scannet.</p> <p>Als R\u00fcckgabe Wert wird die Anzahl von gefunden Inputs zur\u00fcck gegeben.</p> <p>Das Format ist wie bei <code>printf</code> mit einigen \u00c4nderungen.</p> <ul> <li><code>f</code> ist nur f\u00fcr floats</li> <li><code>lf</code> muss f\u00fcr doubles genutzt werden</li> </ul> <p><code>scanf(\"hello %d\", i)</code> w\u00e4re nicht valide, da keine fixe Strings im <code>scanf</code>-Format stehen darf</p>"},{"location":"22FS/SNP/06_Standard%20Library.html#int-getchar","title":"<code>int getchar()</code>","text":"<p>Blockiert, bis der Nutzer eine Zeile in die Konsole eingegeben hat. Danach wird jeweils ein Zeichen von diesem Buffer gelesen und zur\u00fcck gegeben. Wenn stdin geschlossen wird, wird <code>EOF</code> zur\u00fcck gegeben.</p>"},{"location":"22FS/SNP/06_Standard%20Library.html#string-library","title":"String-Library","text":"<ul> <li> <p><code>int strlen(char *str)</code>   Die L\u00e4nge des Strings (ohne <code>\\0</code>)</p> </li> <li> <p><code>int strcmp(char *s1, char *s2)</code></p> </li> <li> <p><code>char* strcpy(char *dest, char *src)</code>   Achtung: dest muss genug gross f\u00fcr src sein</p> </li> <li> <p><code>car *strcat(char *s1, char *s2)</code>   Achtung: s1 muss genug gross, f\u00fcr s1 + s2 sein</p> </li> <li> <p><code>char *strdup(char *s)</code>   Dupliziert <code>s</code> in einer neuen <code>char*</code>, welcher mit <code>free(...)</code> freigegeben werden muss</p> </li> <li> <p><code>char* strsep(char **stringp, char* dellim)</code>   Findet den ersten Token und gibt ein Pointer auf diesem Zur\u00fcck. In <code>*stringp</code> wird der delim mit <code>\\0</code> \u00fcberschrieben und <code>**stringp</code> wird geupdated, dass es auf den delim zeigt.</p> </li> </ul> <pre><code>#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void) {\n    char *s1 = strdup(\"1, 2, 3, hi\");\n    char *token;\n    while ((token = strsep(&amp;src, \",\")) != NULL) {\n        printf(\"token: %s\\n\", token);\n    }\n    free(s1);\n}\n</code></pre> <ul> <li><code>char *strtok(char *s, char *delim)</code>   Es wird nach <code>delim</code> in <code>s</code> gesucht. Wenn gefunden, wird <code>delim</code> durch <code>\\0</code> ersetzt und es wird ein Pointer auf den gefundenen Token zur\u00fcck gegeben. Es wird ein interner statischer Buffer verwendet. Daher wird bei folge Aufrufe <code>NULL</code> als <code>s</code> verwendet.</li> </ul> <pre><code>#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main(void) {\n    char *s1 = strdup(\"1, 2, 3, hi\");\n    for (char *token = strtok(s1, \",\"); token != NULL; token = strtok(NULL, \",\")) {\n        printf(\"token: %s\\n\", token);\n    }\n    free(s1);\n}\n</code></pre>"},{"location":"22FS/SNP/summary_jonas.html","title":"SNP Summary","text":"<ul> <li>SNP Summary</li> <li>History of C</li> <li>Overview and Basics<ul> <li>Files</li> <li>Data Types</li> <li>Literals</li> <li>ASCII Table</li> <li>String Basics</li> </ul> </li> <li>Syntax<ul> <li>Macro Definition</li> <li>Declaration &amp; Definition</li> <li>Operators</li> <li>Arithmetic</li> <li>Comparison</li> <li>Logical</li> <li>Bitwise</li> <li>Assignment</li> <li>Pointer</li> <li>Other (reduced)</li> <li>Precedence and associativity</li> <li>Booleans</li> <li>Enums</li> <li>Structs</li> </ul> </li> <li>Variables &amp; References<ul> <li>Call by value</li> <li>Call by reference</li> <li>Arrays as parameters</li> <li>Structs as parameters</li> <li>Pointer to function</li> <li>Variable amount of args</li> </ul> </li> <li>Global Variables</li> <li>Modularization<ul> <li>Compilation</li> <li>Header Guards</li> <li>Useful Libraries</li> </ul> </li> <li>Make<ul> <li>Syntax</li> </ul> </li> <li>Arrays<ul> <li>Array Sizes</li> <li>Working with Strings</li> <li>Most important functions</li> </ul> </li> <li>Pointers<ul> <li>Reading Pointers</li> </ul> </li> <li>Memory Management<ul> <li>Heap Memory</li> </ul> </li> <li>Operating Systems<ul> <li>System Calls</li> <li>Shells</li> <li>Linux Startup Sequence</li> <li>System Memory</li> <li>Filesystem</li> <li>Filesystem Hierarchy Standard</li> <li>Inodes</li> <li>Links</li> <li>File Types</li> <li>Working with Files</li> <li>Buffering</li> </ul> </li> <li>Processes and Threads<ul> <li>Lifecycle of a Process</li> <li>Functions</li> <li>Working with pipelines</li> <li>Lifecycles of Threads</li> </ul> </li> <li>Inter Process Communication<ul> <li>POSIX Signals</li> <li>POSIX Pipes</li> <li>Anonymous Pipes</li> <li>Named Pipes</li> <li>POSIX Message Queues</li> <li>POSIX Sockets</li> </ul> </li> <li>Synchronization<ul> <li>Mutual exclusion</li> <li>Semaphores</li> <li>Examples</li> <li>Producer-Consumer Problem</li> <li>Reader-Writer Problem</li> </ul> </li> </ul>"},{"location":"22FS/SNP/summary_jonas.html#history-of-c","title":"History of C","text":"<p>A quick timeline of C's development:</p> Year Name Event 1970 C Dennis Ritchie at Bell Labs developed the language for use in UNIX 1978 K&amp;R C Ritchie and Kerningham release C 1983 C++ Stroustrup develops C++ as a C extension 1989 ANSI C C is standardized 1990 C90 ISO copies the ANSI standard 1995 Java Java is released by Sun 1999 C99 C is update with newer extenbsions 2000 C# Microsoft develops a Java competitor 2011 C11 ISO standardizes C with better c++ compat 2018 C18 Minor changes to the C11 standard"},{"location":"22FS/SNP/summary_jonas.html#overview-and-basics","title":"Overview and Basics","text":"<p>C is a procedural language. It is not object-oriented whatsoever. There is no concept of classes or methods. Only functions exists. There is a single entry-point for every application, <code>main</code>. Once <code>main</code> ends, the application terminates.</p>"},{"location":"22FS/SNP/summary_jonas.html#files","title":"Files","text":"<p>In general, there are 4 different file types that are associated with C:</p> File extensions Usage .c A pure text file that usually contains code .h A header files that provides definitions for functions and variables that other files can import and use .d A file containing all dependecies of a program. Usually generated by Make and can be ignored .mk/Makefile A Make definition used to make compiling easier .o/no extension The output file(s) of the compiler"},{"location":"22FS/SNP/summary_jonas.html#data-types","title":"Data Types","text":"<p>By default, C has 4 distinct data types that can also be extended with some keywords. Keywords in brackets signify that the compiler infers it when it isn't replaced with another keyword.</p> Keywords Bytes Numeric range <code>[signed] char</code> 1 \\(-128\\) to \\(127\\) <code>[signed] int</code> 4 \\(-2^{31}\\) to \\(2^{31}-1\\) <code>float</code> 4 \\(-3.4*10^{38}\\) to \\(3.4*10^{38}\\) <code>double</code> 8 \\(-1.79*10^{308}\\) to \\(1.79*10^{308}\\) <code>unsigned char</code> 1 \\(0\\) to \\(255\\) <code>[signed] short [int]</code> 2 \\(-32768\\) to \\(32767\\) <code>unsigned short [int]</code> 2 \\(0\\) to \\(65535\\) <code>unsigned [int]</code> 4 \\(0\\) to \\(2^{32}-1\\) <code>[signed] long [int]</code> 8 \\(-2^{63}\\) to \\(2^{31}-1\\) <code>[signed] long long [int]</code> 8 \\(-2^{63}\\) to \\(2^{31}-1\\) <code>unsigned long [int]</code> 8 \\(0\\) to \\(2^{64}-1\\) <code>unsigned long long [int]</code> 8 \\(0\\) to \\(2^{64}-1\\) <code>long double</code> 10 \\(-1.2*10^{4932}\\) to \\(1.2*10^{4932}\\)"},{"location":"22FS/SNP/summary_jonas.html#literals","title":"Literals","text":"<p>C supports implicit typing for literals.</p> Type Example Decimal number 1234 Octal number 0123 Hexadecimal number 0x123 ASCII code <code>'A'</code> <p>Decimals and ASCII codes are always signed ints. If the int is too large, it's a long instead.</p> <p>A combination of <code>U</code> and <code>L</code> can be used to explicitly declare a unsigned or long value.</p> <p>Numbers with decimal points are always doubles unless appended with <code>F</code> where they are read as floats instead.</p> <p>Special characters are escaped using a backslash <code>\\</code>. ASCII characters may also be expressed using their hexadecimal, octal or decimal notation when escaped.</p>"},{"location":"22FS/SNP/summary_jonas.html#ascii-table","title":"ASCII Table","text":""},{"location":"22FS/SNP/summary_jonas.html#string-basics","title":"String Basics","text":"<p>In C, strings are zero-terminated arrays of <code>char</code>s. As an example, the phrase 'amogus' requires an array with space for 7 elements rather than 6. This is because the zero-terminator <code>NUL</code> or <code>\\0</code> is required.</p> <p>Strings may also be formatted:</p> Specifier Conversion %c A single char %s An array of chars %d or %i Signed integer to decimal representation %u Unsigned integer to decimal representation %x Unsigned integer to hexadecimal representation %o Unsigned integer to octal representation %f Float to decimal notation %e Float to exponential notation %g Float to decimal or exponential notation <p>Example:</p> <pre><code>a = scanf(\"%d%d%d\", &amp;day, &amp;month, &amp;year);\n</code></pre>"},{"location":"22FS/SNP/summary_jonas.html#syntax","title":"Syntax","text":""},{"location":"22FS/SNP/summary_jonas.html#macro-definition","title":"Macro Definition","text":"<p>C supports the definition of so called macros. These tell the C pre-processor to replace certain strings with a defined constant. This is most often used to define constants, as it's cheaper to directly store those values inside the program without having to allocate a variable for each constant. Example:</p> <p>This definition...</p> <pre><code>#define MAX_LENGTH 5\n</code></pre> <p>...is applied to this piece of code...</p> <pre><code>int length = MAX_LENGTH;\n</code></pre> <p>...and results in this</p> <pre><code>int length = 5;\n</code></pre>"},{"location":"22FS/SNP/summary_jonas.html#declaration-definition","title":"Declaration &amp; Definition","text":"<p>The terms declaration and definition may sound similar but are positively distinct. A declaration merely specifies how a name is used throughout the program whereas a definition allocates memory or specifies a function. As a result, a definition can only happen after a declaration. For brevity, the term 'declaration' will be used throughout the document to address both of the terms unless.</p> <ul> <li>Base types are implicitly known to the compiler. (e.g. int, char, etc.) </li> <li>Custom structs and enums define a type. </li> <li> <p>Defined types without a body are merely declared.</p> </li> <li> <p>The <code>typedef</code> keyword can be used to create an alias to any base or custom type.</p> </li> <li>The <code>const</code> keyword can be used to create an unmodifiable variable.</li> </ul>"},{"location":"22FS/SNP/summary_jonas.html#operators","title":"Operators","text":""},{"location":"22FS/SNP/summary_jonas.html#arithmetic","title":"Arithmetic","text":"Operator Purpose a + b Guess what a - b Really now? +a Unary plus, generally useless but can widen lesser base types to the size of <code>int</code> -a Unary minus, results in the additive inverse of a1 a * b Multiplication a / b Division, segfault if b is 0 a % b Remainder of a / b or modulo ++a Increments variable, then returns it a++ Returns variable, then increments it --a Decrements variable, then returns it a-- Returns variable, then decrements it"},{"location":"22FS/SNP/summary_jonas.html#comparison","title":"Comparison","text":"Operator Purpose &gt; Greater than &lt; Less than &gt;= Greater than or equal to &lt;= Less than or equal to == Equal to != Not equal to"},{"location":"22FS/SNP/summary_jonas.html#logical","title":"Logical","text":"Operator Purpose !a Logical negation, equivalent to <code>a == 0</code> a &amp;&amp; b Logical AND, returns 0 if a and b are zero, returns 1 otherwise a || b Logical OR, returns 0 if at least a or b are zero, returns 1 otherwise"},{"location":"22FS/SNP/summary_jonas.html#bitwise","title":"Bitwise","text":"Operator Purpose ~a NOT, inverts all bits a &amp; b AND, keeps all 1 bits that are the same a | b OR, keeps all 1 bits a ^ b XOR, turns all 1 and 0 pairs into 1 &lt;&lt; Left shift, multiplication by 2 in some cases &gt;&gt; Right shift"},{"location":"22FS/SNP/summary_jonas.html#assignment","title":"Assignment","text":"<p>All arithmetic and bitwise operators can be combined with the assignment operator. These lines are equivalent:</p> <pre><code>a += b;\na = a + b;\n</code></pre>"},{"location":"22FS/SNP/summary_jonas.html#pointer","title":"Pointer","text":"Operator Purpose a[b] A pointer to the element of index b in the array a *a Indirection, object pointed to by a if a &amp;a Memory address of a a-&gt;b Structure dereference, member b of object pointed to by a a.b Structure reference, member b of object a"},{"location":"22FS/SNP/summary_jonas.html#other-reduced","title":"Other (reduced)","text":"Operator Purpose a ? b : c If a then b else c typeof(a) The size of a in bytes (type)a Cast a to type"},{"location":"22FS/SNP/summary_jonas.html#precedence-and-associativity","title":"Precedence and associativity","text":"<p>Precedence is the order of evaluation of operators within operations. When all operators posess the same precedence, associativity takes over. In general, all operators default to left-associativity with the exception of prefixed unary operators, conditional operators and assignment operators.</p>"},{"location":"22FS/SNP/summary_jonas.html#booleans","title":"Booleans","text":"<p>Default C does not support Booleans. However, most libraries treat 0 as false and every other number as true.</p> <p>Booleans can also be imported with <code>stdbool.h</code></p>"},{"location":"22FS/SNP/summary_jonas.html#enums","title":"Enums","text":"<p>Enums work similar to other languages. They have a name and each value can be assigned any integer value. Example</p> <pre><code>typedef enum {TRUE = 1, FALSE = 0} fakeBool;\n</code></pre> <p>When declared with typedef, enums can be used as types.</p>"},{"location":"22FS/SNP/summary_jonas.html#structs","title":"Structs","text":"<p>Structs are a useful tool to create custom data types in C. They can contain any number primitive types or other custom types. The <code>sizeof</code> keyword accurately summarizes the needed data to store the struct. Example:</p> <pre><code>typedef struct {\n  usigned int inhabitants;\n  float longitude;\n  float latitude;\n  bool available;\n  float surface;\n} House;\n</code></pre>"},{"location":"22FS/SNP/summary_jonas.html#variables-references","title":"Variables &amp; References","text":"<p>This chapter shows examples on how data could be passed to other functions. Note that parameters and return values always occur by value. To pass a pointer into a function, it has to be dereferenced first with <code>&amp;</code>.</p>"},{"location":"22FS/SNP/summary_jonas.html#call-by-value","title":"Call by value","text":"<p><code>void func(int a, int b)</code> Passes the actual value. Effectively creates a copy</p>"},{"location":"22FS/SNP/summary_jonas.html#call-by-reference","title":"Call by reference","text":"<p><code>void func(int *a, int *b)</code> Passes a pointer to a value. Changes to that value propagate up.  </p> <p>example:  </p> <pre><code>// Increment first parameter by second parameter.\n// Pass first parameter by reference and second by value.\nvoid increment(int *p, int step);\n\nint main(void) {\n    int a = 3, b = 5;\n    increment(&amp;a, b); // after the call, the following condition\n} // must be fulfilled: a = a + b (= 8)\n\nvoid increment(int *p, int step) {\n    *p += b;\n}\n</code></pre>"},{"location":"22FS/SNP/summary_jonas.html#arrays-as-parameters","title":"Arrays as parameters","text":"<pre><code>void func(int a[])\n</code></pre> <p>is equivalent to </p> <pre><code>void func(int *a)\n</code></pre>"},{"location":"22FS/SNP/summary_jonas.html#structs-as-parameters","title":"Structs as parameters","text":"<pre><code>struct t { int v; };\n\nvoid func(struct t arg);\n</code></pre> <p>or</p> <pre><code>struct t { int v; };\n\nvoid func(struct t *p);\n</code></pre>"},{"location":"22FS/SNP/summary_jonas.html#pointer-to-function","title":"Pointer to function","text":"<pre><code>void logger(char *msg); // Function declaration\nvoid (*out)(char *); // Error\n\nout = &amp;logger; // Memory address of the function is stored\nout = logger; // Error\n...\n(*out)(\"Hello\"); // Equivalent to writing logger(\"Hello\");\nout (\"Hello\"); // Error\n</code></pre>"},{"location":"22FS/SNP/summary_jonas.html#variable-amount-of-args","title":"Variable amount of args","text":"<p><code>stdarg.h</code> adds support for multiple variables:  </p> <pre><code>int func(unsigned amount, ...)\n{\n    va_list args;\n    unsigned i;\n    int value;\n    int sum = 0;\n    va_start(args, amount);\n\n    for (i = 1; i &lt;= amount; i++)\n    {\n        value = va_arg(args, int);\n        sum += value;\n    }\n\n    va_end(args);\n    return (amount ? sum/amount : 0);\n}\n\nint main(void)\n{\n    (void) printf(\"Mittelwert 0: %d\\n\", mittelwert(0));\n    (void) printf(\"Mittelwert 1: %d\\n\", mittelwert(1, 2));\n    (void) printf(\"Mittelwert 3: %d\\n\", mittelwert(3, 4, 5, 6));\n}\n</code></pre>"},{"location":"22FS/SNP/summary_jonas.html#global-variables","title":"Global Variables","text":"<p>Global variables are a dangerous but useful tool</p> <ul> <li>Variables declared outside of function scope are considered global</li> <li>Every part of that program can access any global variable</li> <li>The default value is 0</li> <li>Local variables are undefined by default</li> <li>The <code>static</code> keyword can limit access to the current source file</li> <li>Using <code>static</code> inside a function body keeps its value alive throughout multiple calls of said function</li> </ul>"},{"location":"22FS/SNP/summary_jonas.html#modularization","title":"Modularization","text":""},{"location":"22FS/SNP/summary_jonas.html#compilation","title":"Compilation","text":"<p>The compilation process consists of 3 steps:</p> <ol> <li>The pre-processor executes all pre-processor directives (e.g. <code>#include</code>, <code>#define</code>, etc.)</li> <li>The compiler transforms all code to a machine-readable byte stream</li> <li>The linker links all calls to different libraries and components together</li> </ol> <p></p> <p>A common command to compile a program:</p> <pre><code>gcc -Wall -g -o program file1.c file2.c\n</code></pre> <p>System libraries that are not part of gcc can be specified with -llibrary. This translates to -L \"liblibrary.a\" but searches in multiple system directories.</p>"},{"location":"22FS/SNP/summary_jonas.html#header-guards","title":"Header Guards","text":"<p>When including header files, it may occur that a header file is included more than once which leads to compiler errors. To prevent this, header guards can be implemented. Simply wrap the whole header file like this:</p> <pre><code>// header.h\n#ifndef HEADER_H\n#define HEADER_H\n\n... // Definitions here\n\n#endif\n</code></pre>"},{"location":"22FS/SNP/summary_jonas.html#useful-libraries","title":"Useful Libraries","text":"Library Use stdio.h IO functions string.h Working with strings stdlib.h RNG, memory control, process control stdarg.h Vararg support stddef.h Additional constants like <code>NULL</code> math.h Math functions errno.h Adds <code>errno</code>, a global variable that stores an error code signal.h Signal-handling functions (e.g. exceptions) assert.h Testing library ctype.h Tests for chars float.h Macro constants relevant to floats and doubles limits.h Limit constants of integral types locale.h Get locale information setjmp.h Convenience functions for jumping time.h Time and date functions"},{"location":"22FS/SNP/summary_jonas.html#make","title":"Make","text":"<p>Make is a tool to compile modularized code into programs. Additionally, it only recompiles parts of the code that were unchanged.</p>"},{"location":"22FS/SNP/summary_jonas.html#syntax_1","title":"Syntax","text":"<p>Makefiles consist of rules, commands and comments. </p> <ul> <li>Comments are marked with <code>#</code>.</li> <li><code>target:</code> is used to define a sub-command</li> <li><code>dependencies:</code> are used to define dependencies</li> <li><code>command:</code> is defines a command to be executed when a <code>dependencies</code> is newer than a <code>target</code></li> <li><code>&lt;TAB&gt; [command]</code> is used to denote commands</li> <li>Variables can be declared as <code>VAR = VAL.c</code> and read via <code>$(VAR)</code></li> <li>The pseudo-target <code>.PHONY</code> lists files to be ignored</li> <li>Variables can be substring-ed with <code>%</code>: <code>$(VAR:%.c=%.o)</code> results in <code>VAL.o</code></li> </ul> <p>Example makefile: https://github.zhaw.ch/thalmma5/snp-lab-code/blob/my-code/shared.mk</p>"},{"location":"22FS/SNP/summary_jonas.html#arrays","title":"Arrays","text":"<p>Arrays in C are always contiguous in memory. An array declaration does nothing more than reserve the necessary space in memory, place elements if applicable and return a pointer to the first value of the array. To access any other element of the array, the pointer to the first element is added to the index of the desired element times the <code>sizeof</code> result of the type. This also makes it impossible to implicitly know the size of the array.</p>"},{"location":"22FS/SNP/summary_jonas.html#array-sizes","title":"Array Sizes","text":"<p>There are a few ways to access the size/last element of an array. The obvious solution would be to store the last index during array creation, as arrays are immutable:</p> <pre><code>#define N_ENTRIES 100\n\nint array[N_ENTRIES] = { 0 };\n...\nfor (int i = 0; i &lt; N_ENTRIES; i++) {\n  int a = array[i];\n}\n</code></pre> <p>The other method would be to use a data sentry/terminator value:</p> <pre><code>#define DATA_SENTRY (-1)\n\nint array[] = { 1, 2, 3, DATA_SENTRY };\n...\nfor (int i = 0; array[i] != DATA_SENTRY; i++) {\n  a = array[i];\n}\n</code></pre>"},{"location":"22FS/SNP/summary_jonas.html#working-with-strings","title":"Working with Strings","text":"<p>As mentioned already, strings are merely zero-terminated char arrays. As such, specia tools can be employed to make working with them easier. <code>string.h</code> is the most common tool for this.</p>"},{"location":"22FS/SNP/summary_jonas.html#most-important-functions","title":"Most important functions","text":"Signature Description Returns <code>int strlen(const char s[]);</code> Gets the length of the given string without the terminator(s) Length <code>int strcmp(const char s1[], const char s2[]);</code> Compares to strings The first <code>s1[i] - s2[i]</code> that is !=0, 0 otherwise <code>char* strcpy(char dest[], const char source[]);</code> Copies a string from source to dest C99: Copy of dest; C11: errno_t <code>char* strcat(char s1[], const char s2[]);</code> Concatenates two strings, s1 must have enough space Pointer to s1"},{"location":"22FS/SNP/summary_jonas.html#pointers","title":"Pointers","text":"<p>The dreaded topic: Pointers. Infamous for being stupidly hard to understand. However, pointers really aren't that hard to understand. Let's set the stage first. Every variable has to be stored somewhere in memory. We don't care where in memory since our random-access memory is stupidly fast nowadays. We still need know how to access that data, however. Memory addresses are used for that purpose. Whenever a variable is allocated in C, a pointer that points to a memory address is created. Memory addresses and by extension pointers are nothing more than integers. Usually 32-bits or 64-bits long. As such, you can also store a pointer in memory. Then, you get a pointer that points to a pointer that points to a piece of data! Pointers also have a data type so that C knows how far to read into memory to get all the data. Here are a few examples:</p> <p>A simple variable <pre><code>int a = 1;\n</code></pre></p> <p>A pointer that points to num <pre><code>int num = 1;\nint *a = &amp;num;\n</code></pre></p> <p>An array of pointers <pre><code>int *a[5];\n</code></pre></p> <p>A pointer to an array of ints <pre><code>int (*a)[5];\n</code></pre></p> <p>Pointer to pointer to int <pre><code>int **a;\n</code></pre></p> <p>Pointer to a function <pre><code>void (*out)(char *);\n</code></pre></p>"},{"location":"22FS/SNP/summary_jonas.html#reading-pointers","title":"Reading Pointers","text":"<p>When reading pointers, the <code>*</code> receives a different meaning. Where <code>p</code> is a pointer to an integer, the statement <code>int a = *p;</code> tells C to assign <code>a</code> the object that <code>p</code> is pointing to.</p> <p>Then there is a new operator, the <code>&amp;</code>. Where <code>a</code> is an int, the statement <code>int *p = &amp;a;</code> tells C to get the address where <code>a</code> is located and to store it in <code>p</code>.</p> <p>When reading arrays, the statement <code>array[3]</code> is equal to <code>*(array + 3)</code>. Note, however, that the <code>+ 3</code> in question is multiplied by the <code>sizeof</code> result of <code>array</code>'s type.</p>"},{"location":"22FS/SNP/summary_jonas.html#memory-management","title":"Memory Management","text":"<p>Most programs posess four memory sections: The code ith all the functions, global and static variables, the heap for dynamically allocated variables and the stack where local variables and parameters are stored.</p> <p></p>"},{"location":"22FS/SNP/summary_jonas.html#heap-memory","title":"Heap Memory","text":"<p>The heap is an immensly powerful tool that can be accessed with <code>stdlib.h</code>. Using <code>*malloc(size_t size)</code> a memory region of any size can be reserved for whatever purpose. <code>malloc</code> simply returns a pointer to it. However, it is very important that <code>free(void *ptr)</code> is called after that region of memory is not needed anymore, as otherwise memory leaks will occur.</p> <p>Basic example <pre><code>int *p = malloc(3 * sizeof(int)); // Returns NULL when no memory available\nif (p == NULL) { /* error handling */ }\np[1] = 5;\nfree(p); // Memory is released\n</code></pre></p> <p>Heap memory is most useful for dynamically allocated arrays or dynamic collections like linked lists.</p> <p>Follow these guidelines to prevent most issues:</p> bad gud <code>gets</code> Use <code>fgets</code> as the maximum chars can be constrained <code>strcpy</code>, <code>strcat</code> Use <code>strncpy</code> and <code>strncat</code> as copied chars can be limited <code>sprintf</code>, <code>scanf</code> Always add precision specifiers like <code>%.100s</code> <code>malloc</code>, <code>calloc</code>, <code>realloc</code> Check for NULL pointers <code>free</code> Only use it once <p>Always sanitize user input.</p>"},{"location":"22FS/SNP/summary_jonas.html#operating-systems","title":"Operating Systems","text":"<p>In essence, an operating system is an abstraction of direct access to CPU Time and other system resources. On the innermost layer there is the Kernel that has direct access to all components. On the outermost layer there are the system and user libraries and programs. To connect these two, system calls are used.</p>"},{"location":"22FS/SNP/summary_jonas.html#system-calls","title":"System Calls","text":"<p>A syscall submits a task to kernel that requests a certain resource or action to be executed for the calling user-mode program. System libraries provide implementations of this function to make development more portable. Around 300 different syscalls exist on linux.</p> <p>Under the hood, <code>syscall()</code> returns -1 when an error occurs and also sets the global <code>errno</code> variable to a relevant error code. When sucessful, returns 0. <code>syscall()</code> is rarely used as is since abstractions exist in glibc and other system libraries.</p>"},{"location":"22FS/SNP/summary_jonas.html#shells","title":"Shells","text":"<p>Shells provide a textual interface to the operating system. They can usually also execute shell-scripts for automation. Most shells consist of the 3 streams <code>stdin</code> for user input, <code>stdout</code> for program output and <code>stderr</code> for program error output.</p>"},{"location":"22FS/SNP/summary_jonas.html#linux-startup-sequence","title":"Linux Startup Sequence","text":"<ol> <li>BIOS initializes all components</li> <li>Bootloader loads minimal partition (MBR or GPT)</li> <li>Bootloader loads full mass storage partitions (ext4, NTFS, etc.)</li> <li>Linux Kernel starts up</li> <li>Init process starts (usually systemd)</li> <li>GUI loads, could be a DE or just a shell</li> </ol>"},{"location":"22FS/SNP/summary_jonas.html#system-memory","title":"System Memory","text":"<p>In order to prevent programs from tampering with unrelated memory, virtual memory is employed to limit access to system memory. For that to work, however, a memory management unit (MMU) is required. The MMU is tasked with translating logical memory addresses to physical addresses that the CPU can work with. Additionally, it contains a memory protection unit (MPU) that observes and prevents illegitimate resource access.</p>"},{"location":"22FS/SNP/summary_jonas.html#filesystem","title":"Filesystem","text":"<p>On Linux, everything is a file as it serves as very logical abstraction of most devices. Linux OSes mostly adhere to the FHS as described below.</p>"},{"location":"22FS/SNP/summary_jonas.html#filesystem-hierarchy-standard","title":"Filesystem Hierarchy Standard","text":"Directory Description / Root directory /bin Binaries that all users need /sbin System binaries /boot Bootloader files /dev Device files /etc System-wide config files /home User home directories /lib Essential libraries /media Removable media /mnt Mounted filesystems /opt Additional software packages /proc Process and kernel info /root Home of root /srv Server files /sys Device and driver infos /usr Read-only multi-user directory /var Logs and temporary files <p>Files are measured in bytes and can be read by multiple programs simultaneously. This is achieved using file descriptors. One gets created every time a program opens a file and is stored by the kernel until the program closes that file.</p>"},{"location":"22FS/SNP/summary_jonas.html#inodes","title":"Inodes","text":"<p>Files themselves are represented as Inodes, a management unit that associates each file with UUID called an ino. Thes Inodes contain necessary info about the file in questions. (except the file name) It's important to note that Inodes are strictly for accessing files programmatically as they are quite ugly to look at.</p>"},{"location":"22FS/SNP/summary_jonas.html#links","title":"Links","text":"<p>Links link a filename to an inode in some way.</p> <ul> <li>Hard link: A strict name-to-inode pair</li> <li>Symbolic Link: A unidirectional file-to-file link</li> </ul>"},{"location":"22FS/SNP/summary_jonas.html#file-types","title":"File Types","text":"<p>There are 7 different file types in Linux.</p> Type Identifier Use File <code>-</code> A regular file Directory <code>d</code> A file that contains files Symbolic link <code>l</code> A file that points to another file Named pipe <code>p</code> Unidirectional program-to-program exchange Socket <code>s</code> Inter process communication Block device <code>b</code> Random-acces storage device Character device <code>c</code> Serial input and output of storage <p>Different file types may be seekable or non-seekable. Seekable files allow arbitrary changing of the read and write position whereas non-seekable files do not.</p>"},{"location":"22FS/SNP/summary_jonas.html#working-with-files","title":"Working with Files","text":"<p>The <code>stdio.h</code> library provides most necessary functions to properly interact with files. Due to the volatile nature of filesystems, it is very important to always check for errors after each IO operation.</p> <p>Here is an example: <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid perror_and_exit(const char *context)\n{\n    perror(context); \n    exit(EXIT_FAILURE); \n}\n\nint main(int argc, char *argv[])\n{\n    if (argc &gt; 1) {\n        FILE *f = fopen(argv[1], \"rb\");\n        if (!f) perror_and_exit(argv[1]); // f is null if something went wrong\n        int line_no = 1;\n        int print_line_no = 1;\n        int c;\n        while((c = fgetc(f)) &gt;= 0) {\n            if (print_line_no &amp;&amp; printf(\"%6d \", line_no++) &lt; 0) perror_and_exit(\"printf\"); // Something could happen while reading\n            print_line_no = c == '\\n';\n            if (putchar(c) &lt; 0) perror_and_exit(\"putchar\"); // Writing is also dangerous\n        }\n        if (!feof(f)) PERROR_AND_EXIT(\"fgetc\"); // File may not end\n        if (fclose(f) != 0) perror_and_exit(\"fclose\"); // File might not be closable\n        return EXIT_SUCCESS;\n    }\n    return EXIT_FAILURE;\n}\n</code></pre></p>"},{"location":"22FS/SNP/summary_jonas.html#buffering","title":"Buffering","text":"<p>IO streams can be buffered differently depending on their application.</p> <ul> <li>Unbuffered: Data gets send ASAP (e.g. stderr)</li> <li>Fully buffered: Data gets only sent when the designated buffer is full (e.g. stdin, stdout)</li> <li>Line buffered: Data gets only sent when an end-of-line is read</li> </ul>"},{"location":"22FS/SNP/summary_jonas.html#processes-and-threads","title":"Processes and Threads","text":"<p>A process is an isolated program with its own part of memory. A process can have an arbitrary number of threads. The process contains the code and data of the program. It also has access to resources as if it were the only process running. However, the process can be interrupted at any point without it noticing.</p> <p>Context switches are used to swap active processes. As such, processes have different states:</p> <ul> <li>Running/active: Currently running</li> <li>Ready: Ready to run</li> <li>Blocked: Waiting for an event</li> <li>Terminated: Work ended but OS has not finished cleaning up</li> </ul> <p>As a rule of thumb, processes are expensive to create and maintain whearas threads are cheap to create but need to share memory.</p>"},{"location":"22FS/SNP/summary_jonas.html#lifecycle-of-a-process","title":"Lifecycle of a Process","text":"<p>At some point in any multi-threaded process, the process will split into another process. As such, the program must wait for the completion of the new process to ensure consistent behavior.</p> <p></p>"},{"location":"22FS/SNP/summary_jonas.html#functions","title":"Functions","text":"<p><code>fork()</code> duplicates the parent process and continues at the position. Retuns -1 on error, 0 if the process is the resulting child process and the pid &gt; 0 if it's the parent process.</p> <p><code>exit()</code> terminates the process and notifies the parent's <code>wait()</code> call.</p> <p><code>waitpid()</code> waits for a given pid to terminate.</p> <p><code>WEXITSTATUS()</code> gets the exit code from <code>wait()</code>.</p> <p>An example <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/wait.h&gt;\n\n#define PERROR_AND_EXIT(M) do { perror(M); exit(EXIT_FAILURE); } while(0)\n\nint main()\n{\n    pid_t cpid = fork();\n    if (cpid == -1) PERROR_AND_EXIT(\"fork\");\n    if (cpid &gt; 0) {\n        // still in parent process\n        printf(\"Parent: %d forked child %d\\n\", getpid(), cpid);\n        int wstatus;\n        pid_t wpid = waitpid(cpid, &amp;wstatus, 0); // wait blocking for child to terminate\n        if (wpid == -1) PERROR_AND_EXIT(\"waitpid\");\n        printf(\"Parent: child %d exited with %d (status=0x%x)\\n\", cpid, WEXITSTATUS(wstatus), wstatus);\n        exit(EXIT_SUCCESS);\n    } else {\n        // in child process\n        printf(\"Child: %d forked by parent %d\\n\", getpid(), getppid());\n        sleep(3);\n        exit(123);\n    }\n}\n</code></pre></p> <p><code>ecec()</code> and <code>execv()</code> can be used to execute external programs from new processes. They require a path to the executable and the argv arguments array.</p> <p>Example <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/wait.h&gt;\n\n#define PERROR_AND_EXIT(M) do { perror(M); exit(EXIT_FAILURE); } while(0)\n\nint main()\n{\n    pid_t cpid = fork();\n    if (cpid == -1) PERROR_AND_EXIT(\"fork\");\n    if (cpid &gt; 0) {\n        // still in parent process\n        printf(\"Parent: %d forked child %d\\n\", getpid(), cpid);\n        int wstatus;\n        pid_t wpid = waitpid(cpid, &amp;wstatus, 0); // wait blocking for child to terminate\n        if (wpid == -1) PERROR_AND_EXIT(\"waitpid\");\n        printf(\"Parent: child %d exited with %d (status=0x%x)\\n\", cpid, WEXITSTATUS(wstatus), wstatus);\n        exit(EXIT_SUCCESS);\n    } else {\n        // in child process: replace current image by new image\n        static char *eargv[] = { \"ls\", \"-l\", NULL }; // argv of the execv image below\n        if (execv(\"/bin/ls\", eargv) == -1) PERROR_AND_EXIT(\"execv: /bin/ls\"); // Equivalent to ls -l\n        // this line is never reached\n    }\n}\n</code></pre></p> <p>The shorthand form <code>system()</code> exists. No forking or waiting required. <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;sys/wait.h&gt;\n\n#define PERROR_AND_EXIT(M) do { perror(M); exit(EXIT_FAILURE); } while(0)\n\nint main()\n{\n    int ret = system(\"/bin/ls -l\");\n    printf(\"system() exited with %d (status=0x%x)\\n\", WEXITSTATUS(ret), ret); // WEXITSTATUS is set by system()\n    return EXIT_SUCCESS;\n}\n</code></pre></p>"},{"location":"22FS/SNP/summary_jonas.html#working-with-pipelines","title":"Working with pipelines","text":"<p><code>popen()</code> allows a program to connect to another programs stdin or stdout. Returns a <code>FILE*</code>. <code>pclose()</code> closes the pipe.</p> <p>Example</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;errno.h&gt;\n\n#define PERROR_AND_EXIT(M) do { perror(M); exit(EXIT_FAILURE); } while(0)\n\nint main()\n{\n    FILE *df = popen(\"df -k --output=pcent . 2&gt;/dev/null\", \"r\");\n    if (!df) PERROR_AND_EXIT(\"popen: df -k .\");\n    char line[BUFSIZ], *end = NULL;\n    long int used = -1;\n\n    while(fgets(line, BUFSIZ, df)) {\n        used = strtol(line, &amp;end, 10);\n        if (end &amp;&amp; end != line &amp;&amp; *end == '%') break; // line is spaces-number%-newline\n        used = -1;\n    }\n\n    if (pclose(df)) PERROR_AND_EXIT(\"pclose()\");\n\n    if (used &lt; 0 || used &gt; 100) {\n        errno = ERANGE;\n        PERROR_AND_EXIT(\"df -k .\");\n    }\n\n    char *msg\n    = used &lt; 60 ? \"Plenty of disk space (%d%% available)\\n\"\n    : used &lt; 80 ? \"Maybe some future disk space problems (%d%% available)\\n\"\n    : used &lt; 90 ? \"Need to clear out files (%d%% available)\\n\"\n    : \"You may face soon some severe disk space problems (%d%% available)\\n\";\n    printf(msg, 100-used);\n    return EXIT_SUCCESS;\n}\n</code></pre>"},{"location":"22FS/SNP/summary_jonas.html#lifecycles-of-threads","title":"Lifecycles of Threads","text":"<p>glibc contains functions for thread creation. <code>pthread_create()</code> is used to create a new thread that takes a function pointer to work on.</p> <p><code>pthread_join()</code> waits for a given thread and then frees system resources.</p> <p><code>pthread_detach()</code> changes termination behavior so that resources are freed as soon as the new thread terminates. Joining is then undefined.</p> <p>Example  <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;errno.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;pthread.h&gt;\n\n#define PERROR_AND_EXIT(M) do { perror(M); exit(EXIT_FAILURE); } while(0)\n#define CHECKED_PTHREAD(C) do { int ret = (C); if (ret) { errno = ret; PERROR_AND_EXIT(#C); } } while(0)\n\nvoid *worker(void *arg)\n{\n    printf(\"worker\\n\");\n    sleep(3);\n    static int ret_value = 123;\n    return &amp;ret_value;\n}\n\nint main()\n{\n    pthread_t thread;\n    CHECKED_PTHREAD(pthread_create(&amp;thread, NULL, worker, NULL));\n    printf(\"main\\n\");\n    static void *retval;\n    CHECKED_PTHREAD(pthread_join(thread, &amp;retval));\n    printf(\"worker retval = %d\\n\", *((int*)retval));\n    exit(EXIT_SUCCESS);\n}\n</code></pre></p>"},{"location":"22FS/SNP/summary_jonas.html#inter-process-communication","title":"Inter Process Communication","text":"<p>In order to facilitate communication between processes, glibc provides many POSIX functions that allow such communication.</p>"},{"location":"22FS/SNP/summary_jonas.html#posix-signals","title":"POSIX Signals","text":"<p>Any proccess can send any signal to another process. A process can decide whether to respond with a default action, with an event handler or just ignore the signal entirely.</p> Signal Default action Description SIGINT Terminate Ctrl-C interrupt SIGQUIT Core dump Ctrl-\\ quit SIGABRT Core dump Abort signal from <code>abort()</code> or <code>assert()</code> SIGKILL Terminate Kill SIGSEGV Core dump Illegal memory access SIGALRM Terminate Timer ran out from <code>alarm()</code> SIGTERM Terminate Terminate SIGSTOP Stop process Stop process SIGCONT Reactivate process Reactivate process <ul> <li><code>kill()</code> sends a signal to a process</li> <li><code>pause()</code> blocks until the process is killed or any signal is received</li> <li><code>sigaction()</code> registers a signal handler</li> <li><code>sigfillset()</code> returns a <code>sigset_t</code> to specify which signals to block while the handler is being run</li> <li><code>raise()</code> sends a signal to the own process</li> </ul> <p>sigaction example <pre><code>// set action handler\nstruct sigaction a = { 0 };\na.sa_flags = SA_SIGINFO;\na.sa_sigaction = handler;\nsigfillset(&amp;a.sa_mask);\nsigaction(sig, &amp;a, NULL);\n</code></pre></p>"},{"location":"22FS/SNP/summary_jonas.html#posix-pipes","title":"POSIX Pipes","text":"<p>Pipes are first in, first out data buffers with a maximum size. File descriptors are used to communicate current access to the OS. Pipes are also always synchronous.</p> <p><code>pipe(int[2])</code> followed by <code>fork()</code> creates an anonymouse pipe and <code>mkfifo()</code> creates a named pipe which acts like a file.</p> <p>Anonymous pipe example <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;unistd.h&gt;\n...\n    int fd[2];\n    pipe(fd);\n    pid_t cpid = fork();\n    ...\n    if (cpid &gt; 0) { // still in parent process: read from pipe\n        close(fd[1]); // close write-file-descriptor\n        read(fd[0], ...); // use read-file-descriptor\n        ...\n    } else { // in child process: write to pipe\n        close(fd[0]); // close read-file-descriptor\n        write(fd[1], ...); // use write-file-descriptor\n    }\n...\n</code></pre></p>"},{"location":"22FS/SNP/summary_jonas.html#anonymous-pipes","title":"Anonymous Pipes","text":"<p>Anonymous pipes are also unidirectional. For bidirection communication, two pipes are needed.</p> <ul> <li><code>pipe()</code> opens two file descriptors. A process can only use one of these descriptors</li> <li><code>close()</code> closes a descriptor</li> <li><code>read()</code> reads from pipe (blocking)</li> <li><code>write()</code> writes to pipe (blocking)</li> </ul> <p>Using <code>fcntl()</code> makes a pipe non-blocking <pre><code>void set_nonblocking(int fd) {\n    int flags = fcntl(fd, F_GETFL, 0);\n    if (flags == -1) PERROR_AND_EXIT(\"fcntl\");\n    if (fcntl(fd, F_SETFL, flags | O_NONBLOCK) == -1) PERROR_AND_EXIT(\"fcntl\");\n}\n...\nint pfd[2];\nif (pipe(pfd) == -1) PERROR_AND_EXIT(\"pipe\");\nset_nonblocking(pfd[0]); // set reading file descriptor to non-blocking\n...\n</code></pre></p> <p>This results in some extra conditions having to be checked <pre><code>int n = read(pfd[0], buf, MSGSIZE);\nif (n &gt; 0) { ... } // use received data\nelse if (n == 0) { ... } // close and stop polling\nelse if (errno == EAGAIN) { ... } // has to wait for poll interval - avoid spin-lock\nelse { ... } // real error\n</code></pre></p>"},{"location":"22FS/SNP/summary_jonas.html#named-pipes","title":"Named Pipes","text":"<p>Can be created within the shell: <code>mkfifo [path] -m [access mode]</code>. Blocks until both sides are open.</p> <p>In C, <code>mkfifo()</code> is used and functions like a file.</p>"},{"location":"22FS/SNP/summary_jonas.html#posix-message-queues","title":"POSIX Message Queues","text":"<p>Queues have a maximum number of messages and a maximum size in bytes, reperesented by the struct <code>mq_attr</code>. Multiple processes can read from and write to a message queue. Reading consumes a message. Names must also always start with a <code>/</code>. By default, queues exist in <code>/dev/mqueue</code>.</p> <p>Important: Message Queues functions are part of <code>librt.a</code> so the needs the fla -lrt.</p> <p>Example <pre><code>#include &lt;mqueue.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;errno.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/wait.h&gt;\n\n#define PERROR_AND_EXIT(M) do { perror(M); exit(EXIT_FAILURE); } while(0)\n#define QNAME \"/demo\" // the name must start with a slash\n#define MSIZE 10\n\nint main() {\n    int q = 0, cpid = 0, n = 0, wpid = 0;\n    struct mq_attr a = { .mq_maxmsg = 10, .mq_msgsize = MSIZE };\n    if ((q = mq_open(QNAME, O_CREAT|O_RDWR|O_NONBLOCK|O_EXCL, 0666, &amp;a)) == -1) PERROR_AND_EXIT(\"mq_open\");\n    if ((cpid = fork()) == -1) PERROR_AND_EXIT(\"fork\");\n\n    if (cpid &gt; 0) { // parent: shares queue descriptor with child\n        if (mq_unlink(QNAME) == -1) PERROR_AND_EXIT(\"mq_unlink\"); // remove it from the filesystem again\n        char msg[MSIZE+1]; // buffer allows for final '\\0' to allow interpretation as string\n\n        while(wpid == 0) { // read messages while the child process has not yet terminated\n            sleep(1); // poll interval for non-blocking mq_receive() and non-blocking waitpid()\n            while ((n = mq_receive(q, msg, MSIZE, NULL)) &gt; 0) { // read while there are messages\n                msg[n] = '\\0'; // prepare for printf\n                printf(\"Message: '%s'\\n\", msg);\n            }\n            if (n == -1 &amp;&amp; errno != EAGAIN) PERROR_AND_EXIT(\"mq_receive\"); // non-blocking read handling\n            if ((wpid = waitpid(cpid, NULL, WNOHANG)) == -1) PERROR_AND_EXIT(\"waitpid\"); // non-blocking\n        }\n        if (mq_close(q) == -1) PERROR_AND_EXIT(\"mq_close\"); // close when completed\n    } else { // child: shares queue descriptor with parent\n        if (mq_send(q, \"Hello\", sizeof(\"Hello\"), 1) == -1) PERROR_AND_EXIT(\"mq_send\");\n        sleep(2);\n        if (mq_send(q, \"Queue\", sizeof(\"Queue\"), 1) == -1) PERROR_AND_EXIT(\"mq_send\");\n    }\n}\n</code></pre></p>"},{"location":"22FS/SNP/summary_jonas.html#posix-sockets","title":"POSIX Sockets","text":"<p>Logically connect to processes with a socket. Abstracts all necessary system needed to actually make such a connection.</p> <p>Usual client process:</p> <ul> <li>Define socket</li> <li>Request connection to server</li> <li>Exchange data</li> <li>Close socket</li> </ul> <p>Usual server process:</p> <ul> <li>Define socket</li> <li>Wait for connection</li> <li>Accept or reject connection</li> <li>Exchange data</li> <li>Close socket</li> </ul> <p>For non-connection-oriented connections the same happens except no connection requests are exchanged.</p>"},{"location":"22FS/SNP/summary_jonas.html#synchronization","title":"Synchronization","text":"<p>This part highlights the most common synchronization methods used in C.</p>"},{"location":"22FS/SNP/summary_jonas.html#mutual-exclusion","title":"Mutual exclusion","text":"<p>Mutexes in C are very simple. Trying to lock a mutex that is already locked results in blocking behavior until that mutex is released. A recursive option can also be given that allows a function to lock and unlock a mutex multiple times.</p> <p>Recursive example <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;pthread.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;errno.h&gt;\n\n#define FATAL(M) do { perror(M); exit(EXIT_FAILURE); } while(0)\n#define N 10000000\n#define MUTEXATTR PTHREAD_MUTEX_RECURSIVE\n\npthread_mutexattr_t mutex_attr;\npthread_mutex_t mutex;\nint value = 0;\n\nvoid calc(int step)\n{\n    if (pthread_mutex_lock(&amp;mutex) != 0) FATAL(\"inner lock\");\n    value += step;\n    if (pthread_mutex_unlock(&amp;mutex) != 0) FATAL(\"inner unlock\");\n}\n\nvoid *count(void *p)\n{\n    for(int i = 0; i &lt; N; i++) {\n        if (pthread_mutex_lock(&amp;mutex) != 0) FATAL(\"lock\");\n        calc(*(int*)p);\n        if (pthread_mutex_unlock(&amp;mutex) != 0) FATAL(\"unlock\");\n    }\n}\n\nint main(void)\n{\n    if (pthread_mutexattr_init(&amp;mutex_attr) != 0) FATAL(\"mutexattr_init\");\n    if (pthread_mutexattr_settype(&amp;mutex_attr, MUTEXATTR) != 0) FATAL(\"mutexattr_set\");\n    if (pthread_mutex_init(&amp;mutex, &amp;mutex_attr) != 0) FATAL(\"mutex_init\");\n    pthread_t th_inc;\n    pthread_t th_dec;\n    int inc = +1;\n    int dec = -1;\n    if (pthread_create(&amp;th_inc, NULL, count, &amp;inc) != 0) FATAL(\"create\");\n    if (pthread_create(&amp;th_dec, NULL, count, &amp;dec) != 0) FATAL(\"create\");\n    if (pthread_join(th_inc, NULL) != 0) FATAL(\"join\");\n    if (pthread_join(th_dec, NULL) != 0) FATAL(\"join\");\n    if (value != 0) fprintf(stderr, \"ERROR: exp=%d, act=%d\\n\", 0, value);\n}\n</code></pre></p>"},{"location":"22FS/SNP/summary_jonas.html#semaphores","title":"Semaphores","text":"<p>A semaphore is essentially a street light for threads. <code>sem_init</code> sets the initial value. <code>sem_post</code> decrement said value or block if that value is 0. <code>sem_wait</code> increases that value if sem_post was called earlier.</p> <p>Semaphore example <pre><code>#include &lt;sys/types.h&gt;\n#include &lt;pthread.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;limits.h&gt;\n#include &lt;semaphore.h&gt;\n\n#define FATAL(M) do { perror(M); exit(EXIT_FAILURE); } while(0)\n#define CHECK(E,A,M) if((E)==(A));else fprintf(stderr,\"ERROR: \"M\": exp=%d, act=%d\\n\",E,A)\n#define N 10000\n\nvolatile int array[N] = { 0 }; // shared variable: init in one thread, then use in both\nsem_t sem;\n\nvoid *min(void *arg) // initialize the data and calculate min value of all\n{\n    for(int i = 0; i &lt; N; i++) array[i] = i - N/2; // init the shared data -N/2...N-1-N/2\n    if (sem_post(&amp;sem) == -1) FATAL(\"post\");\n    int value = INT_MAX;\n    for(int i = 0; i &lt; N; i++) if (value &gt; array[i]) value = array[i];\n    CHECK(-N/2, value, \"wrong min value\");\n    return NULL;\n}\n\nvoid *max(void *arg) // calculate max value of already initialized data\n{\n    if (sem_wait(&amp;sem) == -1) FATAL(\"wait\");\n    int value = INT_MIN;\n    for(int i = 0; i &lt; N; i++) if (value &lt; array[i]) value = array[i];\n    CHECK(N-1-N/2, value, \"wrong max value\");\n    return NULL;\n}\n\nint main(void)\n{\n    if (sem_init(&amp;sem, 0, 0) == -1) FATAL(\"sem\");\n    pthread_t th_max;\n    pthread_t th_min;\n    if (pthread_create(&amp;th_max, NULL, max, NULL) != 0) FATAL(\"create\");\n    if (pthread_create(&amp;th_min, NULL, min, NULL) != 0) FATAL(\"create\");\n    if (pthread_join(th_max, NULL) != 0) FATAL(\"join\");\n    if (pthread_join(th_min, NULL) != 0) FATAL(\"join\");\n}\n</code></pre></p> <p>Semaphores can exist in memory or as files.</p>"},{"location":"22FS/SNP/summary_jonas.html#examples","title":"Examples","text":""},{"location":"22FS/SNP/summary_jonas.html#producer-consumer-problem","title":"Producer-Consumer Problem","text":""},{"location":"22FS/SNP/summary_jonas.html#reader-writer-problem","title":"Reader-Writer Problem","text":"<p>Allow multiple readers but only one writer.</p> <p></p>"},{"location":"22FS/THIN/00_Fragen.html","title":"Fragen","text":"<ul> <li>Satz von Rice</li> <li>Das heisst doch, dass eine Menge von entscheidbaren Funktionen unentscheidbar ist?</li> <li>F\u00fcr was werden Loop/While/... Programme ben\u00f6tigt? Und wieso sind sie so restriktiv (z.B. \\(x_0=x_1+x_2\\) ist nicht erlaubt, obwohl es mit einem Loop-Programm selbst machbar ist)? </li> <li>Eine Frage wegen der Entscheidbarkeit vom Halteproblem: Wie passen die folgende zwei Folien zusammen:</li> </ul> <p>und</p> <p></p> <p>und</p> <p></p> <p>Laut den Folien ist das Spezielle Halteproblem, das Halteproblem und das leere Halteproblem semi-entscheidbar, weill H0 semi entscheidbar ist und nicht entscheidbar weil Hs nicht entscheidbar ist. </p> <ul> <li>Nicht-Entscheidbar = Es ist nicht entscheidbar, k\u00f6nnte aber semi-entscheidbar sein</li> <li>Unentscheidbar = Es h\u00e4lt nie an</li> <li> <p>In der Folien werden die Begriffe als Synonyme verwendet</p> </li> <li> <p>\"So kann auch komplement von M nicht nach (1) semi-entscheidbar sein\"? </p> </li> </ul> <p>Wenn NP=P ist, dann k\u00f6nnten alle NP-Probeleme deterministisch in Polynomzeit gel\u00f6st werden.</p>"},{"location":"22FS/THIN/01_Definitionen.html","title":"Definitionen","text":""},{"location":"22FS/THIN/01_Definitionen.html#alphabet","title":"Alphabet","text":"<p>Ein Alphabet ist ein endliche, nichtleere Menge von Symbolen.</p> <p>Als Beispiel: \\(\\Sigma=\\{a, b, c\\}\\) \\(\\N\\) w\u00e4re kein Alphabet, das es nicht endlich ist!</p>"},{"location":"22FS/THIN/01_Definitionen.html#worter","title":"W\u00f6rter","text":"<p>Ein Wort ist eine endliche Folge von Symbolen eines bestimmten Alphabets.</p> <p>Das leere Wort \\(\\varepsilon\\) ist ein Wort, welches keine Symbole enthaltet. Dieses Wort gibt es \u00fcber jedem Alphabet.</p> <p>Als Beispiel: \\(abc\\) ist ein Wort \u00fcber dem Alphabet \\(\\Sigma_{lat}\\). W\u00f6rter k\u00f6nnen auch als Mengenschreibweisse dargestellt werden.</p>"},{"location":"22FS/THIN/01_Definitionen.html#lange-eines-wortes","title":"L\u00e4nge eines Wortes","text":"<p>Der Betrag eines Wortes ist die L\u00e4nge des Wortes.</p> <p>Beispiel: </p> <ul> <li>\\(|abc|=3\\)</li> <li>\\(|\\varepsilon|=0\\)</li> </ul>"},{"location":"22FS/THIN/01_Definitionen.html#absolute-haufigkeit","title":"Absolute H\u00e4ufigkeit","text":"<p>\\(|w|_x bezeichnet die absolute H\\)uffigkeit eines Symboles \\(x\\) in einem Wort \\(w\\)</p> <p>Beispiel: </p> <ul> <li>\\(|abc|_a=1\\)</li> <li>\\(|100111|_1=4\\)</li> <li>\\(|\\varepsilon|_{\\varepsilon}=1\\)</li> </ul>"},{"location":"22FS/THIN/01_Definitionen.html#spiegelwort","title":"Spiegelwort","text":"<p>Mit \\(w^R\\) wird das Spiegelwort zu \\(w\\) bezeichnet. $$ W^R=(x_1, x_2...x_n)^R=(x_n...x_2,x_1) $$ Dabei gilt, dass \\(|w|=|w^R|\\) und \\(|w|_x=|w^R|_x\\)</p> <p>Wenn \\(w=w^R\\) gilt, dann wird \\(w\\) als Palindrom bezeichnet</p> <p>Beispiel:</p> <ul> <li>\\((abc)^R=cba\\)</li> </ul>"},{"location":"22FS/THIN/01_Definitionen.html#teile-von-worter","title":"Teile von W\u00f6rter","text":"<p>Der start eines Wortes \\(w\\) wird Pr\u00e4fix genannt.  Symbole in der Mitte werden Infixe oder auch Teilw\u00f6rter.  Das Ende eines Wortes \\(w\\) wird Suffix genannt.</p> <p>Ein Pr\u00e4fix, Infix oder Suffix ist echt, wenn sie nicht gleich das Wort \\(w\\) ist</p>"},{"location":"22FS/THIN/01_Definitionen.html#menge-aller-worter-mit-einer-lange","title":"Menge aller W\u00f6rter mit einer L\u00e4nge","text":"<p>Die Menge aller W\u00f6rter der L\u00e4nge \\(k\\) \u00fcber einem Alphabet \\(\\Sigma\\) wird mit \\(\\Sigma^k\\) bezeichnet.</p> <p>\\(\\Sigma^0=\\{\\varepsilon\\}\\) Dies ist per Definition f\u00fcr alle Alphabete gegeben.</p> <p>Beispiel: \\(\\{0, 1\\}^2=\\{00, 01, 10, 11\\}\\)</p>"},{"location":"22FS/THIN/01_Definitionen.html#kleenesche-hulle","title":"Kleenesche H\u00fclle","text":"<p>Die Menge aller W\u00f6rter \\(\\Sigma^*\\) in einem Alphabet wird Kleenesche H\u00fclle genannt und ist abz\u00e4hlbar Unendlich</p> <p>\\(\\Sigma^+=\\Sigma^*\\setminus\\{\\varepsilon\\}\\)  und ist die Menge aller W\u00f6rter \u00fcber \\(\\Sigma\\) ohne das leere Wort</p>"},{"location":"22FS/THIN/01_Definitionen.html#konkatination","title":"Konkatination","text":"<p>\\(x\\circ y=xy\\) heisst, dass die W\u00f6rter \\(x\\) und \\(y\\) zusammen verkettet werden. Die W\u00f6rter m\u00fcssen nicht aus demselben Alphabet kommen.</p> <p>Es gilt zudem: \\(|x|+|y|=|xy|=|x\\circ y|\\)</p> <p>Beispiel: \\(x=22\\) und \\(y=100\\), dann gilt: \\(xy=x\\circ y=22100\\)</p>"},{"location":"22FS/THIN/01_Definitionen.html#wortpotenzen","title":"Wortpotenzen","text":"<p>Die Wortpotenz ist definiert mit der folgenden Defintion $$ x^0=\\varepsilon\\ x^{n+1}=x^n\\circ x $$</p> <p>Beispiel: </p> <ul> <li>\\(a^3=a^2a=a^1aa=a^0aaa=aaa\\)</li> <li>\\(bbababababaaa=b^2(ab)^4a^3\\) (Dies ist nicht die einzige L\u00f6sung)</li> </ul>"},{"location":"22FS/THIN/01_Definitionen.html#sprachen","title":"Sprachen","text":"<p>Eine Teilmenge von W\u00f6rtern nennt man eine Sprache (Dies kann auch als \\(L\\subseteq \\Sigma^*\\) geschrieben werden)</p> <p>\\(\\Sigma*\\) ist auch eine Sprache \u00fcber dem Alphabet \\(\\Sigma\\)</p> <p>Wenn \\(\\Sigma_1 \\subseteq \\Sigma_2\\) und \\(L\\) eine Sprache \u00fcber \\(\\Sigma_1\\) ist, dann ist \\(L\\) auch eine Sprache  \u00fcber \\(\\Sigma_2\\)</p> <p>\\(\\emptyset\\) ist eine leere Sprache; Also eine Sprache ohne W\u00f6rter und gilt f\u00fcr jedes Alphabet (\\(\\empty\\neq \\{\\varepsilon\\}\\)) </p> <p>Sprache k\u00f6nnen aus unendlich vielen W\u00f6rtern bestehen. Die W\u00f6rter m\u00fcssen aus einem endlichen Alphabet gebildet werden und m\u00fcssen endlich lang sein.</p> <p>Darstellungsm\u00f6glichkeiten:</p> <ul> <li>\\(L=\\{\\varepsilon, 10, 1100, 111000, ...\\}\\)</li> <li>in Prosa</li> <li>\\(L=\\{1^n0^n|n\\in \\N\\}\\)</li> </ul>"},{"location":"22FS/THIN/01_Definitionen.html#sprachen-konkatenation","title":"Sprachen-Konkatenation","text":"<p>\\(A\\subset \\Sigma^*\\) und \\(B\\subset \\Gamma^*\\) sind zwei Sprachen, dann ist \\(AB=\\{uv|u\\in A \\text{ und } v \\in B\\}\\)</p> <p>Zudem gilt: Ist \\(A\\) eine Sprache \u00fcber \\(\\Sigma\\) und \\(B\\) eine Sprache \u00fcber \\(\\Gamma\\), dann ist \\(AB\\) eine Sprache \u00fcber dem Alphabet \\(\\Sigma \\cup\\Gamma\\)</p>"},{"location":"22FS/THIN/01_Definitionen.html#kleenesche-hulle-einer-sprache","title":"Kleenesche H\u00fclle einer Sprache","text":"<p>Die Kleenesche H\u00fclle \\(A*\\) einer Sprache \\(A\\)  ist durch \\({\\varepsilon}\\cup A \\cup AA \\cup AAA \\cup ...\\)</p> <p>Die Kleenische H\u00e8lle einer Sprache ist selbst eine Liste von W\u00f6rter, da die Liste aber unendlich ist, ist sie selbst keine Sprache (stimmt das?)</p>"},{"location":"22FS/THIN/01_Definitionen.html#komplement-einer-sprache","title":"Komplement einer Sprache","text":"<p>Das Komplement einer Sprache sind alle W\u00f6rter, welche nicht in der Sprache sind</p> <p>\\(\\overline L=\\Sigma^*-L=\\Sigma^*\\setminus L\\)</p>"},{"location":"22FS/THIN/01_Definitionen.html#entscheidungsproblem","title":"Entscheidungsproblem","text":"<p>Sei eine Sprache \\(L\\) \u00fcber einem Alphabet \\(\\Sigma\\) gegeben. Das Entscheidungsproblem \\((\\Sigma, L)\\) ist die folgende:</p> <p>Input: Eine Sprache \\(L\\) und ein Wort \\(x\\in\\Sigma^*\\) Output: JA, falls \\(x\\in L\\) ist und NEIN, falls \\(x\\not \\in L\\) ist</p> <p>In Deutsch: \"Geh\u00f6rt ein Wort eines Alphabetes zu einer Sprache?\"</p>"},{"location":"22FS/THIN/01_Definitionen.html#chomsky-hirarchie","title":"Chomsky-Hirarchie","text":""},{"location":"22FS/THIN/01_Definitionen.html#fragen","title":"Fragen","text":"<ul> <li>Ist die Kleenische H\u00fclle einer Sprache wieder eine Sprache? - Ja</li> </ul>"},{"location":"22FS/THIN/02_RegEx.html","title":"RegEx","text":""},{"location":"22FS/THIN/02_RegEx.html#syntax-vs-semantik","title":"Syntax vs Semantik","text":"<p>Der Syntax sagt aus, wie die Symbole des Alphabetes zu W\u00f6rter angeordnet werden.</p> <p>Die Semantik sagt aus, was die Symbole bedeuten (z.B. dass die Zahl 101 im Zehnersystem die Zahl 5 ist.)</p>"},{"location":"22FS/THIN/02_RegEx.html#syntax","title":"Syntax","text":"<ul> <li>\\((0|1)\\) - entweder 0 oder 1 (Manchmal wird dies auch als \\((0+1)\\) geschrieben)</li> <li>\\(x^*\\) - beliebig oft \\(x\\), auch null mal</li> <li>\\(x^+=xx^*\\) - mindestens 1-mal \\(x\\)</li> <li>\\(x?=(x|\\epsilon)\\) - \\(x\\) ist optional</li> <li>\\(\\epsilon\\) - eine leere Regular-Expression. Diese matcht nichts</li> <li>\\([x_1, x_2, ...,x_k]=x_1|x_2|...|x_k\\) </li> <li>\\(\\oslash\\) - eine leere Menge von Regular-Expressions</li> <li>\\(\\O\\) - eine leere Sprache</li> </ul>"},{"location":"22FS/THIN/02_RegEx.html#regular-expression-sprache","title":"Regular-Expression-Sprache","text":"<p>Die Sprache \\(RA_\\Sigma\\) i</p> <p>Eine Menge von Regexe f\u00fcr das Alphabet \\(\\Sigma\\) ist eine Sprache \u00fcber dem Alphabet \\(\\{\\O, \\epsilon, ^*, (, ), \\vert\\} \\cup \\Sigma\\)</p> <p>\"Punkt vor Strich\"-Regeln f\u00fcr Regex:</p> <ul> <li>\\(^*\\) vor Konkatenation</li> <li>Konkatenanation vor \\(\\vert\\)</li> </ul>"},{"location":"22FS/THIN/02_RegEx.html#definitionen","title":"Definitionen","text":"<ul> <li>\\(L(\\emptyset)=\\emptyset\\)</li> <li>\\(L(\\epsilon)=\\{\\varepsilon\\}\\)</li> <li>\\(L(a)=\\{a\\}\\)</li> <li>\\(L(R^*)=L(R)^*\\)</li> <li>\\(L(R|S)=L(R) \\cup L(S)\\)</li> <li>\\(L(RS)=L(R)L(S)\\)</li> </ul>"},{"location":"22FS/THIN/02_RegEx.html#wann-ist-sprachen-regular","title":"Wann ist Sprachen regul\u00e4r","text":"<p>Eine Sprache nennt sich regul\u00e4r, wenn sie mit einem Regul\u00e4ren Ausdruck gebildet werden kann. Daf\u00fcr gibt es eine Regeln:</p> <p>Die Sprache \\(L_1\\) und \\(L_2\\) sind jeweils regul\u00e4r:</p> <ol> <li>\\(L_1L_2\\) ist regul\u00e4r</li> <li>\\(L_1\\cup L_2\\) (Vereinigung) ist regul\u00e4r</li> <li>\\(L_1\\cap L_1\\) (Schnittmenge) ist regul\u00e4r</li> <li>\\(L_1\\setminus L_2\\) (Differenz) ist regul\u00e4r</li> <li>\\(L_1^*\\) ist regul\u00e4r</li> <li>\\(\\overline {L_1}\\) ist regul\u00e4r</li> </ol> <p>Kurz gesagt: Wenn zwei Sprachen regul\u00e4r sind, ist das Resultat von einem Operator mit diesen Sprachen regul\u00e4r</p>"},{"location":"22FS/THIN/02_RegEx.html#fragen","title":"Fragen","text":"<ol> <li>Kommt es nicht auf den Regex darauf an, ob das Alphabet eine Teilmenge der Sprache ist?</li> <li>Wenn \\(R\\) ein Wort ist, w\u00e4re die Kleenische H\u00fclle nicht eine Sprache? Wenn ja, wieso ist eine Sprache ein Element einer anderen Sprache?</li> <li>Was bedeutet \\(\\O\\)?</li> <li>Was ist die Kleenische H\u00fclle eines Regex? (Folie 7)</li> </ol>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html","title":"Endliche Automaten","text":"<ul> <li>Endliche Automaten haben keine Variabeln oder Speicher; Das einzige gespeicherte, ist der aktuelle Zustand</li> <li>Endliche Automaten arbeiten in Echtzeit</li> <li>Das \"Resultat\" ist der Endzustand und ob der Endzustand akkzeptiert/valid ist</li> </ul>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html#definition-eines-endlichen-autommaten","title":"Definition eines Endlichen Autommaten","text":"<p>Endlichen Automat: \\(M=(Q, \\Sigma, \\delta, q_0, F)\\)</p> <ul> <li>\\(Q\\) : Alle Zust\u00e4nde des Automaten \\(Q=\\{q_0, q_1, ...,q_n\\}\\)</li> <li>\\(\\Sigma\\): Eingabealpabet</li> <li>\\(\\delta: Q\\times \\Sigma \\rightarrow Q\\): \u00dcbergangsfunktionen, welche von einem Zustand und einem Eingabe Symbol zum n\u00e4chsten Zustand f\u00fchrt</li> <li>\\(q_0\\): Startzustand</li> <li>\\(F\\subseteq Q\\): Menge der akzeptierten Zust\u00e4nden. Mindestens ein Zustand muss akzeptiert sein</li> </ul>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html#konfiguration","title":"Konfiguration","text":"<p>Eine Konfiguration ist: \\((q, w) \\in Q\\times\\Sigma^*\\) oder in Worten ist eine Konfiguration ein Zustand mit zus\u00e4tzlich das noch zu verarbeitende Wort</p> <p>Eine Startkonfiguration ist ein Element aus \\(\\{q_0\\}\\times \\Sigma^*\\) . Als Beispiel: \\((q_0, w_1)\\)</p> <p>Eine Endkonfiguration ist: \\((q, w)\\in Q\\times\\{\\epsilon\\}\\). Als Beispiel: \\((q2, \\epsilon)\\)</p> <p>Das Wort \\(w\\) in einer Konfiguration \\((q, w)\\) ist der noch zu verarbeitende Teil des Inputwortes. Es ist daher ein Sufix des Inputwortes.</p>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html#berechnungsschritte","title":"Berechnungsschritte","text":"<p>Der Berechnungsschritt \\(\\vdash_M\\) der Endlichen Maschine \\(M\\) ist definiert als \\((q, w)\\vdash_M(p,x)\\), wenn \\(w=ax, a\\in\\Sigma\\) und \\(\\delta(q, a)=p\\) ergibt. </p> <p>Oder in Deutsch \\(\\vdash_M\\) der Endlichen Maschine M ist der Berechnungschritt zwischen einem und dem n\u00e4chsten Zustand.</p>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html#beispiel","title":"Beispiel","text":"<p>Bei dieser Maschine w\u00fcrde folgendes Beispiel g\u00fcltig sein: \\((q0, a_1a_2a_3)\\vdash_A(q_1, a_2a_3)\\vdash_A(q_2, a_3)\\vdash_A(q4, \\epsilon)\\)</p>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html#berechnungen","title":"Berechnungen","text":"<p>Eine endliche Folge von Berechnungsschritten, nennt man Berechnung. Es wird die folgende Notation ben\u00fctzt: \\((q_a, w_1,w_2...w_n)\\vdash_M(q_b, w_2...w_n)\\vdash_M...\\vdash_M(q_e,w_j...w_n)\\vdash_M=(q_a, w_1,w_2...w_n)\\vdash^*_M(q_e, w_j...w_n)\\)</p> <p>Der \\(\\vdash^*\\) Operator stellt alle Berechnungschritten zwischen den zwei angegebenen Schritten dar.</p>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html#ausfuhrung-von-automaten-akzeptieren-verwerfen-stranden-abfallzustand","title":"Ausf\u00fchrung von Automaten (akzeptieren, verwerfen, stranden, Abfallzustand)","text":"<p>Eine Berechnung wird akzeptiert, wenn der Endzustand \\(q_e\\in F\\) ist, also ein Endzustand ist. Falls dies nicht der Fall ist, wird die Berechnung verworfen. Die Maschine wird dann auch gestrantet genannt.</p> <p>Wenn ein Eingabewort nicht verarbeitet werden kann, weil es f\u00fcr ein Input-Symbol keinen \u00dcbergang gibt, geht die Maschine zum Abfallzustand. Das Eingabewort wird verworfen.</p>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html#sprache-eins-endlichen-automaten","title":"Sprache eins endlichen Automaten","text":"<p>Die Sprache eines endlichen Automaten \\(M\\) besteht aus allen W\u00f6rtern, welche bei \\(M\\) auf einem akzeptierenden Zustand fallen.</p> <p>\\(L(M)=\\{w\\in\\Sigma^*|\\text{Berechnung von } M \\text{ auf } w \\text{ ist akzeptiert}\\}\\)</p> <p>Jeder endlichen Automat kann als Regex geschrieben werden und umgekehrt.</p>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html#elemente","title":"Elemente","text":"Was Beschreibung Der Startzustand Normaler Zustand Akzeptierter Endzustand \u00dcbergangsfunktionen: Vom Zustand \"0.50\" kann zu \"1.50\" gelaufen werden <p>Zus\u00e4tzlich wird das Eingabealphabet definiert. Dies sind die Symbole, welche dem Automaten als Input gegeben weden kann.</p>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html#moore-automaten-vs-mealy-automaten","title":"Moore Automaten vs Mealy Automaten","text":"<p>Bei einem Mealy Automaten h\u00e4ngt der n\u00e4chste Zustand vom aktuellen Zustand und dem Input ab. Beim Moore Automaten hingegen h\u00e4ngt der n\u00e4chste Zustand nur vom aktuellen Zustand ab.</p> <p>F\u00fcr jeder Mealy Automat gibt es einen Moore Automat und umgekehrt.</p>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html#berechnungsmodell","title":"Berechnungsmodell","text":"<p>Das Berechnungsmodel beschriebt, wie ein Automat berechnet wird.</p> <ol> <li>Definiere die Struktur des Automaten. F\u00fcr einen endlichen Automaten ist es: \\(M=(Q, \\Sigma, \\delta, q_0, F)\\). </li> <li>Beschreibung der Bedeutung (Semantik) der Struktur</li> <li>Konfiguration: Die vollst\u00e4ndige Beschreibung eines Zustandes des Automats</li> <li> <p>Berechnungsschritt: Der \u00dcbergang von einer Konfiguration zur n\u00e4chsten</p> </li> <li> <p>Berechnung: Die Berechnungsschritte werden gefolgt</p> </li> <li>Jedem Zustand des Automaten k\u00f6nnen eine Bedeutung zu gewissen werden.</li> </ol>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html#nicht-deterministische-endlichen-automaten","title":"(Nicht-)Deterministische endlichen Automaten","text":"<p>Bei einem determinisctischen endlichen Automaten ist jede Konfiguration einzigartig. Also bei einem Zustand gibt es f\u00fcr jedes Inputwort ein m\u00f6glichen n\u00e4chsten Zustand.</p> <p>Bei einem nicht-deterministischen endlichen Automaten (NEA) ist dies nicht gegeben. Bei der folgenden NEA kann man von \\(q_0\\) mit \\(0\\) zu \\(q_1\\) oder bei \\(q_0\\) bleiben. Daher ist die Berechnungsfunktion \\(\\delta\\) anderst definiert: \\(\\delta: Q\\times \\Sigma\\rightarrow \\mathcal P(Q)\\). Als \\(\\delta\\) gibt eine Menge von Zust\u00e4nde zur\u00fcck (\\(\\mathcal P(Q)\\) ist die Potenzmenge von \\(Q\\), also alle M\u00f6glichen Teilmengen von \\(Q\\))</p> <p></p> <p>Bei solchen Automaten wird jede M\u00f6glichkeit ausprobiert. Gewisse M\u00f6glichkeiten werden in Sackgassen geraten und gewisse auf einem nicht akzeptierten Feld.</p> <p>Damit eine NEA ein Wort akzeptiert reicht wenn eine M\u00f6glichkeit gefunden wird, bei welchem den Endzustand akzeptiert wird.</p> <p>DEA und NEA sind gleichwertig. Eine Sprache kann in beiden Automaten abgebildet werden.</p>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html#nea-mit-epsilon-ubergange","title":"NEA mit \\(\\epsilon\\)-\u00dcberg\u00e4nge","text":"<p>Eine Zus\u00e4tzliche Eigenheit von NEAs sind die die \\(\\epsilon\\)-\u00dcberg\u00e4nge. Mit diesen kann die NEA den Zustand wechseln, ohne ein Inputwort zu konsumieren.</p> <p>Die \u00dcbergangsfunktion muss mit \\(\\epsilon\\)-\u00dcberg\u00e4nge noch mals modifiziert werden, da nun das leere Symbol noch hinzugef\u00fcgt werden muss: \\(\\delta: Q\\times \\Sigma \\cup \\{\\epsilon\\}\\rightarrow \\mathcal P(Q)\\)</p> <p>Unten folgt noch ein Beispiel mit \\(\\epsilon\\)-\u00dcberg\u00e4nge: </p> <p>DEAs sind ebenfalls equivalent zu \\(\\epsilon\\)-NEAs und umgekehrt. Also jede DEA kann in eine \\(\\epsilon\\)-NEA umgewandelt werden und umgekehrt. </p> <p>Um von einer \\(\\epsilon\\)-NEA zu einer DEA umwandeln, m\u00fcssen zuerst die \\(\\epsilon\\)-\u00dcberg\u00e4nge aufgel\u00f6st werden. Daf\u00fcr kann man sich \u00fcberlegen, was f\u00fcr Zeichen konsumiert werden k\u00f6nnten, wenn man den \\(\\epsilon\\)-\u00dcbergang nimmt. Diese \u00dcbergange in den urspr\u00fcnglichen Zustand aufnehmen. Es kann helfen, dies grafisch zu erledigen. Nach dem aufl\u00f6sen der \\(\\epsilon\\)-\u00dcberg\u00e4nge wird eine Teilmengenkonstruktion durchgef\u00fchrt.</p>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html#teilmengenkonstruktion","title":"Teilmengenkonstruktion","text":"<p>Mit einer Teilmengenkonstruktion kann aus einer NEA eine DEA erstellt werden.</p> <p>Die DEA \\(D=(Q_D, \\Sigma, \\delta_D, q_0, F_D)\\) wird aus der NEA \\(N=(Q_N, \\Sigma, \\delta_N, q_0, F_N)\\)</p> <ul> <li>\\(Q_d=\\mathcal P(Q_N)\\) : Alle Teilmengen von \\(Q_N\\) sind Zust\u00e4nde im DEA</li> <li>\\(F_D=\\{S\\in Q_D \\vert S \\cap F_N\\neq \\O\\}\\): Alle Zust\u00e4nd-Teilmengen, welche ein Element mit den akzeptierten Zust\u00e4nden \\(F_N\\)  teilen</li> <li>\\(\\delta_D(S, a)=\\cup_{p \\in S}\\delta_N(p, a)\\):  Alle Zust\u00e4nde, welche von einem Zustand in der Menge \\(S \\in Q_D\\), erreichbar sind</li> </ul> <p>Oder in Worten ausgedr\u00fcckt:</p> <ol> <li>Die Zust\u00e4nde sind die Potenzmenge von \\(Q_N\\)</li> <li>Die potentielle Startzustand Kandidaten sind alle diese Teilmengen von \\(Q_N\\), welche \\(q_0\\) enthalten</li> <li>Akzeptierte Zust\u00e4nde sind alle Teilmengen, welche ein Element aus \\(F_N\\) besitzen</li> <li>Aus den Zust\u00e4nden und eingaben soll nun eine Tabelle gezeichnet werden. Bei dieser k\u00f6nnen alle Zust\u00e4nde gestrichen werden, welche nicht erreichbar sind. Also nie bei einer Eingabe-Spalte auftauchen. Dies muss solange wiederholt werden, bis nichts gestrichen werden kann.     Wenn \\(\\{q_1\\}\\) in einer Eingabe-Spalte steht, heisst das nur, dass \\(\\{q_1\\}\\) vorhanden ist. \\(\\{q_1, q_2\\}\\) muss immer noch gestrichen werden, wenn es nicht selbst vorkommt    Wenn eine Verbindung das leeres Wort nimmt, werden die Zust\u00e4nde, welche man vom leeren Wort Zustand erreichen kann, auch vom urspr\u00fcnglichen Wort als erreichbar angesehen.</li> <li>Die noch nicht gestrichenen Resultaten k\u00f6nnen nun Namen verteilt werden (z.B A-Z)</li> </ol> <p></p> <p>Das resultiertende DEA aus dem NEA oben ist:</p>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html#aquivalenz-von-automaten","title":"\u00c4quivalenz von Automaten","text":"<ul> <li>eine DEA ist \u00e4quivalent zu einem Regularen Ausdruck und umgekehrt</li> </ul> <p>Dabei ist eine Regularen Ausdruck ein beschreibenden Mechanismus und die DEAs, NEAs und \\(\\epsilon\\)-EAS akzeptierende Mechanismen.</p> <p></p>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html#automaten-in-einen-regex-umwandeln","title":"Automaten in einen RegEx umwandeln","text":"<ol> <li>F\u00fcr jeden Zustand eine separate Sprache definieren. Diese darf sich selbst referenzieren oder auch andere Sprachen</li> <li>K\u00fcrzen und einsetzen. Meistens ist es am einfachsten von den Endzust\u00e4nden zu k\u00fcrzen zu beginnen</li> </ol>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html#beispiel_1","title":"Beispiel","text":"<ol> <li>F\u00fcr jeden Zustand einen Ausdruck aufschreiben:    $$    \\begin{align}    L_{q_0}&amp;=(0|1)L_{q_0}|0L_{q_1}\\Rightarrow(0|1)^0L_{q_1}\\Rightarrow(0|1)01\\    L_{q_1}&amp;=1L_{q_2} \\Rightarrow1\\varepsilon=1\\     L_{q_2}&amp;=\\varepsilon\\    \\end{align}    $$</li> </ol>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html#ardensches-lemma","title":"Arden'sches Lemma","text":"<p>\\(L=UL|V\\Rightarrow L=U^*V\\), dabei ist \\(L\\) eine Spraceh und \\(U\\) einen andren Ausdruch</p>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html#zustandsklassen","title":"Zustandsklassen","text":"<p>\\([p]=\\{w \\in \\Sigma^*\\vert M \\text{ endet nach Lesen des Input-Worts } w \\text{ im Zustand } p\\}\\), dabei ist \\(M\\) einen Automaten, \\(w\\) ein eingabe Wort und \\(p\\) ein Zustand (nicht unbedingt der Endzustand)</p> <p>Folgende Regeln gelten f\u00fcr die Zustandsklassen:</p> <ul> <li>Jedes Wort landet in einem Zustand (wenn ein Automat strandet oder ein Input nicht verwendet werden kann, wird der zuletzt erreichten Zustand genommen)</li> <li>Kein Wort landet in einer DEA in zwei Zust\u00e4nde (gilt nicht f\u00fcr NEAs)</li> </ul>"},{"location":"22FS/THIN/03_Endliche%20%20Automaten.html#untere-schranke-fur-endliche-automaten","title":"Untere Schranke f\u00fcr endliche Automaten","text":"<p>Die grunds\u00e4tzliche Idee  ist, dass wenn die Worte \\(x\\) und \\(y\\) in derselben Zustandsklasse ist, dann ist \\(zx=zy\\), wobei \\(z\\) irgend ein Wort ist.</p> <p>Es m\u00fcssen nun die folgende Schritte gefolgt werden:</p> <ol> <li>Es wird eine Annahme getroffen, wie viele Zust\u00e4nde eine Maschine ben\u00f6tigt</li> <li>Es m\u00fcssen f\u00fcr jeden Zustand ein Wort gefunden werden, welches in diesem Zustand endet</li> <li>Es wird nun f\u00fcr jede Kombination von W\u00f6rter von Schritt 2. ein Prefix oder Postfix \\(z\\) gefunden werden, welcher kombiniert mit dem einen Wort, ein Wort ergibt, welches in der Sprache ist und mit dem anderen Wort ein, ein Wort welches nicht in der Sprache ist</li> <li>Wenn dies f\u00fcr jedes Wort von Schritt 2. getan werden kann, dann werden mindestens so viel Zust\u00e4nde ben\u00f6tigt.  Da wenn zwei W\u00f6rter mit demselben Wort verbunden wird und diese in unterschiedlichen Sprache sind, die zwei W\u00f6rter in unterschiedlichen Zust\u00e4nde endet.</li> </ol> <p>Beispiel:</p> <p></p>"},{"location":"22FS/THIN/04_Kontextfreie%20Gramatik.html","title":"Kontextfreie Grammatik","text":"<p>Die Kontextfreie Grammatik \\(G\\) ist durch das Tupel \\((N, \\Sigma, P, A)\\) definiert, wobei</p> <ul> <li>\\(N\\) das Alphabet der Nichtterminale (Variabeln)ist , welche mit Produktionen in \\(P\\) aufgel\u00f6st werden k\u00f6nnen</li> <li>\\(\\Sigma\\) das Alphabet der Terminale ist</li> <li>\\(P\\) eine endliche Menge von Produktionen in der Form \\(X \\rightarrow \\beta\\) ist. Dabei ist der Kopf \\(X\\in N\\) und der Rumpf \\(\\beta \\in (N\\cup\\Sigma)^*\\))  </li> <li>\\(A\\) das Startsymbol ist und gilt \\(A\\in N\\)</li> </ul> <p>Geschrieben kann es folgendermassen: $$ G_1=({A}, {0, 1}, P, A) \\\\text{wobei gilt: }\\ P={A\\rightarrow0A1,A\\rightarrow\\varepsilon} $$ Die Sprache \\(L(G)\\) aus der Grammatik \\(G\\) beinhaltet alle W\u00f6rter, die in \\(G\\) aus dem Startsymbol \\(A\\) ableitbar sind. $$ L(G)={w\\in\\Sigma^ \\vert A\\overset{}{\\Rightarrow} w} $$ Eine Kontextfreie Grammatik wird mehrdeutig genannt, wenn es f\u00fcr ein Wort mehrere Ableitungsb\u00e4ume gibt.</p> <p>Eine Sprache ist kontextfrei, wenn ein Kellerautomaten dazu gebaut werden kann.</p> <p>Das folgende Beispiel ist eine kontextfreie Grammatik, welche nur balancierte Klammern als Wort erlaubt. Also <code>()</code>, <code>(())()</code>, aber nicht <code>((</code>. $$ A\\rightarrow (A)\\ A\\rightarrow AA\\ A\\rightarrow \\varepsilon $$</p>"},{"location":"22FS/THIN/04_Kontextfreie%20Gramatik.html#ableitungsschritt","title":"Ableitungsschritt","text":"<p>Ein Ableitungsschritt, ist wenn eine Variable mit einer Produktion aufgel\u00f6st wird. Dies wird notiert mit \\(\\Rightarrow\\)</p> <p>Mit der Grammatik von oben, w\u00e4re ein Beispiel: \\(A\\Rightarrow AA \\Rightarrow (A)A \\Rightarrow (A)(A)\\Rightarrow()()\\)</p> <p>Dabei kann man linksseitig Ableiten und rechtsseitig Ableiten. Beim linksseitigen Ableiten wird immer die Variable am meisten links aufgel\u00f6st bis es keine Nichtterminale mehr hat. Beim rechtsseitigen Ableiten wird immer die Variable am meisten rechts abgeleitet bis es keine Nichtterminale mehr hat.</p>"},{"location":"22FS/THIN/04_Kontextfreie%20Gramatik.html#ableitung","title":"Ableitung","text":"<p>Eine Ableitung ist eine Folge von Ableitungsschritten. Wenn vom Startsymbol \\(A\\) zum Endwort \\(w\\) abgeleitet wurde, kann dies als \\(A\\overset{*}{\\Rightarrow}w\\) schreiben. Dazu wird auch gesagt, dass \\(A\\) generiert oder erzeugt \\(w\\).</p> <p>Ein Wort ist ableitbar, wenn es eine Ableitung mit einer Grammatik gibt, welche das Wort ergeben.</p>"},{"location":"22FS/THIN/04_Kontextfreie%20Gramatik.html#ableitungsbaum","title":"Ableitungsbaum","text":"<p>Der Ableitungsbaum/Parseb\u00e4ume zeigt auf, in welcher Reihenfolge die Ableitungsschritte angewendet wurde.</p> <p></p>"},{"location":"22FS/THIN/04_Kontextfreie%20Gramatik.html#inharent-mehrdeutig","title":"Inh\u00e4rent mehrdeutig","text":"<p>Wenn man eine Sprache in mehrere Grammatiken unterteilen kann und es W\u00f6rter gibt, welche von beiden Grammatiken akzeptiert wird.</p>"},{"location":"22FS/THIN/04_Kontextfreie%20Gramatik.html#dea-zu-kontextfreien-sprache","title":"DEA zu kontextfreien Sprache","text":"<p>Es gibt eine DEA \\(M=(Q, \\Sigma, \\delta, q_0, F)\\). Aus dieser kann eine kontextfreie Sprache erstellt werden:</p> <ol> <li>F\u00fcr jeden Zustand \\(q_i\\) gibt es ein Nichtterminal \\(Q_i\\)</li> <li>F\u00fcr jede Transition \\(\\delta(q_i, a)=q_j\\) gibt es eine Produktion \\(Q_i\\rightarrow aQ_j\\)</li> <li>F\u00fcr jeden akzeptierten Zustand gibt es eine Produktion \\(Q_i\\rightarrow \\varepsilon\\)</li> <li>Das Nichtterminal \\(Q_0\\) wird das Startsymbol</li> </ol>"},{"location":"22FS/THIN/04_Kontextfreie%20Gramatik.html#trick-zum-entwurf","title":"Trick zum Entwurf","text":"<ol> <li>Komplexe KFG k\u00f6nnen oft in mehrere einfachere KFG aufgeteilt werden</li> <li>Wenn einen endlichen Automaten bereits existiert, kann dieser in eine DEA umgewandlet werden und danach zu einer kontextfreien Sprache umgewandelt werden.</li> <li>Oft erlauben KFG zu viele </li> </ol>"},{"location":"22FS/THIN/05_Keller%20Automaten.html","title":"Keller Automaten","text":""},{"location":"22FS/THIN/05_Keller%20Automaten.html#deterministischen-kellerautomaten","title":"Deterministischen Kellerautomaten","text":"<p>Ein deterministischer Keller Automaten (KA) wird als 7-Tupel dargestellt: \\((Q, \\Sigma, \\Gamma, \\delta, q_0, \\$, F)\\))</p> <ul> <li>\\(Q\\) ist die endliche Menge von Zust\u00e4nden</li> <li>\\(\\Sigma\\) ist das Alphabet der Eingabe</li> <li>\\(\\Gamma\\) ist das Alphabet des Kellers (bzw. des Stacks)</li> <li>\\(\\delta: Q\\times (\\Sigma \\cup \\varepsilon) \\times \\Gamma\\rightarrow Q\\times\\Gamma^*\\) ist die (partielle) \u00dcbergangsfunktion</li> <li>\\(q_0\\) ist der Startzustand</li> <li>\\(\\$\\in \\Gamma\\) ist ein ausgezeichnetes Symbol vom Alphabet des Stacks/Kellers</li> <li>\\(F\\subseteq Q\\) ist die Menge der akzeptierten Zust\u00e4nde </li> </ul> <p>Zu dem gilt f\u00fcr die \u00dcbergangsfunktion \\(\\delta\\), wenn \\(\\delta(q, b, x)\\) definiert ist, darf \\(\\delta(q, \\varepsilon, x)\\) nicht definiert sein. Das heisst, das leere Wort darf nur benutzt werden, wenn f\u00fcr eine Stackposition kein anderes Symbol definiert ist. Dies stellt sicher, dass der Automat deterministisch ist.</p> <p>Zu begin der Ausf\u00fchrung ist im Strack \\(\\$\\), was ein leerer Stack darstellt.</p> <p></p> <p>Als ein weiteres Beispiel, in welchem \\(*\\) als Platzhalter f\u00fcr ein beliebiges Zeichen steht:</p> <p></p>"},{"location":"22FS/THIN/05_Keller%20Automaten.html#nichtdeterministischen-kellerautomaten","title":"Nichtdeterministischen Kellerautomaten","text":"<p>Eine NKA ist gleich wie eine KA, nur das die \u00dcbergangsfuntkion den Typ \\(\\delta: Q\\times (\\Sigma \\cup \\varepsilon) \\times \\Gamma\\rightarrow \\mathcal P (Q\\times\\Gamma^*)\\) hat. Der R\u00fcckgabetyp ist die Potenzmenge. Somit kann in der NKA ein Eingang mehrere Ausg\u00e4nge haben.</p> <p>Wie auch bei einer NEA kann nun im \\(\\varepsilon\\) (das leere Wort) f\u00fcr \\(\\Sigma\\) in der \u00dcbergangsfunktion. </p>"},{"location":"22FS/THIN/05_Keller%20Automaten.html#moglichkeiten-eines-kellerautomaten","title":"M\u00f6glichkeiten eines Kellerautomaten","text":"<p>Anders als bei NDA und NEA, welche das gleiche k\u00f6nnen, gibt es Sprachen, welche nur von nicht deterministischen Kellerautomaten verarbeitet werden k\u00f6nnen.</p> <p>Ebenfalls gibt es kontextfreie Sprachen, welche nicht von einem deterministischen Kellerautomaten erkennt werden k\u00f6nnen. Falls dies aber m\u00f6glich ist, ist die Sprache eindeutig.</p>"},{"location":"22FS/THIN/05_Keller%20Automaten.html#berechnungsschritte","title":"Berechnungsschritte","text":"<p>Die Berechnungssfunktion dazu w\u00e4re: \\(\\delta(q, b, c)=(p, w)\\) Dabei befindet sich der Automaten im Zustand \\(q\\), list das Symbol \\(b\\) von der Eingabe und wird das Kellersymbol \\(c\\) vom Stack lesen und \\(w\\) zur\u00fcck schreiben. Der n\u00e4chste Zustand wird \\(p\\) sein.</p>"},{"location":"22FS/THIN/05_Keller%20Automaten.html#berechnung","title":"Berechnung","text":"<p>Eine Berechnung besteht aus mehreren Berechnungsschritte und eine Start- und Endkonfiguration.</p> <p>Beispiel: \\((q_0, 0011, \\$) \\vdash (q_0, 011, 0\\$)\\vdash (q_0, 11, 00\\$)\\vdash(q_1, 1, 0\\$)\\vdash(q_1, \\varepsilon, \\$)\\vdash(q2, \\varepsilon, \\$)\\)  Dies kann auch als \\((q_0, 0011, \\$)\\vdash^*(q2, \\varepsilon, \\$)\\) geschrieben werden.</p>"},{"location":"22FS/THIN/05_Keller%20Automaten.html#sprache-eines-kellerautomaten","title":"Sprache eines Kellerautomaten","text":"<p>In einer Sprache eines Kellerautomaten sind alle W\u00f6rter, welche von diesem Kellerautomaten akzeptiert werden.</p>"},{"location":"22FS/THIN/06_Turing%20Machine.html","title":"Turing Maschine","text":"<p>Eine (determinischtische) Turing-Maschine (DTM) ist ein 7-Tupel: \\(M=(Q,\\Sigma, \\Gamma, \\delta, \\textvisiblespace, F)\\)</p> <ul> <li>\\(Q\\): die endliche Menge von Zust\u00e4nde</li> <li>\\(\\Sigma\\): das Eingabe Alphabet</li> <li>\\(\\delta: Q\\times \\Gamma \\rightarrow Q\\times\\Gamma\\times D, D=\\{L, R\\}\\): Die \u00dcbergangsfunktion, welche den n\u00e4chsten Zustand, was geschrieben werden soll und ob das Band nach Links (L) oder nach rechts (R) geschoben werden soll</li> <li>\\(\\Gamma\\): Das Bandalphabet, dabei muss \\(\\Sigma \\subset \\Gamma\\)</li> <li>\\(\\textvisiblespace\\): Das Leerzeichen, dabei muss \\(\\textvisiblespace \\in \\Gamma\\) und \\(\\textvisiblespace \\not \\in \\Sigma\\)</li> </ul> <p>Das Band hat einzelne Zelle, in welchen ein Zeichen von \\(\\Gamma\\) enhaltet...</p> <p>Informell, ist eine Turing Maschine einen endlichen Automat, welche um ein unendliches Band und um einen Lesen-/Schreibkopf erg\u00e4nzt wurde.</p> <p></p> <p>Im folgenden Bild wird eine \u00dcbergangsfunktion einer Turing Maschine gezeigt: \\(\\delta(q_1, X)=(q_2, Y, D)\\), wobei \\(D\\in\\{L, R\\}\\)</p> <p></p>"},{"location":"22FS/THIN/06_Turing%20Machine.html#konfiguration","title":"Konfiguration","text":"<p>Eine Konfiguration einer Turing-Maschine ist:</p> <ul> <li>der aktuelle Zustand \\(q \\in Q\\)</li> <li>die Position des Lese-/Schreibkopf \\(i\\)</li> <li>der Bandinhalt \\(X_1,...,X_n \\in \\Gamma\\)</li> </ul> <p>Ein Beispiel einer Konfiguration: \\(X_1,...X_{i-1}qX_iX_{i+1},...,X_n\\)</p> <p>Die Startkonfiguration ist: \\(q_0X_1X_2...X_n\\)</p>"},{"location":"22FS/THIN/06_Turing%20Machine.html#berechnungsschritten","title":"Berechnungsschritten","text":"<p>Ein Berechnungsschritt ist der \u00dcbergang von einer Konfiguration zur n\u00e4chsten:</p> <p>\\(X_1,...X_{i-1}qX_iX_{i+1},...,X_n\\vdash X_1,...X_{i-1}pX_iX_{i+1},...,X_n\\)</p>"},{"location":"22FS/THIN/06_Turing%20Machine.html#berechnungen","title":"Berechnungen","text":"<p>Eine Berechnung ist eine endliche Menge von Berechnungsschritte: \\(K_1 \\vdash K_2 \\vdash ... \\vdash K_n\\).</p> <p>Dies kann auch abgek\u00fcrzt als \\(K_1\\vdash^* K_n\\) geschrieben werden.</p>"},{"location":"22FS/THIN/06_Turing%20Machine.html#sprache-einer-turing-maschine","title":"Sprache einer Turing Maschine","text":""},{"location":"22FS/THIN/06_Turing%20Machine.html#rekursiv-aufzahlbare-sprachen","title":"Rekursiv aufz\u00e4hlbare Sprachen","text":"<p>Eine Sprache nennt sich rekursive aufz\u00e4hlbar, wenn sie von einer Turing Maschine akzeptiert wird. Eine rekursive aufz\u00e4hlbar...TODO</p>"},{"location":"22FS/THIN/06_Turing%20Machine.html#turing-maschine-mit-speicher","title":"Turing Maschine mit Speicher","text":"<p>Die Turing Maschine wird mit einem Speicher erweitert.</p> <p></p>"},{"location":"22FS/THIN/06_Turing%20Machine.html#turing-maschine-mit-mehreren-spuren","title":"Turing Maschine mit mehreren Spuren","text":"<p>Die Turing Maschine wird erweitert mit mehrern Spuren, welche sich synchron bewegen. Das Spur-Alphabet ist nun ein Tupel. </p> <p>Wenn so eine Maschine von einer \"normalen\" Turing Maschine simuliert werden soll, ben\u00f6tigt man die Zust\u00e4nde \\(Q=Q_{orignal}\\times\\Gamma_{orginal}\\)</p> <p>Als Beispiel, eine Maschine mit 3 B\u00e4nder h\u00e4tte das Band-Alphabet: \\(\\Gamma_{\\Gamma_1}=\\{0, 1, \\textvisiblespace\\}\\times\\{0, 1, \\textvisiblespace\\}\\times\\{0, 1, \\textvisiblespace\\}\\). Ein konkreter Wert w\u00e4re: \\((0, 1, 1)\\).</p> <p></p>"},{"location":"22FS/THIN/06_Turing%20Machine.html#turing-maschine-mit-mehreren-bander-und-mehreren-lese-schreibkopfe","title":"Turing Maschine mit mehreren B\u00e4nder und mehreren Lese-/Schreibk\u00f6pfe","text":"<p>Ein Band hat mehrere Spuren. Pro Band gibt es ein Lesekopf. Das heisst eine Maschine mit mehreren Spuren hat nur ein Lese-/Schreibkopf. Eine Maschine mit mehreren B\u00e4nder hat mehrere Lese-/Schreibk\u00f6pfe.</p> <p>Die Turing Maschine kann auch erweitert werden, dass sie zus\u00e4tzlich zu den mehr Spuren auch noch mehr Lese-/Schreibk\u00f6pfe hat. Das heisst, jedes Band kann unabh\u00e4ngig von den anderen B\u00e4nder bewegt werden.</p> <p>Bei der Initialisierung:</p> <ul> <li>steht die Eingabe auf dem obersten Band</li> <li>Alle anderen B\u00e4nder sind leer</li> <li>Der Lese-/Schreibkopf des ersten Band ist \u00fcber dem ersten Element des Bandes</li> <li>Bei den anderen Lese-/Schreibk\u00f6pfe ist es irrelevant</li> </ul> <p>Damit dies funktioniert, muss die \u00dcbergangsfunktion erweitert werden um: \\(\\delta:Q\\times\\Gamma^k\\rightarrow Q\\times \\Gamma^k \\times \\{R, S, L\\}^k\\), dabei steht \\(k\\) f\u00fcr die Anzahl B\u00e4nder, \\(R\\) f\u00fcr Rechts, \\(S\\) f\u00fcr stehen bleiben und \\(L\\) f\u00fcr Links.</p> <p></p> <p>Beispiel von einer Maschine mit mehreren B\u00e4nder  und mehreren Lese-/Schreibk\u00f6pfe, welche Subtrahieren kann:</p>"},{"location":"22FS/THIN/06_Turing%20Machine.html#nichtdeterministische-turing-maschine-ntm","title":"Nichtdeterministische Turing Maschine (NTM)","text":"<p>Die nichtdeterministische Turing Maschine besteht aus dem selben 7-Tupel, wie eine deterministische Turing Maschine. Der einzige Unterschied ist, dass die \u00dcbergangsfunktion \\(\\delta: Q\\times \\Gamma \\rightarrow \\mathcal P(Q \\times \\Gamma \\times D)\\), wobei \\(D=\\{R, L\\}\\) ist. \\(R\\) steht f\u00fcr Rechts, \\(L\\) f\u00fcr Links.</p> <p>Die \u00dcbergangsfunktion gibt also eine Liste von Tupeln zur\u00fcck. Wie auch nichtdeterministische endlichen Automaten, werden alle M\u00f6glichkeiten  durch getestet bis ein Resultat gefunden wurde oder keine ungetestet Werte mehr \u00fcbrigbleiben.</p> <p>Jede Sprache, welcher von einer NTM akzeptiert wird, wird auch von einer deterministischer Turing Maschine (DTM)             akzeptiert. Es gibt allerdings kein praktisches Verfahren, wie die Teilmengen Konstruktion bei den Endlichen Maschine.</p> <p>Es folgt der Beweis, dass jede NTM auch als DTM dargestellt werden kann.</p> <p></p> <p>Ein Beispiel f\u00fcr eine NTM:</p> <p></p>"},{"location":"22FS/THIN/06_Turing%20Machine.html#turing-maschine-mit-semi-beschrankten-band","title":"Turing Maschine mit semi-beschr\u00e4nkten Band","text":"<p>Bei einer Turing Maschine mit einem semi-beschr\u00e4nkten Band, geht das Band nur in eine Richtung ins unendliche. Beim Start ist der Lese-/Schreibkopf am Anfang des Bandes. Der Kopf kann dann nur in eine Richtung sich bewegen.</p> <p>Dabei wird jede Sprache, welche von einer Turing Maschine akzeptiert werden kann, kann auch von einer Turing Maschine mit einem semi-beschr\u00e4nkten Band akzeptiert werden. Sie sind also gleichwertig.</p> <p></p> <p>Die Beweissidee, dass eine Turing Maschine mit semi-beschr\u00e4nkten Band zwei B\u00e4nder hat, das einte Band hat die positiven Slots, das andera Band die negativen Slots.</p> <p></p>"},{"location":"22FS/THIN/06_Turing%20Machine.html#k-stack-maschine","title":"\\(k\\)-Stack Maschine","text":"<p>Dies ist ein eine Deterministischen Keller Automaten, welcher aber mehre Stacks haben.</p> <p>Dabei sieht die \u00dcbergansfunktion folgendermassen aus: \\(\\delta: Q \\times \\Gamma_1\\times...\\times\\Gamma_n\\rightarrow Q\\times\\Gamma_1^*\\times...\\times \\Gamma^*_k\\) </p> <p></p> <p>Mit einer 2-Stack Maschine kann eine Turing Maschine simuliert werden, in dem die Slots des \"Bandes\" vom einten Stack in den anderen kopiert werden. Eine 2-Stack Maschine kann demnach, dasselbe, wie eine Turing Maschine.</p> <p></p>"},{"location":"22FS/THIN/06_Turing%20Machine.html#zahler-maschine","title":"Z\u00e4hler Maschine","text":"<p>Eine Z\u00e4hler Maschine, ist eine \\(k\\)-Stack Maschine, welche allerdings Z\u00e4hler haben, anstatt Stacks. Die Z\u00e4hler speichern eine nat\u00fcrliche Zahl (&lt;= 0).</p> <p></p> <p>Eine 2 Z\u00e4hler-Maschine ist gleichwertig, wie eine Turing Maschine. Wenn etwas auf den \"Stack\" gepushed wird, wird das letzte Resultat weiter verrechnet. Daf\u00fcr wird das letzte Resultat mit den Anzahl Zust\u00e4nden multipliziert. Darauf wird den Zahlwert des Symbols addiert.</p> <p></p> <p>Um nun vom \"Stack\" zu poppen, wird das letzte Resultat mit der Anzahl Zust\u00e4nde dividiert. Der Rest, welcher \u00fcbrig bleibt, ist der Zahlenwert des Symboles.</p> <p></p> <p>Um aber einen 2-Stack Maschine zu simulieren, ben\u00f6tigt man 3 Counters: 2 Counters f\u00fcr die Stack und der 3. Counter um zu rechnen. </p> <p>Diese 3-Z\u00e4hler Maschine kann nun von einer 2-Z\u00e4hler Maschinen simuliert werden. Daf\u00fcr werden die Werte \\(i\\) und \\(j\\) und \\(k\\) in der Zahl mit \\(2^i\\cdot3^j\\cdot5^k\\) (ev. auch eine addition?). Die Basis zu den Zahlen sind Primzahlen (2, 3, 5, 7, ...). Eine Zahl kann mit einer Primfaktorzerlegung wieder zur\u00fcck rechnen.  Im einten Stack werden nun diese Zahlen gespeichert, der andere Stack wird dazu ben\u00f6tigt, zu rechnen.</p>"},{"location":"22FS/THIN/06_Turing%20Machine.html#universelle-turing-maschine-utm","title":"Universelle Turing Maschine (UTM)","text":"<p>Eine universelle Turing Maschine kann Turing Maschine simulieren. Daf\u00fcr muss allerdings eine Turing Maschine codiert werden, so dass sie von einer UTM simuliert werden kann.</p> <p>Dies kann folgendermassen bewerkstelligt werden:</p> <ol> <li>Die Zust\u00e4nde Q einer TM werden codiert als    \\(q_1\\): der Startzustand    \\(q_2\\): der Endzustand    \\(q_3...q_i\\): f\u00fcr alle weiteren Zustande</li> <li>Die Bandsymbole \\(\\Gamma\\) einer TM wird:    \\(X_1\\): das Symbol 0    \\(X_2\\): Das Symbol 1    \\(X_3\\): Das Symbol \\(\\textvisiblespace\\) \\(X_4,...,X_i\\): f\u00fcr alle weitere Symbole</li> <li>Codierung der Richtung des Lese-Schreibkopfes D    \\(D_1\\): Die Richtung \\(L\\) (Links)    \\(D_2\\) Die Richtung \\(R\\) (Rechts)</li> <li>Die \u00dcbergangsfunktionen \\(\\delta(q_i, X_j)=(q_k, X_l, D_m)\\) kann codiert werden als \\(0^i10^j10^l10^m\\). Diese sind mit Nullen codiert und getrennt mit <code>1</code>.  Die Zahl im Subscript wird jeweil als Exponent gebraucht (\\(X_2\\Rightarrow0^2=00\\))</li> <li>Die \u00dcbergansfunktionen werden mit <code>11</code> getrennt: \\(C_111C_211...\\), wobei \\(C_i\\) eine \u00dcbergansfunktion ist. Vor der ersten \u00dcbergansfunktion steht noch ein <code>1</code>, dass es als eine Zahl dargestellt werden kann.</li> </ol> <p>Die Zahl, welche ein Turing Turing Maschine darstellt, wird auch als G\u00f6delnummer bezeichnet.</p> <p>Es folgt ein Beispiel, wie eine TM codiert werden k\u00f6nnte:</p> <p></p> <p>Damit die UTM weiss, welches Eingabewort \\(w\\) eingegben werden soll, wird dies nach der Turing Maschine \\(Cod_M\\) getrennt mit <code>111</code> dargestellt: \\(Code_m111w\\).</p>"},{"location":"22FS/THIN/07_Berechnungsmodelle.html","title":"Berechnungsmodelle","text":""},{"location":"22FS/THIN/07_Berechnungsmodelle.html#church-turning-these-gandys-these-m","title":"Church-Turning-These &amp; Gandys These M","text":"<p>Intuitive berechenbare Funktion: eine Funktion, welche algorithmisch (durch eine mechanisches Verfahren) berechnet werden kann</p> <p>Turing-berechenbare Funktionen: Funktionen, welche von einer Turing-Maschinen berechnet werden k\u00f6nnen</p> <p>Jede intuitive berechenbare Funktion l\u00e4sst sich mit einer Turingmaschine berechnen.</p> <p>Gandys These M: Alles, was jemals mit einer (endlichen) Maschine/physikalischen Apparatur berechnet werden kann, ist bereits von einer Turing-Maschine berechenbar.</p> <p>Bis jetzt wurde noch kein Gegenbeispiel zu beiden Thesen gefunden worden.</p>"},{"location":"22FS/THIN/07_Berechnungsmodelle.html#turing-berechenbare-funktion","title":"Turing-berechenbare Funktion","text":"<p>\\(u\\) ist ein Wort. Pfeil noch oben ist nicht teil von \\(\\Gamma\\).</p> <p></p> <p>Oder: Wenn es eine Funktion gibt, welche f\u00fcr alle Input Wort anh\u00e4lt.</p>"},{"location":"22FS/THIN/07_Berechnungsmodelle.html#beispiel","title":"Beispiel","text":"<p>wenn zu <code>1011</code> 1 addiert werden soll, wird so lange von rechts nach links ger\u00fcckt, bis eine 0 gefunden wird. Diese wird zu einem <code>1</code> gemacht. Die <code>1</code> davor werden zu <code>0</code></p>"},{"location":"22FS/THIN/07_Berechnungsmodelle.html#loop-programme","title":"Loop-Programme","text":"<p>Ein LOOP-Programm besteht aus folgendem:</p> <ul> <li>Variabeln: \\(x_0\\), \\(x_1\\), \\(x_2\\), ...,\\(x_k\\)</li> <li>Konstante: 0, 1, 2, 3, ...</li> <li>Zuweissungen: \\(x_k=x_j+c\\) oder \\(x_k = x_j - c\\)</li> </ul> <p></p> <p></p> <p></p> <p>Wenn die Loop-Variable (x3 in <code>LOOP x3 DO ... END</code>) im Loop ver\u00e4ndert wird, hat dies keinn Einfluss auf die Anzahl Durchl\u00e4ufe.</p>"},{"location":"22FS/THIN/07_Berechnungsmodelle.html#while-programme","title":"While-Programme","text":""},{"location":"22FS/THIN/07_Berechnungsmodelle.html#turing-vollstandigkeit","title":"Turing-Vollst\u00e4ndigkeit","text":"<p>Auch jede Turing-Maschine kann mit einem While-Programm implementiert werden.</p>"},{"location":"22FS/THIN/07_Berechnungsmodelle.html#goto-programme","title":"GOTO-Programme","text":""},{"location":"22FS/THIN/07_Berechnungsmodelle.html#primitiv-rekursive-funktionen","title":"Primitiv rekursive Funktionen","text":""},{"location":"22FS/THIN/07_Berechnungsmodelle.html#ackermannfunktion","title":"Ackermannfunktion","text":"<p>Eine Ackermannfunktion \\(a: \\N^2\\rightarrow N\\) ist durch die Gleichung: $$ \\begin{align} a(0, m)&amp;= m + 1\\ a(n + 1, 0) &amp;= a(n, 1)\\ a(n + 1, m + 1) &amp;= a(n, a(n + 1, m)) \\end{align} $$ </p>"},{"location":"22FS/THIN/07_Berechnungsmodelle.html#loop-interpreter","title":"Loop-Interpreter","text":"<p>Ein Loop-Interpreter ist eine Funktion \\(I:\\N\\times \\N \\rightarrow \\N\\), welche als Input den Code und Input eines Loop-Programmes nimmt und den Code mit dem Input ausf\u00fchrt und zur\u00fcck gibt.  F\u00fcr einen Loop-Interpreter gelten folgende Eigenschaften:</p> <ul> <li>Es gibt genau ein totaler Loop-Interperter</li> <li>Es kein Loop-berechenbare Loop-Interpreter. Es gibt also kein Loop-Programm, was Loop-Programme interpretieren kann</li> </ul>"},{"location":"22FS/THIN/08_Entscheidbarkeit.html","title":"Entschheidbarkeit","text":"<p>Eine Sprache \\(A \\subset \\Sigma^*\\) heisst entscheidbar,, wenn eine Turingmaschine \\(T\\) existiert, die das Entscheidungsproblem \\((\\Sigma, A)\\) l\u00f6st (Dabei ist \\(A\\) die Menge aller akzeptierter Zust\u00e4nde).</p> <p>Wenn der Bandinhalt \\(x \\in A\\) ist, h\u00e4lt \\(T\\) nach endlichen vielen Schritten mit dem Bandinhalt <code>1</code> and, wenn der Bandinhalt \\(x \\in \\overline A\\) ist, dann h\u00e4lt \\(T\\) nach endlichen vielen Schritten mit dem Bandinhalt <code>0</code> an. Wichtig: Egal was f\u00fcr ein Input auf dem Band steht, \\(T\\) muss immer anhalten.</p> <p>Oder anders ausgedr\u00fcckt, es m\u00fcssen alle akzeptierte Inputs \\(A\\), wie auch alle nicht akzeptiert Inputs \\(\\overline A\\) semi-entscheidbar sein.</p> <p>Eine Sprache wird Semi-Entsheidbarkeit genannt, wenn es eine Turingmachine \\(T\\) gibt, welche bei dem Bandinhalt \\(x \\in A\\) (\\(A\\) ist die Menge der akzeptierten Inputs) in endlichen vielen Schritten mit dem Bandinhalt <code>1</code> f\u00fcr Ja endet. Wenn der Bandihalt \\(x \\in \\Sigma^*\\setminus A\\) (als x nicht ein akzeptierter Zustand ist), h\u00e4lt die Turingmachine \\(T\\) nie an.</p> <p>F\u00fcr jede entscheidbare Sprache kann eine Turningmaschine geschrieben werden, welche semi-entscheidbar ist.</p>"},{"location":"22FS/THIN/08_Entscheidbarkeit.html#cup-und-cap-satz","title":"\\(\\cup\\) und \\(\\cap\\) Satz","text":"<p>Wenn \\(A\\) und \\(B\\) entscheidbar ist, dann ist auch \\(A\\cup B\\) und \\(A\\cap B\\) entscheidbar. Wenn \\(A\\) und \\(B\\) semi-entscheidbar ist, dann ist auch \\(A \\cup B\\) und \\(A\\cap B\\) semi-entscheidbar.</p>"},{"location":"22FS/THIN/08_Entscheidbarkeit.html#reduktion","title":"Reduktion","text":""},{"location":"22FS/THIN/08_Entscheidbarkeit.html#satze","title":"S\u00e4tze","text":"<ul> <li> <p>Transitivit\u00e4t: F\u00fcr beliebige Sprachen \\(A, B\\) und \\(C\\) und \\(A \\preceq B\\) und \\(B \\preceq C\\) gilt, dann gilt auch \\(A \\preceq C\\)</p> </li> <li> <p>F\u00fcr beliebige Sprachen \\(A\\) und \\(B\\), wenn \\(B\\) entscheidbar ist und \\(A \\preceq B\\) gilt, dann ist auch \\(A\\) entscheidbar.</p> </li> <li> <p>F\u00fcr beliebige Sprachen \\(A\\) und \\(B\\), wenn \\(B\\) semi-entscheidbar ist und \\(A \\preceq B\\) gilt, dann ist auch \\(A\\) semi-entscheidbar.</p> </li> </ul>"},{"location":"22FS/THIN/08_Entscheidbarkeit.html#allgemeine-halteproblem","title":"Allgemeine Halteproblem","text":""},{"location":"22FS/THIN/08_Entscheidbarkeit.html#leeres-band-halteproblem","title":"Leeres-Band Halteproblem","text":""},{"location":"22FS/THIN/08_Entscheidbarkeit.html#spezielle-halteproblem","title":"Spezielle Halteproblem","text":""},{"location":"22FS/THIN/08_Entscheidbarkeit.html#halteproblem-beweiss","title":"Halteproblem Beweiss","text":""},{"location":"22FS/THIN/08_Entscheidbarkeit.html#satz-von-rice","title":"Satz von Rice","text":"<p>Es gibt eine Menge \\(R\\), in welcher alle berechenbare Funktion sind. Die Menge \\(S\\subset R\\) ist eine echte, nicht leere Teilmenge von R. Die folgende Sprache ist nun unentscheidbar: $$ C(S)={w\\in{0,1}^*\\mid F_w\\in S} $$</p>"},{"location":"22FS/THIN/09_Komplexit%C3%A4tstheorie.html","title":"Komplexit\u00e4tstheorie","text":"<p>Es gibt mehrere Arten von Komplexit\u00e4t:</p> <ul> <li>Zeitkomplexit\u00e4t: Laufzeit des besten Programms, welche ein Problem l\u00f6st</li> <li>Platzkomplexit\u00e4t: Speicherbedarf des bestens Programmes</li> <li>Beschreibungskomplexit\u00e4t: L\u00e4nge des k\u00fcrzesten Programmes</li> </ul> <p></p> <p></p>"},{"location":"22FS/THIN/09_Komplexit%C3%A4tstheorie.html#big-o-notation-landau-symbol","title":"Big-O-Notation (Landau Symbol)","text":"<p>Im folgende Beispiel gilt: </p> <ul> <li>\\(7n+4\\in \\mathcal O(n)\\) f\u00fcr \\(n \\ge 6 = n_0\\)</li> <li>\\(0.5n^2+5n - 4 \\in \\mathcal O(n^2)\\)</li> </ul> <p></p>"},{"location":"22FS/THIN/09_Komplexit%C3%A4tstheorie.html#bespiel-an-turing-maschinen","title":"Bespiel an Turing Maschinen","text":""},{"location":"22FS/THIN/09_Komplexit%C3%A4tstheorie.html#_1","title":"Komplexit\u00e4tstheorie","text":""},{"location":"22FS/THIN/09_Komplexit%C3%A4tstheorie.html#klassifizierung-von-problemen-np-vs-p","title":"Klassifizierung von Problemen (NP vs P)","text":""},{"location":"22FS/THIN/09_Komplexit%C3%A4tstheorie.html#polynomzeit-verifizieren","title":"Polynomzeit Verifizieren","text":"<p>Ein Polynomzeit-Verifizierer ist eine Turing-Maschine, welche in polynomen Zeit (\\(\\mathcal O(n^k)\\), wobei gilt \\(k \\in \\N\\)) \u00fcberpr\u00fcft, ob das Resultat einer Berechnung stimmt.</p> <p>**Frage: ** Sind p-Verifizierer und Polynomzeit-Verifizierer das selbe? --&gt; Ja</p> <p>Alle Probleme, welche ein Polynomzeit-Verifizierer haben, sind in der Gruppe \\(NP\\) enthalten.</p> <p></p> <p></p>"},{"location":"22FS/THIN/09_Komplexit%C3%A4tstheorie.html#polynomielle-reduktion","title":"Polynomielle Reduktion","text":"<p>Eine Sprache \\(L_1\\) ist polynominell auf \\(L_2\\) reduzierbar (\\(L_1 \\preceq_p L_2\\)), wenn eine Turing Maschine gebaut werden kann, welche von \\(L_1\\) zu \\(L_2\\) umwandeln kann. Dies muss in \\(O(n^k)\\) m\u00f6glich sein.</p>"},{"location":"22FS/THIN/09_Komplexit%C3%A4tstheorie.html#np-schwer-und-np-vollstandig","title":"NP-Schwer und NP-Vollst\u00e4ndig","text":"<p>Ein Problem ist NP-schwer, wenn es auf alle NP-Probleme (Probleme, welche mit einer Nicht-Deterministiersch-Maschine l\u00f6sbar/verifizierbar sind) reduzieren l\u00e4sst. Aus dem geht hervor, dass ein Problem, welches NP-schwer ist, gleich schwer oder schwerer zum l\u00f6sen ist, wie alle NP-Problem einzeln.</p> <p>Ein Problem ist NP-vollst\u00e4ndig, wenn es ein NP-Problem und NP-schwer ist.</p> <p>Ein NP-vollst\u00e4ndiges Problem ist gleich schwer zum l\u00f6sen, wie das am schwierigsten l\u00f6sbaren NP-Problem.</p>"},{"location":"22FS/THIN/09_Komplexit%C3%A4tstheorie.html#pnp-problem","title":"\\(P=NP\\) Problem","text":"<p>Wenn es jemandem gelingt ein Problem zu finden, welches NP-vollst\u00e4ndig ist und gleichzeitig auch zu P geh\u00f6hrt, dann w\u00fcrde gelten \\(P=NP\\), da P zu jedem NP-Problem reduziert werden k\u00f6nnte.</p> <p>Bis jetzt wurde kein solches Beispiel gefunden</p>"},{"location":"22FS/THIN/09_Komplexit%C3%A4tstheorie.html#konjunktive-normalform-knf","title":"Konjunktive Normalform (KNF)","text":"<p>Ein Ausdruck, welcher in der konjuktiver Normalform steht, besteht nur aus \\(\\neg\\), \\(\\vee\\), \\(\\wedge\\), \\(()\\) und Literale. </p> <p>Beispiele:</p> <ul> <li>\\(x\\)</li> <li>\\(x_1 \\vee x_2\\)</li> <li>\\(x_1 \\wedge x_2\\)</li> <li>\\((x_1 \\vee x_2) \\wedge (x_3 \\vee x_4) \\wedge \\neg x_5\\) </li> </ul> <p>Hingegen \\((x_1 \\wedge x_2) \\vee x_3\\) w\u00e4re nicht in der konjunktive Normalform</p>"},{"location":"22FS/THIN/09_Komplexit%C3%A4tstheorie.html#sat","title":"SAT","text":"<p>SAT war das \"erste\" NP-vollst\u00e4ndige Problem. Anhand diesem wurden alle weiteren Beweise f\u00fcr NP-Vollst\u00e4ndigkeit aufgeh\u00e4ngt.</p> <p>Das SAT Problem ist zu einscheiden, ob eine Formel in der KNF erf\u00fcllbar ist. Also es sicherlich eine Belegung gibt, welche <code>1</code> zur\u00fcck gibt.</p> <p>Es muss gezeigt werden das:</p> <ul> <li>\\(SAT \\in NP\\): Es ist m\u00f6glich eine Nicht-Deterministische Maschine zu bauen, welche \u00fcberpr\u00fcfen kann, ob eine Formel erf\u00fcllbar ist</li> <li>SAT ist NP-schwer: Das Problem kann zu allen NP-Problemen reduziert werden</li> </ul>"},{"location":"22FS/THIN/09_Komplexit%C3%A4tstheorie.html#np-vollstandigkeits-nachweis-weiteren-problemen","title":"NP-Vollst\u00e4ndigkeits-Nachweis weiteren Problemen","text":"<p>Satz Wenn \\(P1\\) NP-schwer und \\(P2\\) in NP enthalten ist und eine polynomielle Reduktion \\(P1 \\preceq_p P2\\) existiert, dann ist \\(P2\\) NP-vollst\u00e4ndig.</p> <p>Dass heisst, wenn ein Problem in NP enthalten ist und es eine Reduktion zu dem SAT Problem gibt, dann ist es NP-vollst\u00e4ndig.</p>"},{"location":"22FS/THIN/summary%20%28copy%29.html","title":"Summary","text":"Begriff Beschreib Alphabet Endliche, nichtleere Menge von Symbolen (\\(\\Sigma=\\{a, b, c\\}\\)) Wort Endliche Folge von Symbolen \\(\\varepsilon\\) Das Leere Wort (\\(\\vert \\varepsilon\\vert=0\\)) Sprache Eine Menge von W\u00f6rtern (\\(L=\\{10, 1100, ...\\}\\), in Prosa oder \\(L=\\{1^n0^n\\mid n\\in \\N\\}\\)) \\(\\emptyset\\) Leere Sprache (\\(\\emptyset \\neq \\{\\varepsilon\\}\\)) \\(\\vert abca\\vert_a=2\\) H\u00e4ufigkeit von a \\((abc)^R\\) Spiegelwort von \\(abc\\) (echter) Pr\u00e4fix Der Start eines Wortes (echt = Pr\u00e4fix nicht gleich das Wort)  Kann auch \\(\\varepsilon\\) sein (echter) Infix Teilw\u00f6rter  (echt = Infix nicht gleich das Wort) Kann auch \\(\\varepsilon\\) sein (echter) Suffix Das Ende des Wortes (echt = Suffix nicht gleich das Wort)  Kann auch \\(\\varepsilon\\) sein \\(\\Sigma^2\\) Alle W\u00f6rter des Alphabets \\(\\Sigma\\) mit der L\u00e4nge 2 Kleenesche H\u00fclle \\(\\Sigma^*\\) Alle W\u00f6rter des Alphabets \\(\\Sigma\\) (\\(\\Sigma^+=\\Sigma^*\\setminus\\{\\varepsilon\\}\\)) Konkatination \\(x\\circ y=xy\\) Zwei W\u00f6rter werden zusammen verketet Wortpotenzen \\((ab)^3=ababab\\) Sprachen-Konkatenation \\(AB=\\{uv\\mid u \\in A \\text{ und } v \\in B\\}\\) Kleenesche H\u00fclle einer Sprache \\(A^*=\\varepsilon \\cup A \\cup AA \\cup AAA \\cup ...\\) Komplement einer Sprache \\(\\overline L=\\Sigma^*-L=\\Sigma^*\\setminus L\\)","tags":["summary","THIN"]},{"location":"22FS/THIN/summary%20%28copy%29.html#chomsky-hirarchie","title":"Chomsky-Hirarchie","text":"<ul> <li>Typ-0 - rekursive Aufz\u00e4hlbar und Turing-Maschinen</li> <li>Typ-2 - Nicht-deterministische Kellerautomaten / Kontextfreie Gramatik</li> <li>Typ-3 - RegEx / Endliche Automaten (DEA, NEA)</li> </ul>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary%20%28copy%29.html#regex","title":"Regex","text":"<ul> <li>\\(\\epsilon\\) - eine leere Regular-Expression. Diese matcht nichts. Beschreibt \\(\\{\\varepsilon\\}\\)</li> <li>\\([x_1, x_2, ...,x_k]=x_1|x_2|...|x_k\\) </li> <li>\\(\\oslash\\) - eine leere Menge von Regular-Expressions</li> <li>\\(\\O\\) - eine leere Sprache</li> <li><code>*</code> zuerst verarbeiten, danach Konkatenation, danach <code>|</code> verarbeiten (Stern vor Konkatenation vor Strich)</li> </ul> <p>Wenn zwei Sprachen regul\u00e4r sind, ist das Resultat von einem Operator mit diesen Sprachen regul\u00e4r</p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary%20%28copy%29.html#endliche-automaten","title":"Endliche Automaten","text":"<p>Deterministische Endlichen Automat: \\(M=(Q, \\Sigma, \\delta, q_0, F)\\)</p> <ul> <li>\\(Q\\) : Alle Zust\u00e4nde des Automaten \\(Q=\\{q_0, q_1, ...,q_n\\}\\)</li> <li>\\(\\Sigma\\): Eingabealpabet</li> <li>\\(\\delta: Q\\times \\Sigma \\rightarrow Q\\): \u00dcbergangsfunktionen, welche von einem Zustand und einem Eingabe Symbol zum n\u00e4chsten Zustand f\u00fchrt</li> <li>\\(q_0\\): Startzustand</li> <li>\\(F\\subseteq Q\\): Menge der akzeptierten Zust\u00e4nden. Mindestens ein Zustand muss akzeptiert sein</li> </ul> <p>Im folgenden Beispiel sind ist eine Berechnung, bestehended aus Berechnungsschritte (welche aus Konfigurationen bestehen). Die Startkonfiguration ist: \\(\\{q_0\\}\\times \\Sigma^*\\), die Endkonfiguration:  \\((q, w)\\in Q\\times\\{\\epsilon\\}\\) $$ (q0, a_1a_2a_3)\\vdash_A(q_1, a_2a_3)\\vdash_A(q_2, a_3)\\vdash_A(q4, \\epsilon)=(q0, a_1a_2a_3)\\vdash_A^(q4, \\epsilon) $$ Die Sprache* eines endlichen Automaten besteht aus allen W\u00f6rter, welche in einem Endzustand landen ohne verbleibenden Input.</p> Was Beschreibung Der Startzustand Akzeptierter Endzustand Normaler Zustand \u00dcbergangsfunktionen: Vom Zustand \"0.50\" kann zu \"1.50\" gelaufen werden","tags":["summary","THIN"]},{"location":"22FS/THIN/summary%20%28copy%29.html#nicht-deterministische-automaten-nea","title":"Nicht Deterministische Automaten (NEA)","text":"<p>Eine NEA kann es f\u00fcr einen Input und Zustand mehrere \u00dcberg\u00e4nge geben (\u00dcbergangsfunktion: \\(\\delta: Q\\times \\Sigma\\rightarrow \\mathcal P(Q)\\)). Es werden alle M\u00f6glichkeiten von der NEA durchprobiert. Eine NEA akzeptiert ein Wort, wenn eine M\u00f6glichkeit akzeptiert wird.</p> <p>Eine \\(\\varepsilon\\)-NEA ist eine NEA, welche den Zustand wechseln kann, ohne ein Input zu konsumieren (\u00dcbergangsfunktion: \\(\\delta: Q\\times \\Sigma \\cup \\{\\epsilon\\}\\rightarrow \\mathcal P(Q)\\))</p> <p>Um eine \\(\\varepsilon\\)-NEA in eine NEA umzuwandeln, muss \u00fcberlegt werden, was f\u00fcr ein Zeichen als n\u00e4chstes konsumiert  werden k\u00f6nnte und diese in den uspr\u00fcnglichen \u00dcbergang aufzunehmen.</p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary%20%28copy%29.html#teilmengenkonstruktion-nea-to-dea","title":"Teilmengenkonstruktion (\\(NEA \\to DEA\\))","text":"<ol> <li>Die Zust\u00e4nde sind die Potenzmenge von \\(Q_N\\) (Potenzmenge:  \\(\\mathcal P(\\{0, 1\\})=\\{\\emptyset, \\{0\\}, \\{1\\}, \\{0, 1\\}\\}\\))</li> <li>Die potentielle Startzustand Kandidaten sind alle diese Teilmengen von \\(Q_N\\), welche \\(q_0\\) enthalten</li> <li>Akzeptierte Zust\u00e4nde sind alle Teilmengen, welche ein Element aus \\(F_N\\) besitzen</li> <li>Aus den Zust\u00e4nden und eingaben soll nun eine Tabelle gezeichnet werden. Bei dieser k\u00f6nnen alle Zust\u00e4nde gestrichen werden, welche nicht erreichbar sind. Also nie bei einer Eingabe-Spalte auftauchen. Dies muss solange wiederholt werden, bis nichts gestrichen werden kann.     Wenn \\(\\{q_1\\}\\) in einer Eingabe-Spalte steht, heisst das nur, dass \\(\\{q_1\\}\\) vorhanden ist. \\(\\{q_1, q_2\\}\\) muss immer noch gestrichen werden, wenn es nicht selbst vorkommt    Wenn eine Verbindung das leeres Wort nimmt, werden die Zust\u00e4nde, welche man vom leeren Wort Zustand erreichen kann, auch vom urspr\u00fcnglichen Wort als erreichbar angesehen.</li> <li>Die noch nicht gestrichenen Resultaten k\u00f6nnen nun Namen verteilt werden (z.B A-Z)</li> </ol>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary%20%28copy%29.html#dea-to-regex","title":"DEA \\(\\to\\) RegEX","text":"<ol> <li>F\u00fcr jeden Zustand eine separate Sprache definieren. Diese darf sich selbst referenzieren oder auch andere Sprachen</li> <li>K\u00fcrzen und einsetzen. Meistens ist es am einfachsten von den Endzust\u00e4nden zu k\u00fcrzen zu beginnen</li> </ol> \\[ \\begin{align} L_{q_0}&amp;=(0|1)L_{q_0}|0L_{q_1}\\Rightarrow(0|1)^*0L_{q_1}\\Rightarrow(0|1)*01\\\\ L_{q_1}&amp;=1L_{q_2} \\Rightarrow1\\varepsilon=1\\\\  L_{q_2}&amp;=\\varepsilon\\\\ \\end{align} \\] <p>Arden'sches Lemma: \\(L=UL|V\\Rightarrow L=U^*V\\), dabei ist \\(L\\) eine Spraceh und \\(U\\) einen andren Ausdruch</p> <p>**Zustandsklassen: ** \\([p]=\\{w \\in \\Sigma^*\\vert M \\text{ endet nach Lesen des Input-Worts } w \\text{ im Zustand } p\\}\\), dabei ist \\(M\\) einen Automaten, \\(w\\) ein eingabe Wort und \\(p\\) ein Zustand (nicht unbedingt der Endzustand)</p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary%20%28copy%29.html#untere-schranke-fur-endliche-automaten","title":"Untere Schranke f\u00fcr endliche Automaten","text":"<p>Die grunds\u00e4tzliche Idee  ist, dass wenn die Worte \\(x\\) und \\(y\\) in derselben Zustandsklasse ist, dann ist \\(zx=zy\\), wobei \\(z\\) irgend ein Wort ist.</p> <p>Es m\u00fcssen nun die folgende Schritte gefolgt werden:</p> <ol> <li>Es wird eine Annahme getroffen, wie viele Zust\u00e4nde eine Maschine ben\u00f6tigt</li> <li>Es m\u00fcssen f\u00fcr jeden Zustand ein Wort gefunden werden, welches in diesem Zustand endet</li> <li>Es wird nun f\u00fcr jede Kombination von W\u00f6rter von Schritt 2. ein Prefix oder Postfix \\(z\\) gefunden werden, welcher kombiniert mit dem einen Wort, ein Wort ergibt, welches in der Sprache ist und mit dem anderen Wort ein, ein Wort welches nicht in der Sprache ist</li> <li>Wenn dies f\u00fcr jedes Wort von Schritt 2. getan werden kann, dann werden mindestens so viel Zust\u00e4nde ben\u00f6tigt.  Da wenn zwei W\u00f6rter mit demselben Wort verbunden wird und diese in unterschiedlichen Sprache sind, die zwei W\u00f6rter in unterschiedlichen Zust\u00e4nde endet.</li> </ol>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary%20%28copy%29.html#kontextfreie-gramatik","title":"Kontextfreie Gramatik","text":"<p>Die Kontextfreie Grammatik \\(G\\) ist durch das Tupel \\((N, \\Sigma, P, A)\\) definiert, wobei</p> <ul> <li>\\(N\\) das Alphabet der Nichtterminale (Variabeln)ist , welche mit Produktionen in \\(P\\) aufgel\u00f6st werden k\u00f6nnen</li> <li>\\(P\\) eine endliche Menge von Produktionen in der Form \\(X \\rightarrow \\beta\\) ist. Dabei ist der Kopf \\(X\\in N\\) und der Rumpf \\(\\beta \\in (N\\cup\\Sigma)^*\\))  </li> <li>\\(A\\) das Startsymbol ist und gilt \\(A\\in N\\)</li> </ul> <p>$$ G_1=({A}, {0, 1}, P, A) \\ P={A\\rightarrow0A1,A\\rightarrow\\varepsilon} $$ Eine Kontextfreie Grammatik wird mehrdeutig genannt, wenn es f\u00fcr ein Wort mehrere Ableitungsb\u00e4ume gibt. Eine Sprache ist kontextfrei, wenn ein Kellerautomaten dazu gebaut werden kann.</p> <ul> <li>Mehrere Ableitungsschritte: \\(A\\Rightarrow AA \\Rightarrow (A)A \\Rightarrow (A)(A)\\Rightarrow()()\\) </li> <li>Dies kann auch als: \\(A \\overset*\\Rightarrow w\\) geschrieben werden. Dabei wird das Wort \\(w\\) vom Symbol \\(A\\) erzeugt/generiert.</li> <li>Ein Wort wird ableitbar gennant, wenn es eine Ableitung f\u00fcr dieses Wort gibt.</li> <li>Auf der Rechten Seite sieht ist ein Abbleitungsbaum. </li> <li>Linksseitig Ableiten: Die am meisten linke Variable wird immer zuerst abgeleitet</li> <li>Rechtsseitig Ableiten: Die am meisten rechte Variable wird immer zuerst abgeleitet</li> <li>eindeutige Gramatik: Eine Gramatik, welche nur auf eine Art abgeleitet werden kann</li> </ul> <p></p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary%20%28copy%29.html#dea-zu-kontextfreien-sprache","title":"DEA zu kontextfreien Sprache","text":"<p>Es gibt eine DEA \\(M=(Q, \\Sigma, \\delta, q_0, F)\\). Aus dieser kann eine kontextfreie Sprache erstellt werden:</p> <ol> <li>F\u00fcr jeden Zustand \\(q_i\\) gibt es ein Nichtterminal \\(Q_i\\)</li> <li>F\u00fcr jede Transition \\(\\delta(q_i, a)=q_j\\) gibt es eine Produktion \\(Q_i\\rightarrow aQ_j\\)</li> <li>F\u00fcr jeden akzeptierten Zustand gibt es eine Produktion \\(Q_i\\rightarrow \\varepsilon\\)</li> <li>Das Nichtterminal \\(Q_0\\) wird das Startsymbol</li> </ol>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary%20%28copy%29.html#keller-automaten-ka","title":"Keller Automaten (KA)","text":"<p>Ein deterministischer Keller Automaten (KA) wird als 7-Tupel dargestellt: \\((Q, \\Sigma, \\Gamma, \\delta, q_0, \\$, F)\\))</p> <ul> <li>\\(\\Gamma\\) ist das Alphabet des Kellers (bzw. des Stacks)</li> <li>\\(\\delta: Q\\times (\\Sigma \\cup \\varepsilon) \\times \\Gamma\\rightarrow Q\\times\\Gamma^*\\) ist die (partielle) \u00dcbergangsfunktion</li> <li>\\(\\$\\in \\Gamma\\) ist ein ausgezeichnetes Symbol vom Alphabet des Stacks/Kellers</li> </ul> <p>Zu dem gilt f\u00fcr die \u00dcbergangsfunktion \\(\\delta\\), wenn \\(\\delta(q, b, x)\\) definiert ist, darf \\(\\delta(q, \\varepsilon, x)\\) nicht definiert sein.  Zu begin der Ausf\u00fchrung ist im Strack \\(\\$\\), was ein leerer Stack darstellt.</p> <p></p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary%20%28copy%29.html#nichtdeterministischen-kellerautomaten-nka","title":"Nichtdeterministischen Kellerautomaten (NKA)","text":"<p>Eine NKA ist gleich wie eine KA, nur das die \u00dcbergangsfuntkion den Typ \\(\\delta: Q\\times (\\Sigma \\cup \\varepsilon) \\times \\Gamma\\rightarrow \\mathcal P (Q\\times\\Gamma^*)\\) hat. Der R\u00fcckgabetyp ist die Potenzmenge. Somit kann in der NKA ein Eingang mehrere Ausg\u00e4nge haben.</p> <p>Wie auch bei einer NEA kann nun im \\(\\varepsilon\\) (das leere Wort) f\u00fcr \\(\\Sigma\\) in der \u00dcbergangsfunktion. </p> <p>Nicht alle NKA k\u00f6nnen in eine KA umgewandlet werden. Auch gibt es kontextfreie Sprachen, welche nicht in eine KA umgewandlet k\u00f6nnen werden.</p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary%20%28copy%29.html#berechnungen-und-berechnungsschritte","title":"Berechnungen und Berechnungsschritte","text":"<p>Die Berechnungssfunktion dazu w\u00e4re: \\(\\delta(q, b, c)=(p, w)\\) Dabei befindet sich der Automaten im Zustand \\(q\\), list das Symbol \\(b\\) von der Eingabe und wird das Kellersymbol \\(c\\) vom Stack lesen und \\(w\\) zur\u00fcck schreiben. </p> <p>Eine Berechnung besteht aus mehreren Berechnungsschritte und eine Start- und Endkonfiguration.</p> <p>Beispiel: \\((q_0, 0011, \\$) \\vdash (q_0, 011, 0\\$)\\vdash (q_0, 11, 00\\$)\\vdash(q_1, 1, 0\\$)\\vdash(q_1, \\varepsilon, \\$)\\vdash(q2, \\varepsilon, \\$)\\)  Dies kann auch als \\((q_0, 0011, \\$)\\vdash^*(q2, \\varepsilon, \\$)\\) geschrieben werden.</p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary%20%28copy%29.html#turing-machinen","title":"Turing Machinen","text":"<p>Eine (determinischtische) Turing-Maschine (DTM) ist ein 7-Tupel: \\(M=(Q,\\Sigma, \\Gamma, \\delta, \\textvisiblespace, F)\\)</p> <ul> <li>\\(\\delta: Q\\times \\Gamma \\rightarrow Q\\times\\Gamma\\times D, D=\\{L, R\\}\\): Die \u00dcbergangsfunktion, welche den n\u00e4chsten Zustand, was geschrieben werden soll und ob das Band nach Links (L) oder nach rechts (R) geschoben werden soll</li> <li>\\(\\Gamma\\): Das Bandalphabet, dabei muss \\(\\Sigma \\subset \\Gamma\\)</li> <li>\\(\\textvisiblespace\\): Das Leerzeichen, dabei muss \\(\\textvisiblespace \\in \\Gamma\\) und \\(\\textvisiblespace \\not \\in \\Sigma\\)</li> </ul> <p>Berechnungen werden folgendermassen dargestellt: \\(X_1,...X_{i-1}qX_iX_{i+1},...,X_n\\vdash X_1,...X_{i-1}pX_iX_{i+1},...,X_n\\) Der aktuelle Zustand ist in der Mitte (\\(q\\) bzw. \\(p\\)). Abgek\u00fcrzt wird es als \\(K_1\\vdash^* K_n\\) geschrieben</p> <p>Eine Sprache, welche von einer TM akzeptiert wird, nennt sich rekursiv aufz\u00e4hltbar</p> <p>Im folgenden Bild wird eine \u00dcbergangsfunktion einer Turing Maschine gezeigt: \\(\\delta(q_1, X)=(q_2, Y, D)\\), wobei \\(D\\in\\{L, R\\}\\)</p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary%20%28copy%29.html#modifikationen","title":"Modifikationen","text":"<ul> <li>Mit zus\u00e4tzlichem Speicher</li> <li>Mit mehreren Spuren, welche auf einem Band sind (ein Lese/Schreibkopf)</li> <li>Mit mehreren B\u00e4ndern (mehrere Lese/Schreibk\u00f6pfe) (\u00dcbergangsfunktion: \\(\\delta:Q\\times\\Gamma^k\\rightarrow Q\\times \\Gamma^k \\times \\{R, S, L\\}^k\\))</li> <li>Nicht deterministische Turning Machine   \u00dcberg\u00e4nge m\u00fcssen nicht einzigartig sein (wie bei NEAs) (\u00dcbergangsfunktion: \\(\\delta: Q\\times \\Gamma \\rightarrow \\mathcal P(Q \\times \\Gamma \\times \\{R, L\\})\\)   Nicht deterministische TMs sind gleich m\u00e4chtig, wie deterministische TMs.</li> <li>Mit semi-beschr\u00e4nktem Band   Das Band ist nur unendlich in eine Richtung. Eine Semi-beschr\u00e4nkte TM ist gleich m\u00e4chtig, wie eine TM. (Beweissidee: Eine semi-beschr\u00e4nkte TM mit zwei b\u00e4nder, eines f\u00fcr die positive und eines f\u00fcr die negative Seite)</li> <li>\\(k\\)-Stack Machine   Eine Deterministischer Kellear Automat mit mehreren Stacks (\u00dcbergangsfunktion: \\(\\delta: Q \\times \\Gamma_1\\times...\\times\\Gamma_n\\rightarrow Q\\times\\Gamma_1^*\\times...\\times \\Gamma^*_k\\))   Eine 2-Stack Machine kann ein Band simulieren (Ein Stack f\u00fcr die negative und ein Stack f\u00fcr die positive Seite) und ist demnach gleich m\u00e4chtig, wie eine TM</li> <li>Z\u00e4hler-Machine (Hat Z\u00e4hler einer nat\u00fcrlichen Zahl (\\(n \\ge 0\\)) anstatt Stacks)   Ein 2-Stack kann mit mit 3-Z\u00e4hler ersetzt werden und daher ist ein Z\u00e4hler-Machine gleich wertig, wie eine TM.    Daf\u00fcr wird jedem Symbol des Stacks eine Zahl zugeordnet (1, 2, 3, 4, ...). Der aktuelle Wert wird mit der Anzahl Symbolen multipliziert und mit dem n\u00e4chsten Symbol addiert (\\(c_{new}=c_{old}\\cdot length + s\\)). Beim dekodieren wird der Wert durch die Anzahl Symbole geteilt und der Rest ist das aktuelle Symbol.    Diese 3-Z\u00e4hler Machine kann mit einer 2-Z\u00e4hler Machine simuliert werden, in dem die 3-Z\u00e4hler mit der Encodierung \\(2^i\\cdot 3^j\\cdot 4^k\\) enkodiert werden und mit einer Primfaktorzerlegung dekodiert werden. Ein Z\u00e4hler wird noch zum Rechnen ben\u00f6tigt.</li> </ul>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary%20%28copy%29.html#universelle-turning-maschine-utm","title":"Universelle Turning Maschine (UTM)","text":"<p>Eine Turing Maschine, welche andere Turning Maschinen simulieren kann. Alle Zust\u00e4nde werden Un\u00e4r-Kodiert (0 = 1, 00 = 2, 000 = 3, ...) mit dem Trennzeichen <code>1</code> </p> <p>Dabei wird folgendes gespeichert: Die \u00dcbergangsfunktion \\(\\delta(q_i, X_j)=(q_k, X_l, D_m)\\to 0^i10^j10^l10^m\\). Einzelne \u00dcbergansfunktionen werden mit <code>11</code> getrennt. Die Machine wird mit <code>111</code> vom Input getrennt.</p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary%20%28copy%29.html#berechnungsmodelle","title":"Berechnungsmodelle","text":"<p>Intuitive berechenbare Funktion: eine Funktion, welche algorithmisch (durch eine mechanisches Verfahren) berechnet werden kann. Jede intuitive berechenbare Funktion l\u00e4sst sich mit einer TM berechnen.</p> <p>Turing-berechenbare Funktionen: Funktionen, welche von einer Turing-Maschinen berechnet werden k\u00f6nnen</p> <p>Gandys These M: Alles, was jemals mit einer (endlichen) Maschine/physikalischen Apparatur berechnet werden kann, ist bereits von einer Turing-Maschine berechenbar. Bis jetzt wurde noch kein Gegenbeispiel zu beiden Thesen gefunden worden.</p> <p>Turing-Vollst\u00e4ndigkeit: F\u00fcr jede Zahl \\(k \\in \\N\\) und jede Funktion \\(f: \\N^k \\to \\N\\) gibt es eine Turing-Machine und While-Programm</p> <ul> <li>Zuweisungen: <code>x = y + c</code> oder <code>x = y - c</code>  (wobei c eine Konstante ist!)</li> <li><code>x0</code> ist der Output; <code>x1</code>, <code>x2</code>, ... sind die Inputs/Variabeln</li> <li>Alle Variabeln k\u00f6nnen nat\u00fcrliche Zahlen (\\(n \\ge 0\\)) enthalten (\\(2-5=0\\))</li> <li>Loop-Programme</li> <li><code>LOOP x DO ... END</code> Der Loop wird <code>x</code>-mall durchgef\u00fchrt. \u00c4ndern von <code>x</code> hat kein Einfluss</li> <li>While-Programme (auch <code>LOOP</code> ist erlaubt)</li> <li><code>While xi &gt; 0 Do ... End</code> Die einzige erlaubte Bedingung ist <code>xi &gt; 0</code></li> <li>While-Programme terminieren nicht immer</li> <li>Jedes Loop-Pgramm ist auch ein WhileProgramm</li> <li>GOTO-Programme: </li> <li>Marker: (<code>M1:</code>, <code>M2:</code>, ...), <code>Goto Mk</code> , <code>If xi = c Then Goto Mr</code>, <code>Halt</code> (Haltet das Programm an)</li> <li>Primitiv rekursive Funktion (nach dem Muster \\(f: \\N^2 \\to \\N\\))</li> <li>Konstante Funktion: \\(c^n_k: \\N^n \\to \\N \\mapsto c^n_k(x_1, ..., x_n)=k\\)</li> <li>Nachfolge Funktion: \\(\\eta: \\N \\to \\N \\mapsto \\eta(x)=x+1\\)</li> <li>Projektion (\\(1 \\le k \\le n\\)): \\(\\pi^n_k: \\N^n \\to \\N \\mapsto \\pi^n_k(x_1, ...,x_k,...,x_n)=x_k\\)</li> <li>Wenn \\(f\\) und \\(g_i\\) primitive rekursive Funktionen sind, dann ist \\(h(\\vec x)=f(g_1(\\vec x), ..., g_k(\\vec x))\\) auch eine primitive rekursive Funktion</li> <li>Primitive rekursive Funktionen = LOOP-Programme</li> </ul> <p>Ackermann (ist Turing-berechenbar, nicht Loop berechen, bzw. nicht primitive rekursive, ist total):  $$ \\begin{align} a(0, m)&amp;= m + 1\\ a(n + 1, 0) &amp;= a(n, 1)\\ a(n + 1, m + 1) &amp;= a(n, a(n + 1, m)) \\end{align} $$</p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary%20%28copy%29.html#entscheidbarkeit","title":"Entscheidbarkeit","text":"<p>Entscheidbar: Es gibt eine Turing-Maschine, welche f\u00fcr alle akzeptierten (wenn ein <code>1</code> aufs Band geschrieben wird) und nicht akzeptierten Zust\u00e4nde (wenn ein <code>0</code> aufs Band geschrieben wird) endet</p> <p>Semi-Entscheidbar: Es gibt eine Turing-Maschine, welche f\u00fcr alle akzeptierten Zust\u00e4nde h\u00e4lt und f\u00fcr nicht akzeptierte Zust\u00e4nde nie h\u00e4lt.</p> <p>Reduktion Es gibt eine Funktion \\(F: \\Sigma^* \\to \\Gamma^*\\) f\u00fcr die Sprache \\(A \\subset \\Sigma^*\\) und \\(B  \\subset \\Gamma^*\\). Dies wird als \\(A \\preceq B\\) geschrieben</p> <ul> <li>Jede entscheidbare Sprache ist auch semi-entscheidbar</li> <li>Wenn eine Sprache \\(A\\) und ihr Komplement \\(\\overline A\\) semi-entscheidbar ist, sind \\(A\\), wie auch \\(\\overline A\\) entscheidbar</li> <li>Wenn \\(A\\) entscheidbar ist, ist auch \\(\\overline A\\) entscheidbar</li> <li>Wenn \\(A\\) und \\(B\\) (semi-)entscheidbar sind, ist auch \\(A \\cup B\\) und \\(A \\cap B\\) (semi-)entscheidbar</li> <li>\\(A\\) ist rekursive aufz\u00e4hlbar \\(\\Leftrightarrow\\) \\(A\\) ist semi-entscheidbar \\(\\Leftrightarrow\\) \\(A\\) ist der Werte und Definitionsbereich einer berechenbaren Funktion</li> <li>\\(A\\preceq B\\) und \\(B \\preceq C\\), dann gilt auch \\(A \\preceq C\\)</li> <li>Ist \\(B\\) (semi-)entscheidbar und \\(A \\preceq B\\), dann ist auch \\(A\\) (semi-)entscheidbar</li> </ul> <p>allgemeine Halteproblem: Gibt es eine TM \\(H\\), welche entscheiden kann, ob ein Program mit einem Input anh\u00e4lt oder nicht immer weiter l\u00e4uft.</p> <p>leere Halteproblem: Ob es eine TM \\(H_0\\) gibt, welche entscheiden kann, ob ein Programm mit einem leeren Band anh\u00e4lt</p> <p>spezielle Halteproblem: Es wird eine TM \\(H_S\\) erstellt, welche \\(H\\) fragt, ob ein Program endet. Wenn ja, loopt \\(H_S\\), wenn nein, beendet \\(H_S\\). Wenn \\(H_S\\) das als Input \\((H_S, H_S)\\) bekommt, ist unklar, ob \\(H_S\\) anh\u00e4lt oder weiterl\u00e4uft und daher kann es keine TM \\(H\\) geben.</p> <p>Alle Halteprobleme sind semi-entscheidbar und nicht-entscheidbar.</p> <p>Konsequenzen von Satz von Rice: Unm\u00f6glich im Allgemeinen zu \u00fcberpr\u00fcfen, ob ein Program</p> <ul> <li>eine bestimmte Spezifikation erf\u00fcllt</li> <li>frei von \u201cbugs\u201d ist</li> <li>bei jeder Eingabe terminiert</li> <li>und ein anderes Program dieselbe Funktionalit\u00e4t haben</li> </ul> <p>Colatz: \\(n \\text{ ist gerade} \\Rightarrow n=\\frac n 2 \\text{ sonst } n=3n + 1\\) Alle positiven Inputs enden in \\(4 \\to 2 \\to 1  \\to 4 \\to 2 \\to 1\\)</p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary%20%28copy%29.html#komplexitatstheorie","title":"Komplexit\u00e4tstheorie","text":"<ul> <li>Zeitkomplexit\u00e4t: Laufzeit des besten Programms, welche ein Problem l\u00f6st</li> <li>Platzkomplexit\u00e4t: Speicherbedarf des bestens Programmes</li> <li> <p>Beschreibungskomplexit\u00e4t: L\u00e4nge des k\u00fcrzesten Programmes</p> </li> <li> <p>Obereschranke: \\(f \\in \\mathcal O(g)\\Leftrightarrow f(n) \\le c \\cdot g(n)\\)  wenn \\(n\\) gr\u00f6sser als \\(n_0\\) ist (Wobei \\(g\\) und \\(f\\) eine Funktion \\(\\N \\to \\N\\) ist und \\(c\\in \\N\\) eine Konstante)</p> </li> <li>Untereschranke: \\(f \\in \\Omega(g)\\Leftrightarrow f(n) \\ge \\frac 1 d \\cdot g(n)\\) wenn \\(n\\) gr\u00f6sser als \\(n_0\\) ist (Wobei \\(d \\in \\N\\) eine Konstante ist)</li> <li>\\(f\\in \\Theta(g) \\Leftrightarrow f(n)\\in \\mathcal O(g(n))\\wedge f(n)\\in \\Omega(g(n))\\)</li> </ul> <p></p> Komplexit\u00e4t Beispiel \\(\\mathcal O(1)\\) Konstanter Aufwand unabh\u00e4ngig vom Input \\(\\mathcal O(n)\\) Linearer Aufwand: Ein For-Loop Abh\u00e4ngig von \\(n\\) \\(\\mathcal O(\\log n)\\) Logarithmischer Aufwand: Binary-Search/ Mit jeder Iteration wird der Aufwand halbiert \\(\\mathcal O(n^2)\\) Quadratischer Aufwand: Zwei verschachtelte For-Loops abh\u00e4ngig von \\(n\\) \\(\\mathcal O(2^n)\\) Exponentieller Aufwand: Mit jeder Iteration verdoppelt sich der Aufwand","tags":["summary","THIN"]},{"location":"22FS/THIN/summary%20%28copy%29.html#np-vs-p","title":"NP vs P","text":"<ul> <li>Polynomzeit l\u00f6sbar (P): Problem ist teil von \\(\\mathcal O(n^c)\\), wobei \\(c \\ge 1\\)</li> <li>Nicht deterministische Polynomiell (NP): Alle Probleme entscheidbar von einer Nicht-deterministische Maschine in polynomzeit</li> <li>Polynomzeit-Verifizierer: Eine TM, welche eine L\u00f6sung in polynomial zeit verifiziert</li> <li>\\(P\\neq NP\\): Nicht alle Probleme, welche in polynomzeit verifizierbar sind, k\u00f6nnen in polynomzeit gel\u00f6st werden</li> <li>Clique: Eine Menge von Knoten, bei welchen alle Knoten mit allen anderen Knoten (ausser sich selbst) verbunden sind</li> <li>NP-Schwer: Ein Problem, welches sich auf alle NP-Probleme reduzieren l\u00e4sst. Ein NP-Schweres Problem ist gleich schwer oder schwerer also das schwerste NP-Problem</li> <li>NP-Vollst\u00e4dnig: Ein NP-Vollst\u00e4ndiges Problem ist NP-Schwer und ein NP-Problem</li> <li>polynomiell reduzierbar (\\(\\preceq_p\\)): Eine Reduktion in polynomieller Zeit (\\(L_1 \\preceq_p L_2\\) heisst, dass \\(L_2\\) mindestens so schwer wie \\(L_1\\) ist )</li> <li>Wenn \\(P_1\\) NP-schwer, \\(P_2\\) in NP enthalten ist und \\(P_1 \\preceq_p P_2\\) gibt, dann ist \\(P_2\\) NP-vollst\u00e4ndig</li> <li>SAT: \"erstes\" NP-volst\u00e4ndige Problem   Ob eine Formel in der KNF (\\((x_1 \\vee x_2) \\wedge (x_3 \\vee x_4) \\wedge \\neg x_5\\))) erf\u00fcllbar ist</li> </ul> <p>TODO: L\u00f6sung von SAT Problem</p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary.html","title":"Summary","text":"Begriff Beschreib Alphabet Endliche, nichtleere Menge von Symbolen (\\(\\Sigma=\\{a, b, c\\}\\)) Wort Endliche Folge von Symbolen \\(\\varepsilon\\) Das Leere Wort (\\(\\vert \\varepsilon\\vert=0\\)) Sprache Eine Menge von W\u00f6rtern (\\(L=\\{10, 1100, ...\\}\\), in Prosa oder \\(L=\\{1^n0^n\\mid n\\in \\N\\}\\)) \\(\\emptyset\\) Leere Sprache (\\(\\emptyset \\neq \\{\\varepsilon\\}\\)) \\(\\vert abca\\vert_a=2\\) H\u00e4ufigkeit von a \\((abc)^R\\) Spiegelwort von \\(abc\\) \\(\\Sigma^2\\) Alle W\u00f6rter des Alphabets \\(\\Sigma\\) mit der L\u00e4nge 2 Kleenesche H\u00fclle \\(\\Sigma^*\\) Alle W\u00f6rter des Alphabets \\(\\Sigma\\) (\\(\\Sigma^+=\\Sigma^*\\setminus\\{\\varepsilon\\}\\)) Konkatination \\(x\\circ y=xy\\) Zwei W\u00f6rter werden zusammen verketet Wortpotenzen \\((ab)^3=ababab\\) Sprachen-Konkatenation \\(AB=\\{uv\\mid u \\in A \\text{ und } v \\in B\\}\\) Kleenesche H\u00fclle einer Sprache \\(A^*=\\varepsilon \\cup A \\cup AA \\cup AAA \\cup ...\\) Komplement einer Sprache \\(\\overline L=\\Sigma^*-L=\\Sigma^*\\setminus L\\)","tags":["summary","THIN"]},{"location":"22FS/THIN/summary.html#regex","title":"Regex","text":"<ul> <li>\\(\\epsilon\\) - eine leere Regular-Expression. Diese matcht nichts. Beschreibt \\(\\{\\varepsilon\\}\\)</li> <li>\\([x_1, x_2, ...,x_k]=x_1|x_2|...|x_k\\) </li> <li>\\(\\oslash\\) - eine leere Menge von Regular-Expressions</li> <li>\\(\\O\\) - eine leere Sprache</li> <li><code>*</code> zuerst verarbeiten, danach Konkatenation, danach <code>|</code> verarbeiten (Stern vor Konkatenation vor Strich)</li> </ul> <p>Wenn zwei Sprachen regul\u00e4r sind, ist das Resultat von einem Operator mit diesen Sprachen regul\u00e4r</p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary.html#endliche-automaten","title":"Endliche Automaten","text":"<p>Deterministische Endlichen Automat: \\(M=(Q, \\Sigma, \\delta, q_0, F)\\)</p> <ul> <li>\\(Q\\) : Alle Zust\u00e4nde des Automaten \\(Q=\\{q_0, q_1, ...,q_n\\}\\)</li> <li>\\(\\Sigma\\): Eingabealpabet</li> <li>\\(\\delta: Q\\times \\Sigma \\rightarrow Q\\): \u00dcbergangsfunktionen, welche von einem Zustand und einem Eingabe Symbol zum n\u00e4chsten Zustand f\u00fchrt</li> <li>\\(q_0\\): Startzustand</li> <li>\\(F\\subseteq Q\\): Menge der akzeptierten Zust\u00e4nden. Mindestens ein Zustand muss akzeptiert sein</li> </ul> <p>Die Startkonfiguration ist: \\(\\{q_0\\}\\times \\Sigma^*\\), die Endkonfiguration:  \\((q, w)\\in Q\\times\\{\\epsilon\\}\\) $(q0, a_1a_2a_3)\\vdash_A(q_1, a_2a_3)\\vdash_A(q_2, a_3)\\vdash_A(q4, \\epsilon)=(q0, a_1a_2a_3)\\vdash_A^*(q4, \\epsilon) $</p> Was Beschreibung Der Startzustand Akzeptierter Endzustand Normaler Zustand \u00dcbergangsfunktionen","tags":["summary","THIN"]},{"location":"22FS/THIN/summary.html#nicht-deterministische-automaten-nea","title":"Nicht Deterministische Automaten (NEA)","text":"<p>\u00dcbergangsfunktion einer NEA: \\(\\delta: Q\\times \\Sigma\\rightarrow \\mathcal P(Q)\\). </p> <p>\u00dcbergangsfunktion einer \\(\\varepsilon\\)-NEA  (\u00dcbergangsfunktion: \\(\\delta: Q\\times \\Sigma \\cup \\{\\epsilon\\}\\rightarrow \\mathcal P(Q)\\))</p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary.html#teilmengenkonstruktion-nea-to-dea","title":"Teilmengenkonstruktion (\\(NEA \\to DEA\\))","text":"<ol> <li>Die Zust\u00e4nde sind die Potenzmenge von \\(Q_N\\) (Potenzmenge:  \\(\\mathcal P(\\{0, 1\\})=\\{\\emptyset, \\{0\\}, \\{1\\}, \\{0, 1\\}\\}\\) und \\(|\\mathcal P(A)|=2^{|A|}\\))</li> <li>Akzeptierte Zust\u00e4nde sind alle Teilmengen, welche ein Element aus \\(F_N\\) besitzen</li> <li>Aus den Zust\u00e4nden und eingaben soll nun eine Tabelle gezeichnet werden. Bei dieser k\u00f6nnen alle Zust\u00e4nde gestrichen werden, welche nicht erreichbar sind. Dies muss solange wiederholt werden, bis nichts gestrichen werden kann. (\\(q0\\) ist Startzustand)</li> <li>Die noch nicht gestrichenen Resultaten k\u00f6nnen nun Namen verteilt werden (z.B A-Z) </li> </ol>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary.html#dea-to-regex","title":"DEA \\(\\to\\) RegEX","text":"<ol> <li>F\u00fcr jeden Zustand eine separate Sprache definieren. Diese darf sich selbst referenzieren oder auch andere Sprachen</li> <li>K\u00fcrzen und einsetzen. Meistens ist es am einfachsten von den Endzust\u00e4nden zu k\u00fcrzen zu beginnen</li> </ol> \\[ \\begin{align} L_{q_0}&amp;=(0|1)L_{q_0}|0 &amp; L_{q_1}\\Rightarrow(0|1)^*0 &amp; L_{q_1}\\Rightarrow(0|1)*01\\\\ L_{q_1}&amp;=1L_{q_2} \\Rightarrow1\\varepsilon=1\\\\  L_{q_2}&amp;=\\varepsilon\\\\ \\end{align} \\] <p>Arden'sches Lemma: \\(L=UL|V\\Rightarrow L=U^*V\\), dabei ist \\(L\\) eine Spraceh und \\(U\\) einen andren Ausdruck</p> <p>**Zustandsklassen: ** \\([p]=\\{w \\in \\Sigma^*\\vert M \\text{ endet nach Lesen des Input-Worts } w \\text{ im Zustand } p\\}\\), dabei ist \\(M\\) einen Automaten, \\(w\\) ein eingabe Wort und \\(p\\) ein Zustand (nicht unbedingt der Endzustand)</p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary.html#untere-schranke-fur-endliche-automaten","title":"Untere Schranke f\u00fcr endliche Automaten","text":"<p>Es m\u00fcssen nun die folgende Schritte gefolgt werden:</p> <ol> <li>Es wird eine Annahme getroffen, wie viele Zust\u00e4nde eine Maschine ben\u00f6tigt</li> <li>Es m\u00fcssen f\u00fcr jeden Zustand ein Wort gefunden werden, welches in diesem Zustand endet</li> <li>Es wird nun f\u00fcr jede Kombination von W\u00f6rter von Schritt 2. ein Prefix oder Postfix \\(z\\) gefunden werden, welcher kombiniert mit dem einen Wort akzeptiert wird und mit dem anderen Wort nicht akzeptiert wird.</li> </ol>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary.html#kontextfreie-gramatik","title":"Kontextfreie Gramatik","text":"<p>Die Kontextfreie Grammatik \\(G\\) ist durch das Tupel \\((N, \\Sigma, P, A)\\) definiert, wobei</p> <ul> <li>\\(N\\) das Alphabet der Nichtterminale</li> <li>\\(P\\) eine endliche Menge von Produktionen</li> <li>\\(A\\) das Startsymbol ist und gilt \\(A\\in N\\)</li> </ul> <p>$$ G_1=({A}, {0, 1}, P, A) \\ P={A\\rightarrow0A1,A\\rightarrow\\varepsilon} $$ Eine Kontextfreie Grammatik wird mehrdeutig genannt, wenn es f\u00fcr ein Wort mehrere Ableitungsb\u00e4ume gibt. Eine Sprache ist kontextfrei, wenn ein Kellerautomaten dazu gebaut werden kann.</p> <ul> <li>Mehrere Ableitungsschritte: \\(A\\Rightarrow AA \\Rightarrow (A)A \\Rightarrow (A)(A)\\Rightarrow()()\\) oder \\(A\\overset * \\Rightarrow ()()\\)</li> <li>Ein Wort wird ableitbar gennant, wenn es eine Ableitung f\u00fcr dieses Wort gibt.</li> <li>Link- &amp; rechtssseitig Ableiten: Die am meisten linke/rechte Variable wird immer zuerst abgeleitet</li> <li>eindeutige Gramatik: Eine Gramatik, welche nur auf eine Art abgeleitet werden kann</li> </ul>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary.html#dea-zu-kontextfreien-sprache","title":"DEA zu kontextfreien Sprache","text":"<p>Es gibt eine DEA \\(M=(Q, \\Sigma, \\delta, q_0, F)\\). Aus dieser kann eine kontextfreie Sprache erstellt werden:</p> <ol> <li>F\u00fcr jeden Zustand \\(q_i\\) gibt es ein Nichtterminal \\(Q_i\\)</li> <li>F\u00fcr jede Transition \\(\\delta(q_i, a)=q_j\\) gibt es eine Produktion \\(Q_i\\rightarrow aQ_j\\)</li> <li>F\u00fcr jeden akzeptierten Zustand gibt es eine Produktion \\(Q_i\\rightarrow \\varepsilon\\)</li> <li>Das Nichtterminal \\(Q_0\\) wird das Startsymbol</li> </ol>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary.html#keller-automaten-ka","title":"Keller Automaten (KA)","text":"<p>Ein deterministischer Keller Automaten (KA) wird als 7-Tupel dargestellt: \\((Q, \\Sigma, \\Gamma, \\delta, q_0, \\$, F)\\))</p> <ul> <li>\\(\\Gamma\\) = Alphabet des Stacks;  \\(\\delta: Q\\times (\\Sigma \\cup \\varepsilon) \\times \\Gamma\\rightarrow Q\\times\\Gamma^*\\);  \\(\\$\\in \\Gamma\\) = Leere Symbol</li> </ul> <p>Zu dem gilt f\u00fcr die \u00dcbergangsfunktion \\(\\delta\\), wenn \\(\\delta(q, b, x)\\) definiert ist, darf \\(\\delta(q, \\varepsilon, x)\\) nicht definiert sein.  Zu begin der Ausf\u00fchrung ist im Strack \\(\\$\\), was ein leerer Stack darstellt.</p> <p></p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary.html#nichtdeterministischen-kellerautomaten-nka","title":"Nichtdeterministischen Kellerautomaten (NKA)","text":"<p>\u00dcbergangsfuntkion Typ \\(\\delta: Q\\times (\\Sigma \\cup \\varepsilon) \\times \\Gamma\\rightarrow \\mathcal P (Q\\times\\Gamma^*)\\) </p> <p>Nicht alle NKA und kontextfreie Sprachen k\u00f6nnen in eine KA umgewandlet werden.</p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary.html#berechnungen-und-berechnungsschritte","title":"Berechnungen und Berechnungsschritte","text":"<p> \\(\\delta(q, b, c)=(p, w)\\) Vom Zustand \\(q\\) zu \\(p\\) mit dem Input-Symbol \\(b\\) und dem Kellersymbol \\(c\\). \\(w\\) wird geschrieben</p> <p>Beispiel Berechung: \\((q_0, 0011, \\$) \\vdash (q_0, 011, 0\\$)\\vdash (q_0, 11, 00\\$)\\vdash(q_1, 1, 0\\$)\\vdash(q_1, \\varepsilon, \\$)\\vdash(q2, \\varepsilon, \\$)=(q_0, 0011, \\$)\\vdash^* (q_2, \\varepsilon, \\$)\\) </p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary.html#turing-machinen","title":"Turing Machinen","text":"<p>Eine (determinischtische) Turing-Maschine (DTM) ist ein 7-Tupel: \\(M=(Q,\\Sigma, \\Gamma, \\delta, \\textvisiblespace, F)\\)</p> <ul> <li>\\(\\delta: Q\\times \\Gamma \\rightarrow Q\\times\\Gamma\\times D, D=\\{L, R\\}\\);  \\(\\Gamma\\) = Das Bandalphabet, dabei muss \\(\\Sigma \\subset \\Gamma\\); \\(\\textvisiblespace\\) = Das Leerzeichen, dabei muss \\(\\textvisiblespace \\in \\Gamma\\) und \\(\\textvisiblespace \\not \\in \\Sigma\\)</li> </ul> <p>\\(X_1,...X_{i-1}qX_iX_{i+1},...,X_n\\vdash X_1,...X_{i-1}pX_iX_{i+1},...,X_n=K_1\\vdash^*K_n\\)</p> <p>Eine Sprache, welche von einer TM akzeptiert wird, nennt sich rekursiv aufz\u00e4hlbar</p> <p>\\(\\delta(q_1, X)=(q_2, Y, D)\\), wobei \\(D\\in\\{L, R\\}\\)</p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary.html#modifikationen","title":"Modifikationen","text":"<ul> <li>Mit mehreren Spuren, welche auf einem Band sind (ein Lese/Schreibkopf)</li> <li>Mit mehreren B\u00e4ndern (mehrere Lese/Schreibk\u00f6pfe) (\u00dcbergangsfunktion: \\(\\delta:Q\\times\\Gamma^k\\rightarrow Q\\times \\Gamma^k \\times \\{R, S, L\\}^k\\))</li> <li>Nicht deterministische Turning Machine (\u00dcbergangsfunktion: \\(\\delta: Q\\times \\Gamma \\rightarrow \\mathcal P(Q \\times \\Gamma \\times \\{R, L\\})\\)</li> <li>Mit semi-beschr\u00e4nktem Band   Das Band ist nur unendlich in eine Richtung. Eine Semi-beschr\u00e4nkte TM ist gleich m\u00e4chtig, wie eine TM. (Beweissidee: Eine semi-beschr\u00e4nkte TM mit zwei b\u00e4nder, eines f\u00fcr die positive und eines f\u00fcr die negative Seite)</li> <li>\\(k\\)-Stack Machine Eine Deterministischer Kellear Automat mit mehreren Stacks    (\u00dcbergangsfunktion: \\(\\delta: Q \\times \\Gamma_1\\times...\\times\\Gamma_n\\rightarrow Q\\times\\Gamma_1^*\\times...\\times \\Gamma^*_k\\))   Eine 2-Stack Machine kann ein Band simulieren und ist demnach gleich m\u00e4chtig, wie eine TM</li> <li>Z\u00e4hler-Machine (Hat Z\u00e4hler einer nat\u00fcrlichen Zahl (\\(n \\ge 0\\)) anstatt Stacks)   Ein 2-Stack kann mit mit 3-Z\u00e4hler ersetzt werden und daher ist ein Z\u00e4hler-Machine gleich wertig, wie eine TM.    Daf\u00fcr wird jedem Symbol des Stacks eine Zahl zugeordnet (1, 2, 3, 4, ...). Der aktuelle Wert wird mit der Anzahl Symbolen multipliziert und mit dem n\u00e4chsten Symbol addiert (\\(c_{new}=c_{old}\\cdot length + s\\)). Beim dekodieren wird der Wert durch die Anzahl Symbole geteilt und der Rest ist das aktuelle Symbol.    Diese 3-Z\u00e4hler Machine kann mit einer 2-Z\u00e4hler Machine simuliert werden, in dem die 3-Z\u00e4hler mit der Encodierung \\(2^i\\cdot 3^j\\cdot 4^k\\) enkodiert werden und mit einer Primfaktorzerlegung dekodiert werden. Ein Z\u00e4hler wird noch zum Rechnen ben\u00f6tigt.</li> </ul>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary.html#universelle-turning-maschine-utm","title":"Universelle Turning Maschine (UTM)","text":"<p>Eine Turing Maschine, welche andere Turning Maschinen simulieren kann. Alle Zust\u00e4nde werden Un\u00e4r-Kodiert (0 = 1, 00 = 2, 000 = 3, ...) mit dem Trennzeichen <code>1</code>. Dabei wird folgendes gespeichert: Die \u00dcbergangsfunktion \\(\\delta(q_i, X_j)=(q_k, X_l, D_m)\\to 0^i10^j10^l10^m\\). Einzelne \u00dcbergangsfunktionen werden mit <code>11</code> getrennt. Die Maschine wird mit <code>111</code> vom Input getrennt.</p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary.html#berechnungsmodelle","title":"Berechnungsmodelle","text":"<p>Intuitive berechenbare Funktion: eine algorithmisch (durch eine mechanisches Verfahren) berechenbare Funktion </p> <p>Gandys These M: Alles, was jemals mit einer (endlichen) Maschine/physikalischen Apparatur berechnet werden kann, ist von einer Turing-Maschine berechenbar</p> <p>Turing-Vollst\u00e4ndigkeit: F\u00fcr jede Zahl \\(k \\in \\N\\) und jede Funktion \\(f: \\N^k \\to \\N\\) gibt es eine Turing-Machine und While-Programm</p> <ul> <li>Zuweisungen: <code>x = y + c</code> oder <code>x = y - c</code>  (wobei c eine Konstante ist!)</li> <li><code>x0</code> ist der Output; <code>x1</code>, <code>x2</code>, ... sind die Inputs/Variabeln</li> <li>Alle Variabeln k\u00f6nnen nat\u00fcrliche Zahlen (\\(n \\ge 0\\)) enthalten (\\(2-5=0\\))</li> <li>Loop-Programme: <code>LOOP x DO ... END</code> Der Loop wird <code>x</code>-mall durchgef\u00fchrt. \u00c4ndern von <code>x</code> hat kein Einfluss</li> <li>While-Programme (auch <code>LOOP</code> ist erlaubt)</li> <li><code>While xi &gt; 0 Do ... End</code> Die einzige erlaubte Bedingung ist <code>xi &gt; 0</code></li> <li>GOTO-Programme: Marker: (<code>M1:</code>, <code>M2:</code>, ...), <code>Goto Mk</code> , <code>If xi = c Then Goto Mr</code>, <code>Halt</code> (Haltet das Programm an)</li> <li>Primitiv rekursive Funktion (nach dem Muster \\(f: \\N^2 \\to \\N\\))</li> <li>Konstante Funktion: \\(c^n_k: \\N^n \\to \\N \\mapsto c^n_k(x_1, ..., x_n)=k\\)</li> <li>Nachfolge Funktion: \\(\\eta: \\N \\to \\N \\mapsto \\eta(x)=x+1\\)</li> <li>Projektion (\\(1 \\le k \\le n\\)): \\(\\pi^n_k: \\N^n \\to \\N \\mapsto \\pi^n_k(x_1, ...,x_k,...,x_n)=x_k\\)</li> <li>Wenn \\(f\\) und \\(g_i\\) primitive rekursive Funktionen sind, dann ist \\(h(\\vec x)=f(g_1(\\vec x), ..., g_k(\\vec x))\\) auch eine primitive rekursive Funktion</li> <li>Primitive rekursive Funktionen = LOOP-Programme</li> </ul> <p>Ackermann (ist Turing-berechenbar, nicht Loop berechen, bzw. nicht primitive rekursive, ist total):  $$ \\begin{align} a(0, m)&amp;= m + 1\\ a(n + 1, 0) &amp;= a(n, 1)\\ a(n + 1, m + 1) &amp;= a(n, a(n + 1, m)) \\end{align} $$</p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary.html#entscheidbarkeit","title":"Entscheidbarkeit","text":"<p>Entscheidbar: Die TM haltet immer</p> <p>Semi-Entscheidbar: Die TM haltet nur bei akzeptierten Zust\u00e4nden</p> <p>Reduktion Es gibt eine Funktion \\(F: \\Sigma^* \\to \\Gamma^*\\) f\u00fcr die Sprache \\(A \\subset \\Sigma^*\\) und \\(B  \\subset \\Gamma^*\\). Dies wird als \\(A \\preceq B\\) geschrieben</p> <ul> <li>Jede entscheidbare Sprache ist auch semi-entscheidbar</li> <li>Wenn eine Sprache \\(A\\) und ihr Komplement \\(\\overline A\\) semi-entscheidbar ist, sind \\(A\\), wie auch \\(\\overline A\\) entscheidbar</li> <li>Wenn \\(A\\) entscheidbar ist, ist auch \\(\\overline A\\) entscheidbar</li> <li>Wenn \\(A\\) und \\(B\\) (semi-)entscheidbar sind, ist auch \\(A \\cup B\\) und \\(A \\cap B\\) (semi-)entscheidbar</li> <li>\\(A\\) ist rekursive aufz\u00e4hlbar \\(\\Leftrightarrow\\) \\(A\\) ist semi-entscheidbar \\(\\Leftrightarrow\\) \\(A\\) ist der Werte und Definitionsbereich einer berechenbaren Funktion</li> <li>\\(A\\preceq B\\) und \\(B \\preceq C\\), dann gilt auch \\(A \\preceq C\\)</li> <li>Ist \\(B\\) (semi-)entscheidbar und \\(A \\preceq B\\), dann ist auch \\(A\\) (semi-)entscheidbar</li> <li>Wenn \\(A\\) unentscheidbar ist und \\(A \\preceq B\\) gilt, dann ist B unentscheidbar</li> </ul> <p>allgemeine Halteproblem: Gibt es eine TM \\(H\\), welche entscheiden kann, ob ein Program mit einem Input anh\u00e4lt oder nicht immer weiter l\u00e4uft.</p> <p>leere Halteproblem: Ob es eine TM \\(H_0\\) gibt, welche entscheiden kann, ob ein Programm mit einem leeren Band anh\u00e4lt</p> <p>spezielle Halteproblem: Es wird eine TM \\(H_S\\) erstellt, welche \\(H\\) fragt, ob ein Program endet. Wenn ja, loopt \\(H_S\\), wenn nein, beendet \\(H_S\\). Wenn \\(H_S\\) das als Input \\((H_S, H_S)\\) bekommt, ist unklar, ob \\(H_S\\) anh\u00e4lt oder weiterl\u00e4uft und daher kann es keine TM \\(H\\) geben.</p> <p>Alle Halteprobleme sind semi-entscheidbar und nicht-entscheidbar.</p> <p>Konsequenzen von Satz von Rice: Unm\u00f6glich im Allgemeinen zu \u00fcberpr\u00fcfen, ob ein Program eine Spezifikation erf\u00fcllt, frei von bugs ist, bei jeder Eingabe terminiert, eine anderes Program dieselbe Funktionalit\u00e4t hat</p> <p>Colatz: \\(n \\text{ ist gerade} \\Rightarrow n=\\frac n 2 \\text{ sonst } n=3n + 1\\) Alle positiven Inputs enden in \\(4 \\to 2 \\to 1  \\to 4 \\to 2 \\to 1\\)</p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary.html#komplexitatstheorie","title":"Komplexit\u00e4tstheorie","text":"<ul> <li>Zeitkomplexit\u00e4t: Laufzeit des besten Programms, welche ein Problem l\u00f6st</li> <li>Platzkomplexit\u00e4t: Speicherbedarf des bestens Programmes</li> <li> <p>Beschreibungskomplexit\u00e4t: L\u00e4nge des k\u00fcrzesten Programmes</p> </li> <li> <p>Obereschranke: \\(f \\in \\mathcal O(g)\\Leftrightarrow f(n) \\le c \\cdot g(n)\\)  wenn \\(n\\) gr\u00f6sser als \\(n_0\\) ist (Wobei \\(g\\) und \\(f\\) eine Funktion \\(\\N \\to \\N\\) ist und \\(c\\in \\N\\) eine Konstante)</p> </li> <li>Untereschranke: \\(f \\in \\Omega(g)\\Leftrightarrow f(n) \\ge \\frac 1 d \\cdot g(n)\\) wenn \\(n\\) gr\u00f6sser als \\(n_0\\) ist (Wobei \\(d \\in \\N\\) eine Konstante ist)</li> <li>\\(f\\in \\Theta(g) \\Leftrightarrow f(n)\\in \\mathcal O(g(n))\\wedge f(n)\\in \\Omega(g(n))\\)</li> </ul> <p></p>","tags":["summary","THIN"]},{"location":"22FS/THIN/summary.html#np-vs-p","title":"NP vs P","text":"<ul> <li>Polynomzeit l\u00f6sbar (P): Problem ist teil von \\(\\mathcal O(n^c)\\), wobei \\(c \\ge 1\\) mit einer DTM </li> <li>Nicht deterministische Polynomiell (NP): Alle Probleme entscheidbar von einer Nicht-deterministische Maschine in polynomzeit</li> <li>Polynomzeit-Verifizierer: Eine TM, welche eine L\u00f6sung in polynomial zeit verifiziert</li> <li>\\(P\\neq NP\\): Nicht alle Probleme, welche in polynomzeit verifizierbar sind, k\u00f6nnen in polynomzeit gel\u00f6st werden</li> <li>Clique: Eine Menge von Knoten, bei welchen alle Knoten mit allen anderen Knoten (ausser sich selbst) verbunden sind</li> <li>NP-Schwer: Ein Problem, welches sich auf alle NP-Probleme reduzieren l\u00e4sst. Ein NP-Schweres Problem ist gleich schwer oder schwerer also das schwerste NP-Problem</li> <li>NP-Vollst\u00e4dnig: Ein NP-Vollst\u00e4ndiges Problem ist NP-Schwer und ein NP-Problem</li> <li>polynomiell reduzierbar (\\(\\preceq_p\\)): Eine Reduktion in polynomieller Zeit (\\(L_1 \\preceq_p L_2\\) heisst, dass \\(L_2\\) mindestens so schwer wie \\(L_1\\) ist )</li> <li>Wenn \\(P_1\\) NP-schwer, \\(P_2\\) in NP enthalten ist und \\(P_1 \\preceq_p P_2\\) gibt, dann ist \\(P_2\\) NP-vollst\u00e4ndig</li> <li>SAT: \"erstes\" NP-volst\u00e4ndige Problem   Ob eine Formel in der KNF (\\((x_1 \\vee x_2) \\wedge (x_3 \\vee x_4) \\wedge \\neg x_5\\))) erf\u00fcllbar ist</li> </ul> <p>TODO: L\u00f6sung von SAT Problem</p>","tags":["summary","THIN"]},{"location":"22HS/ADS/ADS.html","title":"ADS","text":""},{"location":"22HS/ADS/ADS.html#abstrakter-datentyp","title":"Abstrakter Datentyp","text":"<p>Jede Klasse besteht aus einer sichtbarer Schnittstelle und eine von Aussen, unsichtbare Implementation.</p>"},{"location":"22HS/ADS/ADS.html#big-o-notation","title":"Big-O Notation","text":"<p>Es existiert ein \\(n_0\\in \\N\\) und ein \\(c\\in \\N\\), so dass f\u00fcr alle \\(n\\ge n_o\\) gilt: \\(f(n) \\le c\\cdot g(n)\\).</p> <p>Es gibt einige spezielle Rechenregel zu der Big-O Notation:</p> <ul> <li>Konstante Vorfaktoren k\u00f6nnen ignoriert werden (daf\u00fcr gibt es das \\(c\\)) </li> <li>Bei einem Polygon ist nur die h\u00f6chste Potenz entscheidend</li> </ul> <p>Rechenregeln:</p> <ul> <li>\\(O(f\\cdot g) = O(f)\\cdot O(g)\\) (wobei \\(f\\) und \\(g\\) Funktionen sind)</li> <li>\\(O(r\\cdot f)=O(f)\\) (wobei \\(r\\) eine Konstante ist)</li> <li>\\(O(f+g)=O(f)\\), wenn \\(f &gt;g\\) gilt</li> </ul> <p>Beispiele:</p> <ul> <li>\\(O(1)\\): konstanter Aufwand</li> <li>\\(O(\\log n)\\): logarithmischer Aufwand</li> <li>\\(O(n)\\): linearer Aufwand</li> <li>\\(O(n\\cdot \\log n)\\): linear-logarithmischer Aufwand</li> <li>\\(O(n^2)\\): quadratischer Aufwand</li> <li>\\(O(n^k), k&gt;1\\): polynomialer Aufwand</li> <li>\\(O(k^n)\\): exponentieller Aufwand</li> <li>\\(O(n!)\\): faktorieller Aufwand</li> </ul> <p></p>"},{"location":"22HS/ADS/ADS.html#invarianten-vor-und-nachbedingungen","title":"Invarianten, Vor- und Nachbedingungen","text":"<p>Invariante sind Aussagen, welche \u00fcber die Ausf\u00fchrung hinweg korrekt bleiben.</p> <p></p> <p>Vorbedingungen ist eine Aussage, welche vor dem Ausf\u00fchren einer Programmsequenz gilt. Nachbedingungen sind Aussagen, welche nach dem Ausf\u00fchren einer Programmsequenz gilt.</p> <p></p>"},{"location":"22HS/ADS/ADS.html#algorithmus","title":"Algorithmus","text":"<p>Ein Algorithmus ist eine Anleitung zur L\u00f6sung einer Aufgabenstellung, die so pr\u00e4zise formuliert ist, dass sie \u201cmechanisch\u201d ausgef\u00fchrt werden kann.</p> <p>Eigenschaft:</p> <ul> <li> <p>Determinierheit: Identische Eingaben f\u00fchren zur selben Ausgabe</p> </li> <li> <p>Determinismus: Ablauf des Verfahrens ist an jedem Punkt fest vorgeschrieben (keine Wahlfreiheit)</p> </li> <li> <p>Terminierung: F\u00fcr jede Eigenschaft liegt das Ergebnis nach endlich vielen Schritten vor</p> </li> <li> <p>Effizienz: Wie wirdschaftlich der Algorithmus ist</p> </li> </ul>"},{"location":"22HS/ADS/Backtracking.html","title":"Backtracking","text":""},{"location":"22HS/ADS/Backtracking.html#begriffe","title":"Begriffe","text":"<ul> <li>Eintscheidungsbaum: Ein virtueller Baum, in welcher jede Entscheidung einem Knoten entsricht</li> <li>Zeitkomplexit\u00e4t mit Entscheidungsb\u00e4ume: \\(O(z^n)\\), wobei \\(z\\) die Anzahl Verzweigungen sind und \\(n\\) die Tiefe</li> </ul>"},{"location":"22HS/ADS/Backtracking.html#generellen-rekursiven-backtrack-algorithmus","title":"Generellen rekursiven Backtrack Algorithmus","text":"<p>Zeitkomplexit\u00e4t: \\(O(z^n)\\), wobei \\(z\\) den Verzweigungsgrad ist und \\(n\\) die Tiefe</p> <pre><code>public static boolean versuchen(int k) {\n    if (L\u00f6sungGefunden) \n        return true;\n    else {\n        for all e in ErweiterungVonTeilloesungen { //Gibt es noch Erweiterungen?\n            if (moeglicheErweiterung(e)) {\n                hinzufuegenZuLoesung(e)\n                if (versuchen(k + 1)) \n                    return true;\n                nehmeVonLoesung(e);\n            }\n        }\n        return false;\n    }\n}\n</code></pre>"},{"location":"22HS/ADS/Backtracking.html#beispiel-labyirnth","title":"Beispiel: Labyirnth","text":"<p>Eine Maus, welche den K\u00e4se in einem Labyrinth sucht. Dabei entsteht ein Eintscheidungsbaum.</p> <p></p> <p>Das ist eine Implementation eines Such-Algorithmus:</p> <p></p>"},{"location":"22HS/ADS/Backtracking.html#springerproblem","title":"Springerproblem","text":"<p>Es soll ein Algorithmus geschrieben werden, bei welchen ein Pfad f\u00fcr ein Springer gefunden wird, in dem alle Zellen besucht werden.</p> <p>Die Zeit komplexit\u00e4t ist \\(O(8^{64})\\approx 6.3 \\cdot 10^{57}\\)</p> <p>Datenstruktur ist: <code>int[][] schachbrett = new int[8][8]</code>. In <code>springX</code> und <code>springerY</code> steht, wie sich der Springer bewegen kann.</p> <p></p>"},{"location":"22HS/ADS/Backtracking.html#dameproblem","title":"Dameproblem","text":"<p>Es soll eine Stellung f\u00fcr 8 Damen gefunden werden, so dass sich keine zwei Damen sich gegenseitig schlagen k\u00f6nnen.</p> <p>Die Zeitkomplexit\u00e4t ist \\(O(n!)\\), da f\u00fcr die 1. Dame gibt es 8 M\u00f6glichkeit, bei der zweiten 7, bei der dritten 6, ...</p> <p></p> <pre><code>int[] dameInDerSpalte = new int[n]; // in welcher Zeile steht die Dame\nboolean[] reihe = new boolean[n]; // ist die Reihe besetzt?\n\nint diagN = 2*n - 1; // Anzahl Diagonale\n\nboolean[] diagLinks = new boolean[diagN]; // ist die linke Diagonale besetzt\nlinks = (x + y) % diagN; // Anzahl linke Diagonale\n\nboolean[] diagRechts = new boolean[diagN]; // ist die rechte Diagonale besetzt\nrechts = (diagN + x - y) % diagN; // Anzahl rechten Diagonale\n\n// testet ob Position m\u00f6glich ist\n// Wert in einem der 3 Arrays true -&gt; Position besetzt\npublic static boolean gueltigeDamePosition(int x, int y) {\n    return !(reihe[y] || diagLinks[(x + y) % diagN] ||diagRechts[(diagN + x - y) % diagN]);\n}\n\n// setzt/l\u00f6scht die Dame von der Position\n// @param val ob der Wert gesetzt oder gel\u00f6scht werden soll\npublic static void setzeDame(int x, int y, boolean val) {\n    reihe[y] = val;\n    diagLinks[(x + y) % diagN] = val;\n    diagRechts[(diagN + x - y) % diagN] = val;\n    dameInDerSpalte[x] = (val)?y:-1;\n}\n\n/**\n* Backtrack algorithmus\n* @param x die Spalte die ausprobiert wird\n*/\npublic static boolean versuchen(int x) {\n    if (x == n) \n        return true; // L\u00f6sung gefunden.\n    else {\n        // Dame in Spalte x in allen Reihen ausprobieren.\n        for (int y = 0; y &lt; n; y++) {\n            if (gueltigeDamePosition(x, y)) {\n                setzeDame(x, y, true);\n                if (versuchen(x + 1)) \n                    return true;\n                setzeDame(x, y, false);\n            }\n        }\n        return false;\n    }\n}\n</code></pre>"},{"location":"22HS/ADS/Backtracking.html#rucksackproblem","title":"Rucksackproblem","text":"<p>Es geht darum, ein Algorithmus zu schreiben, der \\(k\\) Gegenst\u00e4nde mit underschiedliche Gr\u00f6sse und Wert in einen Rucksack packt, damit der Wert maximal wird.</p> <p>Die Zeitkomplexit\u00e4t ist \\(O(2^n)\\), da</p> <p></p> <p>In der Praxis gibt es Anwendungen daf\u00fcr. Folgende sind typisch:</p> <ul> <li>Transportunternehmen: Optimale Beladung eines Lastwagens bei gegebenen Maximalgewicht und   unterschiedlichen Speditionsgeb\u00fchren: Optimierung von Gewicht und Geb\u00fchren.</li> <li>Reederei: Optimale Beladung eines Schiffes mit underschiedlichen Coontainern: Optimierung von Volumen und Transportkosten.</li> <li>Kofferproblem: Optimale Beladung eines Reisekoffers f\u00fcr einen Flug.</li> <li>Bitcoin: Maximale Bef\u00fcllung eines Blocks bei unterschiedlichen Geb\u00fchren und unterschiedlicher Transaktionsgr\u00f6sse.</li> </ul> <p>Der folgende Pseudo-Code veranschaulicht ein Algorithmus f\u00fcr dieses Problem:</p> <pre><code>void teste (Gegenstand k) {\n    teste (k + 1) // ohne Gegenstand k\n    falls Gegenstand k noch Platz {\n        f\u00fcge Element k zu der Menge hinzu\n        falls neue max. L\u00f6sung speichere das\n        teste (k + 1) // mit Gegenstand k\n        nehme Element k aus der Menge weg\n    }\n}\n</code></pre> <p>Nun mit Java Code:</p> <pre><code>double[] volume = {1, 2, 7, 8, 9};\ndouble[] wert = {2000, 3000, 10_000, 11_000, 17_000};\nSet&lt;Integer&gt; maxRucksack; // Das Set enth\u00e4lt die Gegenst\u00e4nde zur besten gefundenen L\u00f6sung.\nfinal double MAXV = 17;\ndouble maxW = 0;\n\nstatic public void test(Set&lt;Integer&gt; rucksack, int k, double aktW, double aktV) {\n    double newV;\n    if (k &lt; volumen.length) {\n        test(rucksack, k + 1, aktW, aktV); // Ohne Gegenstand k testen\n        newV = aktV + volumen[k];\n        if (newV &lt;= MAXV) {\n            rucksack.add(k);\n            double newW = aktW + wert[k];\n            if (newW &gt; maxW) {\n                maxRucksack = new HashSet&lt;Integer&gt;(rucksack);\n                maxW = newW;\n            }\n            test(rucksack, k + 1, newW, newV);\n            rucksack.remove(k);\n        }\n    }\n}\n</code></pre>"},{"location":"22HS/ADS/Backtracking.html#zielfunktion","title":"Zielfunktion","text":"<p>Wenn etwas in einem Baum gesucht werden soll, dann kann eine Zielfunktion \\(f(v)\\to s\\) definiert werde, welche einen Knoten \\(v\\) nimmt und ein Score \\(s\\in\\mathbb N\\) zur\u00fcck gibt. Um nun den Wert im Baum zu finden, geht der Algorithmus einfach den h\u00f6chsten Scores nach. So ist die Zeitkomplexit\u00e4t \\(O(\\log n)\\). Solche Funktionen gibt es aber selten. </p> <p>Anstelle von \\(f(x)\\) kann aber eine upper-bound Funktion \\(b(x)\\) definiert werden, f\u00fcr welche gilt \\(\\forall x f(x)\\le b(x)\\).</p> <p>Nun wird dem h\u00f6chsten \\(b(x)\\) Wert gefolgt und dabei wird den Score auf den korrekten Wert korrigiert. Dies wiederholt man nun bis es keine bessere Alternative mehr gibt. </p> <p></p> <p>Falls es beim Wiederholen einen Ast gibt, f\u00fcr welcher die obere Schranke \\(b(x)\\) kleiner ist, als der korrigierte Wert, kann der Ast \"abgeschnitten\" werden. Dies wird auch Pruning genannt.</p> <p></p>"},{"location":"22HS/ADS/Backtracking.html#a-star-funktion","title":"A-Star Funktion","text":"<p>Der A-Star Algorithmus kann der k\u00fcrzeste Weg zwischen zwei Punkte finden. Dabei ist dieser Algorithmus eine m\u00f6gliche Implementation f\u00fcr das Zielfunktion-Verfahren. </p> <p>Die Funktion \\(b(x)\\) ist dabei eine Lower-Bound Funktion, welche den gesch\u00e4tzen Weg zwischen zwei Punkte zur\u00fcck gibt. Eine m\u00f6gliche Implementation ben\u00fctzt die Luftlinie.</p> <p>Der Algorithmus startet beim Endknoten, welcher zu Beginn der Ausf\u00fchrung der aktuelle Knoten ist.</p> <ol> <li>Es werden alle nicht untersuchte Nachbarn des aktuellen Knoten untersucht. F\u00fcr jeden Knoten wird den Sch\u00e4tzwert \\(Luftlinie(Nachbar, Start)+Strecke(Aktuell, Nachbar)+Strecke(Aktuell, Ende)\\) gerechnet und falls der tiefer ist als der aktuelle Sch\u00e4tzwert des Nachbars wird er gespeichert als neuer Sch\u00e4tzwert.</li> <li>Es wird nun den Nachbar als den aktuellen Knoten ausgew\u00e4hlt, mit der tiefsten gesch\u00e4tzten gesamt Strecke.</li> <li>Nun wird dies wiederholt bis der aktuelle Knoten den Endknoten ist.</li> <li>Es werden alle Strecken gestrichen (Pruning), welche eine h\u00f6here gesch\u00e4tzte Strecke haben, als die letzt gefundene.</li> <li>Es wird 1. wiederholt und bis alle M\u00f6glichkeiten gestrichen wurden.</li> </ol>"},{"location":"22HS/ADS/Backtracking.html#beispiel","title":"Beispiel","text":"<ol> <li>Der aktuelle Knoten ist Winterthur. Alle, nicht untersuchte, Nachbarknoten werden untersucht. In diesem Fall gibt es nur Z\u00fcrich. In Blau steht \\(154km + 25km + 0km=179km\\) </li> <li>Der aktuelle Knoten ist Z\u00fcrich. F\u00fcr alle nicht untersuchten Knoten wird die Rechung \\(Luftlinie(Nachbar, Start)+Strecke(Aktuell, Nachbar)+Strecke(Aktuell, Ende)\\) durchgef\u00fchrt. Als Beispiel gilt f\u00fcr Chur: \\(25km+121km+104km=250km\\). Der tiefste Knoten ist Luzern und wird als n\u00e4chster aktuelle Knoten ausgew\u00e4hlt.    </li> <li>Der aktuelle Knoten ist Luzern. Es werden alle Nachbarn von Luzern untersucht. Kein Sch\u00e4tzwert, ausser den von Lugano, wird angepasst, da alle bereits existierende Sch\u00e4tzwerte kleiner sind (z.B. Churs neuer Sch\u00e4tzwert w\u00e4re: \\(25km+54km+146km+104km=329km &gt; 250km\\)). Alle Knoten nicht besuchten Knoten, welche einen h\u00f6heren Sch\u00e4tzwert als \\(285km\\) haben, werden entfernt (Pruning).    </li> <li>Der aktuelle Knoten ist Chur. Der einzige nicht besuchten Konten ist Lugano. Die Strecke \u00fcber Chur ist \\(25km+121km+152km=298km\\) was gr\u00f6sser als \\(285km\\) ist.</li> <li>Die Suche ist abegschlossen da keine nicht entfernte Knoten verbleiben.</li> </ol>"},{"location":"22HS/ADS/Backtracking.html#minmax-algorithmus","title":"Minmax-Algorithmus","text":"<pre><code>Tiefensuche durch den Spielbaum (erstellt den Baum)\nWende Bewertungsfunktion auf Endpositionen (Bl\u00e4tter) an \nF\u00fcr alle inneren Knoten von unten nach oben:\n    Falls beim inneren Knoten Schwarz am Zug war:\n        W\u00e4hle das kleinste b(v) f\u00fcr den inneren Knoten. //b(v) = Bewertungsfunktion\n    Falls beim inneren Knoten Weiss am Zug war:\n        W\u00e4hle das gr\u00f6sste b(v) f\u00fcr den inneren Knoten.\nW\u00e4hle an der Wurzel den Zug der den h\u00f6chsten b(v) verspricht.\n</code></pre> <p>Oder mit Java </p> <pre><code>public static int minimax(position, depth, maximizingPlayer) {\n    if(depth == 0 || gameOver()) { \n        return b(position); \n    }\n    if(maximizingPlayer) {\n        int maxEval = Integer.MIN_VALUE;\n        for(var child : position) { // alle m\u00f6glichen Z\u00fcge\n            maxEval = max(maxEval, minimax(child, depth \u2013 1, false));\n        }\n        return maxEval;\n    }\n    else {\n        int minEval = Integer.MAX_VALUE;\n        for(var child : position) { // alle m\u00f6glichen Z\u00fcge\n            minEval = min(minEval, minimax(child, depth \u2013 1, true);\n        }\n        return minEval;\n    }\n}\n</code></pre>"},{"location":"22HS/ADS/Backtracking.html#alpha-beta-pruning","title":"Alpha-Beta-Pruning","text":"<p>Mit dem Alpha-Beta-Pruning kann der Minmax optimiert werden. Beim Alpha-Pruning werden \u00c4ste entfernt, welche f\u00fcr Schwarz keine Option mehr sind, da es eine bessere gibt. Beta-Pruning entfernt \u00c4ste, welche Weiss nicht mehr w\u00e4hlen w\u00fcrde, da es eine bessere Option gibt.</p> <p></p>"},{"location":"22HS/ADS/Backtracking.html#horizont-problem","title":"Horizont-Problem","text":"<p>Das Horizont-Problem beschreibt, dass wenn ein Algorithmus, welcher \\(n\\) Schritte rechnet, ev. nach \\(n+1\\) Schritte die L\u00f6sung findet. Als Metapher: Gleich hinter dem Horizont k\u00f6nnte die L\u00f6sung liegen.</p> <p>Eine m\u00f6gliche L\u00f6sung um das Problem zu d\u00e4mpfen ist, dass die ausgew\u00e4hlte L\u00f6sungsrichtung  (und nur diese) noch einige Schritte weiter berechnet wird.</p>"},{"location":"22HS/ADS/Dynamische%20Programmierung.html","title":"Dynamische Programmierung","text":"<p>Idee: Optimierungsproblem durch Aufteilung in Teilprobleme l\u00f6sen und Zwischenresultaten systematischen speichern.</p> <p></p>"},{"location":"22HS/ADS/Java.html","title":"Java","text":""},{"location":"22HS/ADS/Java.html#java-memory-model","title":"Java Memory Model","text":""},{"location":"22HS/ADS/Java.html#garbage-collector","title":"Garbage Collector","text":""},{"location":"22HS/ADS/Java.html#reference-counting","title":"Reference Counting","text":"<p>Beim Referencing Counting wird gez\u00e4hlt, wie viel Referenzen es auf ein Objekt gibt. Wenn es keine Referenzen mehr gibt, dann wird das Objekt gel\u00f6scht.</p> <pre><code>class ... {\n    void addRef() {\n        referenceCount++;\n    }\n\n    int release() {\n        if (--referenceCount == 0) {\n            delete(this);\n        }\n    }\n}\n</code></pre> <ul> <li>Vorteile:<ul> <li>Einfach und geringer verwaltungs Aufwand</li> <li>Speicher wird so schnell wie m\u00f6glich freigegeben</li> </ul> </li> <li>Nachteile: </li> <li>Es muss manuel gef\u00fchrt werden was Bugs einf\u00fchren kann</li> <li>Zus\u00e4tzliche Operationen bei jedem Refernzen Zuweiss</li> <li>Zyklische Datenstrukturen sind problematisch</li> </ul>"},{"location":"22HS/ADS/Java.html#smart-pointers","title":"Smart Pointers","text":"<p>Smart Pointers sind Pointers welche das Reference Counting automatisieren. Aber viele Nachteile bleiben trotzdem bestehen:</p> <ul> <li>Vorteile:</li> <li>Einfach und geringer verwaltungs Aufwand</li> <li>Speicher wird so schnell wie m\u00f6glich freigegeben</li> <li>Ist automatisiert</li> <li>Nachteile: </li> <li>Zus\u00e4tzliche Operationen bei jedem Refernzen Zuweiss</li> <li>Zyklische Datenstrukturen sind problematisch</li> </ul>"},{"location":"22HS/ADS/Java.html#mark-sweep-gc-algorithmus","title":"Mark Sweep GC Algorithmus","text":"<p>Der Mark-Sweep Algorithmus l\u00e4uft in zwei Phasen:</p> <p>1) Mark:    Es werden alle Objekte traversiert und nicht erreichbare Objekte markiert 2) Sweep    Alle markierte Objekte l\u00f6schen und die Markierung entfernen</p> <ul> <li>Vorteile</li> <li>Keine zus\u00e4tzlichen Operationen bei Referenzen-Zuweisungen</li> <li>Zyklische Datenstrukturen k\u00f6nnen gel\u00f6scht werden</li> <li>Nachteile</li> <li>Aufwand</li> <li>Stop-the-World-Mechanismus bei beiden Phasen</li> <li>Es entstehen Memory-L\u00f6scher (Memory-Fragmentierung)</li> </ul> <p></p> <p></p>"},{"location":"22HS/ADS/Java.html#mark-copmact","title":"Mark-Copmact","text":"<p>Funktioniert gleich wie der Mark-Sweep-Algorithmus, aber es werden alle noch referenzierte Objekte zum Begin des Heap kopiert.</p> <ul> <li>Vorteile:</li> <li>Analog Mark-Sweep-Algorithmus.</li> <li>Keine Memory-Fragmentierung.</li> <li>Nachteil:</li> <li>Analog Mark-Sweep-Algorithmus.</li> <li>Aufwand ist noch gr\u00f6sser \u2192 schlechte Performance.</li> </ul>"},{"location":"22HS/ADS/Java.html#copy-gc","title":"Copy-GC","text":"<p>Der Speicher wird unterteilt in zwei Semi-Spaces. Wenn ein Space voll wird, werden alle noch referenzierte Objekte in den zweiten Space \u00fcberkopiert</p> <ul> <li>Vorteil:</li> <li>Es entstehen keine L\u00f6cher</li> <li>Die Suche nach freien Bl\u00f6cken entf\u00e4llt (belegter Bereich ist kompakt)</li> <li>Nachteil:</li> <li>Es wird doppelt so viel Speicher ben\u00f6tigt</li> <li>Aufw\u00e4ndiger Algorithmus</li> <li>Es muss immer der ganze Speicher durchlaufen werden</li> <li>Programm muss w\u00e4hrend dieser Zeit angehalten werden (Stop-The-World-Mechanismus)</li> </ul>"},{"location":"22HS/ADS/Java.html#generational-gc","title":"Generational GC","text":"<p>Die meisten Objekte werden nur kurz gebraucht. Daher wird der Heap in drei oder mehr Teile unterteilt. Wenn ein Teil \u00fcberfliesst, dann werden lang-lebende Objekte in den n\u00e4chsten Breich kopiert. Pro Teil kann nun ein anderen Algorithmus angewendet werden.</p> <p></p>"},{"location":"22HS/ADS/Rekursive.html","title":"Rekursive","text":"<p>Jede Rekursion kann in eine iterativen Algorithmus umgewandelt werden.</p> <p></p> <ul> <li>Verankerung: Die Stopp-Bedingungen</li> <li>Rekursiven-Aufruf: Die Operation, welche zum rekursiven Aufruft f\u00fchrt</li> </ul>"},{"location":"22HS/ADS/Rekursive.html#rekursionstiefe","title":"Rekursionstiefe","text":"<p>Die Rekursionstiefe ist, wie viele Stackframes es maximal gibt.</p>"},{"location":"22HS/ADS/Rekursive.html#zeitkomplexitat-und-speicherkapazitat","title":"Zeitkomplexit\u00e4t und Speicherkapazit\u00e4t","text":"<p>Um die Ordnung von einem rekursiven Algorithmen auszurechnen, kann \\(T_{n}\\) definiert werden und f\u00fcr jeden Aufruf \\(T_{n - 1}\\) einsetzen. Danach einige \\(T_n\\) aufl\u00f6sen und den Trend sehen.</p>"},{"location":"22HS/ADS/Rekursive.html#zeitkomplexitat-fur-turme-von-hanoi","title":"Zeitkomplexit\u00e4t f\u00fcr T\u00fcrme von Hanoi","text":"<pre><code>void hanoi (int n, char from, char to, char help) {\n    if (n &gt; 0) {\n        hanoi(n-1, from, help, to);\n        System.out.println(\"bewege \" + from + \" nach \" + to); \n        hanoi(n-1, help, to, from);\n    }\n}\n</code></pre> \\[ T_n=T_{n-1}+T_{n-1}=(T_{n-2}+T_{n-2})+(T_{n-2}+T_{n-2})\\Rightarrow O(2^n) \\]"},{"location":"22HS/ADS/Rekursive.html#indirekte-rekursive","title":"Indirekte Rekursive","text":"<p>Eine indirekte Rekursive besteht aus zwei Methoden, welche sie sich gegenseitig aufrufen.</p> <pre><code>public int p(int a) {\n    int x = q(a);\n}\npublic int q(int a) {\n    int x = p(a - 1);\n}\n</code></pre>"},{"location":"22HS/ADS/Rekursive.html#tail-recursion","title":"Tail Recursion","text":"<p>Eine Tail Recursion ist eine Rekursion, bei welcher die letzte Expression den rekursive Aufruf ist. Diese k\u00f6nnen einfach in einen iterativen Algorithmus umgebaut werden.</p> <pre><code>int fak(int n) {\n    if (n == 0) return 1;\n    else return n * fak(n - 1);\n}\n\nint fak(int n) {\n    if (n == 0) return 1;\n    else {\n        int res = n;\n        while(n &gt; 1) {\n            n--;\n            res = n * res;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"22HS/ADS/Rekursive.html#rekursives-beispiel-vor-und-zuruck","title":"Rekursives Beispiel: Vor und Zur\u00fcck","text":""},{"location":"22HS/ADS/Sortieren.html","title":"Sortieren","text":"<p>Es gibt das interne und externe Sortieren. Beim internen Sortieren werden alle Daten in den RAM geladen. Beim externen Sortieren hingegen werden die Dateien unterteilt, sortiert und danach wieder zusammengef\u00fcgt.</p> <p></p> <p>Ein Sortierschl\u00fcssel ist nach welchem Teilfeld(er) eines Datensatzes die Daten sortiert und gesucht wird. Ein eindeutiger Sortierschl\u00fcssel ist ein Schl\u00fcssel, welche eindeutig ist (z.B. ein Primary Key).</p>"},{"location":"22HS/ADS/Sortieren.html#sortieren-mit-teile-und-herrsche","title":"Sortieren mit Teile und Herrsche","text":"<p>Bei Teile und Herrsche wird das Problem in mehrere kleinere Probleme unterteilt, die Teilprobleme werden gel\u00f6st und die L\u00f6sungen danach zusammen gef\u00fcgt. </p> <p>Der folgende Pseudo-Code setzt das Teile und Herrsche f\u00fcr das Sortieren:</p> <pre><code>if (Menge der Datenobjekte klein genug)\n    Ordne sie direkt;\nelse {\n    Teilen: Zerlege die Menge in Teilmengen;\n    Ausf\u00fchren: Sortiere jede der Teilmengen;\n    Vereinigen: F\u00fcge die Teilmengen geordnet zusammen;\n}\n</code></pre> <p>Oft sind diese Teile und Herrsche Algorithmen rekursive:</p> <pre><code>Sort (Menge a) {\n    if (Menge der Datenobjekte klein genug) {\n        Ordne sie direkt;\n    } else {\n        Zerlege in zwei Teilmengen;\n        Sort(Teilmenge1); Sort(Teilmenge2);\n        F\u00fcge Teilmengen geordnet zusammen;\n    }\n}\n</code></pre>"},{"location":"22HS/ADS/Sortieren.html#strings-sortieren","title":"Strings sortieren","text":"<p>Strings sortieren kann problematisch sein. Je nachdem in welcher Region werden Buchstaben verschieden sortiert. Mithilfe einer <code>Collation</code> kann dies festgelegt werden.</p> <pre><code>Locale chLoc = new Locale(\"de\",\"CH\");\nCollator chCol = Collator.getInstance(chLoc);\nCollator deCol = Collator.getInstance(Locale.GERMAN);\nCollections.sort(list, chCol)\n</code></pre> <p></p>"},{"location":"22HS/ADS/Sortieren.html#stabilitat","title":"Stabilit\u00e4t","text":"<p>Sei S = ((k0, e0), ... , (kn-1, en-1)) eine Sequenz von Elementen: Ein Sortieralgorithmus heisst stabil (stable), wenn f\u00fcr zwei beliebige Elemente (\\(k_i\\), \\(e_i\\)) und (\\(k_j\\), \\(e_j\\)) mit gleichem Schl\u00fcssel \\(k_i=k_J\\) und \\(i&lt;j\\) (d.h. Element \\(i\\) kommt vor Element \\(j\\)), \\(i &lt; j\\) auch noch nach dem Sortieren gilt (Element i kommt immer noch vor Element j).</p> <p>Oder: Wenn eine bereits sortierte Liste (z.B. eine Personenliste nach Departemen). Wenn diese nun nach Alter sortiert wird, werden die Sortierung in der einzelnen Klassen erhalten bleiben, wenn der Algorithmus stabil ist.</p> <p></p> <p></p>"},{"location":"22HS/ADS/Sortieren.html#bubble-sort","title":"Bubble Sort","text":"<pre><code>static void bubbleSort(char[] a) {\n    for (int k = a.length-1; k &gt; 0; k--) {\n        boolean noSwap = true;\n        for (int i = 0; i &lt; k; i++) {\n            if ( a[i] &gt; a[i + 1]) {\n                swap (a, i, i + 1);\n                noSwap = false;\n            }\n        }\n        // if nothing was swapped -&gt; array is sorted\n        if (noSwap) break;\n    }\n}\n</code></pre> <p>Jedes Element wird verglichen mit seinem Nachbar. Wenn der rechte Nachbar kleiner ist, werden sie vertauscht. Es soll noch gef\u00fchrt werden, ob w\u00e4hrend des Sortierens \u00fcberhaupt etwas vertauscht wurde. Wenn nicht, dann ist das Array sortiert.</p> Best-Case Average-Case Worst-Case \\(\\Omega(n)\\) \\(\\Theta(n^2)\\) \\(O(n^2)\\) <p></p> <p></p>"},{"location":"22HS/ADS/Sortieren.html#selection-sort","title":"Selection Sort","text":"<pre><code>static void selectionSort(char[] a) {\n    for (int k = 0; k &lt; a.length; k++) {\n        int min = k;\n        for (int i = k + 1; i &lt; a.length; i ++) {\n            if (a[i] &lt; a[min]) min = i;\n        }\n\n        if (min != k) swap (a, min, k);\n    }\n}\n</code></pre> <p>Beim Selection-Sort wird immer die Frage gestellt, welches ist das kleinste Elemente aus dem unsortiertem Bereich, um den sortierten Bereich um eins zu erweitern. Um damit ein Array zu sortieren wird von rechts angefangen und somit kann es nie vorkommen, dass ein kleinerer Buchstaben im unsortiertem Bereich vorkommt als im Sortiertem.</p> <p></p> Best-Case Average-Case Worst-Case \\(\\Omega(n^2)\\) \\(\\Theta(n^2)\\) \\(O(n^2)\\) <p>Vorteil: Deutlich weniger Swap-Aufrufe als Bubble Sort Nachteil: \u00abVorsortiertheit\u00bb kann nicht ausgenutzt werden.</p>"},{"location":"22HS/ADS/Sortieren.html#insertion-sort","title":"Insertion Sort","text":"<pre><code>static void insertionSort(char[] a) {\n    for (int k = 1; k &lt; a.length; k++) {\n        char x = a[k];\n        int i = k;\n        for (; i &gt; 0 &amp;&amp; a[i-1] &gt; x; i--)\n            a[i] = a[i-1]; // verschieben\n        a[i] = x; // einf\u00fcgen\n    }\n}\n</code></pre> <p>Beim Insertion-Sort wird geschaut, wo das n\u00e4chste Element im unsortiertem Bereich im sortiertem Bereich kommt. Danach wird solange verschoben, bis das Element an der richtigen Stelle steht.</p> <p></p> Best-Case Average-Case Worst-Case \\(\\Omega(n)\\) \\(\\Theta(n^2)\\) \\(O(n^2)\\)"},{"location":"22HS/ADS/Sortieren.html#quick-sort","title":"Quick Sort","text":"<p>Die grunds\u00e4tzliche Premise des Quick-Sorts ist, dass das Array in zwei Teile unterteilt wird. Die Elemente im unterem Array sind kleiner als der mittlere Wert, \\(w\\), und die Elemente in oberen Array sind gr\u00f6sser als \\(w\\).</p> <p></p> <p>Um nun diesen Zustand zu erreichen, wird in \\(A_1\\) und in \\(A_2\\) jeweils ein Element gesucht, welches auf der falschen Seite ist. Diese zwei Elemente werden nun vertauscht.</p> <p>Um diesen Mittelpunkt/Pivotpunkt \\(W\\) zu finden gibt es mehrere Strategien:</p> <ol> <li>Median (schlecht, da der Laufzeitvorteil verloren geht)</li> <li>Nehme ein Element blind</li> <li>Das linkeste</li> <li>Das recheste</li> <li>Die mitte</li> <li>Nehme das wertm\u00e4ssige mittlere</li> <li>Nehme das arithmetische Mittel der drei Werte als Pivotpunkt</li> </ol> <p>Der folgende Code implementiert den Quick-Sort.</p> <pre><code>static int partition (int[] arr, int left, int right) {\n    int pivot = arr[(left + right) / 2];\n    while (left &lt;= right) {\n        while (arr[left] &lt; pivot) { left++; }\n        while (arr[right] &gt; pivot) { right--; }\n        if (left &lt;= right) {\n            swap(arr, left, right);\n            left++;\n            right--;\n        }\n    }\n    return left;\n}\n\nstatic void quickSort(int[] a){\n    quickSort(a, 0, a.length-1);\n}\n\nstatic void quickSort(int[] arr, int left, int right) {\n    if (left &lt; right) {\n        int mid = partition (arr, left, right);\n        quickSort(arr, left, mid - 1);\n        quickSort(arr, mid, right);\n    }\n}\n</code></pre>"},{"location":"22HS/ADS/Sortieren.html#big-o","title":"Big-O","text":"<p>Wenn immer die Mitte ben\u00fctzt wird, dann ist die \\(O(n\\cdot \\log_2(n))\\). Im schlechtesten Fall hat aber Quick-Sort \\(O(n^2)\\), dies ist aber extrem selten.</p> <p></p>"},{"location":"22HS/ADS/Sortieren.html#quick-sort-optimieren","title":"Quick-Sort optimieren","text":"<pre><code>static void quickerSort(int[] a, int left, int right) {\n    if (right - left &lt; THRESHOLD) {\n        insertionSort(a, left, right);\n    } else {\n        int l = partition (a, left, right);\n        quickerSort(arr, left, l - 1);\n        quickerSort(arr, l , right);\n    }\n}\n</code></pre>"},{"location":"22HS/ADS/Sortieren.html#distribution-sort","title":"Distribution Sort","text":"<p>Es wird mithilfe von einer Funktion \\(f(x)\\) den Index im sortierten Array zu finden. Da direkt aus dem Wert die Position bestimmt wird, ist die Komplexit\u00e4t \\(O(n)\\).</p>"},{"location":"22HS/ADS/Sortieren.html#merge-sort","title":"Merge Sort","text":"<p>Beim Merg Sort wird das Array in mehrere sub-Arrays unterteilt, diese werden unabh\u00e4ngig geordnet und danach zusammen gesetzt.</p> <p></p> <p>Der folgende Pseudo-Code zeigt eine Implementation eines Merge Sort:</p> <pre><code>Methode Mergesort (A) {\n    if (A.size() &lt;= 1) {\n        return A;\n    } else {\n        halbiere A in A1 und A2;\n        A1 = Mergesort(A1);\n        A2 = Mergesort(A2);\n        return Merge(A1, A2)\n    }\n}\n\n// Die Merge methode fasst die sortierten Liste linke- und rechteListe in eine sortierte \n// Liste zusammen\nMethode Merge(linkeListe, rechteListe); {\n    neueListe;\n    while (!(linkeListe.isEmpty() OR rechteListe.isEmpty)) {\n        if (linkeListe(0) &lt;= rechteList(0) {\n            neueListe.add(linkeListe(0)); linkeListe.remove(0);\n        }\n        else {\n            neueListe.add(rechteListe(0)); rechteListe.remove(0);\n        }\n    }\n\n    while (!linkeListe.isEmpty()) {\n        neueListe.add(linkeListe(0)); linkeListe.remove(0);\n    }\n    while (!rechteListe.isEmpty()) {\n        neueListe.add(rechteListe(0)); rechteListe.remove(0);\n    }\n    return neueListe;\n}\n</code></pre> <p>Die Komplexist\u00e4t: \\(O(n\\cdot \\log(n))\\)</p>"},{"location":"22HS/ADS/Sortieren.html#wahl-des-sortierungs-verfahren","title":"Wahl des Sortierungs Verfahren","text":""},{"location":"22HS/ADS/Sortieren.html#sortierungs-verfahren-vergleich","title":"Sortierungs Verfahren Vergleich","text":"<p>Wenn ein Sortierungs-Algorithmus Elemente untereinander verlgeicht, dann ist die min</p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"22HS/ADS/Sortieren.html#sortieren-in-java","title":"Sortieren in Java","text":"<ul> <li>F\u00fcr primitive Arrays (<code>Arrays.sort(int[] a)</code>) wird einen Dual-Pivot-Sort verwendet, welcher nicht stabil ist. Dies ist aber f\u00fcr primitive Typen nicht relevant. \\(O(n\\cdot \\log(n))\\)</li> <li>F\u00fcr Objekte () wird ein iterativen Merge-Sort. \\(O(n\\cdot \\log(n))\\)</li> <li>F\u00fcr Objekte <code>parallelSort()</code> wird das Fork/Join-Framework zum parallelen Sortieren von Unterarrays ben\u00fct</li> </ul>"},{"location":"22HS/ADS/Sortieren.html#amdahls-law","title":"Amdahl's Law","text":"<p>Dieses \"Gesetzt\" beschreibt, wie viel schneller ein Program laufen wird, wenn es parallelisiert wird: $$ Speedup = \\frac 1 {(1 - p) + \\frac p s}\\ \\text{, wobei } p \\text{ der Anteil des Programmes ist, welcher parallelisiert werden kann}\\ \\text{ und } s \\text{ die Anzahl Prozessoren} $$</p>"},{"location":"22HS/ADS/Textsuche.html","title":"Textsuche","text":""},{"location":"22HS/ADS/Textsuche.html#bruteforce","title":"Bruteforce","text":"<p>Der Aufwand des folgenden Algorithmus ist \\(O(n\\cdot m)\\), wobei \\(n\\) die Anzahl Zeichen im String und \\(m\\) die Anzahl Zeichen im Pattern sind.</p> <pre><code>static int indexOf(String str, String pattern) {\n    int k;\n    for (int i = 0; \n         i &lt; str.len() - pattern.len() + 1; \n         i++) \n    {\n\n        // Sucht den ersten \u00fcbereinstimmenden Buchstaben\n        while (i &lt; str.len() \n               &amp;&amp; str.charAt(i) != pattern.charAt(0)) \n        {\n            i++;\n        }\n\n        if (i + pattern.len() &lt;= str.len()) {\n            for (k = 0; k &lt; pattern.len() &amp;&amp; str.charAt(i+k) == pattern.charAt(k); k++) {}\n            if (k == pattern.len()) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n</code></pre>"},{"location":"22HS/ADS/Textsuche.html#knuth-morris-pratt-algorithmus","title":"Knuth-Morris-Pratt Algorithmus","text":"<p>Dieser Algorithmus hat den Aufwand \\(O(n+m)\\). Der Algorithmus ist sinvoll, wenn das Pattern viele Wiederholungen hat oder wenn das R\u00fcckspringen aufw\u00e4ndig ist (z.B. bei externen Speichermedien)</p> <p>Der Knuth-Morris-Pratt Algorithmus wird in zwei Schritten ausgef\u00fchrt:</p>"},{"location":"22HS/ADS/Textsuche.html#phase-1-next-tabelle-bauen","title":"Phase 1: Next-Tabelle bauen","text":"<p>Der Aufwand dieser Phase ist \\(O(m)\\), wobei \\(m\\) die L\u00e4nge des Pattern ist</p> <ol> <li>Subpattern (m\u00f6gliche Pr\u00e4fixe)</li> <li></li> </ol> <p>Nun folgt einen effizienteren Algorithmus:</p> <p></p> <p>Es gibt drei Situationen:</p> <ol> <li><code>str[l] == str[p]</code>:</li> <li><code>str[l] != str[p] &amp;&amp; l == 0</code>:</li> <li><code>str[l] == str[p] &amp;&amp; l &gt; 0</code>:</li> </ol>"},{"location":"22HS/ADS/Textsuche.html#phase-2-suche","title":"Phase 2: Suche","text":"<p>Diese Phase hat den Aufwand von \\(O(n)\\), wobei \\(n\\) die L\u00e4nge des Text ist</p> <p></p>"},{"location":"22HS/ADS/Textsuche.html#invertierter-index","title":"Invertierter Index","text":"<p>Es wird einen Index gef\u00fchrt, welche W\u00f6rter wo vorkommen (z.B. <code>banana</code> kommt im dritten Text an vierter Stelle vor).</p> <p></p> <p>Es gibt m\u00f6gliche Verbesserungen:</p> <ul> <li>W\u00f6rter sortieren und einen bin\u00e4ren balancierten Baum ben\u00fctzten: \\(O(\\log(n))\\)</li> <li>Hashtabelle: \\(O(1)\\)</li> <li>Stopwords entfernen (z.B. <code>denn</code>, <code>die</code>, ...)</li> <li>W\u00f6rter normalisieren: Wortstamm bilden (wohn: wohnen, bewohnen, Wohnzimmer, ...)</li> </ul>"},{"location":"22HS/ADS/Textsuche.html#levenshtein-distanz","title":"Levenshtein-Distanz","text":"<p>Die Levenshtein-Distanz ist die minimale Anzahl Operationen um von Wort-A Wort-B zu erreichen und kann somit als Mass verwendet werden, wie \u00c4hnlich zwei W\u00f6rter sind.</p> <p>Die folgenden Operationen sind erlaubt:</p> <ul> <li><code>doNothing()</code>: Der Buchstabe wird \u00fcbernommen</li> <li><code>insert(c)</code>: Ein Buchstabe an einer Position einf\u00fcgen</li> <li><code>update(c -&gt; d)</code>: Ein Buchstaben an einer Position ersetzten</li> <li><code>delete(c)</code>: Ein Buchstaben l\u00f6schen</li> </ul> <p></p> <p></p> <pre><code>public static int computeLevenshteinDistance(String str1,String str2) {\n    int[][] distance = \n        new int[str1.len() + 1][str2.len() + 1];\n\n    // initialisierung\n    for (int i = 0; i &lt;= str1.len(); i++)\n        distance[i][0] = i;\n    for (int j = 1; j &lt;= str2.len(); j++) \n        distance[0][j] = j;\n\n    for (int i = 1; i &lt;= str1.len(); i++) {\n        for (int j = 1; j &lt;= str2.len(); j++) {\n            int minEd = (str1.charAt(i - 1) == str2.charAt(j - 1)) ? 0 : 1;\n            distance[i][j] = minimum(distance[i - 1][j] + 1,\n            distance[i][j - 1] + 1, distance[i - 1][j - 1]+ minEd);\n        }\n    }\n    return distance[str1.len()][str2.len()];\n}\n</code></pre>"},{"location":"22HS/ADS/Textsuche.html#trigramm-suche","title":"Trigramm-Suche","text":""},{"location":"22HS/ADS/Textsuche.html#phonetische-suche","title":"Phonetische Suche","text":""},{"location":"22HS/ADS/Textsuche.html#regex","title":"Regex","text":"<p>Mit <code>Pattern pattern = Pattern.compile(String patternStr)</code> kann ein Pattern vorbereitet werden.</p> <pre><code>// create Pattern object\nPattern pat = Pattern.compile(\"ZHAW\");\n// do the actual matching\nMatcher matcher = pat.matcher(\"Willkommen an der ZHAW\");\n\n// find() finds the next match\nwhile (matcher.find()) {\n    String group = matcher.group(); // the found string\n    int start = matcher.start(); // the start position\n    int end = matcher.end(); // the end position\n}\n</code></pre> Platzhalter Bedeutung Beispiel <code>.</code> Ein beliebiges Zeichen <code>\\d</code> Digit [0-9] <code>\\D</code> Keine Digit <code>\\w</code> ein Buchstabe, eine Ziffer oder einen Unterstrich <code>\\W</code> Weder Buchstaben, Ziffer, noch Unterstrich <code>\\s</code> Leerzeichen (Blank, etc) <code>\\S</code> Kein Leerzeichen <code>[^s]</code> Alle Zeichen, ausser in <code>s</code> enthaltene Zeichen <code>s?</code> <code>s</code> kann 0 oder einmal auftreten <code>s*</code> <code>s</code> kann 0 oder mehrmals auftreten <code>s+</code> <code>s</code> muss 1 oder mehrmals auftreten <code>s{n}</code> <code>s</code> muss <code>n</code>-mal auftreten <code>s{m, n}</code> <code>s</code> muss mindestens <code>m</code>-mal und maximal <code>n</code>-mal auftreten"},{"location":"22HS/ADS/Zufall.html","title":"Zufall","text":"<p>Der folgende Algorithmus zeigt, wie Java Zufallszahlen generiert.</p> <pre><code>long seed;\ndouble random() {\n    long a = 25214903917; c = 11; p = Math.pow(2, 48);\n    seed = (a*seed + c) % p;\n    return z/p;\n}\n</code></pre>"},{"location":"22HS/ADS/Zufall.html#las-vegas-algorithmen-local-search","title":"Las-Vegas-Algorithmen (Local Search)","text":"<p>Ein Las-Vegas-Algorithmus liefert nie ein falschen Wert und der Zufall bestimmt nur die Richtung des Alogirthmus.</p> <ul> <li>Beim Quicksort wird das Pivot-Element zuf\u00e4llig bestimmt</li> <li>Beim K\u00f6nigin-Problem</li> </ul>"},{"location":"22HS/ADS/Zufall.html#monte-carlo-algorithmen-random-sampling","title":"Monte-Carlo-Algorithmen (Random Sampling)","text":"<p>Beim Monte-Carlo-Algorithmus steuert der Zufall das Resultat:</p> <ul> <li>Um ein Integral zu berechnen, werden Proben an zuf\u00e4lligen Orten genommen und es wird geschaut, welche Proben unterhalb des Integrals sind.</li> </ul>"},{"location":"22HS/ADS/Zufall.html#heuristische-approximationsverfahren","title":"Heuristische Approximationsverfahren","text":""},{"location":"22HS/ADS/Zufall.html#genetische-algorithmen","title":"Genetische Algorithmen","text":"<p>Ein genetischer Algorithmus wird \u00fcber mehrere Generationen ver\u00e4ndert um deren Effektivit\u00e4t zu verbessern.</p> <p></p>"},{"location":"22HS/ADS/Zufall.html#n-damen-problem","title":"n-Damen-Problem","text":"<p>Beim Damen-Problem k\u00f6nnen n Damen aufs Board gesetzt werden und keine darf sich bedrohen. In diesem Fall erf\u00fcllt eine Damen-Konfiguration das Problem oder nicht. Die Sektions-Funktion muss trotzdem ein Score bilden k\u00f6nnen, welcher nicht <code>0</code> oder <code>1</code> ist.</p> <p></p> <p>Der Fittness-Score kann z.B. sein, wie viele Damen nicht bedroht sind. </p> <p>Im folgenden Bild sind die weiteren Schritte visualisiert.</p> <p></p>"},{"location":"22HS/ADS/Zufall.html#simulated-annealing","title":"Simulated Annealing","text":"<p>(Annealing heisst Aush\u00e4rten und kommt davon, wie Glass hergestellt wird)</p> <ol> <li>Start mit einer (zuf\u00e4lligen) Initial-Konfiguration</li> <li>Wiederholtes Durchsuchen der Nachbarschaft und Auswahl eines Kandidaten</li> <li>Evaluiere die Kostenfunktion (oder Fitnessfunktion) und akzeptiere den     Kandidaten, wenn er \u00abbesser\u00bb ist; wenn nicht, kann der neue Kandidat immer noch zu einer von der Temperatur-abh\u00e4ngigen Chance angenommen werden. Sonst w\u00e4hle einen anderen Nachbarn.</li> <li>Stoppe, wenn die Qualit\u00e4t ausreichend hoch ist, wenn keine Verbesserung     gefunden werden kann oder nach einer festgelegten Zei</li> </ol> <p>F\u00fcr diesen Algorithmus wird folgendes ben\u00f6tigt:</p> <ul> <li>Eine Methode zur Erzeugung der Anfangskonfiguration</li> <li>Eine \u00dcbergangs- oder Generationenfunktion, um einen Nachbarn als n\u00e4chsten Kandidaten zu finden</li> <li>Eine Kostenfunktion</li> <li>Ein Auswahlkriterium</li> <li>Ein Stopp-Kriterium</li> </ul> <p>Ein Problem kann sein, dass es bei der Fittnessfunktion es lokale Maximume und Minimume haben kann. Um diese abzuwsch\u00e4chen, sollte ein Algorithmus das letzte Maximum merken und zu Beginn gr\u00f6ssere Schritte neben.</p> <p></p>"},{"location":"22HS/ADS/Zufall.html#beispiel-traveling-salesmen","title":"Beispiel: Traveling Salesmen","text":"<ol> <li>Eine zuf\u00e4llige Tour wird gestartet</li> <li>Nach dem Zufallsprinzip wird die Tour mutiert abh\u00e4ngig von der Gl\u00fchtemperatur (bzw. Fittnessfunktion). Eine M\u00f6glichkeit w\u00e4re, zwei zuf\u00e4llige St\u00e4dte auf der Tour umzudrehen</li> <li>Wenn die Kandidatentour besser ist, als die neue Tour akzeptieren</li> <li>Wenn die Kandidaten-Tour schlechter ist, Tour mit einer gewissen Wahrscheinlichkeit trotzdem akzeptieren. Die Wahrscheinlichkeit, eine minderwertige Tour zu akzeptieren, h\u00e4ngt davon ab, wie viel l\u00e4nger der Kandidat ist, und von der \u00abTemperatur des Gl\u00fchprozesses\u00bb. Eine h\u00f6here Temperatur macht es wahrscheinlicher, eine minderwertige Tour zu akzeptieren</li> <li>Zur\u00fcck zu Schritt 2 um die Gl\u00fchtemperatur bei jeder Iteration zu senken. Wenn die Temperatur tief genug wird und somit ein (lokales) Minimum gefunden wurde, wird der Loop gestoppt.</li> </ol>"},{"location":"22HS/ADS/Daten%20Typen/Graph.html","title":"Graph","text":"<p>Ein Knoten ist ein Objekt mit einem Namen, welches mit einer oder mehreren Kanten verbunden werden. Kanten sind dabei eine gerichtete Verbindung zwischen zwei Knoten.</p> <p>Begriffe:</p> <ul> <li>Einfacher Pfad: Eine Sequenz von Knoten ohne doppelte Knoten</li> <li>Geschlossener oder zyklischen Pfad: Ein Pfad, welcher die selben Anfangs- und Endknoten hat</li> <li>Pfadl\u00e4nge: Die Anzahl Kanten des Pfads (Achtung, nicht Knoten)</li> <li>Benachbarte Knoten: Zwei Knoten, welche mit einer Kante verbunden sind</li> <li>Vollst\u00e4ndiger (oder kompletter) Graph: Jeder Knoten ist mit jedem Knoten direkt verbunden</li> <li>Verbundener Graph: Jeder Knoten ist mit jedem anderen Knoten mit einem Pfad verbunden</li> <li>Dichte des Graphen: Das Verh\u00e4ltnis von Anzahl Kanten zu der Anzahl m\u00f6glichen Kanten</li> <li>Dichter Graph (dense graph): Nur wenige Kanten fehlen</li> <li>D\u00fcnner oder lichter Graph (sparse graph): Nur wenige Kanten im Graph sind vorhanden</li> <li>ungerichteten Graph: Normallerweise sind Kanten gerichtet. Bei einem ungerichteten Graph gibt es immer Kanten in beide Richtungen</li> <li>gewichteten Graphen (auch Netzwerk): Graphen, bei welchen die Kanten ein Gewicht oder Kosten haben</li> <li>gewichtete Pfadl\u00e4nge: Die Summe der Pfadgewichte</li> <li>zyklenfreier Graph: Ein Graph, ohne Loops</li> <li>Speziallfall des Baumes: Ein gerichteter zyklenfreier, verbundener Graph, bei welchem jeder Knoten genau eine eingehende Verbindung hat, ausser der Wurzelknoten, ist ein Baum</li> <li>Wald: Eine Gruppe von nicht zusammenh\u00e4ngender B\u00e4ume</li> </ul>"},{"location":"22HS/ADS/Daten%20Typen/Graph.html#implementation-1-adjazenz-liste","title":"Implementation 1: Adjazenz-Liste","text":"<p>Jede Implementation hat eine Liste von Kanten zu den benachbarten Knoten (die Adjazenz-Liste)</p> <pre><code>classDiagram\n    class Node {\n        + name: String\n    }\n\n    class Edge {\n        +double weight\n    }\n\n    Node \"1\" --&gt; \"*\" Edge\n    Edge \"1\" --&gt; \"1\" Node\n</code></pre>"},{"location":"22HS/ADS/Daten%20Typen/Graph.html#implementation-2-adjazenz-matrix","title":"Implementation 2: Adjazenz-Matrix","text":"<p>Es gibt eine \\(N\\times N\\) Boolean-Matrix, in welcher alle Kanten als <code>boolean</code> representiert sind. Falls die Kanten gewichtet sind, kann das <code>boolean</code> durch ein <code>double</code> ersetzt werden.</p> <p></p>"},{"location":"22HS/ADS/Daten%20Typen/Graph.html#suchstrategien","title":"Suchstrategien","text":""},{"location":"22HS/ADS/Daten%20Typen/Graph.html#tiefesuche","title":"Tiefesuche","text":"<p>Bei der Tiefesuche wird soweit zum n\u00e4chsten Node gegangen, bis dies nicht mehr m\u00f6glich ist. Dann wird den Pfad zur\u00fcck gegangen, bis ein anderen Pfad eingeschlagen werden kann.</p> <pre><code>void depthFirstSearch(startNode: Node) {\n    Stack&lt;Node&gt; stack = new Stack&lt;&gt;();\n    startNode.marked = true;\n    stack.push(startNode);\n    while(!stack.isEmpty()) {\n        Node current = stack.pop();\n        current.marked = true\n        for(Edge edge : current.edges) {\n            if(!edge.nextNode.marked) {\n                stack.push(edge.nextNode)\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"22HS/ADS/Daten%20Typen/Graph.html#breitesuche","title":"Breitesuche","text":"<p>Bei der Breitensuche wird zuerst alle Nachbarn eines Nodes besucht, danach die Nachbarn der Nachbarn</p> <pre><code>void breadthFirstSeach(startNode: Node) {\n    Queue&lt;Node&gt; queue = new Queue&lt;&gt;();\n    startNode.marked = true;\n    queue.enqueue(startNode);\n    while(!queue.isEmpty()) {\n        Node current = stack.dequeue();\n        current.marked = true\n        for(Edge edge : current.edges) {\n            if(!edge.nextNode.marked) {\n                stack.enqueue(edge.nextNode)\n            }\n        }\n    }\n}\n</code></pre> <p>Der einzige Unterschied in der Implementation zwischen der Tiefen- und der Beritensuche, ist der Datentyp. Bei der Tiefensuche wird ein <code>Stack</code> und bei der Breitensuche eine <code>Queue</code> verwendet.</p>"},{"location":"22HS/ADS/Daten%20Typen/Graph.html#kurzester-ungewichteter-pfad","title":"K\u00fcrzester, ungewichteter Pfad","text":"<p>Der Graph wird mit der Breitesuche durchsucht. Bei jedem Knoten wird hingeschrieben, von welchem Knoten gekommen wurde.</p>"},{"location":"22HS/ADS/Daten%20Typen/Graph.html#kurzester-gewichteter-pfad","title":"K\u00fcrzester, gewichteter Pfad","text":""},{"location":"22HS/ADS/Daten%20Typen/Graph.html#dijkstra","title":"Dijkstra","text":"<p>Der Dijkstra-Algorithmus funktioniert wie eine Breitensuche, aber es wird eine Priority-Queue verwendet, in welcher alle noch nicht besuchten Nodes stehen. Diese Queue wird sortiert nach der Strecke um zum Node vom Start zu gelangen.</p>"},{"location":"22HS/ADS/Daten%20Typen/Graph.html#greedy-algorithmen","title":"Greedy Algorithmen","text":""},{"location":"22HS/ADS/Daten%20Typen/Graph.html#topologisches-sortieren","title":"Topologisches Sortieren","text":"<p>Bei einem gerichteten, unzyklischen Graphen gibt es eine topologische Sortierung. Diese ist die Reihenfolge von den Knoten, dass alle Abh\u00e4ngigkeiten eines Knoten zuerst bearbeitet werden.</p> <p></p> <p>In diesen Graph kommt <code>A</code> immer zuerst, da es f\u00fcr jeden Knoten ben\u00f6tigt wird, danach k\u00f6nnte <code>D</code> oder <code>B</code> kommen. <code>C</code> kann noch nicht kommen, da <code>D</code> noch nicht bearbeitet wurde.</p> <p>Es g\u00e4be folgende topologische Sortierungen:</p> <ul> <li>A B D C E F</li> <li>A D C E B F</li> <li>A D B C E F</li> <li>A D C B E F</li> <li>A D C E B F</li> </ul> <p>Der folgende Code druckt eine m\u00f6gliche topologische Sortierung von einem Graphen aus.</p> <pre><code>public void printTopologicalSorting(Graph graph) {\n    while(!graph.isEmpty())\n        for(Node node : graph) {\n            if(node.incomming == 0) {\n                System.out.println(node.name);\n                for(Node nextNode : node.outgoingNodes) {\n                    nextNode.incomming--;\n                }\n                graph.removeNode(node);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"22HS/ADS/Daten%20Typen/Graph.html#maximaler-fluss","title":"Maximaler Fluss","text":"<p>Um den maximalen Fluss durch ein Graphen zu finden kann folgender Algorithmus verwendet werden:</p> <p>Es werden drei Graphen gef\u00fchrt:</p> <ol> <li>Ein Graph mit den orginalen Fluss-Daten    </li> <li>Ein Graph mit den provisorischen Fluss-Daten    </li> <li>Ein Graphen mit den verbleibenden Fluss-Daten (auch Residualgraph gennant)    </li> </ol> <p>Bei jeder Iteration werden im provisorischen Graphen die provisorischen Fluss-Daten eingeschrieben und die Differenz zwischen dem Original und dem provisorischen Graphen in den Residualgraphen \u00fcbertragen.</p> <p></p> <p></p>"},{"location":"22HS/ADS/Daten%20Typen/Graph.html#traveling-salesman-problem","title":"Traveling Salesman Problem","text":"<p>Finde den k\u00fcrzesten Pfad, der jede Stadt genau einmal besuchen wird. Dieses Problem hat die Big-O-Notation \\(O(n!)\\). Um das Problem in n\u00fctzlicher Zeit zu l\u00f6sen m\u00fcssen heuristische Algorithmen eingesetzt werden.</p> <p>Ein m\u00f6glichen Algorithmus ist der folgenden:</p> <ol> <li>Die Kanten werden nach ihren Kosten sortiert</li> <li>Die \"billigste\" Kante wird ausgew\u00e4hlt unter der Bedinungen:</li> <li>dass keine Zyklen entstehen d\u00fcrfen</li> <li>dass kein Knoten mit mehr als zwei Kanten verbunden sein darf</li> </ol> <p>Diesen Algorithmus f\u00fchrt zu einer Laufzeit von \\(O(n^2\\log(n^2))\\)</p>"},{"location":"22HS/ADS/Daten%20Typen/HashMap.html","title":"HashMap","text":""},{"location":"22HS/ADS/Daten%20Typen/HashMap.html#string-hashing","title":"String Hashing","text":"<p>Strings werden oft mit einem Horner-Schema und einer Modulo-Operation generiert: \\((((A_3x+ A_2)x + A_1)x + A_0) \\mod n\\)</p>"},{"location":"22HS/ADS/Daten%20Typen/HashMap.html#hashing-in-java","title":"Hashing in Java","text":"<p>Die <code>Object.hashCode()</code> Funktion muss folgende Eigenschaften erf\u00fcllen:</p> <ul> <li>Solange sich der Zustand eines Objektes nicht ver\u00e4ndert muss der Hash gleich bleiben</li> <li>Wenn <code>o1.equals(o2) == true</code> zutrifft, dann muss auch <code>o1.hashCode() == o2.hashCode()</code> zutreffen</li> <li>Wenn <code>o1.equals(o2) == false</code> ist, dann sollten <code>o1.hashCode() != o2.hashCode()</code> sein</li> </ul> <p>Eine Hash-Methode sollte folgendermassen implementiert werden:</p> <pre><code>public class Emplyee {\n    private int employeeId;\n    private String name;\n    private Department dept;\n\n    @Override\n    public int hashCode() {\n        // 13, 17 and 31 are prime numbers\n        int hash = 1;\n        hash = hash * 13 + employeeId;\n        hash = hash * 17 + name.hashCode();\n        hash = hash * 31 + (dept == null? 0: dept.hashCode());\n        return hash;\n    }\n}\n</code></pre>"},{"location":"22HS/ADS/Daten%20Typen/HashMap.html#kollisionen","title":"Kollisionen","text":"<p>Bei Kollisionen in einer Hash-Map gibt es mehere M\u00f6glichkeiten, diese aufzul\u00f6sen:</p>"},{"location":"22HS/ADS/Daten%20Typen/HashMap.html#uberlaufsliste","title":"\u00dcberlaufsliste","text":"<p>Es kann eine \u00dcberlaufsliste gef\u00fchrt werden. Wenn eine Hash-Kollision auftrit, wird ein neuer Eintrag in einer Liste hinzugef\u00fcgt.</p> <p></p>"},{"location":"22HS/ADS/Daten%20Typen/HashMap.html#open-addressing","title":"Open Addressing","text":""},{"location":"22HS/ADS/Daten%20Typen/HashMap.html#open-addressing-lineares-sondieren","title":"Open Addressing: Lineares Sondieren","text":"<p>Beim Linearen-Sondieren wird bei einer Kollision einfach <code>+1</code> gerechnet, bis keine Kollision mehr auftritt. Damit die HashMap immer noch effizient ist, sollte der Loadfaktor unter 0.8 bleiben (\\(&lt; 0.8\\))</p> <p>Im folgenden Beispiel werden 89, 18, 49, 58 und 9 mit einer Hash-Funktion <code>x % 10</code> eingef\u00fcgt:</p> <p></p> <p>Beim Linearen-Sondieren kann Primary-Clustering auftreten und bedeuetet, dass sich Gruppen um Hash-Werte bilden. Dies beinflusst das Wiederfinden negativ.</p>"},{"location":"22HS/ADS/Daten%20Typen/HashMap.html#open-addressing-quadratisches-sondieren","title":"Open Addressing: Quadratisches Sondieren","text":"<p>Beim Quadratischen-Sondieren wird der Hashwert <code>+1</code>, <code>+4</code>, <code>+9</code>, <code>F+i\u00b2</code> gerechnet. Dies wirkt dem Primary-Clustering entgegen.</p> <p>Es werden wieder 89, 18, 49, 58 und 9 mit einer Hash-Funktion <code>x % 10</code> eingef\u00fcgt:</p> <p></p>"},{"location":"22HS/ADS/Daten%20Typen/HashMap.html#performance","title":"Performance","text":"<p>Wie in der folgenden Graphik erkentlich ist, nimmt die Anzahl Kollisionen bei einem steigenden F\u00fcllgrad exponenziell zu.</p> <p></p>"},{"location":"22HS/ADS/Daten%20Typen/HashMap.html#loschen","title":"L\u00f6schen","text":"<p>Wenn ein Wert gel\u00f6scht wird, kann er nicht einfach entfernt werden, da dies das Wiederfind-Verhalten \u00e4ndert wurde. Es gibt zwei M\u00f6glichkeiten:</p> <ol> <li>Das Objekt wird nicht gel\u00f6scht, sonder nur als gel\u00f6scht markiert.</li> <li>Alle folgende Werte bis zur n\u00e4chsten leeren Zelle m\u00fcssen erneut eingef\u00fcgt werden (rehashing)</li> </ol>"},{"location":"22HS/ADS/Daten%20Typen/HashMap.html#extensible-hashing","title":"Extensible Hashing","text":"<p>Dies ist eine M\u00f6glichkeit, wie HashMaps dynamisch vergr\u00f6ssert werden k\u00f6nnen.</p> <p>Es gibt ein Hash-Verzeichniss, welches auf Bucket verweisst. In diesem Bucket sind alle Objekte, welche einen Hash haben, welcher mit dem entsprechenden Bits beginnt. </p> <p>Um den Bucket eines Hashes zu finden, wird folgendes gerechnet: \\(Hash \\mod {2^{GlobaleTiefe}}\\)</p> <p></p> <p>Wenn nun ein Bucket \u00fcberlauft, dann wird geschaut, ob die lokale Tiefe kleiner ist als die globale Tiefe. Wenn nicht, wird  die globale Tiefe um eins erh\u00f6ht. Somit wird das Hash-Verzeichniss doppelt so gross und hat Platz f\u00fcr zus\u00e4tzliche Buckets.</p> <p></p> <p>Wenn die lokale Tiefe kleiner ist als die globale Tiefe, dann gibt es mehrere Zeiger, welche auf den \u00fcberlaufenden Bucket zeigen. Es wird ein neuer Bucket erstellt und einer der Zeiger auf den neuen Bucket umgebogen.</p>"},{"location":"22HS/ADS/Daten%20Typen/List.html","title":"List","text":"<p>In ADS ist mit einer Liste immer eine linked list.</p> <p></p>"},{"location":"22HS/ADS/Daten%20Typen/List.html#methoden","title":"Methoden","text":"<ul> <li><code>void add (T obj)</code></li> <li><code>void add(int pos, T obj)</code></li> <li><code>T get(int pos)</code></li> <li><code>T remove(int pos)</code></li> <li><code>int size()</code></li> <li><code>boolean isEmpy()</code></li> </ul>"},{"location":"22HS/ADS/Daten%20Typen/List.html#zwei-listen-vergleichen","title":"Zwei Listen vergleichen","text":"<p>TODO</p>"},{"location":"22HS/ADS/Daten%20Typen/List.html#doppelt-verkettete-liste","title":"Doppelt verkettete Liste","text":"<p>Einfach verkettete Liste k\u00f6nnen nur in eine Richtung effizient iteriert werden. Mit einer doppelt verkettete Liste kann ein Iterator in beide Richtungen gehen. Daf\u00fcr wird beim hinzuf\u00fcgen und l\u00f6schen bezahlt, da zwei Pointers abge\u00e4ndert werden m\u00fcssen.</p>"},{"location":"22HS/ADS/Daten%20Typen/List.html#zirkulare-liste","title":"Zirkul\u00e4re Liste","text":"<p>Eine Liste kann zirkul\u00e4r verbunden werden. Dies hat den Vorteil, dass der Fall von einer leeren Liste kein spezial Fall ist.</p>"},{"location":"22HS/ADS/Daten%20Typen/List.html#sortierte-liste","title":"Sortierte Liste","text":"<p>Eine Liste kann kontinuierlich sortiert werden.</p> <p>Wenn eine Liste, welche nicht automatisch sortiert ist, sortiert werden soll, kann <code>Collections.sort(List&lt;?&gt; list)</code> ben\u00fctzt werden</p>"},{"location":"22HS/ADS/Daten%20Typen/List.html#arrays","title":"Arrays","text":"<p>Arrays sind sehr effizient bei Zugriffen, daf\u00fcr schrecklick f\u00fcr das hinzuf\u00fcgen und l\u00f6schen von Elemente.</p>"},{"location":"22HS/ADS/Daten%20Typen/List.html#listenimplementationen-im-vergleich","title":"Listenimplementationen im Vergleich","text":"Operation Arraylist LinkedList Vector Mutationen langsam schnell langsam Zugriff schnell langsam langsam Synchronisiert nein nein ja Bemerkung - - Deprecated"},{"location":"22HS/ADS/Daten%20Typen/Queue.html","title":"Queue","text":"<p>Queues sind eine FIFO-Collection und werden oft f\u00fcr Warteschlangen verwendet.</p> <p>Queues k\u00f6nnen mittels Array implementiert, in diesem Fall wird das Array als Ringbuffer gebraucht. </p> <p></p> <p>Queues k\u00f6nnen eine fixe Kapazit\u00e4t haben, in welche Fall <code>enqueue(T obj)</code> ein Fehler ausgeben w\u00fcrde.</p>"},{"location":"22HS/ADS/Daten%20Typen/Queue.html#methoden","title":"Methoden","text":"<ul> <li><code>void enqueue(T obj)</code></li> <li><code>T dequeue()</code></li> <li><code>T peek()</code></li> <li><code>void removeAll()</code></li> <li><code>boolean isEmpty()</code></li> <li><code>boolean isFull()</code></li> </ul>"},{"location":"22HS/ADS/Daten%20Typen/Queue.html#priority-queue","title":"Priority Queue","text":"<p>Bei einer Priority Queue werden Objekte beim einf\u00fcgen nach einer Priorit\u00e4t sortiert. Eine Priority Queue wird z.B. f\u00fcr das Scheduling von Prozessen in Betriebsystemen, Tasklisten nach Priorit\u00e4t, etc. ben\u00fctzt.</p>"},{"location":"22HS/ADS/Daten%20Typen/Set.html","title":"Set","text":"<p>Ein Set ist eine ungeordnete Menge ohne Duplikate.</p>"},{"location":"22HS/ADS/Daten%20Typen/Set.html#methoden","title":"Methoden","text":"<ul> <li><code>add(T)</code></li> <li><code>remove(T)</code></li> <li><code>contains(Object)</code></li> <li><code>int size()</code></li> <li><code>boolean isEmpty()</code></li> </ul>"},{"location":"22HS/ADS/Daten%20Typen/Stack.html","title":"Stack","text":"<p>Stack ist eine LIFO-Collection und ist in Java mit dem Interface <code>Dequeue</code> implementiert.</p>"},{"location":"22HS/ADS/Daten%20Typen/Stack.html#methoden","title":"Methoden","text":"<ul> <li><code>void push(T obj)</code></li> <li><code>T pop()</code></li> <li><code>T peek()</code></li> <li><code>boolean isEmpty()</code></li> <li><code>void removeAll()</code></li> <li><code>bool isFull()</code></li> </ul>"},{"location":"22HS/ADS/Daten%20Typen/Stack.html#anwendungsfalle","title":"Anwendungsf\u00e4lle","text":"<p>Ein Stack wird oft f\u00fcr das Parsen von z.B. Klammern oder XML-Tags verwendet. Ebenfalls ben\u00fctzen alle Programme einen Stack f\u00fcr Methoden-Aufrufe.</p>"},{"location":"22HS/ADS/Daten%20Typen/Tree.html","title":"Tree","text":"<pre><code>Tree = Empty\nTree = Node(List&lt;Tree)\n</code></pre> <p>Eigenschaften:</p> <ul> <li>Knoten mit dem gleichen Vorg\u00e4nger-Knoten sind Geschwisterknoten</li> <li>Es gibt genau einen Pfad von der Wurzel zu jedem Knoten, wobei die Wegl\u00e4nge die Anzahl Kanten zum Konten darstellt</li> <li>Die H\u00f6he des Baumes sind die Anzahl Ebenen im Baum (<code>Anzahl Kannten + 1</code>)</li> <li>Das Gewicht oder Gr\u00f6sse ist die Anzal der Knoten</li> </ul>"},{"location":"22HS/ADS/Daten%20Typen/Tree.html#binary-tree","title":"Binary Tree","text":"<pre><code>Tree = Empty\nTree = Node(Tree, Value, Tree)\n</code></pre> <p>Eigenschaften:</p> <ul> <li>Die H\u00f6he/Tiefe ist die Anzahl Ebenen im Baum (<code>Anzahl Kanten + 1</code>)</li> <li>Auf jeder Ebene \\(h\\) gibt es maximal \\(2^{h-1}\\) Knoten</li> <li>Die Anzahl Konten sind \\(n=2^h-1\\), wobei \\(h\\) die H\u00f6he des Baums ist </li> <li>Die Anzahl Ebenen/H\u00f6he sind \\(h=\\log_2(n+1)\\)</li> <li>Ein Binary-Tree ist voll, wenn jeder Knoten entweder Blatt ist oder zwei Kinder besitzt   </li> <li>Ein Binary-Tree ist vollst\u00e4ndig/komplett, wenn alle Ebenen bis auf die letzte Ebene gef\u00fcllt ist und die Bl\u00e4ter linksb\u00fcndig angeordnet sind   </li> <li>Ein vollst\u00e4ndigen (bzw. kompletten) sortierten Bin\u00e4rbaum kann in \\(O(\\log_2 n)\\) Schritten durchsucht werden (f\u00fcr 1000 Elemente werden 10 Schritte ben\u00f6tigt)</li> </ul>"},{"location":"22HS/ADS/Daten%20Typen/Tree.html#traversieren","title":"Traversieren","text":"Methode Beschreibung Beispiel Preorder <code>Value, Left, Right</code> <code>h, d, b, a, c, f, e, g, i</code> Inorder <code>Left, Value, Right</code> <code>a, b, c, d, e, f, g, h, i</code> Postorder <code>Left, Right, Value</code> <code>a, c, b, e, g f, d, i, h</code> Levelorder Jede Ebene wird Ausgedruckt: \\(n, a_0, b_0, a_1, a_2, b_1, b_2\\) <code>h, d, i, b, f, a, c, e, g</code>"},{"location":"22HS/ADS/Daten%20Typen/Tree.html#ubungung","title":"\u00dcbungung","text":"<p>Es ist geben: </p> <ul> <li>Preorder-Traversierung: 10, 3, 1, 4, 2, 9, 7, 5, 8</li> <li>Inorder-Traversierung: 3, 4, 1, 10, 9, 7, 2, 8, 5</li> </ul> <p>Daraus soll der Baum wieder hergestellt werden:</p>"},{"location":"22HS/ADS/Daten%20Typen/Tree.html#immer-rechts-oder-immer-links-einfugen","title":"Immer Rechts oder immer Links Einf\u00fcgen","text":"<p>Der folgende Code erstellt eine LinkedList als Binary-Tree: </p> <pre><code>class BinaryTree&lt;T&gt; implements Tree&lt;T&gt;{\n    private TreeNode&lt;T&gt; root;\n    private TreeNode insertAt(TreeNode node, T x) {\n        if (node == null) {\n            return new TreeNode(x);\n        }\n        else {\n            // ACHTUNG: Der rechte Node wird ersetzt\n            node.right = insertAt(node.right, x);\n            // or \n            //node.left = insertAt(node.left, x);\n            return node;\n        }\n    }\n\n    public void insert (T x) {\n        root = insertAt(root, x);\n    }\n}\n</code></pre>"},{"location":"22HS/ADS/Daten%20Typen/Tree.html#sortierte-baume","title":"Sortierte B\u00e4ume","text":"<p>Bei einem sortierten Baum gilt dass der linke Node kleinere oder gleiche Elemente (\\(\\le\\)) enth\u00e4lt und der rechte Node alle gr\u00f6ssere Elemente.</p> <p></p> <p>Dies erleichtert das Suchen enorm. Bei einem vollst\u00e4ndigen gef\u00fclltem Bin\u00e4r-Baum ist \\(O(\\log(n))\\) die Zeitkomplexit\u00e4t.</p> <pre><code>public Object search(TreeNode&lt;T&gt; node, T x) {\n    if (node == null) return node;\n    else if (x.compareTo(node.element) == 0) return node;\n    else if (x.compareTo(node.element) &lt;= 0) return search(node.left,x);\n    else return search(node.right,x);\n}\n</code></pre>"},{"location":"22HS/ADS/Daten%20Typen/Tree.html#konten-hinzufugen","title":"Konten hinzuf\u00fcgen","text":"<p>Daf\u00fcr ist das Einf\u00fcgen komplexer. Mit folgendem Alogirthmus wird kein vollst\u00e4ndigen Bin\u00e4r-Baum erzeugt und somit auch nicht die idalle Zeitkomplexit\u00e4t von \\(O(\\log(n))\\) erreicht.</p> <pre><code>private TreeNode&lt;T&gt; insertAt(TreeNode&lt;T&gt; node, T x) {\n    if (node == null) \n        return new TreeNode(x);\n    else if (x.compareTo(element) &lt;= 0) \n        node.left = insertAt(node.left, x);\n    else\n        node.right = insertAt(node.right, x);\n    return node;\n}\n</code></pre>"},{"location":"22HS/ADS/Daten%20Typen/Tree.html#knoten-loschen","title":"Knoten l\u00f6schen","text":"<ol> <li>Knoten finden</li> <li>Knoten l\u00f6schen</li> <li>Fall: der Knoten hat keine Kindern: Knoten einfach l\u00f6schen</li> <li>Fall: der Konten hat genau einen Teilbaum: Knoten l\u00f6schen und Referenz neu setzen</li> <li>Fall: der Knoten hat zwei Teilb\u00e4ume: Es muss ein Ersatz-Knoten gefunden werden. Daf\u00fcr muss der gr\u00f6sste Wert des linken Baums oder der kleinste Wert des rechtem Baum </li> </ol> <pre><code>private TreeNode&lt;T&gt; removeAt(TreeNode&lt;T&gt; node, T x) {\n    if (x.compareTo(node.element) == 0) { // delete this node\n        if (node.left == null) {\n            node = node.right; // no left subtree -&gt; case 1 or 2\n        } else if (node.right == null) {\n            node = node.left; // no right subtree -&gt; case 2\n        } else {\n            // two subtrees -&gt; case 3\n            // node.left is root of left subtree\n            node.left = findRepAt(node.left, node);\n        }\n    } else if (x.compareTo(node.element) &lt; 0) {\n        node.left = removeAt(node.left, x);\n        // search in left subtree\n    } else {\n        node.right = removeAt(node.right, x); // search in right subtree\n    }\n    return node;\n}\n\nprivate TreeNode&lt;T&gt; findRepAt(TreeNode&lt;T&gt; node, TreeNode&lt;T&gt; rep) {\n    if (node.right == null) {\n        // node is the rightmost node, the node that should be replaced gets its element\n        rep.element = node.element;\n        // remove rightmost node of left subtree (return value is the 'new' node)\n        node = node.left;\n    } else {\n        // more nodes on the right side of left subtree\n        node.right = findRepAt(node.right, rep);\n    }\n    return node;\n}\n</code></pre>"},{"location":"22HS/ADS/Daten%20Typen/Tree.html#vollstandig-balancierter-baum","title":"Vollst\u00e4ndig Balancierter Baum","text":"<p>Ein vollst\u00e4ndig balancierter Baum (oder vollst\u00e4ndig ausgeglichener Baum) hat, abgesehen von der untersten Ebenen, alle Ebenen vollst\u00e4ndig (mit Knoten) besetzt.</p> <p>Mit dieser Definition kommen einige Eigenschaft mit:</p> <ul> <li>Tiefe ist \\(\\log_2(n+1)\\)</li> <li>Bin\u00e4rsuche: \\(O(\\log_2(n))\\)</li> <li>Beim Einf\u00fcgen, L\u00f6schen und \u00c4ndern: \\(O(n)\\)</li> </ul>"},{"location":"22HS/ADS/Daten%20Typen/Tree.html#balancierte-baume","title":"Balancierte B\u00e4ume","text":"<p>Ein nicht-vollst\u00e4ndig balancierter Baum hat die maximale H\u00f6he von \\(c_1\\cdot \\log(n)+c_2\\) (\\(c_1\\) und \\(c_2\\) sind Konstante). Nun ist eine Suche immer \\(O(\\log(n))\\).</p> <p>Es gibt verschiedene M\u00f6glichkeiten die Bedingung \\(c_1\\cdot \\log(n)+c_2\\) umzusetzten.</p>"},{"location":"22HS/ADS/Daten%20Typen/Tree.html#avl-baum","title":"AVL-Baum","text":"<p>Ein AVL-Baum ist eine Art eines (nicht-vollst\u00e4ndig) balancierter Baum. Bei jedem Knoten gilt, dass sich die H\u00f6he der beiden Teilb\u00e4umen um h\u00f6chstens eins unterscheidet.</p> <p>Die Konstanten in \\(c_1 \\cdot \\log(n)+c_2\\) sind ca. \\(c_1 \\approx 1.44\\) und \\(c_2\\approx -0.33\\). Daraus geht, dass ein AVL durchschnittilch 44% h\u00f6her als ein vollst\u00e4ndiger ausgeglichener Baum ist.</p>"},{"location":"22HS/ADS/Daten%20Typen/Tree.html#rotationen","title":"Rotationen","text":"<p>Wenn ein Teilbaum um zwei h\u00f6her als der zweite Teilbaum ist, muss ein Teil des Baumes rotiert werden.</p> <p></p> <p>Es gibt aber Situationen, wo nach einer Rotation immer noch eine H\u00f6hendifferenz von zwei existiert. In diesen F\u00e4llen muss doppelt rotiert werden.</p> <p></p>"},{"location":"22HS/ADS/Daten%20Typen/Tree.html#b-baum","title":"B-Baum","text":"<p>Ein B-Baum ist ein vollst\u00e4ndig balancierten Baum, welcher optimiert ist f\u00fcr das Speichern auf Block-Speicher (HDD, SSD, Filesysteme).</p> <p>Jedes Element hat Schl\u00fcssel, bzw. Werte, und Verweisse auf weitere Bl\u00f6cke. Die Schl\u00fcssel sind sortiert. Zudem gilt, dass ein Block mit einem Verweiss zwischen dem Schl\u00fcssel \\(s_i\\) und \\(s_j\\), Werte zwischen \\(s_i\\) und \\(s_j\\) hat.</p> <p>Ein B-Baum hat die Ordnung \\(n\\), wenn die maximale Anzahl von Kinder  eines Nodes \\(n-1\\) ist und alle Knoten, ausser der Wurzel, mindestens \\(\\left\\lfloor\\frac{(n-1)} 2\\right\\rfloor\\) Knoten haben. Die Wurzel hat zwischen \\(1\\) und \\(n-1\\) Schl\u00fcssel.</p> <p>Die Tiefe des Baumes ist ca. \\(\\log_{\\text{Anzahl Verweisse}}(\\text{Anzahl Elemente})\\).</p> <p>Wenn Informationen nur in Bl\u00e4ttern gespeichert wird, wird dies ein B+-Baum genannt.</p> <p>Hier gibt es eine Visualisierung eines B-Tree: https://www.cs.usfca.edu/~galles/visualization/BTree.html</p>"},{"location":"22HS/ADS/Daten%20Typen/Tree.html#element-einfugen","title":"Element Einf\u00fcgen","text":"<p>Ein Schl\u00fcssel, bzw. Wert, wird immer in den Bl\u00e4ttern eingef\u00fcgt. Wenn ein Blatt voll ist, gibt es ein \u00dcberlauf. </p> <p>Bei einem \u00dcberlauf wird das mittlere Element des \u00fcberlaufendem Knoten geteilt und in den Vater-Knoten hochgezogen. Danach wird der zweite Teil in ein neues Geschwister-Element bewegt und an den Vater geh\u00e4ngt. Wenn das Vater-Element ebenfalls \u00fcberlauft, wiederholt sich dieser Prozess bis entweder ein Vater-Element nicht mehr \u00fcberlauft oder bei der Wurzel angelangt wird. </p> <p>Falls die Wurzel \u00fcberlauft, wird der selbe Prozess wiederholt, aber mit einem neuen Element als neue Wurzel. Der Baum wird dann um eins h\u00f6her.</p> <p></p>"},{"location":"22HS/ADS/Daten%20Typen/Tree.html#element-loschen","title":"Element L\u00f6schen","text":"<p>Wenn das zu l\u00f6schende Element in einem Blatt-Knoten ist und kein Unterlauf dabei entsteht, kann das Element einfach gel\u00f6scht werden.</p> <p>Wenn dabei ein Unterlauf entsteht (weniger als \\(\\frac n 2\\) Schl\u00fcsselt), kann ein Eltern-Element in das unterlaufene Kind gezogen werden und mit einem Geschwister-Element ersetzt werden.</p> <p></p> <p>Alternative k\u00f6nnen zwei Knoten verschmolzen werden:</p> <p></p> <p>Wenn das zu l\u00f6schende Element kein Blatt-Knoten ist, dann muss ein Ersatz-Element in den Kinder gefunden werden. Daf\u00fcr kann entweder das h\u00f6chste Element aus dem linken Kind oder das tiefste Element aus dem rechten Kind genommen werden. Wenn dabei ein Unterlauf entsteht, muss die Regel von oben angewendet werden.</p> <p></p>"},{"location":"22HS/ADS/Daten%20Typen/Tree.html#2-3-4-baum","title":"2-3-4-Baum","text":"<p>Der 2-3-4-Baum ist ein Spezialfall des B-Baums mit der Ordnung 4 (Jeder Knoten, ausser der Wurzel, hat zwei, drei oder 4 Kinder). Obwohl dies ein B-Baum ist, eignet sich diese Datenstruktur f\u00fcr Memory.</p>"},{"location":"22HS/ADS/Daten%20Typen/Tree.html#rot-schwarz-baum","title":"Rot-Schwarz-Baum","text":"<p>Ein Rot-Schwarz-Baum ist ein Spezialfall des 2-3-4-Baums, bei welchem die Knoten mit 2 oder mehr Schl\u00fcsseln durch Bin\u00e4rb\u00e4ume implementiert werden.</p> <p></p> <p>Es hat die maximale H\u00f6he von \\(2\\cdot \\log_2(n+2) - 2\\) und einen Such-Aufwand von \\(O(\\log(n))\\)</p> <p>Dabei vereint der Rot-Schwarz-Baum die Einfachheit des Bin\u00e4rbaumes und die Ausgeglichenheit des B-Baumes. Er ist weniger gut balanciert als ein AVL-Baum, aber Einf\u00fcg- und L\u00f6sch-Operationen sind schneller.</p>"},{"location":"22HS/CAE/Conditional.html","title":"Conditional","text":""},{"location":"22HS/CAE/Conditional.html#conditional-always-true","title":"Conditional: Always true","text":"<p>If I work late, I get tired.</p> <p>If the water is boiling/has boiled, it means the food is nearly ready.</p> <p>Form: If present, present</p> <p>States a fact, which is always true.</p>"},{"location":"22HS/CAE/Conditional.html#conditional-i","title":"Conditional I","text":"<p>If I find her address, I'll send her an invitation.</p> <p>I will send her an invitation if I find her address. (notice: no comma)</p> <p>Form: If + Simple Present, will-Future</p> <p>Conditional I refer to a future event. The condition is likely to be fulfilled.</p> <p><code>when</code> can be used instead of <code>if</code> to signal that it is not a question if it will happen but rather when it will happen.</p>"},{"location":"22HS/CAE/Conditional.html#conditional-ii","title":"Conditional II","text":"<p>If I found her address, I would send her an invitation.</p> <p>I would send her an invitation if I found her address.</p> <p>If I had the money, I could help you. (with the modal verb \"can\")</p> <p>Form: If + Simple Past, Conditional I (would + Infinitive)</p> <p>The conditional II is used when referring to a situation in the present, which would be possible, if things were differently. Like \"would would happen if ...\"</p>"},{"location":"22HS/CAE/Conditional.html#with-modal-verbs","title":"With modal verbs","text":"<p>If you get wet, you should change your clothes immediately.</p> <p>If you come early, we can discuss the problem together.</p> <p>A conditional II sentence can be used with either <code>should</code> or <code>can</code> when referring to the present.</p>"},{"location":"22HS/CAE/Conditional.html#conditional-past-event-with-results-in-the-present","title":"Conditional: Past event with results in the present","text":"<p>If Jim hadn't missed the plane, he would be here now.</p> <p>Form: If + past perfect, Conditional I (would + Infinitive)</p> <p>If an event in the past had happened, then would have a result in the p</p>"},{"location":"22HS/CAE/Conditional.html#conditional-iii","title":"Conditional III","text":"<p>If I had found her address, I would have sent her an invitation (but I hadn't found it...).</p> <p>I would have sent her an invitation if I had found her address.</p> <p>If you hadn't reminded me, I might have forgotten.</p> <p>Form: If + Past Perfect , Conditional II (would have + participial)</p> <p>The conditional III is used to refer to past situations. An action could have happened in the past if a certain condition had been fulfilled.</p>"},{"location":"22HS/CAE/Conditional.html#when","title":"When","text":"<p>When can also be used in a condition.</p> <p>When I was young, there were no houses here. (in the past)</p> <p>Nobody spoke when she came in to the room. (in the past)</p> <p>When you start the engine, there's a strange noise. (in the present)</p> <p>When the new park opens, I will go there every day. (in the future, like conditional I)</p> <p>When I have finished my homework, I'm going to phone Marita. (in the future)</p>"},{"location":"22HS/CAE/Linking%20Words.html","title":"Linking Words","text":"<p>https://7esl.com/linking-words/ </p> <p></p>"},{"location":"22HS/CAE/Listening.html","title":"Listening","text":""},{"location":"22HS/CAE/Listening.html#tips","title":"Tips","text":""},{"location":"22HS/CAE/Listening.html#distractors","title":"Distractors","text":"<ul> <li>Similar phonetic words    E.g. affected/effected</li> <li>Words already mentioned in the question and/or answers   Don't listen too </li> <li>Synonyms</li> <li>Negatives</li> </ul>"},{"location":"22HS/CAE/Passive%20Voice.html","title":"Passive Voice","text":"<p>Rita writes a letter \\(\\to\\) A letter is written by Rita.</p> <p>They build houses \\(\\to\\) Houses are being built.</p> <p>They say that women live longer than men. \\(\\to\\) Its said that women live longer than men.</p> <p>To transform a sentence to its passive version, the following has to be done:</p> <ol> <li>The objects becomes the subject of the sentence</li> <li>The verb is changed to <code>to be</code> + <code>past participle</code> (eg. was written)</li> <li>The subject becomes the object of the passive sentence or can be dropped</li> </ol> Active Tens Active Sentence Passive Sentence Simple present Rita writes a letter. A letter is written by Rita. Present continuous Rita is writing a letter. A letter is being written by Rita. Simple past Rita wrote a letter. A letter was written by Rita. Past continuous Rita was writing a letter. A letter was being written by Rita. Present perfect Rita has written a letter. A letter has been written by Rita. Future I Rita will write a letter. A letter will be written by Rita. Future II Rita will have writing a letter. A letter will be have been written by Rita. Going-To Rita is going to write a letter. A letter is going to be written by Rita. Conditional I Rita would write a letter. A letter would be written by Rita. Conditional II Rita would have written a letter. A letter would have been written by Rita."},{"location":"22HS/CAE/Report.html","title":"Report","text":""},{"location":"22HS/CAE/Report.html#musikfestwochen-winterthur","title":"Musikfestwochen Winterthur","text":"<ul> <li>description</li> <li>in winterthur</li> <li>different concerts (often free), both open air and in roofed venues</li> <li>for 12 days with 100 acts and 60'000 visitors</li> <li>Popular because: Free concert, known in the wider area of winterthur</li> <li>recommendation</li> <li>better corridors for people to reduce how clocked up the allys are</li> </ul> <p>This report should inform the reader about the annually organized music festival weeks, known as \"Musikfestwochen\", in Winterthur.</p> <p>As the summer vacation draws near its end, over 12 days 100 different acts perform on the five different stages at the \"Musikfestwoche\" in Winterthur. This massive event is held in the core of the old town of Winterthur, where multiple stages are built for the 12 days concert marathon. Most performances are free of charge in the streets of the city. People can just show up and enjoy the music, a beer and food from local restaurants with their friends and family. This is in no small part possible of the many volunteers, who stock up food, reconfigure the audio equipment, sell beverages and donate their time in other ways.</p> <p>In its latest iteration, it attracted more than 60'000 people. The success of the music festival weeks can be in part attributed to most of it being free for the general public. Additionally by possessing the old town of Winterthur for 12 days straight, it is unmissable by the residents of the larger Winterthurer area.</p> <p>One possible improvement would be to create better corridors for people to find the toilets and get food and drinks. The small alleys easily clock up by the shear amount of people, creating large and annoying queues. This could be partly avoided by labeling the directions of food stalls and toilets more clearly and route people in away, where they do not have to cross each other.</p>"},{"location":"22HS/CAE/Reported%20Speech.html","title":"Reported Speech","text":""},{"location":"22HS/CAE/Reported%20Speech.html#statements","title":"Statements","text":"<p>I don't want a party on my birthday. \\(\\to\\) I told my wife that I didn't want a party on my birthday.</p> <p>The weather was extremely bad. \\(\\to\\) The pilot commented the weather had been extremely bad.</p> <p>Normal statements use <code>that</code> between the the reported speech and who the speaker is. However, <code>that</code> can be omitted.</p>"},{"location":"22HS/CAE/Reported%20Speech.html#questions","title":"Questions","text":"<p>Are you Scottish? \\(\\to\\) She asked if I was scottish.</p> <p>Do you want a table near the window? \\(\\to\\) The waiter asked whether we wanted a table near the window.</p> <p>What do you want for your birthday? \\(\\to\\) My friend asked me, what I wanted for my birthday.</p> <p>Who have you invited? \\(\\to\\) Jim asked, who we had invited. (not \"Jim asked, who had we invited\")</p> <p>A yes-or-no question gets transformed by using <code>if</code> or <code>wheather</code>.  </p> <p>If a wh-word (like <code>what</code>, <code>where</code>,...) is present, it gets used instead of <code>if</code> or <code>wheather</code>.</p> <p>Importantly,  the sentence structure is subject + verb.</p>"},{"location":"22HS/CAE/Reported%20Speech.html#backshift","title":"Backshift","text":"<p>Because what the quoted person said was in the past, the verbs are backshifted by one tense to reflect that. </p> Original Tense Backshifted Tense present simple past simple present continuouse past continuouse present perfect simple past perfect simple present perfect continuouse past perfect continuouse past simple past perfect simple past continuouse past perfect continuouse future (will) future-in-the-past (would) past perfect past perfect (no change) <p>If what the person said is still true, then the no backshifting is necessary. (eg. I'm going to get married next year \\(\\to\\) She said, she is going to get married next year. In this case no backshifting is necessary if it is still the same year)</p>"},{"location":"22HS/CAE/Tenses.html","title":"Tenses","text":""},{"location":"22HS/CAE/Tenses.html#present","title":"Present","text":""},{"location":"22HS/CAE/Tenses.html#present-simple","title":"Present Simple","text":"<p>I work everyday.</p> <p>Water is wet.</p> <p>My plane leaves at eight o'clock.</p> <ul> <li>Something happens repeatedly</li> <li>A generalisation</li> <li>One action follows another</li> <li>A future action which follows a timetable</li> </ul>"},{"location":"22HS/CAE/Tenses.html#stative-verbs","title":"Stative Verbs","text":"<p>Stative verbs require the present simple tense and can't be used with any continuous tense.</p> <ul> <li>thoughts and opinions: agree, belive, doubt, guess, imagine, know, mean ,recognise, remember, suspect, think, understand</li> <li>feelings and emotions: dislike, hate, like, love, prefer, want, wish</li> <li>senses and perceptions: appear, be, feel, hear, look, see, seem, smell, taste</li> <li>possession and measurement: belong, have, measure, own, possess, weigh</li> </ul> <p>There are verbs which can be both stative and dynamic depending on the meaning in the context.</p> <ul> <li>be: When it's used in the continuous form, it means 'behaving' or 'acting'</li> <li><code>you are stupid</code> = it's part of your personality</li> <li><code>you are being stupid</code> = only now, not usually</li> <li>think: </li> <li><code>I think the coffee is great</code> = I'm of the opinion, that coffee is great</li> <li><code>I'm thinking about my next holiday</code> = I'm considering my next holiday</li> <li>have</li> <li><code>I have a car</code> = I own a car</li> <li><code>I'm having a party/a good time/a bath</code>  = having is part of an expression</li> <li>see</li> <li><code>I see a house</code> = I see something with my eyes</li> <li><code>I've been seeing my boyfriend for two years</code> = I've been dating somebody for two years</li> <li><code>I'm seeing Robert tomorrow</code> = I'm going to meet Robert tomorrow</li> </ul>"},{"location":"22HS/CAE/Tenses.html#present-continuous","title":"Present Continuous","text":"<p>Peter is phoning his grandparents (meaning: He is doing it right now)</p> <p>They are dating on Saturday (A plan, scheduled in advance)</p> <p>Julie is living in Paris for a few months</p> <ul> <li>Something is happening while speaking</li> <li>Something in the future which is already scheduled</li> <li>When something is temporary</li> </ul>"},{"location":"22HS/CAE/Tenses.html#present-perfect","title":"Present Perfect","text":"<p>I have been working (meaning: I started working earlier and stopped now)</p> <p>I've cleaned my room. (meainig: I cleaned my room and the result, the clean room, is now relevant)</p> <p>I just played football.</p> <p>We have lived in Canada since 2012. (Has an connection to the present, as \"we\" are still living there)</p> <ul> <li>An action which started in the past and continues up to the present </li> <li>A recently completed action</li> <li>Am action in the past which has a connection to the present</li> <li>An experience you had in the past but doesn't have to be recent</li> </ul> <p>Signal words: just, already, up to now, until now / till now, ever, (not) yet, so far, lately / recently</p>"},{"location":"22HS/CAE/Tenses.html#present-perfect-continuous","title":"Present Perfect Continuous","text":"<p>She has been writing for to hours. (Puts emphasis on the duration or course of action, but not on the result)</p> <p>I have been living here since 2001. (Action that recently stopped or is still going on)</p> <p>I have been working all afternoon. (finished action which influenced the present)</p> <p>Why are you so wet? - I've been washing my car.</p> <ul> <li>Emphasises the length of time of an recently stopped action or an action which is still going on</li> <li>How long an action has been happening</li> <li>A unwanted side effect</li> </ul> <p>Link Simple vs Continuous: https://www.ego4u.com/en/cram-up/grammar/prepersim-preperpro</p> <p>Signal words: how long since, for</p>"},{"location":"22HS/CAE/Tenses.html#present-perfect_1","title":"Present Perfect","text":""},{"location":"22HS/CAE/Tenses.html#past","title":"Past","text":""},{"location":"22HS/CAE/Tenses.html#past-simple","title":"Past Simple","text":"<p>I worked (meaning: I started and stopped working in the past)</p> <p>When I was having breakfast, the phone suddenly rang.</p> <ul> <li>An action which finished in the past and isn't connected to the present</li> <li>An action in the past which takes place in the middle of another action</li> <li>Signal Words:</li> <li>A time expression in the past</li> </ul>"},{"location":"22HS/CAE/Tenses.html#past-continuous","title":"Past Continuous","text":"<p>While I was working, I met a child hood friend.</p> <p>Kim was helping my parents moving today in the morning. (meaning: Kim was helping and might still be helping, but the speaker doesn't know)</p> <p>While she was preparing dinner,  he was washing the dishes.</p> <ul> <li>An action in the middle of another action (often with <code>while</code>)</li> <li>An action which started in the past at a certain time, but the speaker doesn't know if it was finished or not</li> <li>Two simultaneously actions in the past</li> </ul>"},{"location":"22HS/CAE/Tenses.html#past-perfect-simple","title":"Past Perfect Simple","text":"<p>Mary had read the book before she watched the film.</p> <p>If I had seen him, I would have talked to him (conditional sentence III)</p> <ul> <li>When an action (past perfect) which has already happened, is followed by another action</li> <li>Conditional Sentences Type III</li> </ul> <p>Signal words: already, just never, not yet, once, until that day</p>"},{"location":"22HS/CAE/Tenses.html#past-perfect-continuous","title":"Past Perfect Continuous","text":"<p>He had been talking for two hours straight when the bell finally rang.</p> <ul> <li>Puts emphasis on the course or duration of an action taking place before a certain time in the past</li> <li>But like the past perfect simple, it is used when talking about an action before another action</li> </ul>"},{"location":"22HS/CAE/Tenses.html#future","title":"Future","text":"<p>In the case the an action was scheduled, a sentence can be formed with the present continuous or the going to (I'm having a party. \\(\\a\\) I'm going to have a party.)</p>"},{"location":"22HS/CAE/Tenses.html#will-future","title":"Will-Future","text":"<p>It will rain later. (A prediction made by the speaker)</p> <p>I will bet on red (meaning: I decided while speaking that I will bet on read)</p> <p>If I study, I will pass the exams</p> <ul> <li>A prediction about the future</li> <li>When saying somthing about the future, which is almost certain</li> <li>When a decision was spontaneously made at the time of speaking</li> <li>The main clause in the type 1 if-clause</li> </ul>"},{"location":"22HS/CAE/Tenses.html#future-continuous","title":"Future Continuous","text":"<p>When I come to school, the other kids will be waiting for me</p> <ul> <li>An action which will be in progress at a certain time in the future (eg. when I come to school)</li> </ul>"},{"location":"22HS/CAE/Tenses.html#going-to-future","title":"Going To-Future","text":"<p>Mary and I are going to see a movie.</p> <ul> <li>When the speaker already decided to to an action in the future</li> <li>What the speaker thinks will happen</li> </ul>"},{"location":"22HS/CT1/01_Hardware.html","title":"Hardware","text":""},{"location":"22HS/CT1/01_Hardware.html#von-neumann-architeccture","title":"von Neumann Architeccture","text":"<p>Instructions und Data sind im selben Speicher gespeichert. Von dem datapath Modul werden arithmetik und Logik ausgef\u00fchrt.  Die Control Unit liest und interpertiert die Instruktionen.</p> <p></p>"},{"location":"22HS/CT1/01_Hardware.html#komponenten","title":"Komponenten","text":""},{"location":"22HS/CT1/01_Hardware.html#cpu","title":"CPU","text":"<p>Der CPU ist unterteilt in die  Datapath und die Control Unit (und weitere). </p> <p>Den Datapath enth\u00e4lt die ALU und die Registers. </p> <p>In der Control Unit f\u00fchrt den fetch-exec Zyklus aus und kann Data-Transfers zwischen Memory und Registern, Arithmetische und Logische Befehle und Spr\u00fcnge.</p> <p></p>"},{"location":"22HS/CT1/01_Hardware.html#memory","title":"Memory","text":"<p>Arbeitspeicher wird auf bytes genau adressiert</p>"},{"location":"22HS/CT1/01_Hardware.html#io","title":"I/O","text":"<p>Bei Festplatten oder SSDs wird in Blocks auf Daten zugegriffen.</p>"},{"location":"22HS/CT1/01_Hardware.html#system-bus","title":"System-Bus","text":"<p>Der System-Bus enh\u00e4lt:</p> <ul> <li>Address-Linien: Welche Adresse geschrieben oder gelesen wird</li> <li>Data-Linen: Die Daten</li> <li>Control-Signal: Ob geschrieben oder gelesen werden soll</li> </ul>"},{"location":"22HS/CT1/01_Hardware.html#cpu-komponente","title":"CPU-Komponente","text":""},{"location":"22HS/CT1/01_Hardware.html#register","title":"Register","text":"<p>Es gibt 16 Registern, davon sind R0 - R12 f\u00fcr allgemeine Daten zuverf\u00fcgung. Der Stack Pointer (R13) zeigt auf die letzte Adresse des Stacks, der Link Register (R14) zeigt auf die letzte R\u00fccksprung-Adresse, bei Funktionen und der Program Counter (R15) zeigt auf die n\u00e4chste Instruktion, welche ausgef\u00fchrt werden soll.</p> <p></p>"},{"location":"22HS/CT1/01_Hardware.html#arithmetic-logic-unit-alu","title":"Arithmetic Logic Unit (ALU)","text":"<p>Die ALU hat zwei 32-bit Inputs und ein 32-bit Output. Die ALU kann Integer-Arithmetik (Plus, Minus, Multiplikation, Division), ebenfalls k\u00f6nnen And, Or, Not, Xor, right und left Shiften ausgef\u00fchrt werden.</p> <p> </p>"},{"location":"22HS/CT1/01_Hardware.html#flag-register-apsr","title":"Flag Register (APSR)","text":"<p>In diesem Flag stehen Status-Informationen zur letzten Operation</p> <p></p>"},{"location":"22HS/CT1/01_Hardware.html#instruction-set","title":"Instruction Set","text":"<p>Es gibt mehrere Arten von Instructions:</p> <ul> <li>Data transfer</li> <li>Daten von einem Register in ein anderes Register kopieren</li> <li>Daten vom Speicher in Register laden</li> <li>Vom Register in den Speicher speichern</li> <li>Data Processing</li> <li>Arithmetische Operationen</li> <li>Ligische Operatione</li> <li>Shift / Rotate Operationen</li> <li>Control Flow:</li> <li>Branches (Jumps)</li> <li>Function calls</li> <li>Weiteres Instruktionen</li> </ul> <p></p>"},{"location":"22HS/CT1/01_Hardware.html#program-execution","title":"Program Execution","text":""},{"location":"22HS/CT1/01_Hardware.html#memory-map","title":"Memory Map","text":"<ul> <li>Flash is non-volatile memory</li> <li>CCM RAM stands for Core Coupled Memory and is very fast</li> </ul>"},{"location":"22HS/CT1/01_Hardware.html#c-integer-typen","title":"C Integer Typen","text":"<p>Die folgenden Typen sollen in C verwendet werden, da \"normale\" Typen, wie <code>int long</code> Prozessor spezifisch sind.</p> <p></p>"},{"location":"22HS/CT1/01_Hardware.html#multi-byte-integers","title":"Multi-byte Integers","text":"<p>Bei Little Endian ist das Least-Significant-Byte (LSB) an der tiefereren Adresse. ST ARM ben\u00fctzt dieses Format.</p> <p>Bei Big Endian ist das Most-Significant-Byte (MSB) an der tiefsten Adresse.</p> <p>Im folgenden Beispiel steht die Zahl <code>0xA1B2'C3D4</code>.</p> <p></p> <p>Adressen werden aligniert. Half-Words werden auf gerade Adressen aligniert. Words werden auf durch 4 teilbare Adressen aligniert.</p>"},{"location":"22HS/CT1/01_Hardware.html#object-file","title":"Object-File","text":"<p>1111 + 1 = 0000 C=1 O=0</p> <p>0111 + 1 = 1000 C = 0 O = 1</p> <p>1000 - 1 = 0111 C = 0 O =1</p>"},{"location":"22HS/CT1/02_Assembler.html","title":"Assembler","text":"<p>Arm is little endian, meaning that the MSB comes first, the LSB comes last.</p>"},{"location":"22HS/CT1/02_Assembler.html#basic-structure","title":"Basic Structure","text":"<pre><code>                ; code area\n                AREA    MyCode, CODE, READONLY\n\n                ENTRY\nstart           MOVS    R4, #12\n                ADDS    R3, R4, #5\n                B start\n\n                ; data area (writable)\n                AREA    MyData, DATA, READWRITE\nvar_byte        DCB     0x0A, 0x12, 0xFF\nvar_halfword    DCW     0x1234, 0xEEFF\nvar_word        DCD     0x88776655\nspace1          SPACE   256 ; allocates 256 bytes\nspace2          %       256 ; same as above\n\n                ; stack\n                AREA    STACK, NOINIT, READWRITE\nstack_mem       SPACE   0x00000400 ; 0x0000'0400\n</code></pre>"},{"location":"22HS/CT1/02_Assembler.html#data-types","title":"Data Types","text":"<p>There are bytes (<code>DCB</code> = 1 byte), halfwords (<code>DCW</code> = 2 bytes) and words (<code>DCD</code> = 4 bytes). They are layed out with LSB in the lowest address (little endian)</p> <p>For example, <code>0x1A2B'3C4D</code> is stored as </p> <p>Another restriction is that halfwords addresses have to be divisable by 2 (address ends in even number), and word-addresses by 4 (address ends in <code>0</code>, <code>4</code>, <code>8</code> or <code>C</code>)</p> <p></p> <pre><code>        AREA    example1, DATA, READWRITE\nvar1    DCB     0x1A\nvar2    DCB     0x2B, 0x3C, 0x4D, 0x5E\nvar3    DCW     0x6F70, 0x8192\nvar4    DCD     0xA3B4C5D6\n</code></pre> <p>The code above produces the following memory map:</p> <p></p>"},{"location":"22HS/CT1/02_Assembler.html#assembler-instructions","title":"Assembler Instructions","text":""},{"location":"22HS/CT1/02_Assembler.html#equ","title":"<code>EQU</code>","text":"<p><code>EQU</code> creates a constant like <code>#define</code> does in C.</p> <pre><code>MY_CONST    EQU 0x12 ; creates a constant named MY_CONST with the value 0x12\n</code></pre>"},{"location":"22HS/CT1/02_Assembler.html#ldr","title":"<code>LDR</code>","text":"<p><code>LDR</code> can be used to load data from memory. There are multiple forms how <code>LDR</code> can be used:</p> <ul> <li><code>LDR R5, mylita</code>   The value at the label <code>mylita</code> is loaded. The instruction is translated to <code>LDR R5, [PC, #...]</code>  where the offset cannot be too large</li> <li><code>LDR R5, =0x2000</code>   This will allocate 4 bytes of space for <code>0x2000</code> in the literal pool and translate the instruction to <code>LDR R5, [PC, #...]</code></li> <li><code>LDR R5, =CONST_A</code> <code>CONST_A</code> is defined by a <code>EQU</code> statement and will be replaced while compiling resulting in <code>LDR R5, =0x2000</code></li> <li><code>LDR R5, =mylita</code>   This will allocate 4 bytes of space for the address of <code>mylita</code> in the literal pool and translate the instruction to <code>LDR R5, [PC, #...]</code>. The <code>#...</code> is stored in 8 bits and can address up to the address of <code>4 x 255 = 1020</code> </li> <li><code>LDR R5, [PC, #...]</code>   This will load a byte from the address <code>PC + #...</code>. The intermediate needs to be word aligned.</li> </ul> <p>The offset can be between <code>0</code> and <code>0x7C</code> </p> <p>There are also <code>LDRSB</code> for loading and extending signed bytes and <code>LDRSH</code> for loading and extending half words.</p> <p>The same instruction (except for extending signed integers) also exists for storing data.</p>"},{"location":"22HS/CT1/02_Assembler.html#airthmetic","title":"Airthmetic","text":"<p>The carry bit has to meanings depending if adding or subtracting numbers:</p> <ul> <li>Adding: \\(C=1\\) means an overflow (with unsigned integers)</li> <li>Subtraction: \\(C=0\\) means an underflow (with unsigned integers)</li> </ul> <p>When dealing with signed integers then the number only overflowed when \\(V=1\\).</p>"},{"location":"22HS/CT1/02_Assembler.html#multi-word-arithmetic","title":"Multi-Word Arithmetic","text":"<p>If 32bit integers are too small then the <code>ADCS</code> and <code>SBCS</code> instruction can help to do multi-word arithmetic.</p> <p>The following will add   <code>R1R2R3 + R4R5R6</code>:</p> <pre><code>ADDS    R1, R1, R4\nADDC    R2, R2, R5\nADDC    R3, R3, R6\n</code></pre> <p></p> <p>The <code>ADCS Rdn, Rm</code> instruction can be translated to \\(Rdn=Rdn + Rm + C\\)</p> <p>The same is possible for subtractions:</p> <pre><code>SUBS    R1, R1, R4\nSBCS    R2, R2, R5\nSBCS    R3, R3, R6\n</code></pre> <p></p> <p>The <code>SBCS Rdn, Rm</code> can be translated to \\(Rdn = Rdn - Rm - \\mathrm {not}(C)=Rdn + \\mathrm{not}(Rm) + C\\)</p>"},{"location":"22HS/CT1/02_Assembler.html#multiplication","title":"Multiplication","text":"<p>Only unsigned integer multiplication is supported on the Cortex-M0.</p>"},{"location":"22HS/CT1/02_Assembler.html#branches","title":"Branches","text":""},{"location":"22HS/CT1/02_Assembler.html#structures","title":"Structures","text":""},{"location":"22HS/CT1/02_Assembler.html#ifs","title":"Ifs","text":"<pre><code>    ; if nr &gt;= 0\n    CMP R1, #0x00\n    BLT else ; instead of &gt;=, this inverts it to &lt; but jumps to the else part\n\n    ; if part\n    MOVS R2,#1  ; isPositive = 1\n    B end\n\nelse ; else part\n    MOVS R2, #0 ; isPositive = 0\nend\n</code></pre>"},{"location":"22HS/CT1/02_Assembler.html#do-while","title":"Do-While","text":"<pre><code>    ; sum is in R2\n    ; nr is in R1\n    MOVS    R2, #0 ; init sum\n\nloop ; do-while body\n    ADDS    R2, R2, R1\n\n    ; condition\n    CMP     R2, #100\n    BLT     loop\n</code></pre>"},{"location":"22HS/CT1/02_Assembler.html#while","title":"While","text":"<pre><code>    ; prod is in R2\n    ; nr is in R1\n    MOVS    R2, #1\n\n    ; jump to condition before executing the body\n    B       cond\n\nloop ; while-body\n    MULS    R2, R1, R2\n\ncond ; condition\n    CMP     R2, #100\n    BLT     loop\n</code></pre>"},{"location":"22HS/CT1/02_Assembler.html#jump-tables-switch","title":"Jump Tables / Switch","text":"<pre><code>uint32_t result, n;\nswitch (n) {\ncase 0:\n    result += 17;\n    break;\n\ncase 1:\n    result += 13;\n    //fall through\n\ncase 3: \ncase 5:\n    result += 37;\n    break;\n\ndefault:\n    result = 0;\n}\n</code></pre> <pre><code>NR_CASES        EQU     6\ncase_switch     CMP     R1, #NR_CASES\n                BHS     case_default    ; R1 &gt;= 6 -&gt; go to case_default\n                LSLS    R1, #2          ; * 4\n                LDR     R7, =jump_table\n                LDR     R7, [R7, R1]\n                BX      R7              ; go to label\n\ncase_0          ADDS    R2, R2, #17\n                B       end_sw_case\n\ncase_1          ADDS    R2, R2, #13\n                ; fall through\n\ncase_3_5        ADDS    R2, R2, #37\n                B       end_sw_case\n\ncase_default    MOVS    R2, #0\nend_sw_case\n\n\n                AREA    myData, DATA, READWRITE\njump_table      DCD     case_0\n                DCD     case_1\n                DCD     case_default\n                DCD     case_3_5\n                DCD     case_default\n                DCD     case_3_5\n</code></pre>"},{"location":"22HS/CT1/02_Assembler.html#interrupts","title":"Interrupts","text":"<p>When code wants to react to some event on the system (like a button that's being pressed) then there are two ways to implement this. Either the code can constantly poll the state, checking over and over again if the event occurred. This, however, is inefficient and results in a lot of busy waiting, but it is simple, implicitly synchronised and deterministic.</p>"},{"location":"22HS/CT1/02_Assembler.html#address-table","title":"Address Table","text":"<p>The following is a table of all important addresses for handling interrupts:</p> Name Address Purpouse <code>SETENA0</code> <code>0xE000E100</code> Enable interrupt <code>CLRENA0</code> <code>0xE000E180</code> Disable interrupt <code>CLRPEND0</code> <code>0xE000E280</code> Clearing pending interrupt <code>SETPEND0</code> <code>0xE000E200</code> Triggering interrupt by software <code>ACTIVE0</code> <code>0xE000E300</code> Read-only memory to check if interrupt is active <code>PL_IRQ0</code> <code>0xE000E400</code> The 4 byte priority level of each interrupt (lower level = higher prio)"},{"location":"22HS/CT1/02_Assembler.html#system-exceptions-and-interrupts","title":"System Exceptions and Interrupts","text":"<p>Another solutions are interrupts: Arm processor differentiate between system exceptions and interrupts. System exceptions are errors created by events from the CPU (like a fault or the restart of the processor). Interrupts are created by events from peripherals or by a library.</p> <p>The following system exceptions exists. The interrupts from 0 until 239 are defined and are located after the <code>SYSTICK</code> system exception. (eg. <code>IRQ14</code> has the exception number <code>30</code> at the address  <code>120=0x78</code>):  $$ IrqNr+16=ExceptionNr $$ </p>"},{"location":"22HS/CT1/02_Assembler.html#interrupt-table","title":"Interrupt Table","text":"<p>In the interrupt table is written where the processor has to jump if an interrupt or a system exception occurred. The interrupt table starts at the address <code>0x00</code>, but there is no system exception 0. This is because at the address <code>0x00</code> the initial stack pointer is written. This results in when the CPU starts, it first initialise the stack with the initial stack pointer and then calls the reset handler which coincidentally is at the next address.</p>"},{"location":"22HS/CT1/02_Assembler.html#example","title":"Example","text":"<pre><code>main        \n            LDR     R0, =0xE000E100 ; address to enable the interrupt handling\n            MOVS    R1, #1\n            LSLS    R1, R1, #26     ; bit of IRQ26\n            STR     R1, [R0]\n\nISR_Handler \n            LDR     R0, =0xE000E280 ; address to clear pending interrupt\n            MOVS    R1, #1\n            LSLS    R1, R1, #26     ; bit of IRQ26\n            STR     R1, [R0]\n</code></pre>"},{"location":"22HS/CT1/02_Assembler.html#execution-of-an-interrupt-or-system-exception","title":"Execution of an Interrupt or System Exception","text":"<p>When an exception occurs then the CPU saves the register <code>R0</code> - <code>R3</code>, <code>PC</code>, <code>LR</code>, <code>R12</code>,  and <code>xPSR</code>. This allows the ISR function to be coded like a regular function. </p> <p></p> <p></p> <p>The cpu checks when calling <code>BX LR</code> if the magic value <code>EXC_RETURN=0xFFFF'FFF9</code> is found in the <code>LR</code> register. If this is the case, then the previously saved registers are restored from the stack.</p> <p>The following image shows a interrupt vector table.</p> <p></p> <p>The <code>startup_ctboard.s</code> initialises  this interrupt vector table and sets default handler (marked with <code>[WEAK]</code> to tell the linker only use the default handler if no other definition exists).</p> <p>Example:</p> <pre><code>; Vector Table Mapped to Address 0 at Reset\nAREA RESET, DATA, READONLY\n__Vectors   DCD __initial_sp        ; Top of Stack\n            DCD Reset_Handler       ; Reset Handler\n            DCD NMI_Handler         ; NMI Handler\n            DCD HardFault_Handler   ; Hard Fault Handler\n            ...\n            ....\n            ; Interrupts\n            DCD IRQ0_Handler        ; ISR for IRQ0\n            DCD IRQ1_Handler        ; ISR for IRQ1\n            DCD ...\n</code></pre> <p>The following is a diagram showing the states of the interrupt handler. </p> <p></p> <ul> <li>Inactive: Exception is not active and not pending</li> <li>Pending: Exception occurred and is waiting to be handled by the CPU</li> <li>Active: Exception is being handled and has not finished yet</li> <li>Active and Pending: An exception is being handled by the CPU and another exception occurred and is waiting to be handled.</li> </ul> <p>To model all possible states, two bits are necessary, one for if an interrupt is pending and one if the interrupt is active.</p> <p>The following diagram shows the two bits and an interrupt request bit. When the <code>IRQn</code> goes to high and interrupt occured then the Interrupt Controller sets <code>IPn</code> to high. As soon as the CPU has finished the context switch, <code>IAn</code> will be set to hight by the <code>CPU</code> and the interrupt controller will set <code>IPn</code> to high. The <code>IRQn</code> needs to be reset by the interrupt handler.</p> <p> </p> <p>If the interrupt handler doesn't reset the <code>IRQn</code> then the interrupt controller will think that another interrupt is pending and the CPU is caught in an infinite loop.</p> <p></p>"},{"location":"22HS/CT1/02_Assembler.html#activate-and-deactivate-all-interrupts","title":"Activate and Deactivate all Interrupts","text":"<p><code>PRIMASK</code> is a Bit, which when set to <code>0</code> , all interrupts are disabled. The bit can be set with <code>CPSID i</code> and unset <code>CPSIEi</code>.</p>"},{"location":"22HS/CT1/02_Assembler.html#activate-and-deactivate-specific-interrupts","title":"Activate and Deactivate specific Interrupts","text":"<pre><code>; enables IRQ16\nMOVS    R1, #1\nLSLS    R1, R1, #28         ; enables IRQ28\nLDR     R0, =0xE000E100     ; loads memory to enable interrupts\nSTR     R1, [R0]            ; \n\n; disables IRQ16\nMOVS    R1, #1\nLSLS    R1, R1, #16         ; enables IRQ28\nLDR     R0, =0xE000E180     ; loads memory to disable interrupts\nSTR     R1, [R0]            ; \n</code></pre>"},{"location":"22HS/CT1/02_Assembler.html#control-interrupts","title":"Control Interrupts","text":"<p>By writing to the bit of the IRQ number, a interrupt can be created by software (<code>0xE000E200</code>), the pending request can be deleted (<code>0xE000E280</code>) or test if an interrupt is active ( <code>0xE000E300</code>).</p>"},{"location":"22HS/CT1/02_Assembler.html#priority-levels","title":"Priority Levels","text":"<p>Each exception has a priority level. A lower priority level translates to a higher priority (<code>-1</code> has a higher priority than <code>10</code>)</p> <p>To set the priority a 4-bit value (on the Cortext-M0 a 2-bit value) can be written to an address between <code>0xE000'E400</code> and <code>0xE000'E4EC</code>.  Only interrupts can be prioritised manually, system exceptions already have predefined priorities.</p> <p></p> <p></p> <p>In the diagram above, a situation where either <code>ISR0</code> or <code>ISR2</code> has been prioritised. If <code>ISR2</code> is prioritised then <code>ISR0</code> is paused (but its active bit is still set) and <code>ISR2</code> is run.</p> <p>Below is a more complete diagram. It assumes the following priorities: <code>RQ0</code> <code>PL0</code> = <code>0x2</code>, <code>IRQ1</code> <code>PL1</code> = <code>0x3</code> and <code>IRQ2</code> <code>PL2</code> = <code>0x1</code></p> <p></p>"},{"location":"22HS/CT1/02_Assembler.html#nested-vectored-interrupt-controller-nvic","title":"Nested Vectored Interrupt Controller (NVIC)","text":"<p>The NVIC handles part of the complexity of calling interrupt handlers.</p> <p></p>"},{"location":"22HS/CT1/02_Assembler.html#interrupts-in-c","title":"Interrupts in C","text":"<p>There is a library for C to allow the user to know have to use registers directly but rather just call functions.</p> <p></p>"},{"location":"22HS/CT1/02_Assembler.html#data-consistency","title":"Data Consistency","text":"<p>To fix this issue, the two <code>write_byte(...)</code> calls should be wrapped in <code>__disable_irq()</code> and <code>__enable_irq()</code>.</p>"},{"location":"22HS/CT1/03_Functions.html","title":"Functions","text":"<p>With <code>BL mark</code> the processor will jump to the given <code>mark</code> and store the address of the caller in the link register <code>LR</code>. With <code>BLX Rx</code> the processor will jump to the address in the given register and storing the address in the link register. When the subroutine is done, it can return with <code>BX LR</code></p> <pre><code>                    BL  display_routine\n\ndisplay_routine\n                    PUSH {LR}       ; save LR register\n                    ; do display stuff\n                    POP {PC}        ; restore LR register into the PC register\n</code></pre>"},{"location":"22HS/CT1/03_Functions.html#stack","title":"Stack","text":"<p>With <code>PUSH</code> can the contents of registers be pushed onto the stack. With <code>POP</code> can register be popped </p> <p>The following example shows <code>PUSH {R0}</code></p> <p></p>"},{"location":"22HS/CT1/03_Functions.html#parameters","title":"Parameters","text":"<p>This tables shows the trade-offs of different techniques for passing a parameter. It also partly explains why AAPCS is designed in the way it is.</p> Register Global Variable Stack Speed ++ -- -- Flexibility -- -- ++ Maintanance -- -- ++ Recursion -- -- ++"},{"location":"22HS/CT1/03_Functions.html#pass-by-value","title":"Pass-by-value","text":"<pre><code>AREA exData,DATA,...\n\nAREA exCode,CODE,...\n\n        MOVS R1,#0x03\n        BL double\n        MOVS ...,RO\n\ndouble\n        LSLS RO,R1, #1  \n        BX LR\n</code></pre>"},{"location":"22HS/CT1/03_Functions.html#pass-by-reference","title":"Pass-by-reference","text":"<pre><code>TLENGTH EQU 16\n\nAREA exData,DATA,...\nplTable SPACE TLENGTH\n\nAREA exCode,CODE, ...\n\n        LDR RO,=plTable\n        MOVS R1,#TLENGTH\n        BL doubleTableValues\n\ndoubleTableValues\n        MOVS R2,#0\n\nloop    LDRB R4,[RO,R2]\n        LSLS R4,R4,#1\n        STRB R4, [RO,R2]\n        ADDS R2,#1\n        CMP R2,R1\n        BLO loop\n        BX LR\n</code></pre>"},{"location":"22HS/CT1/03_Functions.html#pass-by-global-variables","title":"Pass-by-global-variables","text":""},{"location":"22HS/CT1/03_Functions.html#pass-by-stack","title":"Pass-by-stack","text":""},{"location":"22HS/CT1/03_Functions.html#arm-architecture-procedure-call-standard-aapcs","title":"ARM Architecture Procedure Call Standard (AAPCS)","text":"<p>The registers R0 - R3 can be used for passing arguments or return values. The callee can change these. R4-R11 have to be preserved. If a function changes these then their original value has to be restored before the function jumps back.</p> <p></p> <p>The caller has to do the following:</p> <p></p> <p>The callee has the following tasks:</p> <p></p> <p>The stack might look like this if the contract specified above is met. A stack frame is a part of the stack </p> <p></p>"},{"location":"22HS/CT1/03_Functions.html#local-variables","title":"Local Variables","text":""},{"location":"22HS/CT1/04_Toolchain.html","title":"Tool Chain","text":"<p>A tool chain are the tools required to build an executable from the source code. There are both native and cross compiler tool chain. Native tool chains run on the same environment which the software will run on later, while a cross compiler creates an executable which runs in a different environment.</p>"},{"location":"22HS/CT1/04_Toolchain.html#modules","title":"Modules","text":"<p>Each c (or assembler) file is viewed as a module and is processed one-by-one by the preprocessor, compiler and the assembler. All compiled modules are combined by the linker.</p>"},{"location":"22HS/CT1/04_Toolchain.html#c","title":"C","text":"<p>The two rules of C:</p> <ol> <li>Names declared before use</li> <li>One definition rule    A variable or function can be declared multiple times, but can only be defined once in the same scope</li> </ol>"},{"location":"22HS/CT1/04_Toolchain.html#declaration-vs-definition","title":"Declaration vs Definition","text":"<p>The following code only defines the names of a funciton, variable or struct. But their details aren't known to the compiler when compiling this module. (E.g. accessing a field of a struct wouldn't be possible)</p> <pre><code>uint32_t square(uint32_t v);    // square function defined elsewhere\nextern uint32_t counter;        // counter variable defined elsewhere\nstruct S;                       // struct S type defined elsewhere\n</code></pre> <p>The following code defines the a function, variable or struct with their details.</p> <pre><code>uint32_t square(uint32_t v) { ... }     // square function definition\nuint32_t counter;                       // counter variable definition\nstruct S { ... };                       // struct S type definition\n</code></pre>"},{"location":"22HS/CT1/04_Toolchain.html#header-files","title":"Header Files","text":"<pre><code>// square.h\n#ifndef _SQUARE_H_ // incl.-\n#define _SQUARE_H_ // guard\n// declaration of square\nuint32_t square(uint32_t v);\n#endif // end of incl.-guard\n</code></pre> <p>The matching c file is:</p> <pre><code>// square.c\n#include \"square.h\"\n// definition of square\nuint32_t square(uint32_t v)\n{\n    return v*v;\n}\n</code></pre>"},{"location":"22HS/CT1/04_Toolchain.html#linkage-reference","title":"Linkage Reference","text":"C names ASM Symbols OBJ Symbols AXF Executables external linkage (export) <code>extern</code> (default) <code>EXPORT</code>-labels for exported labels Global external linkage (import) <code>extern</code>(default) <code>IMPORT</code>-labels for imported labels References internal linkage with <code>static</code> normal labels Local no linkage local variables - -"},{"location":"22HS/CT1/04_Toolchain.html#libraries","title":"Libraries","text":"<p>Libraries can be dynamically or statically linked. </p> <p>A static linked executable contains all required libraries. While this results in a bigger file as every executable needs to include the same libraries, it also prevents DLL-Hell.</p>"},{"location":"22HS/CT1/04_Toolchain.html#linker","title":"Linker","text":"<p>The linker has three tasks: merging code and data sections, resolving symbols to other modules and relocating address.</p>"},{"location":"22HS/CT1/04_Toolchain.html#object-and-elf-files","title":"Object and ELF Files","text":"<p>Object files are the input to the linker and contain the compiled data of a module:</p> <ul> <li>Code section   Code and constants of a module. The addresses start at <code>0x00</code></li> <li>Data section   All global variables of the module. The addresses start at <code>0x00</code></li> <li>Symbol table   All symbols and their attributes (e.g. global, local, reference, etc)</li> <li>Relocation table   Which and how bytes of the data and code sections need to be adjusted after merging the sections</li> </ul> <p>The executable and linkable format (ELF) can contain code sections, data sections and symbol table as well, which might get used on a system with a loader (like linux).</p>"},{"location":"22HS/CT1/04_Toolchain.html#example-of-linking-an-object-file","title":"Example of Linking an Object File","text":"<p>The following shows an example of the object files squere.o and main.o:</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"22HS/CT1/04_Toolchain.html#merging","title":"Merging","text":"<p>In the first step <code>square.o</code> and <code>main.o</code> are merged. Code sections and data sections are just stitched together. But references within the code sections are still wrong.</p> <p></p>"},{"location":"22HS/CT1/04_Toolchain.html#resolving","title":"Resolving","text":"<p>In this step references are resolved. This can be seen in the following symbol table where the reference to <code>square</code> has been replaced. However, the relative addresses are not relocated and start at <code>0x00</code>.</p> <p></p>"},{"location":"22HS/CT1/04_Toolchain.html#relocation","title":"Relocation","text":"<p>In this steps all relative addresses are recalculated to global addresses. This affects the addresses of sections, symbols and offsets. This is done with \\(GlobalAddress=GlobalBase+MergeOffset+ModuleRelativeOffset\\)</p> <ul> <li>The <code>GlobalBase</code> is the base address of where the content of the ELF file are loaded. For the STM32 the internal SRAM starts at <code>0x2000'0000</code></li> <li>The <code>MergeOffset</code> is the offset of the module. E.g. the merge offset of <code>square.o</code> is <code>0x0000'001C</code>.</li> <li>The <code>ModuleRelativeOffset</code> is the offset within the module</li> </ul> <p></p>"},{"location":"22HS/CT1/05_Optimierung.html","title":"Optimierung","text":"\\[ \\begin{align} InstructionDelay&amp;=ReadInstruction+DecodeInstruction+ExecuteInstruction\\\\ MaxStageDelay&amp;=\\max \\{ReadInstruction, DecodeInstruction, ExecuteInstruction\\}\\\\ IPSdWithPipelinging&amp;=\\frac 1{InstructionDelay}\\\\ IPSWithoutPipelinging &amp;= \\frac 1 {MaxStageDelay} \\end{align} \\] <p>(IPS = Instructions per Seconds)</p>"},{"location":"22HS/CT1/05_Optimierung.html#architekturen","title":"Architekturen","text":"<ul> <li>von Neumann Architecture   This architecture shares the same system bus between the processor, memory and I/O. Additionally, the same memory holds the program and data.   </li> <li>Harvard Architecture   In this architecture the processor has a separate bus to connect to the memory holding the program. The data memory and I/O are connected through another bus.   </li> </ul> <p>Because of the separate buses the Harvard architecture can be faster, but also more complex and more expensive.</p>"},{"location":"22HS/CT1/05_Optimierung.html#instruction-set-architecture","title":"Instruction Set Architecture","text":"<ul> <li>RISC (Reduced Instruction Set Computer)   In RISC only data in register can be processed</li> <li>CISC (Complex Instruction Set Computer)   One operand may be a memory location. Reducing the amount of instruction needed for a program, but increasing the number of instruction the CPU needs to be able to execute.   Often CISC have variable instructions which puts an additional burden on the CPU.</li> </ul> <p>The simplicity of RISC results in simpler and faster instruction decoding. Compilers can also be more effective optimized because the instructions are more limited and more generic. Pipelining also becomes simpler and shorter.</p> <p>On the other hand, CISC needs less memory for complex instructions and short programms can be faster with less memory access.</p> <p></p>"},{"location":"22HS/CT1/05_Optimierung.html#pipelining","title":"Pipelining","text":"<p>Instead of fetching, decoding and executing each instruction in sequence, the CPU can already start fetching the next instruction while decoding the current instruction.</p> <p></p> <p>However, if multiple stage run simultaneously then each instruction needs to be finished at the same time.   </p> <p></p> <p>In the example above, without pipelining the CPU could execute \\(\\frac {1s}{15ns} = 83.3\\cdot 10^6 \\frac T {sec}\\). With pipelining the cpu can execute \\(\\frac {1s}{5ns} = 200\\cdot 10^6 \\frac T {sec}\\). This results in a 140% increase in performance. $$ InstructionsPerSecond&amp;=\\frac 1{InstructionDelay}\\ InstructionsPerSecond &amp;= \\frac 1 {MaxStageDelay} $$ </p>"},{"location":"22HS/CT1/05_Optimierung.html#problems","title":"Problems","text":"<p>In the optimal case, the CPU can move each instruction one stage forward per cycle.</p> <p></p> <p>But not each instruction takes only one cycle, like <code>LDR</code> or instruction changing the <code>PC</code>. This can be mitigated to a degree by out of order execution. By duplicating some elements of the execution unit, the CPU can reorder the <code>LDR</code> instruction with an earlier instruction which can run simultaneously. When the requested value is required, the value will already be loaded.</p> <p></p>"},{"location":"22HS/CT1/05_Optimierung.html#branching","title":"Branching","text":""},{"location":"22HS/CT1/05_Optimierung.html#reducing-stalls","title":"Reducing Stalls","text":"<ul> <li>Reduce the number of conditionals by e.g. fuse loops together</li> <li>Branch prediction stores the last decision and assumes that the next will be the same and preload those</li> <li>Instruction prefetching fetches instructions before they are used to use the system bus better and enable out of order execution</li> </ul>"},{"location":"22HS/Communication3/COM3.html","title":"COM3","text":""},{"location":"22HS/Communication3/COM3.html#4-principles-of-negotiation","title":"4 Principles of Negotiation","text":"<ol> <li>Separate the people from the problem</li> <li>focus on interests, not positions</li> <li>invent options for mutual gain</li> <li>insist on objective criteria</li> </ol>"},{"location":"22HS/Communication3/COM3.html#summary","title":"Summary","text":"<p>Das Ziel einer Zusammenfassung ist es, wesentliche Aussagen, zentrale Argumente und Grundaufbau eines Textes in knapper Form darzustellen. Eine Zusammenfassung muss ohne den grundlegenden Text verst\u00e4ndlich sein.</p> <p>Es sollten folgende Frage beantwortet werden. Jenach Textsorte und Zielpublikum, gibt es ein Schwerpunkt auf gewisse Frage.</p> <ul> <li>Was? (Thema/Ergebnisse/Kernaussagen)</li> <li>Wer? (Autor:innen/Involvierte)</li> <li>Warum? (Gr\u00fcnde/Zusammenh\u00e4nge)</li> <li>Wozu? (Ziele/Absichten)</li> <li>Wie? (Methoden/Prozesse)</li> <li>evtl. Wo? &amp; Wann? (je nach Kontext / Basistextart)</li> </ul> <p>Beim Zusammenfassen soll zuerst stichwortartig die wichtigsten Kernaussagen zusammengefasst und danach einen Satz daraus gebildet werden soll. </p> <p>Eine Zusammenfassung soll im Pr\u00e4sens sein und keine Nacherz\u00e4hlung (keine Infos zum zeitlichen Ablauf oder handelnden Personen). Zudem soll eine Zusammenfassung nicht wertend sein.</p>"},{"location":"22HS/Communication3/COM3.html#aufbau","title":"Aufbau","text":"<p>1) Ausgangslage, Thema, die Angabe des Ziels bzw. der     untersuchten Fragestellung des Basistexts, Textsorte 2) eine Angabe der genannten Methode(n) zur Beantwortung der     Fragestellung 3) die Verdeutlichung der Resultate 4) eine Diskussion (Einordnung) der Ergebnisse, ggf. einen     abschliessenden Satz zur Anwendung</p>"},{"location":"22HS/Communication3/COM3.html#aufbau-in-com3","title":"Aufbau in COM3","text":"<p>Affiliation ist ZHAW</p>"},{"location":"22HS/Communication3/COM3.html#linking-words","title":"Linking Words","text":""},{"location":"22HS/Communication3/COM3.html#argumentation","title":"Argumentation","text":""},{"location":"22HS/Communication3/COM3.html#lwn-2","title":"LWN 2","text":"<ul> <li>20 min / 4-5 people</li> <li>speak freely, but notes are allowed (A5 sheet)</li> <li>The lecturer might send a message to a participant with instructions which needs to be incomperated</li> <li>Harvard Principles need to be incorporated </li> <li>Don't use every argument at the same time. The participants should stick to the current topic</li> <li>CEO should welcome everybody and state the aim of the meeting</li> <li>Participants should be introduced with their role that the prof knows who does what</li> </ul> <p>Preperation:</p> <ul> <li>What is your own position?</li> <li>What is your bottom line?</li> <li>Where are you prepared to compromise?</li> <li>What is the minimal goal?</li> <li>What is the maximal goal?</li> <li>Review the Harvard Principles</li> </ul>"},{"location":"22HS/Communication3/COM3.html#chemical-engineer-notes","title":"Chemical Engineer - Notes","text":"<ul> <li>Position: With my recently earned degree, I'm extremely cautious about the environment. The fact that the supplier knew about the pollution doesn't help. I think that the company should be transparent about this issue. </li> </ul> <p>My trust in the supplier is low and I rather change supplier than continuing working with the current one</p> <ul> <li> <p>Bottom line: Change supplier and tell the public and employees about it. The river shouldn't be polluted and the slightly toxic gas should be filtered</p> </li> <li> <p>Minimal Goal: The supplier either has to be dropped or change its process immediately (ultimatum) </p> </li> <li> <p>Maximal Goal: In addition to changing the supplier, a company internal memo should be sent to inform employees about this grave misconduct of our partner. Along this memo, a press release should be released which states the facts and promises changes (aka dropping the supplier). Both things have to be done immediately.</p> </li> </ul>"},{"location":"22HS/Communication3/COM3.html#knowledge","title":"Knowledge","text":"<ul> <li>About 25 tons of acid waste drains into a river near the Chinese plant every   year. This waste is an inevitable part of the manufacturing process. It kills   animal and plant life for some distance downstream.</li> <li>Slightly toxic gas is released, but nobody seems to notice, probably because   the plant is in a major industrial region.</li> <li>The gas would have to be filtered, adding a further 5% to production costs.</li> </ul>"},{"location":"22HS/Communication3/COM3.html#position","title":"Position","text":"<ul> <li>How serious the problem is: </li> <li>very serious: there is only one planet</li> <li>Which actions should be taken</li> <li>Tell employees and the public (customers)</li> <li>drop the supplier (or maybe demand change from the supplier)</li> </ul>"},{"location":"22HS/Communication3/COM3.html#arguments","title":"Arguments","text":"<ul> <li>Tell the public</li> <li>This scandal will eventually come out. We should tell our side of the story to control the narrative</li> <li>Raise awareness about our company's ecological mission by announcing swift actions</li> <li>No news is bad news</li> <li>Use an ad campaign to control the narative</li> <li>If reported by the independent media, the story could tarnish our brand a lot more</li> <li>To the employee</li> <li>They have right to know (they might work for us because we're brand ourselves as ecological)</li> <li>They trust us to lead this ecological oriented company actually ecological<ul> <li>Loosing that trust could lead to strikes and mass-quitting. This can be averted by informing them about the situation and future plans to remedy the issue</li> </ul> </li> <li>Change supplier</li> <li>The supplier can't be trusted as they already knowingly polluted the river</li> <li>Sourcing batteries from multiple supplier could lead to more leverage while negotiation leading to lower prices. The supplier could also be in China. Eventually the problematic supplier could be dropped.<ul> <li>Future prove: If something similar happens again, the supplier could be dropped (relatively) quickly</li> </ul> </li> <li>Ultimatum to supplier</li> <li>Find another supplier to have more leverage</li> </ul>"},{"location":"22HS/Communication3/COM3.html#con-arguments","title":"Con Arguments","text":"<ul> <li>Changing the mission statement</li> <li>Customers have bought our products thinking they bought something green</li> <li>Employees work for us because they identify with our brand</li> <li>Waiting with the announcement until after the IPO</li> <li>Will crash the stock price. We better get it over with now</li> <li>Trust of employees, customers and shareholders after the IPO</li> </ul>"},{"location":"22HS/Communication3/COM3.html#numbers","title":"Numbers","text":"<ul> <li>1x Scooter: 900CHF / bom: 400 CHF (with battery)</li> <li>profit: +10 million</li> <li>revenue impact from making it public: -8 milion / -10%</li> <li> <p>After Z\u00fcriScoot: 200 million revenue / 30 million profit</p> </li> <li></li> </ul>"},{"location":"22HS/Communication3/Report%20Hosting%20the%20World%20Cup.html","title":"Report Hosting the World Cup","text":""},{"location":"22HS/Communication3/Report%20Hosting%20the%20World%20Cup.html#introduction","title":"Introduction","text":"<p>Following the considerable economic and social benefits of hosting the Olympics in 2008, the Chinese government is keen to make a bid to host the 2026 Football World Cup. This report analyses the positive and negative impacts of hosting this tournament in two other countries: the USA and South Africa.</p>"},{"location":"22HS/Communication3/Report%20Hosting%20the%20World%20Cup.html#findings","title":"Findings","text":"<p>In the USA the economic impact of the 1994's World Cup was -$9.26bn instead of the projected +$4bn, a difference of $13.26bn. However, the revenue from football has increased drastically year over year. This has dampened the difference between the projected and the actual economic impact.</p> <p>In South Africa the story is similar: The original budget for the World Cup in 2010 was estimated to $421m. The event was over budget by 1257% and cost the country $5.16bn. During the World Cup 220'000 soccer fans visited South Africa, increasing the awareness and spreading its culture.</p>"},{"location":"22HS/Communication3/Report%20Hosting%20the%20World%20Cup.html#conclusion","title":"Conclusion","text":"<p>Analysing these past World Cup and drawing conclusions from it, the Chinese World Cup in 2026 will be likely over budget as well. In exchange for hosting the World Cup, Chine will be able to improve it's public image and receive stellar publicity.</p>"},{"location":"22HS/Communication3/Report%20Hosting%20the%20World%20Cup.html#recommendations","title":"Recommendations","text":"<p>The planing committee should set out a clear budget and use realistic estimates based on past World Cups. This should contain the run away costs. The event will doubtless still be over budget, but to a lesser degree.</p> <p>It is advisable to create a clear marketing message to extract the maximal amount of positive exposure possible.</p> <p>Notes: Recommedations: Multiple Options can be shown. Like If the the government tries to make money, the shouldn't run the event, however if they want to promote the soccer culture and improve the popularity of the Chinese government, then they should</p>"},{"location":"22HS/Communication3/Report%20mPHone%208%20Plus.html","title":"Report - mPHone 8 Plus","text":""},{"location":"22HS/Communication3/Report%20mPHone%208%20Plus.html#introduction","title":"Introduction","text":"<p>The aim of this report is to briefly describe the technical problem that forced the project team to delay the launch of the mPhone 8 Plus, and to identify the main mistakes during the project. Finally, a recommendation will be made regarding measures to improve the procedure.</p>"},{"location":"22HS/Communication3/Report%20mPHone%208%20Plus.html#findings","title":"Findings","text":"<p>During the late stages of development, testers found, that ringing the vibrator motor can cause the screen to shatter. Unfortunately, this behaviour can only be reproduced when calling the phone, but not by regular usage.</p> <p>This can be linked to a misunderstanding between the hardware and software team. The developer working on this received a previous data sheet for a less powerful motor. However, the motor was exchanged for a different version due to it's unavailability. The new motor happened to be more powerful and was only supposed to be used at 80% of it's power. An other contributing factor was the rushed development, which caused the bug to be unnoticed until user testing. </p>"},{"location":"22HS/Communication3/Report%20mPHone%208%20Plus.html#conclusion","title":"Conclusion","text":"<p>If the planing had allotted more time for the development, the bug could have been caught earlier and wouldn't have delayed the project. The same goes for the communication brake-down, which caused the bug in the first place. Both the management and engineering hold part of the blame, as both teams could have avoided the issue with the proper response.</p>"},{"location":"22HS/Communication3/Report%20mPHone%208%20Plus.html#recommendations","title":"Recommendations","text":"<p>It's recommended to ensure that the allotted time is sufficient for the development by adding a buffer. The buffer can be used for unplanned hurdles and added testing time. Additionally the communication between teams should be improved by holding company-wide status meetings.</p>"},{"location":"22HS/Communication3/Zusammenfassung%20Hippocratic%20Oath.html","title":"Zusammenfassung - A Hippocratic Oath for Technoligists","text":"<p>Im Artikel \"A Hippocratic Oath for Technoligists\" wird ein Eid definiert, dessen Ziel es ist,  das ethische Verantwortungsbewusstsein von Technologen:innen zu st\u00e4rken.</p> <p>Der Eid basiert in seinen Grunds\u00e4tzen auf dem proaktiven Verst\u00e4ndnis von ethischer Verantwortung und dass die Wahrheit \u00fcber die M\u00f6glichkeit, den Nutzen und negativen Auswirkungen einer Technologie kommuniziert werden. Weiter, dass bei Konfrontationen mit ethischen Herausforderungen verantwortungsbewusst gehandelt wird.</p> <p>2: Es ist wichtig, den Unterschied zwischen, legal oder profitabel, und ethisch korrekt zu verstehen. Neben legal und ethisch gibt es auch vern\u00fcnftig. Selbst wenn etwas rechtlich erlaubt oder vern\u00fcnftig ist, bedeutet dies nicht, dass es auch ethisch ist.</p> <p>Ein Eid kann als eine positive oder negative Verf\u00fcgung umgesetzt werden, respektive ob etwas untersagt ist oder ob Beobachtungen gemeldet werden m\u00fcssen.</p> <p>Auch T\u00e4uschung durch falsche Implikationen und unvollst\u00e4ndige oder unverst\u00e4ndliche Informationen sind Eides widrig.</p> <p>3: Der Eid sollte f\u00fcr alle moralische Dilemmas eine Antwort bieten, klar und einfach verst\u00e4ndlich sein und die Handlungsf\u00e4higkeit und Verantwortung des Technologisten:innen sollte im Zentrum stehen.</p> <p>4: Der Eid fordert, dass Technologen:innen ethische Auswirkungen verstehen. Weiter muss die Wahrheit gesprochen werden, auch wenn dies rechtlich vermeidbar w\u00e4re. Ebenfalls wird gefordert, dass Verantwortungsbewusst gehandelt wird. Falls verantwortungsloses Handeln beobachtet wird, m\u00fcssen n\u00f6tige Schritte unternommen werden, dies zu korrigieren. Eine Firma kann Unterst\u00fctzung anbieten, in dem unmoralisch empfundene Arbeit nicht ausgef\u00fchrt werden muss.</p> <p>5: Als n\u00e4chstes muss der Eid an Schulen und in industriellen Gemeinschaften verteilt werden. Dies wird kaum die letzte Version des Eids sein und Vorschl\u00e4ge von Vereidigten k\u00f6nnen \u00fcbernommen werden. Daher ist jeder eingeladen, sich zu vereidgen zu lassen.</p>"},{"location":"22HS/Communication3/Zusammenfassung%20Hippocratic%20Oath.html#alt","title":"Alt","text":"<p>3b:3Der Eid sollte f\u00fcr alle moralische Dilemmas eine Antwort bieten, klar und einfach verst\u00e4ndlich sein und die Handlungsf\u00e4higkeit und Verantwortung des Technologisten:innen sollte im Zentrum stehen.</p> <p>Vereidigte Personen bem\u00fchen sich die moralischen Auswirkungen der Technologien zu verstehen. Weiter sagen sie die Wahrheit, kl\u00e4ren bei Unwissenheit auf, boykottieren verwerfliche Arbeit und handeln bei unmoralischen Verhalten.</p> <p>4b:</p> <p>Der letzte Teil verlangt sowohl Zusage zum negativen Appell, f\u00fcr ethisch verwerflich befundene Handlungen zu verweigern, wie auch zum positiven Appell, anderer Fehler oder Vergehen anzusprechen und nach M\u00f6glichkeit zu korrigieren. Durch diese starke Aufforderung k\u00f6nnen Firmen konkrete Massnahmen zur Einhaltung ihres Ehrenkodex ergreifen.</p> <p>5: Diese Arbeit soll als erster Schritt auf dem Weg zu gr\u00f6sserem Bewusstsein \u00fcber die ethischen \u00dcberlegungen zu Technologie dienen. Zun\u00e4chst soll der Eid innerhalb akademischer und industrieller Kreise verbreitet werden. Personen, die den Eid schw\u00f6ren, sollen dessen Entwicklung durch Debatte und Anwendung vorantreiben.</p>"},{"location":"22HS/Communication3/Zusammenfassung%20Hippocratic%20Oath.html#_1","title":"Zusammenfassung - A Hippocratic Oath for Technoligists","text":""},{"location":"22HS/Communication3/Zusammenfassung%20Projektmanagment.html","title":"Zusammenfassung - A short course in project management","text":""},{"location":"22HS/Communication3/Zusammenfassung%20Projektmanagment.html#ausgangslage","title":"Ausgangslage","text":"<p>Es geht darum, wie man die drei Constraints balancieren kann.</p> <ul> <li>Was? (Thema/Ergebnisse/Kernaussagen)</li> <li>Wer? (Autor:innen/Involvierte)</li> <li>Warum? (Gr\u00fcnde/Zusammenh\u00e4nge)</li> <li>Wozu? (Ziele/Absichten)</li> <li>Wie? (Methoden/Prozesse)</li> <li>evtl. Wo? &amp; Wann? (je nach Kontext / Basistextart)</li> </ul>"},{"location":"22HS/Communication3/Zusammenfassung%20Projektmanagment.html#zusammenfassung","title":"Zusammenfassung","text":"<p>Jedes Projekt hat drei essenzielle Einschr\u00e4nkungen: einen Zeitrahmen, Ressourcen und den Umfang. Dies wird auch das Projekt Dreieck genannt, in welchem jede der Einschr\u00e4nkungen eine Ecke des Dreiecks darstellt.</p> <p>Der Zeitrahmen stellt dar, bis wann ein Projekt komplett sein soll. F\u00fcr das Projekt werden Ressourcen, wie Materialien, Equipment und Mitarbeiter, ben\u00f6tigt. Der Umfang definiert, welche Funktionen bis am ende des Zeitrahmens komplett sein sollen. Dabei wird zwischen dem Produkt Scope, bzw. eine Spezifikation, und dem Projekt Scope, was die Arbeit beschreibt, welche f\u00fcr das Produkt ben\u00f6tigt wird.</p>"},{"location":"22HS/HM1/1_Zahlen.html","title":"Gleitkommazahlen","text":""},{"location":"22HS/HM1/1_Zahlen.html#mantis","title":"Mantis","text":"\\[ x=m\\cdot B^e\\\\ 12000 = 1.2 \\cdot 10^4 \\] <p>Dabei gilt \\(x\\in \\R\\), die Mantis  \\(m \\in R\\), die Basis \\(B \\in \\N\\)  und den Exponent \\(e\\in \\Z\\) </p> <p>Eine Zahl kann folgendermassen Dargestellt werden: $$ m=\\pm0.m_1m_2m_3m_n\\ e=\\pm e_1e_2e_3e_l $$ Dabei ist der Bereich der darstellbaren Zahlen folgendermassen:  $$ M={x \\in \\R \\vert x=\\pm0.m_1m_2m_3...m_n\\cdot B^{\\pm e_1e_e...e_m}} $$</p> <p>Eine Zahl wird machinendarstellbar genannt, wenn \\(m_1\\neq 0\\) ist</p> <p>Die Anzahl Zahlen kann mit \\(2\\cdot B^{n-1}\\cdot (2\\cdot B^e-1)+1\\), wenn der Exponent und Mantis ein Vorzeichen hat. Falls die Mantis kein Vorzeichen hat, gibt es: \\(B^{n-1}\\cdot (2\\cdot B^e-1)+1\\). Wenn der Exponent auch kein Vorzeichen hat, dann wird daraus \\(B^{n-1}\\cdot B^e+1\\).</p>"},{"location":"22HS/HM1/1_Zahlen.html#minimum-und-maximum","title":"Minimum und Maximum","text":"\\[ x_{max}=B^{e_{max}}-B^{e_{max}-n}=(1-B^{-n})\\cdot B^{e_{max}}\\\\ x_{min}=B^{e_{min}-1} \\] <p>Hier ist ein Beispiel: $$ B=2, n=4, 0 \\le e \\le 3\\ x_{max}=0.1111_2\\cdot 2^3=111.1_2=7.5_{10}\\ x_{max}=2^3-2^{3-4}=8-0.5=7.5_{10}\\ \\ x_{min}=0.1000_2 \\cdot 2^0 = 0.1_2=0.5_{10}\\ X_{min}=2^{0-1}=2^{-1}=0.5_{10} $$</p>"},{"location":"22HS/HM1/1_Zahlen.html#rundungsfehler","title":"Rundungsfehler","text":"<p>Der absolute Fehler bei einer Rundung von \\(x\\) zu der N\u00e4herung \\(\\tilde x\\) ist definiert als \\(\\vert \\tilde x - x \\vert\\). Der relative Fehler ist \\(\\left\\vert \\frac{\\tilde x - x}{x} \\right\\vert\\).</p> <p>Wenn \\(\\tilde x=rd(x)\\) gilt, wobei \\(rd(x)\\) die Zahl \\(x\\) rundet, dann ist der h\u00f6chste absolute Fehler: \\(\\vert rd(x)-x\\vert \\le 0.\\underbrace{00...00}_{n}\\frac B 2\\cdot B^e=\\frac B 2\\cdot B^{e-n-1}\\)</p> <p>Als Beispiel mit der Basis \\(B=10\\), eine siebenstellige Mantisse \\(n=7\\) und \\(x=180.1234567=0.1801234567\\cdot 10^3\\): \\(\\vert rd(x)- x\\vert \\le 0.\\underbrace{0000000}_{n=7}5\\cdot 10^3=0.5\\cdot 10^{3-7}=0.5\\cdot10^{-4}\\)</p>"},{"location":"22HS/HM1/1_Zahlen.html#konditionierung-fortpflanzung-von-fehler","title":"Konditionierung: Fortpflanzung von Fehler","text":"<p>Der absolute Fehler von einer Operation \\(f(x)\\)  kann als \\(|f'(x)|\\cdot |\\tilde x - x|\\) angen\u00e4hert werden. Beim relativen Fehler gilt \\(\\frac{|f'(x)|\\cdot|x|}{|f(x)|}\\cdot \\frac{|\\tilde x - x|}{|x|}\\) </p> <p>Den Faktor \\(K:= \\frac{|f'(x)|\\cdot|x|}{|f(x)|}\\) nennt sich Konditionszahl und sagt aus, um wie viel sich der relativen Fehler von \\(x\\) bei einer Funktionsauswertung von \\(f(x)\\) ver\u00e4ndert. Dabei wird zwischen gut konditionierten Problemen, bei welchen die Konditionszahl klein ist, und schlecht konditionierten Problemen, bei welchen die Konditionszahl gross ist, unterschieden. $$ K:= \\frac{|f'(x)|\\cdot|x|}{|f(x)|} $$</p>"},{"location":"22HS/HM1/1_Zahlen.html#fehlerfortpflanzung-bei-summation","title":"Fehlerfortpflanzung bei Summation","text":"<p>F\u00fcr \\(f(x)=x+c\\), gilt \\(f'(x)=1\\) und folgendes f\u00fcr \\(K\\): $$ K=\\frac{|x|}{|x+c|} $$ An dieser Formel kann das Problem der Ausl\u00f6schung beobachtet werden: Wenn von \\(x\\) eine \u00e4hliche Zahl \\(c\\) subrahiert wird, dann wird \\(K\\) sehr gross. </p> <p>Oder allgemeiner formuliert, wird von einer Zahl eine zweite \u00e4hnliche grosse Zahl subtrahiert, wird der relative Fehler sehr hoch. Dies kann zum Teil durch geschicktes Umformen vermieden werden. Meist entstehen aber andere Ausl\u00f6schungs-Zentren.</p>"},{"location":"22HS/HM1/1_Zahlen.html#fehlerfortpflanzungs-tabelle","title":"Fehlerfortpflanzungs-Tabelle","text":""},{"location":"22HS/HM1/1_Zahlen.html#maschinengenauigkeit-max-relativer-fehler","title":"Maschinengenauigkeit (max. relativer Fehler)","text":"<p>Die Maschinengenauigkeit ist der maximale relative Fehler, der beim Runden entstehen kann. $$ eps = \\frac B 2\\cdot B^{-n}=\\frac 1 2 \\cdot B^{1-n} $$</p> <p>\\(eps\\) kann auch definiert werden, als die kleinste Zahl bei der \\(1+eps&gt;1\\) noch gilt</p>"},{"location":"22HS/HM1/1_Zahlen.html#iec-ieee-gleitkommazahlen","title":"IEC / IEEE Gleitkommazahlen","text":"<p>IEEE definiert eine <code>single</code> Gleitkommazahl, welche 32bit lang ist und das folgende Schema besitzt:</p> <p>Ebenfalls gibt es eine <code>double</code> Gleitkommazahl, welche aus 64bit besteht und folgendes Schema besitzt: </p>"},{"location":"22HS/HM1/2_Nullstellen.html","title":"Nullstellen","text":""},{"location":"22HS/HM1/2_Nullstellen.html#fixpunktiteration","title":"Fixpunktiteration","text":"<p>F\u00fcr das ben\u00fctzten der Fixpunktiteration muss die Gleichung in der Fixpunktform \\(F(x)=x\\) sein. $$ x_{n+1}=F(x_n) $$</p> <p>Damit die Fixpunktiteration zum Resultat konvergiert, muss f\u00fcr die Ableitung \\(F'(x)&lt;1\\)  gelten. Dies wird auch im Banachscher Fixpunktsatz wiedergespiegelt.</p>"},{"location":"22HS/HM1/2_Nullstellen.html#banachscher-fixpunktsatz","title":"Banachscher Fixpunktsatz","text":"<p>Es gilt folgendes f\u00fcr \\(F: [a, b] \\to [a, b]\\) und die Konstante \\(\\alpha \\in ]0, 1[\\) $$ |F(x) - F(y)|\\le \\alpha\\cdot |x - y| \\text{ wobei gilt: } x, y\\in [a, b]\\ \\text{oder}\\ \\frac{|F(x)-F(y)|}{|x - y|} \\le \\alpha $$ In Deutsch heisst dies, dass die Differenz \\(F(x) - F(y)\\) nie gr\u00f6sser als \\(x-y\\) sein darf, oder dass die Steigung nicht gr\u00f6sser als \\(1\\) darf sein und muss gr\u00f6sser als 0 sein.</p> <p>Mathematischer: \\(F\\) muss Lipschitz-stetig (selbst-abbildend) und kontraktiv sein. Zum argumentieren, dass es selbst abbildend ist, \\(F(x)\\) muss monoton steigend sein (darf nie sinken) und \\(F(a)\\) und \\(F(b)\\) m\u00fcssen zwischen \\(a\\) und \\(b\\) sein.</p> <p>Zum argumentieren, dass es kontraktiv ist, muss \\(F(x)\\) </p> <p>Wenn dies gegeben ist, </p> <ul> <li>hat \\(F\\) genau einen Fixpunkt \\(\\overline x\\) in \\([a, b]\\)</li> <li>konvergiert die Fixpunktiteration \\(x_{n+1}=F(x_n)\\) gegen \\(\\overline x\\) f\u00fcr alle Startwerte \\(x_0\\in [a, b]\\)</li> <li>Die a-priori und a-posteriori Absch\u00e4tzungen gelten</li> </ul> <p>\\(\\alpha\\) kann auch als die gr\u00f6sstm\u00f6gliche Steigung definiert werden: $$ \\alpha \\in ]0, 1[\\ \\alpha =\\max_{x_0\\in[a, b]} |F'(x_0)| $$</p>"},{"location":"22HS/HM1/2_Nullstellen.html#newton-verfahren","title":"Newton-Verfahren","text":"<p> $$ x_{n+1}=x_n-\\frac{f(x_n)}{f'(x_n)} $$ Um sicherzustellen, dass das Newton-Verfahren f\u00fcr einen Startwert \\(x_0\\) zum Resultat konvergiert, sollte die folgende Bedingung zutreffen: $$ \\left|\\frac{f(x) \\cdot f''(x)}{[f'(x)]^2}\\right|&lt; 1  $$ Diese Bedingung wird typischerweise f\u00fcr den Startwert \\(x_0\\) \u00fcberpr\u00fcft.</p>"},{"location":"22HS/HM1/2_Nullstellen.html#vereinfachtes-newton-verfahren","title":"Vereinfachtes Newton-Verfahren","text":"<p>Beim vereinfachten Newton-Verfahren wird die Steigung von \\(x_0\\) f\u00fcr alle Iterationen verwendet: $$ x_{n+1}=x_n-\\frac{f(x_n)}{f'(x_0)} $$</p>"},{"location":"22HS/HM1/2_Nullstellen.html#sekanten-verfahren","title":"Sekanten-Verfahren","text":"<p> $$ x_{n+1}=x_n-\\frac{x_n-x_{n-1}}{f(x_n)-f(x_{n-1})}\\cdot f(x_n) $$</p> <p>Beim Sekanten-Verfahren wird die Ableitung von \\(f\\) nicht ben\u00f6tigt, da die Steigung mit \\(\\frac{f(x_1) - f(x_0)}{x_1 - x_0}\\) berechnet wird.</p>"},{"location":"22HS/HM1/2_Nullstellen.html#konvergenzordnung","title":"Konvergenzordnung","text":"\\[ |x_{n+1}-\\overline x|\\le c \\cdot |x_n-\\overline x|^q \\] <p>Das \\(c \\in ]0, \\infty[\\) ist eine Konstante (wie bei Big-O).  \\(|x_{n+1}-\\overline x|\\) ist der absoluten Fehler von \\(x_{n+1}\\). Wenn \\(q=1\\) ist, dann konvergiert es linear (meist wird dabei auch noch \\(c &lt; 1\\) verlangt). Bei \\(q=2\\), quadratisch, und so weiter.</p>"},{"location":"22HS/HM1/2_Nullstellen.html#fehlerabschatzung","title":"Fehlerabsch\u00e4tzung","text":"<p>\\(x_n\\) ist eine mit iterieren erreichte Nullstelle, \\(\\varepsilon\\) ist ein maximalen Fehler, welcher Verlangt ist und \\(\\overline x\\) ist die exakte Nullstelle. $$ f(x_n+\\varepsilon)\\cdot f(x_n-\\varepsilon)&lt;0 \\Rightarrow \\vert x_n - \\overline x\\vert &lt; \\varepsilon $$ Oder auf Deutsch: Wenn es einen Vorzeichenwechsel zwischen \\([x_n-\\varepsilon; x_n + \\varepsilon]\\) gibt, dann gibt es eine Nullstelle \\(\\overline x\\) in diesem Intervall. Aus dem ergibt sich, dass die Differenz zwischen der Nullstelle \\(\\overline x\\) und \\(x_n\\) muss kleiner als \\(\\varepsilon\\) sein</p> <p></p>"},{"location":"22HS/HM1/2_Nullstellen.html#a-priori-und-a-posteriori-abschatzung","title":"a-priori und a-posteriori Absch\u00e4tzung","text":"<p>Mit der a-priori Absch\u00e4tzung kann der maximale absolute Fehler nach \\(n\\) Iterationen von den ersten zwei Iterationen \\(x_0\\) und \\(x_1\\) gesch\u00e4tzt werden: $$ |x_n-\\overline x|\\le \\frac{\\alpha^n}{1-\\alpha}\\cdot |x_1 - x_0|\\ n=\\log_\\alpha\\left ( \\frac{|x_n - \\overline x|\\cdot (1-\\alpha)}{|x_1 - x_0|}\\right ) $$ Mit der a-posteriori Absch\u00e4tzung kann der maximale absoluten Fehler nach \\(n\\)  Iterationen von der \\(n\\)-ten und \\(n-1\\)-te Iteration absch\u00e4tzen: $$ |x_n-\\overline x|\\le \\frac \\alpha {1- \\alpha}\\cdot|x_n - x_{n-1}| $$</p>"},{"location":"22HS/HM1/3_Lineare%20Gleichungssysteme.html","title":"Lineare Gleichungssysteme","text":""},{"location":"22HS/HM1/3_Lineare%20Gleichungssysteme.html#definitionen","title":"Definitionen","text":"<ul> <li> <p>Untere Dreiecksmatrix   Eine \\(n\\times n\\)-Matrix \\(L=(l_{ij})\\) f\u00fcr welche gilt \\(l_{ij}=0\\) f\u00fcr \\(j &gt; i\\). Sie ist normiert, wenn \\(l_{ii}=1\\) gilt   </p> </li> <li> <p>Obere Dreiecksmatrix</p> </li> </ul> <p>Eine \\(n\\times n\\)-Matrix \\(L=(l_{ij})\\) f\u00fcr welche gilt \\(l_{ij}=0\\) f\u00fcr \\(i &gt; j\\). Sie ist normiert, wenn \\(l_{ii}=1\\) gilt   </p>"},{"location":"22HS/HM1/3_Lineare%20Gleichungssysteme.html#gaus-algorithmus","title":"Gaus-Algorithmus","text":"<p>Siehe <code>22FS/LA/01_Lineare Gleichungssysteme.md</code></p>"},{"location":"22HS/HM1/3_Lineare%20Gleichungssysteme.html#fehlerfortpflanzung-und-pivotisierung","title":"Fehlerfortpflanzung und Pivotisierung","text":"<p>Beim \"normalen\" Gaus wird bei jeder Zeile mit \\(\\lambda=\\frac{a_{ji}}{a_{ii}}\\) multipliziert, was zu grossen Rundungsfehlern f\u00fchren kann. Um dies zu vermeiden, wird f\u00fcr jeden Schritt \\(i\\) zwei Zeile getauscht, dass die gr\u00f6sste Zahl in der \\(i\\)-ten Spalte bei \\(a_{ii}\\) ist.</p> <p>Im folgende Beispiel wird \\(A\\) pivotisiert: $$ A=\\begin{pmatrix} 1 &amp; 2 &amp; -1\\ 4 &amp; -2 &amp; 6 \\ 3 &amp; 1 &amp; 0 \\ \\end{pmatrix} \\xrightarrow{z_1 \\leftrightarrow z_2} \\begin{pmatrix} 4 &amp; -2 &amp; 6 \\ 1 &amp; 2 &amp; -1\\ 3 &amp; 1 &amp; 0 \\ \\end{pmatrix} \\rightarrow \\begin{pmatrix} 4 &amp; -2 &amp; 6 \\ 0 &amp; 2.5 &amp; -2.5 \\ 0 &amp; 2.5 &amp; -4.5 \\ \\end{pmatrix} \\rightarrow \\begin{pmatrix} 4 &amp; -2 &amp; 6 \\ 0 &amp; 2.5 &amp; -2.5 \\ 0 &amp; 0 &amp; -2 \\ \\end{pmatrix} $$</p>"},{"location":"22HS/HM1/3_Lineare%20Gleichungssysteme.html#lr-zerlegung","title":"LR-Zerlegung","text":"<p>F\u00fcr die LR-Zerlegung wird die Gleichung \\(Ax=b\\) umgestellt: $$ \\underbrace{A}_{LR}x=b\\ L\\underbrace{R\\cdot x}_y=b\\ Ly=b\\ Rx=y $$</p> <p>Die \\(L\\) und \\(R\\) Matrizen sind die untere-, bzw. obere Dreiecksmatrize von \\(A\\): $$ L=\\begin{pmatrix} 1 &amp; 0 &amp; 0 &amp; 0\\ l_{21} &amp; 1&amp; 0 &amp; 0 \\ l_{31} &amp; l_{32} &amp; 1 &amp; 0\\ l_{41} &amp; l_{42} &amp; l_{4_3} &amp; 1\\ \\end{pmatrix} R=\\begin{pmatrix} r_{11} &amp; r_{12} &amp; r_{13} &amp; r_{14}\\ 0  &amp; r_{22} &amp; r_{23} &amp; r_{24} \\ 0 &amp; 0 &amp; r_{33} &amp; r_{34}\\ 0 &amp; 0 &amp; 0&amp; r_{44}\\ \\end{pmatrix} $$ Dabei wird \\(R\\), wie gewohnt, mit dem Gauss-Algorithmus gebildet. Dabei sind die \\(\\lambda_{ji}\\) aus \\(z_j:=z_j - \\lambda_{ji}\\cdot z_i\\) gerade \\(l_{ji}=\\lambda_{ji}\\).</p> <p>Beispiel: $$ \\begin{align} A=\\begin{pmatrix} -1 &amp;  1 &amp;  1 \\  1 &amp; -3 &amp; -2 \\  5 &amp;  1 &amp;  4 \\ \\end{pmatrix}\\ \\xrightarrow{z_2 := z_2 - \\frac 1 {-1}\\cdot z_1 \\Rightarrow \\lambda_21=\\frac{1}{-1}} \\begin{pmatrix} -1 &amp;  1 &amp;  1 \\  0 &amp; -2 &amp; -1 \\  5 &amp;  1 &amp;  4 \\ \\end{pmatrix} \\ \\xrightarrow{z_3 := z_3 - \\frac 5 {-1}\\cdot z_1\\Rightarrow \\lambda_31=\\frac{5}{-1}} \\begin{pmatrix} -1 &amp;  1 &amp;  1 \\  0 &amp; -2 &amp; -1 \\  0 &amp;  6 &amp;  9 \\ \\end{pmatrix} \\ \\xrightarrow{z_3 := z_3 - \\frac 6 {-2}\\cdot z_2\\Rightarrow \\lambda_32=\\frac{6}{-2}} \\begin{pmatrix} -1 &amp;  1 &amp;  1 \\  0 &amp; -2 &amp; -1 \\  0 &amp;  0 &amp;  6 \\ \\end{pmatrix}\\ L=\\begin{pmatrix}  1 &amp;  0 &amp;  0 \\  \\frac{1}{-1} &amp; 1 &amp; 0 \\  \\frac 5 {-1} &amp;  \\frac{6}{-2} &amp;  1 \\ \\end{pmatrix} \\end{align} $$</p> <p>U m nun nach \\(x\\) aufzul\u00f6sen wird folgendes gerechnet:</p> <ol> <li>Das Gleichungssystem \\(Ly=b\\) wird durch Vorw\u00e4rtseinsetzen nach \\(y\\) aufgel\u00f6st.</li> <li>Im Gleichungssystem \\(Rx=y\\) wird nun \\(y\\) eingesetzt und mit Vorw\u00e4rtseinsetzten nach \\(x\\) gel\u00f6st.</li> </ol>"},{"location":"22HS/HM1/3_Lineare%20Gleichungssysteme.html#zeilenvertauschung","title":"Zeilenvertauschung","text":"<p>Wenn Zeilen vertauscht werden, muss die Permutationsmatrix \\(P\\) berechnet werden. F\u00fcr jede Vertauschung wird die Matrix \\(P_i\\) erstellt. Alle \\(P_i\\) Matrix werden dann zu der Permutationsmatrix zusammen gerechnet: \\(P=P_n\\cdot P_{n-1} \\cdot ... \\cdot P_1\\)</p> <p>Das Gleichungssystem wird nun zu:  $$ \\begin{align} PAx&amp;=Pb\\ LRx&amp;=Pb\\ Ly&amp;=Pb\\ Rx&amp;=y \\end{align} $$ Achtung: Bei Zeilenvertauschung werden auch die Zeilen in \\(L\\) vertauscht.</p>"},{"location":"22HS/HM1/3_Lineare%20Gleichungssysteme.html#qr-zerlegung","title":"QR-Zerlegung","text":"\\[ \\begin{align} \\underbrace{A}_{QR}x&amp;=b\\\\ QRx&amp;=b\\\\ R&amp;= Q_n\\cdot Q{n-1}\\cdot ... \\cdot Q_1\\cdot A\\\\ Rx&amp;=Q^Tb\\\\ \\end{align} \\] <p>Der Gedanke ist, dass eine Orthogonalmatrix \\(Q\\) gefunden wird, f\u00fcr welche gilt \\(QR=A\\). Dabei ist \\(R\\) eine obere Dreiecksmatrix. Danach kann \\(Rx=Q^Tb\\) einfach gel\u00f6st werden.</p> <p>Um \\(Q\\) zu berechne wird die die Householder-Matrix \\(H\\) f\u00fcr jede Spalte schrittweise berechnet, so dass gilt: $$ H_1\\cdot A =H_1\\cdot  \\begin{pmatrix} * &amp; * &amp; * &amp; \\ * &amp; * &amp; * &amp; \\ * &amp; * &amp; * &amp; \\ * &amp; * &amp; * &amp; \\ \\end{pmatrix} = \\begin{pmatrix} * &amp; * &amp; * &amp; \\ 0 &amp; * &amp; * &amp; \\ 0 &amp; * &amp; * &amp; \\ 0 &amp; * &amp; * &amp; \\ \\end{pmatrix} $$ Dies wird erreicht, in dem folgendes gerechnet wird: $$ \\DeclareMathOperator{\\sign}{sign}</p> <p>\\sign(x)= \\left { \\begin{array}{ll} +1 &amp; \\text{f\u00fcr } x \\ge 0\\ -1 &amp; \\text{f\u00fcr } x &lt; 0 \\end{array}  \\right . \\  \\ \\begin{align} a_1=&amp;\\begin{pmatrix}a_{11}\\a_{21}\\a_{31}\\a_{41}\\end{pmatrix}\\ e_1=&amp;\\begin{pmatrix}1 \\ 0 \\ 0 \\ 0 \\end{pmatrix}\\ v_1 :=&amp; a_1 + \\sign(a_{11})\\cdot |a_1|\\cdot e_1\\ u_1 :=&amp; \\frac 1 {|v_1|}\\cdot v_1\\ H_1 :=&amp; I_4 - 2\\cdot u_1 \\cdot u_1^T\\ Q_1 =&amp; H_1 \\end{align} $$ Nun ist \\(Q_1\\) berechnet. Dasselbe wird nun f\u00fcr \\(Q_2\\) wiederholt, aber mit \\(A_2\\): $$ \\begin{align} H_1\\cdot A =&amp; \\left ( \\begin{array}{c|ccc} * &amp; * &amp; * &amp; *\\ \\hline 0 \\ 0 &amp; &amp; A_2\\  0 \\ \\end{array} \\right ) \\ a_2=&amp;\\begin{pmatrix}a_{22}\\a_{32}\\a_{42}\\end{pmatrix}\\ e_2=&amp;\\begin{pmatrix}1 \\ 0 \\ 0 \\end{pmatrix}\\ v_2 :=&amp; a_2 + \\sign(a_{22})\\cdot |a_2|\\cdot e_2\\ u_2 :=&amp; \\frac 1 {|v_2|}\\cdot v_2\\ H_2 :=&amp; I_3 - 2\\cdot u_2 \\cdot u_2^T\\ Q_2 =&amp; \\left ( \\begin{array}{c|ccc} 1 &amp; 0 &amp; 0 &amp; 0\\ \\hline 0 \\ 0 &amp; &amp; H_2\\  0 \\ \\end{array} \\right ) \\end{align} $$ Dies nun f\u00fcr \\(Q_3\\) wiederholt. </p> <p>Danach ergibt sich: $$ \\underbrace{Q_4\\cdot Q_3 \\cdot Q_2 \\cdot Q_1}_{Q^{-1}}\\cdot A=\\begin{pmatrix} * &amp; * &amp; * &amp; * \\ 0 &amp; * &amp; * &amp; * \\ 0 &amp; 0 &amp; * &amp; * \\ 0 &amp; 0 &amp; 0 &amp; * \\ \\end{pmatrix}\\ Q = (Q_3 \\cdot Q_2 \\cdot Q_1)^{-1}=Q_1^{-1}\\cdot Q_2^{-1} \\cdot Q_3^{-1}=Q_1^T\\cdot Q_2^T \\cdot Q_3^T $$</p>"},{"location":"22HS/HM1/3_Lineare%20Gleichungssysteme.html#orthoggonalmatrix","title":"Orthoggonalmatrix","text":"<p>Daf\u00fcr eine Matrix eine Orthogonalmatrix ist, muss folgendes gelten: $$ Q^T\\cdot Q=I \\Leftrightarrow Q^T = Q^{-1} $$</p>"},{"location":"22HS/HM1/3_Lineare%20Gleichungssysteme.html#householder-matrix-beispiel","title":"Householder-Matrix Beispiel","text":"\\[ \\vec u=\\pmatrix{1 \\\\ 2 \\\\ 3}\\\\ \\vec u \\text{ ist nicht normiert, daher:}\\\\ \\tilde u = \\frac {\\vec u}{|\\vec u|}=\\frac 1 {\\sqrt{14}}\\pmatrix{1 \\\\ 2 \\\\ 3}\\\\ H = I_n - 2\\tilde u \\tilde u ^T\\\\ =  \\pmatrix{1 &amp; 0 &amp; 0\\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 1} - 2\\cdot \\frac 1 {\\sqrt{14}} \\pmatrix{1 \\\\ 2 \\\\ 3} \\cdot \\pmatrix{1 &amp; 2 &amp; 3} \\]"},{"location":"22HS/HM1/3_Lineare%20Gleichungssysteme.html#vektornorm","title":"Vektornorm","text":"\\[ ||.|| : \\R^n \\to \\R\\\\  \\text{Dies ist definiert durch:}\\\\ ||x|| \\ge 0 \\text{ und } ||x|| = 0 \\Leftrightarrow x = 0\\\\ ||\\lambda x|| = |\\lambda| \\cdot ||x||\\\\ ||x + y || \\le ||x|| + ||y|| \\] <p>Es gibt mehrere Normen f\u00fcr Vektoren, welche diese Definition erf\u00fcllt:</p> <ul> <li>Erste-Norm, Summennorm: \\(||\\vec x||_1=\\sum^n_{i=1}|x_i|\\)</li> <li>Zweite-Norm - Euklidischenorm: \\(||\\vec x||_2=\\sqrt{\\sum^n_{i=1}x^2}\\)</li> <li>\\(\\infty\\)-Norm - Maximumnorm: \\(||\\vec x||_\\infty=\\max_{i=1,...,n}|x_i|\\)</li> </ul> <p>Ebenfalls gibt es mehrere Normen f\u00fcr Matrixen:</p> <ul> <li>Erste-Norm, Spaltensummennorm: \\(||A||_1=\\max_{j=1, ..., n}\\sum^n_{i=1}|a_{ij}|\\)</li> <li>Zweite-Norm: Spektralnorm: \\(||A||_2=\\sqrt {(\\rho(A^TA))}\\)</li> <li>\\(\\infty\\)-Norm: Zeilensummennorm: \\(||A||_\\infty=\\max_{i=1,..n}\\sum^n_{j=1} |a_{ij}|\\)</li> </ul>"},{"location":"22HS/HM1/3_Lineare%20Gleichungssysteme.html#fehlerrechnungen","title":"Fehlerrechnungen","text":"<p>Ein gest\u00f6rtes Gleichunssystem kann folgendermassen definiert werden als \\(A\\tilde x=\\tilde b = b + \\Delta b\\) . Dabei ist  \\(\\Delta b\\) das Residuum oder Defekt und  \\(\\Delta x = \\tilde x - x\\) den Fehler.</p> <p>F\u00fcr den absoluten und relativen Fehler gilt nun folgendes: $$ \\begin{align} ||x - \\tilde x|| &amp;\\le || A^{-1} || \\cdot || b - \\tilde b || \\ \\frac {||x - \\tilde x||}{||x||} &amp;\\le ||A|| \\cdot  || A^{-1} || \\cdot \\frac{|| b - \\tilde b ||}{||b||} \\ \\ \\DeclareMathOperator{\\cond}{cond} \\cond(A)&amp;=||A|| \\cdot || A^{-1} || \\end{align} $$ Wenn \\(\\cond(A)\\) gross ist, k\u00f6nnen kleine Fehler in \\(\\vec b\\) zu grossen Rundungsfehler im Ergebnis \\(\\vec x\\) f\u00fchren. Die Matrix \\(A\\) ist dann schlecht Konditioniert.</p> <p>Wenn nicht nur \\(\\vec b\\) sonder auch \\(A\\) einen Fehler enthaltet, dann gelten die folgenden Formeln: $$ \\begin{align} &amp;\\text{Wenn } \\cond(A) \\cdot \\frac{||A - \\tilde &gt;||}{||A||} &lt; 1 \\text{ dann gilt:}\\ &amp;\\frac {||x - \\tilde x||}{||x||} \\le \\frac{\\cond(A)}{1- \\cond(A) \\cdot \\frac{||A - \\tilde A||}{||A||}} \\cdot  \\left( \\frac{|| A - \\tilde A ||}{||A||} + \\frac{|| b - \\tilde b ||}{||b||}\\right)  \\end{align} $$</p>"},{"location":"22HS/HM1/3_Lineare%20Gleichungssysteme.html#iterative-verfahren","title":"Iterative Verfahren","text":""},{"location":"22HS/HM1/3_Lineare%20Gleichungssysteme.html#jacobi-verfahren","title":"Jacobi Verfahren","text":"<p>Die Gleichung \\(Ax=b\\) soll in \\((L + D + R)x=b\\) umgewandlet werden.</p> <p></p> <p>Danach sagt das Verfahren vor: $$ x^{(k+1)}=-D^{-1}(L + R)x^{(k)}+D^{-1}b\\ \\text{oder in der Summenform:}\\ x_i^{(k+1)}=\\frac 1{a_{ii}}\\cdot\\left(b_i - \\sum^n_{j_1, j \\neq i}a_{ij}x_j^{(k)}\\right)\\ \\text{Dabei ist } i \\text{ die Zeile in der Matrix} $$</p> <p>Notiz: Eine Diagonalmatrix (wie \\(D\\)) zu invertieren ist trivial: $$ D=\\pmatrix{2 &amp; 0\\ 0  &amp; 5} \\to  D^{-1}=\\pmatrix{\\frac 1 2 &amp; 0 \\ 0 &amp; \\frac 1 5} $$ </p>"},{"location":"22HS/HM1/3_Lineare%20Gleichungssysteme.html#beispiel-jacobi-verfahren","title":"Beispiel - Jacobi-Verfahren","text":""},{"location":"22HS/HM1/3_Lineare%20Gleichungssysteme.html#gaus-seidel-verfahren","title":"Gaus-Seidel-Verfahren","text":"\\[ x^{(k+1)}=-(D+L)^{-1}Rx^{(k)}+(D+L)^{-1}b\\\\ \\text{oder in der Summenform:}\\\\ x_i^{(k+1)}=\\frac 1{a_{ii}}\\cdot\\left(b_i - \\sum^{i-1}_{j=1}a_{ij}x_j^{(k+1)} - \\sum^{n}_{j=i+1}a_{ij}x_j^{(k)}\\right)\\\\ \\text{Dabei ist } i \\text{ die Zeile in der Matrix} \\]"},{"location":"22HS/HM1/3_Lineare%20Gleichungssysteme.html#konvergenz","title":"Konvergenz","text":"<p>Mit der folgenden Fixpunktiteration \\(x^{(k+1)}=Bx^{(n)}+c\\) ist die Konvergenz definiert als:</p> <ul> <li>\\(\\overline x\\) ist anziehend, wenn \\(||B|| &lt; 1\\)</li> <li>\\(\\overline x\\) ist abstossend, wenn \\(||B|| &gt; 1\\)</li> </ul> <p>F\u00fcr Jacobi-Verfahren ist \\(B\\) und \\(c\\) folgendermassen definiert: \\(x^{(k+1)}=-\\underbrace{D^{-1}(L + R)}_B\\cdot x^{(k)}+\\underbrace{D^{-1}}_c \\cdot b\\)</p> <p>F\u00fcr das Gaus-Seidel-Verfahren ist \\(B\\) und \\(c\\) definiert als: \\(x^{(k+1)}=\\underbrace{-(D+L)^{-1}R}_B\\cdot x^{(k)}+\\underbrace{(D+L)^{-1}}_c \\cdot b\\)</p> <p>\\(\\overline x\\) ist ebenfalls anziehend, wenn \\(\\rho(B)&lt;1\\) ist (\\(\\rho(B)\\) ist der Spektralradius von \\(B\\)).</p>"},{"location":"22HS/HM1/3_Lineare%20Gleichungssysteme.html#abschatzung","title":"Absch\u00e4tzung","text":"\\[ \\begin{align} \\text{a-priori Absch\u00e4tzung: }&amp; ||x{(n)}-\\tilde x|| \\le \\frac{||B||^n}{1-||B||}\\cdot || x^{(1)}-x^{0}||\\\\ \\text{a-posteriori Absch\u00e4tzung: }&amp; ||x{(n)}-\\tilde x|| \\le \\frac{||B||}{1-||B||}\\cdot || x^{(n)}-x^{n-1}|| \\end{align} \\] \\[ n=\\log_{||B||}\\left ( \\frac{||x_n - x||\\cdot (1-||B||)}{||x_1 - x_0||}\\right ) \\]"},{"location":"22HS/HM1/3_Lineare%20Gleichungssysteme.html#diagonaldominanz","title":"Diagonaldominanz","text":"<p>Eine Matrix wird als Diagonaldominanz bezeichnet, wenn entweder</p> <ul> <li>f\u00fcr alli \\(i=1,...,n\\): \\(|a_{ii}|&gt; \\sum^n_{j=1, j\\neq i}|a_{ij}|\\)</li> <li>f\u00fcr alli \\(j=1,...,n\\): \\(|a_{jj}|&gt; \\sum^n_{i=1, i\\neq j}|a_{ij}|\\)</li> </ul>"},{"location":"22HS/HM1/4_Komplexe%20Zahlen.html","title":"Komplexe Zahlen","text":"<p>Eine Komplexe Zahl hat einen imagin\u00e4ren und einen realen Komponent. Diese werden entweder in der Form \\(z=x+iy\\) oder der Form \\(P(x, y)\\) geschrieben, wobei gilt \\(x, y \\in \\R\\).</p> <p>\\(i\\) ist definiert als \\(i^2=-1\\)</p> <p>Die Definition von \\(\\C\\) ist \\(\\C=\\{z | z = x+iy \\wedge x,y \\in \\R \\}\\)</p> <p>Es gibt zudem noch die Funktionen \\(\\Re(z)=x\\) und \\(\\Im(z)=y\\) (f\u00fcr \\(z = x+iy\\))</p> <p>Da eine komplexe Zahl als Punkt dargestellt werden, kann auch der Betrag berechnet werden: \\(|z|=\\sqrt{x^2+y^2}=\\sqrt{z\\cdot z^*}\\)</p>"},{"location":"22HS/HM1/4_Komplexe%20Zahlen.html#konjugierte-komplexe-zahlen","title":"Konjugierte Komplexe Zahlen","text":"<p>Die konjugierte komplexe Zahl von \\(z = x + yi\\) ist \\(z^*=x-iy\\) und ist entlang der x-Achse gespiegelt.</p> <p></p> <p>Der Term \\(z\\cdot z^*=(x+yi)\\cdot(x-yi)=x^2-i^2y^2=x^2-(-1)y^2=x^2+y^2\\) zeigt, wie \\(\\sqrt{z\\cdot z^*}=|z|\\) und \\(z\\cdot z^*=|z|^2\\) (Achtung: Der Betrag ist wichtig!)</p>"},{"location":"22HS/HM1/4_Komplexe%20Zahlen.html#darstellungs-formen","title":"Darstellungs Formen","text":"<ul> <li>Koordinaten-Form: \\(P(x, y)\\)</li> <li>Normal-Form: \\(z = x + yi\\)</li> <li>Trigometrische-Form (aka Polar-Form): \\(z=r\\cdot (\\cos \\phi + i\\cdot \\sin \\phi)\\) (\\(r\\) ist dabei die L\u00e4nge)</li> <li>Exponential-Form: \\(re^{i\\varphi}\\) (\\(r\\) ist dabei die L\u00e4nge)</li> </ul> <p>Als Beispiel: $z = 1 + 1i = \\sqrt 2 (\\cos{\\frac \\pi 4} + i \\sin{\\frac \\pi 4}) = \\sqrt 2 \\cdot e^{i\\cdot \\frac \\pi 4} $</p> <p>Um zwischen der Exponetialform und der Koordinationsform zu konvertieren, gilt: $$ \\text{F\u00fcr: } z=x+y\\ x = r\\cdot \\cos(\\varphi)\\ y = r\\cdot \\sin(\\varphi) $$</p>"},{"location":"22HS/HM1/4_Komplexe%20Zahlen.html#grundrechungsarten","title":"Grundrechungsarten","text":"<ul> <li>Summieren: \\(z_1 + z_2 = (x_1 + x_2) + i(y_1 + y_2)\\)</li> <li>Subtrahieren: \\(z_1 - z_2 = (x_1 - x_2) + i(y_1 - y_2)\\)</li> <li>Multiplizieren: \\(z_1 \\cdot z_2 = (x_1 \\cdot x_2 - y_1\\cdot y_3) + i(x_1\\cdot y_2 +x_2 \\cdot y_1)\\)</li> <li>Dividieren: \\(\\frac {z_1}{z_2}=\\frac {z_1\\cdot z_2^*}{z_2 \\cdot z_2^*}=\\frac {(x_1 + iy_1)(x_2-iy_2)}{(x_2 + iy_2)(x_2 - iy_2)}=\\frac {(x_1 + iy_1)(x_2-iy_2)}{x_2^2-y_2^2}\\)</li> <li>Potenzieren: \\(z^n=(re^{i\\varphi})^n=r^n\\cdot e^{i\\varphi n}\\)</li> <li>Wurzel-Ziehen: \\(\\sqrt[n]{z}=z^{\\frac 1 n}=r^{\\frac 1 n}\\cdot e^{\\frac {i\\varphi + 2\\pi \\cdot k} n}\\), wobei \\(k=0, 1, 2, ..., n-1\\) (Bei \\(k\\ge n\\) wiederholen sich die L\u00f6sungen)</li> </ul> <p>Ein Vorteil der Exponential-Form ist, dass Rechnungen um einiges einfacher von der Hand gehen:  $$ z_1=r_1e^{i\\varphi_1}\\ z_2=r_2e^{i\\varphi_2}\\ z_1z_2=r_1e^{i\\varphi_1}\\cdot r_2e^{i\\varphi_2} = r_1r_2\\left(e^{i\\varphi_1+i\\varphi_2}\\right) $$</p>"},{"location":"22HS/HM1/4_Komplexe%20Zahlen.html#polynome-losen","title":"Polynome L\u00f6sen","text":"<p>F\u00fcr das Polynom \\(a_nx^n+a_{n-1}x^{n-1}+...+a_1x^1+a_0=0\\) und \\(a_i, x \\in \\R\\), dann gibt es genau \\(n\\) L\u00f6sungen und kann maximal \\(n\\) reale L\u00f6sungen geben. $$ z^6=1 $$</p> <p></p>"},{"location":"22HS/HM1/4_Komplexe%20Zahlen.html#eigenwerte","title":"Eigenwerte","text":"<p>F\u00fcr eine Matrix \\(A \\in R^{n\\times n}\\) nennt sich \\(\\lambda \\in \\C\\) Eigenwert und den Vektor \\(x\\in \\C^n\\setminus \\{0\\}\\) Eigenvektor, wenn folgendes gilt: $$ \\begin{align} A\\vec x &amp;= \\lambda \\vec x \\ \\Rightarrow A\\vec x - \\lambda \\vec x &amp;= 0 \\ \\Rightarrow (A-\\lambda I_n)\\vec x &amp;= 0 \\end{align} $$ Wenn \\(A\\) bekannt ist und \\(\\lambda\\) und \\(\\vec x\\) ausgerechnet werden soll, kann mithilfe dem charakteristischem Polynom berechnet werden.</p> <p>Die Eigenwerte von \\(A^{-1}\\) sind die Kehrwerte \\(\\frac 1 {\\lambda_i}\\) .</p>"},{"location":"22HS/HM1/4_Komplexe%20Zahlen.html#spektrum","title":"Spektrum","text":"<p>Das Spektrum \\(\\sigma(A)\\) ist die Menge aller Eigenwerte von der Matrix \\(A\\).</p>"},{"location":"22HS/HM1/4_Komplexe%20Zahlen.html#spur-und-determinante","title":"Spur und Determinante","text":"<p>Die Spur und Determinante von \\(A\\) (nicht \\(A-\\lambda I_n\\)) kann mit den Eigenwerten ausgerechnet werden. $$ \\DeclareMathOperator{\\tr}{tr} \\begin{align} \\det(A)&amp;=\\lambda_1\\cdot \\lambda_2 \\cdot \\cdot \\cdot \\lambda_n\\ \\tr(A)&amp;=a_11 + a_22 + ... + a_nn = \\lambda_1 + \\lambda_2 + ... + \\lambda_n \\end{align} $$</p>"},{"location":"22HS/HM1/4_Komplexe%20Zahlen.html#charakteristisches-polynom","title":"Charakteristisches Polynom","text":"\\[ p: \\lambda \\mapsto \\det(A-\\lambda I_n) \\] <p>Das charakteristische Polynom ist definiert das Polynom zum berechnen der Determinante von \\(A-\\lambda I_n\\).  Um \\(\\lambda\\) auszurechnen, kann das charakteristische Polynom mit \\(0\\) gleichgesetzt werden. Das Polynom ist vom Grad \\(n\\) und hat somit auch \\(n\\) L\u00f6sungen.</p> <p>Wenn \\(A-\\lambda I_n\\) eine Diagonalmatrix, obere Dreiecksmatrix oder untere Dreiecksmatrix ist, dann gilt: $$ \\det(A-\\lambda I_n)=(a_{11}-\\lambda)(a_{22}-\\lambda)...(a_{nn}-\\lambda) $$</p>"},{"location":"22HS/HM1/4_Komplexe%20Zahlen.html#determinante","title":"Determinante","text":"<p>F\u00fcr \\(A\\in \\R^{2\\times 2}\\) gilt: $$ \\det(A)= a_{11}\\cdot a_{22}- a_{12}\\cdot a_{21} $$ F\u00fcr \\(A \\in R^{3\\times 3}\\) gilt: $$ \\det(A)=b_{11} (b_{22}b_{33} - b_{23}b_{32})-b_{12}(b_{21}b_{33}-b_{23}b_{31}) + b_{13}(b_{21}b_{32} - b_{22}b_{31}) $$</p>"},{"location":"22HS/HM1/4_Komplexe%20Zahlen.html#konditionierung","title":"Konditionierung","text":"<p>Da, wenn die Eigenwerte mit dem charakteristischen Polynom ausgerechnet werden, ein schlecht konditioniertes Problem entsteht, sollten in der Praxis nie Eigenwerte f\u00fcr \\(A\\) mit \\(n&gt;3\\) mit dem charakteristischen Polynom und dessen Nullstellen berechnet werden.</p>"},{"location":"22HS/HM1/4_Komplexe%20Zahlen.html#eigenvektoren-eigenraum","title":"Eigenvektoren &amp; Eigenraum","text":"<p>Die Eigenvektoren k\u00f6nnen ausgerechnet werden, in dem die Eigenwerte \\(\\lambda\\) in die Matrix \\(A-\\lambda I_n\\) eingesetzt werden. Es gibt f\u00fcr eine Matrix \\(A\\in R^{n\\times n}\\) ein Gleichungssystem mit \\(n-\\rg(A-\\lambda I_n) \\DeclareMathOperator{\\rg}{rg}\\) freien Parametern.</p>"},{"location":"22HS/HM1/4_Komplexe%20Zahlen.html#vielfachheit","title":"Vielfachheit","text":"<p>Die geometrische Vielfachheit ist definiert als die Dimension des Eigenraums von \\(\\lambda\\). Sie gibt die Anzahl der linearen unabh\u00e4ngigen Eigenvektoren zum Eigenwert an und kann mit \\(n - \\rg(A-\\lambda I_n)\\) berechnet werden</p> <p>Die algebraische Vielfachheit ist die Multiplizit\u00e4t eines Eigenwertes, bzw. wie oft ein Eigenwert auf taucht. </p> <p>Die geometrische Vielfachheit ist immer gleich oder kleiner als die algebraische Vielfachheit. Dies heisst, dass wenn ein Eigenwert \\(\\lambda\\) \\(k\\)-fach auftritt und somit eine algebraische Vielfachkeit \\(k\\) hat, dann geh\u00f6ren mindestens ein und h\u00f6chstens \\(k\\) linear unabh\u00e4ngige Eigenvektoren zu \\(\\lambda\\).</p> <p>Wenn alle \\(n\\) Eigenwerte verschieden sind, so geh\u00f6rt zu jedem Eigenwert \\(\\lambda\\) genau ein linear unabh\u00e4ngiger Eigenvektor, welcher bis einen Faktor eindeutig bestimmbar ist.</p>"},{"location":"22HS/HM1/4_Komplexe%20Zahlen.html#numerische-berechnung-von-eigenwerte-und-eigenvektoren","title":"Numerische Berechnung von Eigenwerte und Eigenvektoren","text":"<p>Es gilt, wenn zwei Matrizen \\(A, B \\in \\R^2\\) zueinander \u00e4hnlich sind, dann gilt das \\(A\\) und \\(B\\) die selben Eigenwerte inkl. deren algebraischen Vielfachen.</p>"},{"location":"22HS/HM1/4_Komplexe%20Zahlen.html#ahnliche-diagonalisierbare-matrix","title":"\u00c4hnliche &amp; Diagonalisierbare Matrix","text":"<p>Eine Matrix \\(A\\in R^{n\\times n}\\) ist \u00e4hnlich zu der Matrix \\(B\\in R^{n\\times n}\\), wenn eine regul\u00e4re Matrix \\(T\\) existiert, mit welcher gilt: $$ B=T^{-1}AT $$ Ein Spezialfall davon ist, wenn \\(B\\) eine Diagonalmatrix ist. Dann ist \\(A\\) diagonalisierbar.</p> <p>Wenn zwei Matrizen \u00e4hnlich zueinander sind, dann gilt:</p> <ul> <li>Sie haben dieselbe Eigenwerte, inkl. deren algebraischen Vielfachheiten (und auch dem charakteristischen Polynom)</li> <li>Ist \\(\\vec x\\) ein Eigenvektor zum Eigenwert \\(\\lambda\\) von \\(B\\), dann ist \\(T\\vec x\\) ein Eigenvektor zum Eigenwert \\(\\lambda\\) von \\(A\\)</li> <li>Wenn \\(A\\) diagonalisierbar ist, dann sind die Diagonalelemente von \\(B\\) die Eigenwerte von \\(A\\) und die linear unabh\u00e4ngige Eigenvektoren von \\(A\\) stehen in den Spalten von \\(T\\)</li> </ul>"},{"location":"22HS/HM1/4_Komplexe%20Zahlen.html#spektralradius-und-spektralnorm","title":"Spektralradius (und Spektralnorm)","text":"\\[ \\rho(A)=\\max\\{ |\\lambda| \\mid \\lambda \\text{ ist ein Eigenwert von } A\\in \\R^{n\\times n} \\} \\] <p>Der Spektralradius von der Matrix \\(A\\) ist definiert als der h\u00f6chste Eigenwert von \\(A\\).</p>"},{"location":"22HS/HM1/4_Komplexe%20Zahlen.html#qr-verfahren","title":"QR-Verfahren","text":"<p>Das QR-Verfahren ist ein iterativen Algorithmus, mit welchem mithilfe der QR-Zerlerung eine obere Dreiecksmatrix \\(B\\) gefunden wird, welch \u00e4hnlich zu \\(A\\) ist und somit die selben Eigenwerte wie \\(A\\) besetitzt.</p> <p>Zu Beginn ist \\(A\\in \\R^{n\\times n}=A_0\\)  und \\(P_0 \\in R^{n\\times n}=I_n\\). Dann wird f\u00fcr \\(i=0, 1, 2, ...\\) folgende Schritte durchgef\u00fchrt. $$ \\begin{align} A_i&amp;:=Q_i\\cdot R_i\\ A_{i+1}&amp;:=R_i\\cdot Q_i \\ P_{i+1}&amp;:= P_i \\cdot Q_i \\end{align} $$ Die Matrix \\(A_i\\) konvergiert f\u00fcr \\(i\\to \\infty\\) gegen eine Matrix \\(A_\\infty\\), bei welcher die Diagonale nur einzelne Elemente oder \\(2\\times 2\\)-Bl\u00f6cke aufweist. Die Eigenwerte sind die einzelnen Elemente und die Eigenwerte der \\(2\\times 2\\)-Bl\u00f6cke.</p> <p>Die \\(2\\times 2\\)-Bl\u00f6cke bilden sich, wenn das algebraische Vielfache eines \\(\\lambda\\) gr\u00f6sser als \\(1\\) ist. Umgekehrt gilt, wenn alle Eigenwerte betragsm\u00e4ssig verschieden sind (also \\(\\forall i,j \\in \\N |\\lambda_i|\\neq |\\lambda_j|\\wedge i\\neq j\\)), dann gibt es keine \\(2\\times 2\\)-Bl\u00f6cke.</p> <p>Falls \\(A\\) symetrisch ist (\\(A^T=A\\)) und \\(\\forall i,j \\in \\N |\\lambda_i|\\neq |\\lambda_j|\\wedge i\\neq j\\) gilt, dann konvergiert die Folge der Matrizen \\(P_k=Q_0\\cdot Q_1\\cdot \\cdot \\cdot Q_k\\) gegen eine orthogonale Matrix (\\(Q^T=Q^{-1}\\)), deren Spalten die Eigenvektoren von \\(A\\) bilden.</p>"},{"location":"22HS/HM1/4_Komplexe%20Zahlen.html#von-mises-iteration-power-method","title":"von-Mises-Iteration (Power Method)","text":"<p>F\u00fcr die von-Mises-Iteration muss ein \\(A\\in R^{n \\times n}\\) diagonalisierbar sein und ein Startvektor \\(v_0\\in \\C^n\\) mit der L\u00e4nge \\(1\\) definiert sein.  $$ \\begin{align} v_{k+1}&amp;=\\frac{Av_k}{||Av_k||2}\\ \\lambda \\end{align} $$}&amp;=\\frac{v_k^TAv_k}{v_k^Tv_k</p>"},{"location":"22HS/HM1/SymPy.html","title":"SymPy","text":""},{"location":"22HS/HM1/SymPy.html#matrizen","title":"Matrizen","text":""},{"location":"22HS/HM1/SymPy.html#normalisieren","title":"Normalisieren","text":"<pre><code>A.norm(ord=None)\n</code></pre>"},{"location":"22HS/HM1/SymPy.html#gaus-jordan","title":"Gaus-Jordan","text":"<pre><code>A.gauss_jordan_solve(B, freevar=False)\n</code></pre>"},{"location":"22HS/HM1/SymPy.html#qr-solve","title":"QR-Solve","text":"<pre><code>Q, R = A.QRdecomposition()  # to only do the QR decompostion\nA.QRsolve(b)                # to solve A|b with the QR decomposition\n</code></pre>"},{"location":"22HS/HM1/SymPy.html#vereinfachen","title":"Vereinfachen","text":"<ul> <li>Mit <code>simplify(&lt;expr&gt;)</code> kann eine SymPy Ausdruckt vereinfacht werden.</li> <li><code>expand(&lt;polynom&gt;)</code> kann ein Polynom expandieren: <code>expand((x+1)**2)</code> ergibt <code>x + 2*x + 1</code></li> <li><code>factor(&lt;expandiertes polynom&gt;)</code> ist die Umkehrfunktion von <code>expand(&lt;polynom&gt;)</code>: <code>factor(x + 2*x + 1)</code> ergibt <code>(x+1)**2</code></li> <li><code>cancel(&lt;bruch&gt;)</code> nimmt ein Bruch und vereinfacht diesen</li> </ul>"},{"location":"22HS/HM1/SymPy.html#integrieren-und-ableiten","title":"Integrieren und Ableiten","text":"<p><code>diff(&lt;expr&gt;, &lt;var&gt;)</code> leitet den angegebenen Ausdruck ab.</p> <pre><code>diff(x**4 + 2*x**3 + 9, x)  # returns 4x**3 + 6*x**2\n(x**4 + 2*x**3 + 9).diff(x) # does the same thing\n</code></pre> <p>Mit <code>integrate(&lt;expr&gt;, &lt;var&gt;)</code> kann einen Ausdruckt integriert werden.</p> <pre><code>integrate(x**4+2*x**3 + 9, x)   # returns x**5/5+x**4/2 + 9*x\n(x**4+2*x**3 + 9).integrate(x)  # does the same thing\n</code></pre> <p>Wenn \u00fcber ein bestimmten Bereich integriert werden soll, kann <code>integrate(expr, (&lt;var&gt;, &lt;start&gt;, &lt;end&gt;))</code> verwendet werden.</p> <pre><code>integrate(x**4+2*x**3 + 9, (x, 0, 1))       # returns 9.7\n(x**4 + 2*x**3 + 9).integrate((x, 0, 1))    # does the same thing\n</code></pre>"},{"location":"22HS/HM1/SymPy.html#solvers","title":"Solvers","text":"<p>Mit <code>solveset(&lt;expr&gt;, &lt;var&gt;)</code> kann einen Ausdruck nach einer Variabel aufgel\u00f6st werden.</p> <pre><code>solveset(x**2 - x, x) # returns {0, 1}\n</code></pre>"},{"location":"22HS/HM1/summary/HM1%20Summary.html","title":"HM1 Summary","text":"<ul> <li>Gleitkommazahlen<ul> <li>Mantis</li> <li>Minimum und Maximum</li> <li>Rundungsfehler</li> <li>Konditionierung: Fortpflanzung von Fehler<ul> <li>Fehlerfortpflanzung bei Summation</li> <li>Fehlerfortpflanzungs-Tabelle</li> </ul> </li> <li>Maschinengenauigkeit (max. relativer Fehler)</li> <li>IEC / IEEE Gleitkommazahlen</li> </ul> </li> <li>Nullstellen<ul> <li>Fixpunktiteration<ul> <li>Banachscher Fixpunktsatz</li> </ul> </li> <li>Newton-Verfahren<ul> <li>Vereinfachtes Newton-Verfahren</li> </ul> </li> <li>Sekanten-Verfahren</li> <li>Konvergenzordnung</li> <li>Fehlerabsch\u00e4tzung<ul> <li>a-priori und a-posteriori Absch\u00e4tzung</li> </ul> </li> </ul> </li> <li>Lineare Gleichungssysteme<ul> <li>Definitionen</li> <li>Gaus-Algorithmus<ul> <li>Fehlerfortpflanzung und Pivotisierung</li> </ul> </li> <li>LR-Zerlegung<ul> <li>Zeilenvertauschung</li> </ul> </li> <li>QR-Zerlegung<ul> <li>Orthoggonalmatrix</li> <li>Householder-Matrix Beispiel</li> </ul> </li> <li>Vektornorm</li> <li>Fehlerrechnungen</li> <li>Iterative Verfahren<ul> <li>Jacobi Verfahren<ul> <li>Beispiel - Jacobi-Verfahren</li> </ul> </li> <li>Gaus-Seidel-Verfahren</li> </ul> </li> <li>Konvergenz<ul> <li>Absch\u00e4tzung</li> <li>Diagonaldominanz</li> </ul> </li> </ul> </li> <li>Komplexe Zahlen<ul> <li>Konjugierte Komplexe Zahlen</li> <li>Darstellungs Formen</li> <li>Grundrechungsarten</li> <li>Polynome L\u00f6sen</li> <li>Eigenwerte<ul> <li>Spektrum</li> <li>Spur und Determinante</li> <li>Charakteristisches Polynom<ul> <li>Determinante</li> </ul> </li> <li>Konditionierung</li> </ul> </li> <li>Eigenvektoren &amp; Eigenraum</li> <li>Vielfachheit</li> <li>Numerische Berechnung von Eigenwerte und Eigenvektoren<ul> <li>\u00c4hnliche &amp; Diagonalisierbare Matrix</li> </ul> </li> <li>Spektralradius (und Spektralnorm)</li> <li>QR-Verfahren</li> <li>von-Mises-Iteration (Power Method)</li> </ul> </li> <li>SymPy<ul> <li>Matrizen<ul> <li>Normalisieren</li> <li>Gaus-Jordan</li> <li>QR-Solve</li> </ul> </li> <li>Vereinfachen</li> <li>Integrieren und Ableiten</li> <li>Solvers</li> </ul> </li> </ul>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#gleitkommazahlen","title":"Gleitkommazahlen","text":"","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#mantis","title":"Mantis","text":"\\[ x=m\\cdot B^e\\\\ 12000 = 1.2 \\cdot 10^4 \\] <p>Dabei gilt \\(x\\in \\R\\), die Mantis  \\(m \\in R\\), die Basis \\(B \\in \\N\\)  und den Exponent \\(e\\in \\Z\\) </p> <p>Eine Zahl kann folgendermassen Dargestellt werden: $$ m=\\pm0.m_1m_2m_3m_n\\ e=\\pm e_1e_2e_3e_l $$ Dabei ist der Bereich der darstellbaren Zahlen folgendermassen:  $$ M={x \\in \\R \\vert x=\\pm0.m_1m_2m_3...m_n\\cdot B^{\\pm e_1e_e...e_m}} $$</p> <p>Eine Zahl wird machinendarstellbar genannt, wenn \\(m_1\\neq 0\\) ist</p> <p>Die Anzahl Zahlen kann mit \\(2\\cdot B^{n-1}\\cdot (2\\cdot B^e-1)+1\\), wenn der Exponent und Mantis ein Vorzeichen hat. Falls die Mantis kein Vorzeichen hat, gibt es: \\(B^{n-1}\\cdot (2\\cdot B^e-1)+1\\). Wenn der Exponent auch kein Vorzeichen hat, dann wird daraus \\(B^{n-1}\\cdot B^e+1\\).</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#minimum-und-maximum","title":"Minimum und Maximum","text":"\\[ x_{max}=B^{e_{max}}-B^{e_{max}-n}=(1-B^{-n})\\cdot B^{e_{max}}\\\\ x_{min}=B^{e_{min}-1} \\] <p>Hier ist ein Beispiel: $$ B=2, n=4, 0 \\le e \\le 3\\ x_{max}=0.1111_2\\cdot 2^3=111.1_2=7.5_{10}\\ x_{max}=2^3-2^{3-4}=8-0.5=7.5_{10}\\ \\ x_{min}=0.1000_2 \\cdot 2^0 = 0.1_2=0.5_{10}\\ X_{min}=2^{0-1}=2^{-1}=0.5_{10} $$</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#rundungsfehler","title":"Rundungsfehler","text":"<p>Der absolute Fehler bei einer Rundung von \\(x\\) zu der N\u00e4herung \\(\\tilde x\\) ist definiert als \\(\\vert \\tilde x - x \\vert\\). Der relative Fehler ist \\(\\left\\vert \\frac{\\tilde x - x}{x} \\right\\vert\\).</p> <p>Wenn \\(\\tilde x=rd(x)\\) gilt, wobei \\(rd(x)\\) die Zahl \\(x\\) rundet, dann ist der h\u00f6chste absolute Fehler: \\(\\vert rd(x)-x\\vert \\le 0.\\underbrace{00...00}_{n}\\frac B 2\\cdot B^e=\\frac B 2\\cdot B^{e-n-1}\\)</p> <p>Als Beispiel mit der Basis \\(B=10\\), eine siebenstellige Mantisse \\(n=7\\) und \\(x=180.1234567=0.1801234567\\cdot 10^3\\): \\(\\vert rd(x)- x\\vert \\le 0.\\underbrace{0000000}_{n=7}5\\cdot 10^3=0.5\\cdot 10^{3-7}=0.5\\cdot10^{-4}\\)</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#konditionierung-fortpflanzung-von-fehler","title":"Konditionierung: Fortpflanzung von Fehler","text":"<p>Der absolute Fehler von einer Operation \\(f(x)\\)  kann als \\(|f'(x)|\\cdot |\\tilde x - x|\\) angen\u00e4hert werden. Beim relativen Fehler gilt \\(\\frac{|f'(x)|\\cdot|x|}{|f(x)|}\\cdot \\frac{|\\tilde x - x|}{|x|}\\) </p> <p>Den Faktor \\(K:= \\frac{|f'(x)|\\cdot|x|}{|f(x)|}\\) nennt sich Konditionszahl und sagt aus, um wie viel sich der relativen Fehler von \\(x\\) bei einer Funktionsauswertung von \\(f(x)\\) ver\u00e4ndert. Dabei wird zwischen gut konditionierten Problemen, bei welchen die Konditionszahl klein ist, und schlecht konditionierten Problemen, bei welchen die Konditionszahl gross ist, unterschieden. $$ K:= \\frac{|f'(x)|\\cdot|x|}{|f(x)|} $$</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#fehlerfortpflanzung-bei-summation","title":"Fehlerfortpflanzung bei Summation","text":"<p>F\u00fcr \\(f(x)=x+c\\), gilt \\(f'(x)=1\\) und folgendes f\u00fcr \\(K\\): $$ K=\\frac{|x|}{|x+c|} $$ An dieser Formel kann das Problem der Ausl\u00f6schung beobachtet werden: Wenn von \\(x\\) eine \u00e4hliche Zahl \\(c\\) subrahiert wird, dann wird \\(K\\) sehr gross. </p> <p>Oder allgemeiner formuliert, wird von einer Zahl eine zweite \u00e4hnliche grosse Zahl subtrahiert, wird der relative Fehler sehr hoch. Dies kann zum Teil durch geschicktes Umformen vermieden werden. Meist entstehen aber andere Ausl\u00f6schungs-Zentren.</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#fehlerfortpflanzungs-tabelle","title":"Fehlerfortpflanzungs-Tabelle","text":"","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#maschinengenauigkeit-max-relativer-fehler","title":"Maschinengenauigkeit (max. relativer Fehler)","text":"<p>Die Maschinengenauigkeit ist der maximale relative Fehler, der beim Runden entstehen kann. $$ eps = \\frac B 2\\cdot B^{-n}=\\frac 1 2 \\cdot B^{1-n} $$</p> <p>\\(eps\\) kann auch definiert werden, als die kleinste Zahl bei der \\(1+eps&gt;1\\) noch gilt</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#iec-ieee-gleitkommazahlen","title":"IEC / IEEE Gleitkommazahlen","text":"<p>IEEE definiert eine <code>single</code> Gleitkommazahl, welche 32bit lang ist und das folgende Schema besitzt:</p> <p>Ebenfalls gibt es eine <code>double</code> Gleitkommazahl, welche aus 64bit besteht und folgendes Schema besitzt: </p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#nullstellen","title":"Nullstellen","text":"","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#fixpunktiteration","title":"Fixpunktiteration","text":"<p>F\u00fcr das ben\u00fctzten der Fixpunktiteration muss die Gleichung in der Fixpunktform \\(F(x)=x\\) sein. $$ x_{n+1}=F(x_n) $$</p> <p>Damit die Fixpunktiteration zum Resultat konvergiert, muss f\u00fcr die Ableitung \\(F'(x)&lt;1\\)  gelten. Dies wird auch im Banachscher Fixpunktsatz wiedergespiegelt.</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#banachscher-fixpunktsatz","title":"Banachscher Fixpunktsatz","text":"<p>Es gilt folgendes f\u00fcr \\(F: [a, b] \\to [a, b]\\) und die Konstante \\(\\alpha \\in ]0, 1[\\) $$ |F(x) - F(y)|\\le \\alpha\\cdot |x - y| \\text{ wobei gilt: } x, y\\in [a, b]\\ \\text{oder}\\ \\frac{|F(x)-F(y)|}{|x - y|} \\le \\alpha $$ In Deutsch heisst dies, dass die Differenz \\(F(x) - F(y)\\) nie gr\u00f6sser als \\(x-y\\) sein darf, oder dass die Steigung nicht gr\u00f6sser als \\(1\\) darf sein und muss gr\u00f6sser als 0 sein.</p> <p>Mathematischer: \\(F\\) muss Lipschitz-stetig (selbst-abbildend) und kontraktiv sein. Zum argumentieren, dass es selbst abbildend ist, \\(F(x)\\) muss monoton steigend sein (darf nie sinken) und \\(F(a)\\) und \\(F(b)\\) m\u00fcssen zwischen \\(a\\) und \\(b\\) sein.</p> <p>Zum argumentieren, dass es kontraktiv ist, muss \\(F(x)\\) </p> <p>Wenn dies gegeben ist, </p> <ul> <li>hat \\(F\\) genau einen Fixpunkt \\(\\overline x\\) in \\([a, b]\\)</li> <li>konvergiert die Fixpunktiteration \\(x_{n+1}=F(x_n)\\) gegen \\(\\overline x\\) f\u00fcr alle Startwerte \\(x_0\\in [a, b]\\)</li> <li>Die a-priori und a-posteriori Absch\u00e4tzungen gelten</li> </ul> <p>\\(\\alpha\\) kann auch als die gr\u00f6sstm\u00f6gliche Steigung definiert werden: $$ \\alpha \\in ]0, 1[\\ \\alpha =\\max_{x_0\\in[a, b]} |F'(x_0)| $$</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#newton-verfahren","title":"Newton-Verfahren","text":"<p> $$ x_{n+1}=x_n-\\frac{f(x_n)}{f'(x_n)} $$ Um sicherzustellen, dass das Newton-Verfahren f\u00fcr einen Startwert \\(x_0\\) zum Resultat konvergiert, sollte die folgende Bedingung zutreffen: $$ \\left|\\frac{f(x) \\cdot f''(x)}{[f'(x)]^2}\\right|&lt; 1  $$ Diese Bedingung wird typischerweise f\u00fcr den Startwert \\(x_0\\) \u00fcberpr\u00fcft.</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#vereinfachtes-newton-verfahren","title":"Vereinfachtes Newton-Verfahren","text":"<p>Beim vereinfachten Newton-Verfahren wird die Steigung von \\(x_0\\) f\u00fcr alle Iterationen verwendet: $$ x_{n+1}=x_n-\\frac{f(x_n)}{f'(x_0)} $$</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#sekanten-verfahren","title":"Sekanten-Verfahren","text":"<p> $$ x_{n+1}=x_n-\\frac{x_n-x_{n-1}}{f(x_n)-f(x_{n-1})}\\cdot f(x_n) $$</p> <p>Beim Sekanten-Verfahren wird die Ableitung von \\(f\\) nicht ben\u00f6tigt, da die Steigung mit \\(\\frac{f(x_1) - f(x_0)}{x_1 - x_0}\\) berechnet wird.</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#konvergenzordnung","title":"Konvergenzordnung","text":"\\[ |x_{n+1}-\\overline x|\\le c \\cdot |x_n-\\overline x|^q \\] <p>Das \\(c \\in ]0, \\infty[\\) ist eine Konstante (wie bei Big-O).  \\(|x_{n+1}-\\overline x|\\) ist der absoluten Fehler von \\(x_{n+1}\\). Wenn \\(q=1\\) ist, dann konvergiert es linear (meist wird dabei auch noch \\(c &lt; 1\\) verlangt). Bei \\(q=2\\), quadratisch, und so weiter.</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#fehlerabschatzung","title":"Fehlerabsch\u00e4tzung","text":"<p>\\(x_n\\) ist eine mit iterieren erreichte Nullstelle, \\(\\varepsilon\\) ist ein maximalen Fehler, welcher Verlangt ist und \\(\\overline x\\) ist die exakte Nullstelle. $$ f(x_n+\\varepsilon)\\cdot f(x_n-\\varepsilon)&lt;0 \\Rightarrow \\vert x_n - \\overline x\\vert &lt; \\varepsilon $$ Oder auf Deutsch: Wenn es einen Vorzeichenwechsel zwischen \\([x_n-\\varepsilon; x_n + \\varepsilon]\\) gibt, dann gibt es eine Nullstelle \\(\\overline x\\) in diesem Intervall. Aus dem ergibt sich, dass die Differenz zwischen der Nullstelle \\(\\overline x\\) und \\(x_n\\) muss kleiner als \\(\\varepsilon\\) sein</p> <p></p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#a-priori-und-a-posteriori-abschatzung","title":"a-priori und a-posteriori Absch\u00e4tzung","text":"<p>Mit der a-priori Absch\u00e4tzung kann der maximale absolute Fehler nach \\(n\\) Iterationen von den ersten zwei Iterationen \\(x_0\\) und \\(x_1\\) gesch\u00e4tzt werden: $$ |x_n-\\overline x|\\le \\frac{\\alpha^n}{1-\\alpha}\\cdot |x_1 - x_0|\\ n=\\log_\\alpha\\left ( \\frac{|x_n - \\overline x|\\cdot (1-\\alpha)}{|x_1 - x_0|}\\right ) $$ Mit der a-posteriori Absch\u00e4tzung kann der maximale absoluten Fehler nach \\(n\\)  Iterationen von der \\(n\\)-ten und \\(n-1\\)-te Iteration absch\u00e4tzen: $$ |x_n-\\overline x|\\le \\frac \\alpha {1- \\alpha}\\cdot|x_n - x_{n-1}| $$</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#lineare-gleichungssysteme","title":"Lineare Gleichungssysteme","text":"","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#definitionen","title":"Definitionen","text":"<ul> <li> <p>Untere Dreiecksmatrix   Eine \\(n\\times n\\)-Matrix \\(L=(l_{ij})\\) f\u00fcr welche gilt \\(l_{ij}=0\\) f\u00fcr \\(j &gt; i\\). Sie ist normiert, wenn \\(l_{ii}=1\\) gilt   </p> </li> <li> <p>Obere Dreiecksmatrix</p> </li> </ul> <p>Eine \\(n\\times n\\)-Matrix \\(L=(l_{ij})\\) f\u00fcr welche gilt \\(l_{ij}=0\\) f\u00fcr \\(i &gt; j\\). Sie ist normiert, wenn \\(l_{ii}=1\\) gilt   </p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#gaus-algorithmus","title":"Gaus-Algorithmus","text":"<p>Siehe <code>22FS/LA/01_Lineare Gleichungssysteme.md</code></p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#fehlerfortpflanzung-und-pivotisierung","title":"Fehlerfortpflanzung und Pivotisierung","text":"<p>Beim \"normalen\" Gaus wird bei jeder Zeile mit \\(\\lambda=\\frac{a_{ji}}{a_{ii}}\\) multipliziert, was zu grossen Rundungsfehlern f\u00fchren kann. Um dies zu vermeiden, wird f\u00fcr jeden Schritt \\(i\\) zwei Zeile getauscht, dass die gr\u00f6sste Zahl in der \\(i\\)-ten Spalte bei \\(a_{ii}\\) ist.</p> <p>Im folgende Beispiel wird \\(A\\) pivotisiert: $$ A=\\begin{pmatrix} 1 &amp; 2 &amp; -1\\ 4 &amp; -2 &amp; 6 \\ 3 &amp; 1 &amp; 0 \\ \\end{pmatrix} \\xrightarrow{z_1 \\leftrightarrow z_2} \\begin{pmatrix} 4 &amp; -2 &amp; 6 \\ 1 &amp; 2 &amp; -1\\ 3 &amp; 1 &amp; 0 \\ \\end{pmatrix} \\rightarrow \\begin{pmatrix} 4 &amp; -2 &amp; 6 \\ 0 &amp; 2.5 &amp; -2.5 \\ 0 &amp; 2.5 &amp; -4.5 \\ \\end{pmatrix} \\rightarrow \\begin{pmatrix} 4 &amp; -2 &amp; 6 \\ 0 &amp; 2.5 &amp; -2.5 \\ 0 &amp; 0 &amp; -2 \\ \\end{pmatrix} $$</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#lr-zerlegung","title":"LR-Zerlegung","text":"<p>F\u00fcr die LR-Zerlegung wird die Gleichung \\(Ax=b\\) umgestellt: $$ \\underbrace{A}_{LR}x=b\\ L\\underbrace{R\\cdot x}_y=b\\ Ly=b\\ Rx=y $$</p> <p>Die \\(L\\) und \\(R\\) Matrizen sind die untere-, bzw. obere Dreiecksmatrize von \\(A\\): $$ L=\\begin{pmatrix} 1 &amp; 0 &amp; 0 &amp; 0\\ l_{21} &amp; 1&amp; 0 &amp; 0 \\ l_{31} &amp; l_{32} &amp; 1 &amp; 0\\ l_{41} &amp; l_{42} &amp; l_{4_3} &amp; 1\\ \\end{pmatrix} R=\\begin{pmatrix} r_{11} &amp; r_{12} &amp; r_{13} &amp; r_{14}\\ 0  &amp; r_{22} &amp; r_{23} &amp; r_{24} \\ 0 &amp; 0 &amp; r_{33} &amp; r_{34}\\ 0 &amp; 0 &amp; 0&amp; r_{44}\\ \\end{pmatrix} $$ Dabei wird \\(R\\), wie gewohnt, mit dem Gauss-Algorithmus gebildet. Dabei sind die \\(\\lambda_{ji}\\) aus \\(z_j:=z_j - \\lambda_{ji}\\cdot z_i\\) gerade \\(l_{ji}=\\lambda_{ji}\\).</p> <p>Beispiel: $$ \\begin{align} A=\\begin{pmatrix} -1 &amp;  1 &amp;  1 \\  1 &amp; -3 &amp; -2 \\  5 &amp;  1 &amp;  4 \\ \\end{pmatrix}\\ \\xrightarrow{z_2 := z_2 - \\frac 1 {-1}\\cdot z_1 \\Rightarrow \\lambda_21=\\frac{1}{-1}} \\begin{pmatrix} -1 &amp;  1 &amp;  1 \\  0 &amp; -2 &amp; -1 \\  5 &amp;  1 &amp;  4 \\ \\end{pmatrix} \\ \\xrightarrow{z_3 := z_3 - \\frac 5 {-1}\\cdot z_1\\Rightarrow \\lambda_31=\\frac{5}{-1}} \\begin{pmatrix} -1 &amp;  1 &amp;  1 \\  0 &amp; -2 &amp; -1 \\  0 &amp;  6 &amp;  9 \\ \\end{pmatrix} \\ \\xrightarrow{z_3 := z_3 - \\frac 6 {-2}\\cdot z_2\\Rightarrow \\lambda_32=\\frac{6}{-2}} \\begin{pmatrix} -1 &amp;  1 &amp;  1 \\  0 &amp; -2 &amp; -1 \\  0 &amp;  0 &amp;  6 \\ \\end{pmatrix}\\ L=\\begin{pmatrix}  1 &amp;  0 &amp;  0 \\  \\frac{1}{-1} &amp; 1 &amp; 0 \\  \\frac 5 {-1} &amp;  \\frac{6}{-2} &amp;  1 \\ \\end{pmatrix} \\end{align} $$</p> <p>U m nun nach \\(x\\) aufzul\u00f6sen wird folgendes gerechnet:</p> <ol> <li>Das Gleichungssystem \\(Ly=b\\) wird durch Vorw\u00e4rtseinsetzen nach \\(y\\) aufgel\u00f6st.</li> <li>Im Gleichungssystem \\(Rx=y\\) wird nun \\(y\\) eingesetzt und mit Vorw\u00e4rtseinsetzten nach \\(x\\) gel\u00f6st.</li> </ol>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#zeilenvertauschung","title":"Zeilenvertauschung","text":"<p>Wenn Zeilen vertauscht werden, muss die Permutationsmatrix \\(P\\) berechnet werden. F\u00fcr jede Vertauschung wird die Matrix \\(P_i\\) erstellt. Alle \\(P_i\\) Matrix werden dann zu der Permutationsmatrix zusammen gerechnet: \\(P=P_n\\cdot P_{n-1} \\cdot ... \\cdot P_1\\)</p> <p>Das Gleichungssystem wird nun zu:  $$ \\begin{align} PAx&amp;=Pb\\ LRx&amp;=Pb\\ Ly&amp;=Pb\\ Rx&amp;=y \\end{align} $$ Achtung: Bei Zeilenvertauschung werden auch die Zeilen in \\(L\\) vertauscht.</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#qr-zerlegung","title":"QR-Zerlegung","text":"\\[ \\begin{align} \\underbrace{A}_{QR}x&amp;=b\\\\ QRx&amp;=b\\\\ R&amp;= Q_n\\cdot Q{n-1}\\cdot ... \\cdot Q_1\\cdot A\\\\ Rx&amp;=Q^Tb\\\\ \\end{align} \\] <p>Der Gedanke ist, dass eine Orthogonalmatrix \\(Q\\) gefunden wird, f\u00fcr welche gilt \\(QR=A\\). Dabei ist \\(R\\) eine obere Dreiecksmatrix. Danach kann \\(Rx=Q^Tb\\) einfach gel\u00f6st werden.</p> <p>Um \\(Q\\) zu berechne wird die die Householder-Matrix \\(H\\) f\u00fcr jede Spalte schrittweise berechnet, so dass gilt: $$ H_1\\cdot A =H_1\\cdot  \\begin{pmatrix} * &amp; * &amp; * &amp; \\ * &amp; * &amp; * &amp; \\ * &amp; * &amp; * &amp; \\ * &amp; * &amp; * &amp; \\ \\end{pmatrix} = \\begin{pmatrix} * &amp; * &amp; * &amp; \\ 0 &amp; * &amp; * &amp; \\ 0 &amp; * &amp; * &amp; \\ 0 &amp; * &amp; * &amp; \\ \\end{pmatrix} $$ Dies wird erreicht, in dem folgendes gerechnet wird: $$ \\DeclareMathOperator{\\sign}{sign}</p> <p>\\sign(x)= \\left { \\begin{array}{ll} +1 &amp; \\text{f\u00fcr } x \\ge 0\\ -1 &amp; \\text{f\u00fcr } x &lt; 0 \\end{array}  \\right . \\  \\ \\begin{align} a_1=&amp;\\begin{pmatrix}a_{11}\\a_{21}\\a_{31}\\a_{41}\\end{pmatrix}\\ e_1=&amp;\\begin{pmatrix}1 \\ 0 \\ 0 \\ 0 \\end{pmatrix}\\ v_1 :=&amp; a_1 + \\sign(a_{11})\\cdot |a_1|\\cdot e_1\\ u_1 :=&amp; \\frac 1 {|v_1|}\\cdot v_1\\ H_1 :=&amp; I_4 - 2\\cdot u_1 \\cdot u_1^T\\ Q_1 =&amp; H_1 \\end{align} $$ Nun ist \\(Q_1\\) berechnet. Dasselbe wird nun f\u00fcr \\(Q_2\\) wiederholt, aber mit \\(A_2\\): $$ \\begin{align} H_1\\cdot A =&amp; \\left ( \\begin{array}{c|ccc} * &amp; * &amp; * &amp; *\\ \\hline 0 \\ 0 &amp; &amp; A_2\\  0 \\ \\end{array} \\right ) \\ a_2=&amp;\\begin{pmatrix}a_{22}\\a_{32}\\a_{42}\\end{pmatrix}\\ e_2=&amp;\\begin{pmatrix}1 \\ 0 \\ 0 \\end{pmatrix}\\ v_2 :=&amp; a_2 + \\sign(a_{22})\\cdot |a_2|\\cdot e_2\\ u_2 :=&amp; \\frac 1 {|v_2|}\\cdot v_2\\ H_2 :=&amp; I_3 - 2\\cdot u_2 \\cdot u_2^T\\ Q_2 =&amp; \\left ( \\begin{array}{c|ccc} 1 &amp; 0 &amp; 0 &amp; 0\\ \\hline 0 \\ 0 &amp; &amp; H_2\\  0 \\ \\end{array} \\right ) \\end{align} $$ Dies nun f\u00fcr \\(Q_3\\) wiederholt. </p> <p>Danach ergibt sich: $$ \\underbrace{Q_4\\cdot Q_3 \\cdot Q_2 \\cdot Q_1}_{Q^{-1}}\\cdot A=\\begin{pmatrix} * &amp; * &amp; * &amp; * \\ 0 &amp; * &amp; * &amp; * \\ 0 &amp; 0 &amp; * &amp; * \\ 0 &amp; 0 &amp; 0 &amp; * \\ \\end{pmatrix}\\ Q = (Q_3 \\cdot Q_2 \\cdot Q_1)^{-1}=Q_1^{-1}\\cdot Q_2^{-1} \\cdot Q_3^{-1}=Q_1^T\\cdot Q_2^T \\cdot Q_3^T $$</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#orthoggonalmatrix","title":"Orthoggonalmatrix","text":"<p>Daf\u00fcr eine Matrix eine Orthogonalmatrix ist, muss folgendes gelten: $$ Q^T\\cdot Q=I \\Leftrightarrow Q^T = Q^{-1} $$</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#householder-matrix-beispiel","title":"Householder-Matrix Beispiel","text":"\\[ \\vec u=\\pmatrix{1 \\\\ 2 \\\\ 3}\\\\ \\vec u \\text{ ist nicht normiert, daher:}\\\\ \\tilde u = \\frac {\\vec u}{|\\vec u|}=\\frac 1 {\\sqrt{14}}\\pmatrix{1 \\\\ 2 \\\\ 3}\\\\ H = I_n - 2\\tilde u \\tilde u ^T\\\\ =  \\pmatrix{1 &amp; 0 &amp; 0\\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 1} - 2\\cdot \\frac 1 {\\sqrt{14}} \\pmatrix{1 \\\\ 2 \\\\ 3} \\cdot \\pmatrix{1 &amp; 2 &amp; 3} \\]","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#vektornorm","title":"Vektornorm","text":"\\[ ||.|| : \\R^n \\to \\R\\\\  \\text{Dies ist definiert durch:}\\\\ ||x|| \\ge 0 \\text{ und } ||x|| = 0 \\Leftrightarrow x = 0\\\\ ||\\lambda x|| = |\\lambda| \\cdot ||x||\\\\ ||x + y || \\le ||x|| + ||y|| \\] <p>Es gibt mehrere Normen f\u00fcr Vektoren, welche diese Definition erf\u00fcllt:</p> <ul> <li>Erste-Norm, Summennorm: \\(||\\vec x||_1=\\sum^n_{i=1}|x_i|\\)</li> <li>Zweite-Norm - Euklidischenorm: \\(||\\vec x||_2=\\sqrt{\\sum^n_{i=1}x^2}\\)</li> <li>\\(\\infty\\)-Norm - Maximumnorm: \\(||\\vec x||_\\infty=\\max_{i=1,...,n}|x_i|\\)</li> </ul> <p>Ebenfalls gibt es mehrere Normen f\u00fcr Matrixen:</p> <ul> <li>Erste-Norm, Spaltensummennorm: \\(||A||_1=\\max_{j=1, ..., n}\\sum^n_{i=1}|a_{ij}|\\)</li> <li>Zweite-Norm: Spektralnorm: \\(||A||_2=\\sqrt {(\\rho(A^TA))}\\)</li> <li>\\(\\infty\\)-Norm: Zeilensummennorm: \\(||A||_\\infty=\\max_{i=1,..n}\\sum^n_{j=1} |a_{ij}|\\)</li> </ul>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#fehlerrechnungen","title":"Fehlerrechnungen","text":"<p>Ein gest\u00f6rtes Gleichunssystem kann folgendermassen definiert werden als \\(A\\tilde x=\\tilde b = b + \\Delta b\\) . Dabei ist  \\(\\Delta b\\) das Residuum oder Defekt und  \\(\\Delta x = \\tilde x - x\\) den Fehler.</p> <p>F\u00fcr den absoluten und relativen Fehler gilt nun folgendes: $$ \\begin{align} ||x - \\tilde x|| &amp;\\le || A^{-1} || \\cdot || b - \\tilde b || \\ \\frac {||x - \\tilde x||}{||x||} &amp;\\le ||A|| \\cdot  || A^{-1} || \\cdot \\frac{|| b - \\tilde b ||}{||b||} \\ \\ \\DeclareMathOperator{\\cond}{cond} \\cond(A)&amp;=||A|| \\cdot || A^{-1} || \\end{align} $$ Wenn \\(\\cond(A)\\) gross ist, k\u00f6nnen kleine Fehler in \\(\\vec b\\) zu grossen Rundungsfehler im Ergebnis \\(\\vec x\\) f\u00fchren. Die Matrix \\(A\\) ist dann schlecht Konditioniert.</p> <p>Wenn nicht nur \\(\\vec b\\) sonder auch \\(A\\) einen Fehler enthaltet, dann gelten die folgenden Formeln: $$ \\begin{align} &amp;\\text{Wenn } \\cond(A) \\cdot \\frac{||A - \\tilde &gt;||}{||A||} &lt; 1 \\text{ dann gilt:}\\ &amp;\\frac {||x - \\tilde x||}{||x||} \\le \\frac{\\cond(A)}{1- \\cond(A) \\cdot \\frac{||A - \\tilde A||}{||A||}} \\cdot  \\left( \\frac{|| A - \\tilde A ||}{||A||} + \\frac{|| b - \\tilde b ||}{||b||}\\right)  \\end{align} $$</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#iterative-verfahren","title":"Iterative Verfahren","text":"","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#jacobi-verfahren","title":"Jacobi Verfahren","text":"<p>Die Gleichung \\(Ax=b\\) soll in \\((L + D + R)x=b\\) umgewandlet werden.</p> <p></p> <p>Danach sagt das Verfahren vor: $$ x^{(k+1)}=-D^{-1}(L + R)x^{(k)}+D^{-1}b\\ \\text{oder in der Summenform:}\\ x_i^{(k+1)}=\\frac 1{a_{ii}}\\cdot\\left(b_i - \\sum^n_{j_1, j \\neq i}a_{ij}x_j^{(k)}\\right)\\ \\text{Dabei ist } i \\text{ die Zeile in der Matrix} $$</p> <p>Notiz: Eine Diagonalmatrix (wie \\(D\\)) zu invertieren ist trivial: $$ D=\\pmatrix{2 &amp; 0\\ 0  &amp; 5} \\to  D^{-1}=\\pmatrix{\\frac 1 2 &amp; 0 \\ 0 &amp; \\frac 1 5} $$ </p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#beispiel-jacobi-verfahren","title":"Beispiel - Jacobi-Verfahren","text":"","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#gaus-seidel-verfahren","title":"Gaus-Seidel-Verfahren","text":"\\[ x^{(k+1)}=-(D+L)^{-1}Rx^{(k)}+(D+L)^{-1}b\\\\ \\text{oder in der Summenform:}\\\\ x_i^{(k+1)}=\\frac 1{a_{ii}}\\cdot\\left(b_i - \\sum^{i-1}_{j=1}a_{ij}x_j^{(k+1)} - \\sum^{n}_{j=i+1}a_{ij}x_j^{(k)}\\right)\\\\ \\text{Dabei ist } i \\text{ die Zeile in der Matrix} \\]","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#konvergenz","title":"Konvergenz","text":"<p>Mit der folgenden Fixpunktiteration \\(x^{(k+1)}=Bx^{(n)}+c\\) ist die Konvergenz definiert als:</p> <ul> <li>\\(\\overline x\\) ist anziehend, wenn \\(||B|| &lt; 1\\)</li> <li>\\(\\overline x\\) ist abstossend, wenn \\(||B|| &gt; 1\\)</li> </ul> <p>F\u00fcr Jacobi-Verfahren ist \\(B\\) und \\(c\\) folgendermassen definiert: \\(x^{(k+1)}=-\\underbrace{D^{-1}(L + R)}_B\\cdot x^{(k)}+\\underbrace{D^{-1}}_c \\cdot b\\)</p> <p>F\u00fcr das Gaus-Seidel-Verfahren ist \\(B\\) und \\(c\\) definiert als: \\(x^{(k+1)}=\\underbrace{-(D+L)^{-1}R}_B\\cdot x^{(k)}+\\underbrace{(D+L)^{-1}}_c \\cdot b\\)</p> <p>\\(\\overline x\\) ist ebenfalls anziehend, wenn \\(\\rho(B)&lt;1\\) ist (\\(\\rho(B)\\) ist der Spektralradius von \\(B\\)).</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#abschatzung","title":"Absch\u00e4tzung","text":"\\[ \\begin{align} \\text{a-priori Absch\u00e4tzung: }&amp; ||x{(n)}-\\tilde x|| \\le \\frac{||B||^n}{1-||B||}\\cdot || x^{(1)}-x^{0}||\\\\ \\text{a-posteriori Absch\u00e4tzung: }&amp; ||x{(n)}-\\tilde x|| \\le \\frac{||B||}{1-||B||}\\cdot || x^{(n)}-x^{n-1}|| \\end{align} \\] \\[ n=\\log_\\alpha\\left ( \\frac{|x_n - \\overline x|\\cdot (1-\\alpha)}{|x_1 - x_0|}\\right ) \\]","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#diagonaldominanz","title":"Diagonaldominanz","text":"<p>Eine Matrix wird als Diagonaldominanz bezeichnet, wenn entweder</p> <ul> <li>f\u00fcr alli \\(i=1,...,n\\): \\(|a_{ii}|&gt; \\sum^n_{j=1, j\\neq i}|a_{ij}|\\)</li> <li>f\u00fcr alli \\(j=1,...,n\\): \\(|a_{jj}|&gt; \\sum^n_{i=1, i\\neq j}|a_{ij}|\\)</li> </ul>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#komplexe-zahlen","title":"Komplexe Zahlen","text":"<p>Eine Komplexe Zahl hat einen imagin\u00e4ren und einen realen Komponent. Diese werden entweder in der Form \\(z=x+iy\\) oder der Form \\(P(x, y)\\) geschrieben, wobei gilt \\(x, y \\in \\R\\).</p> <p>\\(i\\) ist definiert als \\(i^2=-1\\)</p> <p>Die Definition von \\(\\C\\) ist \\(\\C=\\{z | z = x+iy \\wedge x,y \\in \\R \\}\\)</p> <p>Es gibt zudem noch die Funktionen \\(\\Re(z)=x\\) und \\(\\Im(z)=y\\) (f\u00fcr \\(z = x+iy\\))</p> <p>Da eine komplexe Zahl als Punkt dargestellt werden, kann auch der Betrag berechnet werden: \\(|z|=\\sqrt{x^2+y^2}=\\sqrt{z\\cdot z^*}\\)</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#konjugierte-komplexe-zahlen","title":"Konjugierte Komplexe Zahlen","text":"<p>Die konjugierte komplexe Zahl von \\(z = x + yi\\) ist \\(z^*=x-iy\\) und ist entlang der x-Achse gespiegelt.</p> <p></p> <p>Der Term \\(z\\cdot z^*=(x+yi)\\cdot(x-yi)=x^2-i^2y^2=x^2-(-1)y^2=x^2+y^2\\) zeigt, wie \\(\\sqrt{z\\cdot z^*}=|z|\\) und \\(z\\cdot z^*=|z|^2\\) (Achtung: Der Betrag ist wichtig!)</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#darstellungs-formen","title":"Darstellungs Formen","text":"<ul> <li>Koordinaten-Form: \\(P(x, y)\\)</li> <li>Normal-Form: \\(z = x + yi\\)</li> <li>Trigometrische-Form (aka Polar-Form): \\(z=r\\cdot (\\cos \\phi + i\\cdot \\sin \\phi)\\) (\\(r\\) ist dabei die L\u00e4nge)</li> <li>Exponential-Form: \\(re^{i\\varphi}\\) (\\(r\\) ist dabei die L\u00e4nge)</li> </ul> <p>Als Beispiel: $z = 1 + 1i = \\sqrt 2 (\\cos{\\frac \\pi 4} + i \\sin{\\frac \\pi 4}) = \\sqrt 2 \\cdot e^{i\\cdot \\frac \\pi 4} $</p> <p>Um zwischen der Exponetialform und der Koordinationsform zu konvertieren, gilt: $$ \\text{F\u00fcr: } z=x+y\\ x = r\\cdot \\cos(\\varphi)\\ y = r\\cdot \\sin(\\varphi) $$</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#grundrechungsarten","title":"Grundrechungsarten","text":"<ul> <li>Summieren: \\(z_1 + z_2 = (x_1 + x_2) + i(y_1 + y_2)\\)</li> <li>Subtrahieren: \\(z_1 - z_2 = (x_1 - x_2) + i(y_1 - y_2)\\)</li> <li>Multiplizieren: \\(z_1 \\cdot z_2 = (x_1 \\cdot x_2 - y_1\\cdot y_3) + i(x_1\\cdot y_2 +x_2 \\cdot y_1)\\)</li> <li>Dividieren: \\(\\frac {z_1}{z_2}=\\frac {z_1\\cdot z_2^*}{z_2 \\cdot z_2^*}=\\frac {(x_1 + iy_1)(x_2-iy_2)}{(x_2 + iy_2)(x_2 - iy_2)}=\\frac {(x_1 + iy_1)(x_2-iy_2)}{x_2^2-y_2^2}\\)</li> <li>Potenzieren: \\(z^n=(re^{i\\varphi})^n=r^n\\cdot e^{i\\varphi n}\\)</li> <li>Wurzel-Ziehen: \\(\\sqrt[n]{z}=z^{\\frac 1 n}=r^{\\frac 1 n}\\cdot e^{\\frac {i\\varphi + 2\\pi \\cdot k} n}\\), wobei \\(k=0, 1, 2, ..., n-1\\) (Bei \\(k\\ge n\\) wiederholen sich die L\u00f6sungen)</li> </ul> <p>Ein Vorteil der Exponential-Form ist, dass Rechnungen um einiges einfacher von der Hand gehen:  $$ z_1=r_1e^{i\\varphi_1}\\ z_2=r_2e^{i\\varphi_2}\\ z_1z_2=r_1e^{i\\varphi_1}\\cdot r_2e^{i\\varphi_2} = r_1r_2\\left(e^{i\\varphi_1+i\\varphi_2}\\right) $$</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#polynome-losen","title":"Polynome L\u00f6sen","text":"<p>F\u00fcr das Polynom \\(a_nx^n+a_{n-1}x^{n-1}+...+a_1x^1+a_0=0\\) und \\(a_i, x \\in \\R\\), dann gibt es genau \\(n\\) L\u00f6sungen und kann maximal \\(n\\) reale L\u00f6sungen geben. $$ z^6=1 $$</p> <p></p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#eigenwerte","title":"Eigenwerte","text":"<p>F\u00fcr eine Matrix \\(A \\in R^{n\\times n}\\) nennt sich \\(\\lambda \\in \\C\\) Eigenwert und den Vektor \\(x\\in \\C^n\\setminus \\{0\\}\\) Eigenvektor, wenn folgendes gilt: $$ \\begin{align} A\\vec x &amp;= \\lambda \\vec x \\ \\Rightarrow A\\vec x - \\lambda \\vec x &amp;= 0 \\ \\Rightarrow (A-\\lambda I_n)\\vec x &amp;= 0 \\end{align} $$ Wenn \\(A\\) bekannt ist und \\(\\lambda\\) und \\(\\vec x\\) ausgerechnet werden soll, kann mithilfe dem charakteristischem Polynom berechnet werden.</p> <p>Die Eigenwerte von \\(A^{-1}\\) sind die Kehrwerte \\(\\frac 1 {\\lambda_i}\\) .</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#spektrum","title":"Spektrum","text":"<p>Das Spektrum \\(\\sigma(A)\\) ist die Menge aller Eigenwerte von der Matrix \\(A\\).</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#spur-und-determinante","title":"Spur und Determinante","text":"<p>Die Spur und Determinante von \\(A\\) (nicht \\(A-\\lambda I_n\\)) kann mit den Eigenwerten ausgerechnet werden. $$ \\DeclareMathOperator{\\tr}{tr} \\begin{align} \\det(A)&amp;=\\lambda_1\\cdot \\lambda_2 \\cdot \\cdot \\cdot \\lambda_n\\ \\tr(A)&amp;=a_11 + a_22 + ... + a_nn = \\lambda_1 + \\lambda_2 + ... + \\lambda_n \\end{align} $$</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#charakteristisches-polynom","title":"Charakteristisches Polynom","text":"\\[ p: \\lambda \\mapsto \\det(A-\\lambda I_n) \\] <p>Das charakteristische Polynom ist definiert das Polynom zum berechnen der Determinante von \\(A-\\lambda I_n\\).  Um \\(\\lambda\\) auszurechnen, kann das charakteristische Polynom mit \\(0\\) gleichgesetzt werden. Das Polynom ist vom Grad \\(n\\) und hat somit auch \\(n\\) L\u00f6sungen.</p> <p>Wenn \\(A-\\lambda I_n\\) eine Diagonalmatrix, obere Dreiecksmatrix oder untere Dreiecksmatrix ist, dann gilt: $$ \\det(A-\\lambda I_n)=(a_{11}-\\lambda)(a_{22}-\\lambda)...(a_{nn}-\\lambda) $$</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#determinante","title":"Determinante","text":"<p>F\u00fcr \\(A\\in \\R^{2\\times 2}\\) gilt: $$ \\det(A)= a_{11}\\cdot a_{22}- a_{12}\\cdot a_{21} $$ F\u00fcr \\(A \\in R^{3\\times 3}\\) gilt: $$ \\det(A)=b_{11} (b_{22}b_{33} - b_{23}b_{32})-b_{12}(b_{21}b_{33}-b_{23}b_{31}) + b_{13}(b_{21}b_{32} - b_{22}b_{31}) $$</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#konditionierung","title":"Konditionierung","text":"<p>Da, wenn die Eigenwerte mit dem charakteristischen Polynom ausgerechnet werden, ein schlecht konditioniertes Problem entsteht, sollten in der Praxis nie Eigenwerte f\u00fcr \\(A\\) mit \\(n&gt;3\\) mit dem charakteristischen Polynom und dessen Nullstellen berechnet werden.</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#eigenvektoren-eigenraum","title":"Eigenvektoren &amp; Eigenraum","text":"<p>Die Eigenvektoren k\u00f6nnen ausgerechnet werden, in dem die Eigenwerte \\(\\lambda\\) in die Matrix \\(A-\\lambda I_n\\) eingesetzt werden. Es gibt f\u00fcr eine Matrix \\(A\\in R^{n\\times n}\\) ein Gleichungssystem mit \\(n-\\rg(A-\\lambda I_n) \\DeclareMathOperator{\\rg}{rg}\\) freien Parametern.</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#vielfachheit","title":"Vielfachheit","text":"<p>Die geometrische Vielfachheit ist definiert als die Dimension des Eigenraums von \\(\\lambda\\). Sie gibt die Anzahl der linearen unabh\u00e4ngigen Eigenvektoren zum Eigenwert an und kann mit \\(n - \\rg(A-\\lambda I_n)\\) berechnet werden</p> <p>Die algebraische Vielfachheit ist die Multiplizit\u00e4t eines Eigenwertes, bzw. wie oft ein Eigenwert auf taucht. </p> <p>Die geometrische Vielfachheit ist immer gleich oder kleiner als die algebraische Vielfachheit. Dies heisst, dass wenn ein Eigenwert \\(\\lambda\\) \\(k\\)-fach auftritt und somit eine algebraische Vielfachkeit \\(k\\) hat, dann geh\u00f6ren mindestens ein und h\u00f6chstens \\(k\\) linear unabh\u00e4ngige Eigenvektoren zu \\(\\lambda\\).</p> <p>Wenn alle \\(n\\) Eigenwerte verschieden sind, so geh\u00f6rt zu jedem Eigenwert \\(\\lambda\\) genau ein linear unabh\u00e4ngiger Eigenvektor, welcher bis einen Faktor eindeutig bestimmbar ist.</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#numerische-berechnung-von-eigenwerte-und-eigenvektoren","title":"Numerische Berechnung von Eigenwerte und Eigenvektoren","text":"<p>Es gilt, wenn zwei Matrizen \\(A, B \\in \\R^2\\) zueinander \u00e4hnlich sind, dann gilt das \\(A\\) und \\(B\\) die selben Eigenwerte inkl. deren algebraischen Vielfachen.</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#ahnliche-diagonalisierbare-matrix","title":"\u00c4hnliche &amp; Diagonalisierbare Matrix","text":"<p>Eine Matrix \\(A\\in R^{n\\times n}\\) ist \u00e4hnlich zu der Matrix \\(B\\in R^{n\\times n}\\), wenn eine regul\u00e4re Matrix \\(T\\) existiert, mit welcher gilt: $$ B=T^{-1}AT $$ Ein Spezialfall davon ist, wenn \\(B\\) eine Diagonalmatrix ist. Dann ist \\(A\\) diagonalisierbar.</p> <p>Wenn zwei Matrizen \u00e4hnlich zueinander sind, dann gilt:</p> <ul> <li>Sie haben dieselbe Eigenwerte, inkl. deren algebraischen Vielfachheiten (und auch dem charakteristischen Polynom)</li> <li>Ist \\(\\vec x\\) ein Eigenvektor zum Eigenwert \\(\\lambda\\) von \\(B\\), dann ist \\(T\\vec x\\) ein Eigenvektor zum Eigenwert \\(\\lambda\\) von \\(A\\)</li> <li>Wenn \\(A\\) diagonalisierbar ist, dann sind die Diagonalelemente von \\(B\\) die Eigenwerte von \\(A\\) und die linear unabh\u00e4ngige Eigenvektoren von \\(A\\) stehen in den Spalten von \\(T\\)</li> </ul>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#spektralradius-und-spektralnorm","title":"Spektralradius (und Spektralnorm)","text":"\\[ \\rho(A)=\\max\\{ |\\lambda| \\mid \\lambda \\text{ ist ein Eigenwert von } A\\in \\R^{n\\times n} \\} \\] <p>Der Spektralradius von der Matrix \\(A\\) ist definiert als der h\u00f6chste Eigenwert von \\(A\\).</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#qr-verfahren","title":"QR-Verfahren","text":"<p>Das QR-Verfahren ist ein iterativen Algorithmus, mit welchem mithilfe der QR-Zerlerung eine obere Dreiecksmatrix \\(B\\) gefunden wird, welch \u00e4hnlich zu \\(A\\) ist und somit die selben Eigenwerte wie \\(A\\) besetitzt.</p> <p>Zu Beginn ist \\(A\\in \\R^{n\\times n}=A_0\\)  und \\(P_0 \\in R^{n\\times n}=I_n\\). Dann wird f\u00fcr \\(i=0, 1, 2, ...\\) folgende Schritte durchgef\u00fchrt. $$ \\begin{align} A_i&amp;:=Q_i\\cdot R_i\\ A_{i+1}&amp;:=R_i\\cdot Q_i \\ P_{i+1}&amp;:= P_i \\cdot Q_i \\end{align} $$ Die Matrix \\(A_i\\) konvergiert f\u00fcr \\(i\\to \\infty\\) gegen eine Matrix \\(A_\\infty\\), bei welcher die Diagonale nur einzelne Elemente oder \\(2\\times 2\\)-Bl\u00f6cke aufweist. Die Eigenwerte sind die einzelnen Elemente und die Eigenwerte der \\(2\\times 2\\)-Bl\u00f6cke.</p> <p>Die \\(2\\times 2\\)-Bl\u00f6cke bilden sich, wenn das algebraische Vielfache eines \\(\\lambda\\) gr\u00f6sser als \\(1\\) ist. Umgekehrt gilt, wenn alle Eigenwerte betragsm\u00e4ssig verschieden sind (also \\(\\forall i,j \\in \\N |\\lambda_i|\\neq |\\lambda_j|\\wedge i\\neq j\\)), dann gibt es keine \\(2\\times 2\\)-Bl\u00f6cke.</p> <p>Falls \\(A\\) symetrisch ist (\\(A^T=A\\)) und \\(\\forall i,j \\in \\N |\\lambda_i|\\neq |\\lambda_j|\\wedge i\\neq j\\) gilt, dann konvergiert die Folge der Matrizen \\(P_k=Q_0\\cdot Q_1\\cdot \\cdot \\cdot Q_k\\) gegen eine orthogonale Matrix (\\(Q^T=Q^{-1}\\)), deren Spalten die Eigenvektoren von \\(A\\) bilden.</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#von-mises-iteration-power-method","title":"von-Mises-Iteration (Power Method)","text":"<p>F\u00fcr die von-Mises-Iteration muss ein \\(A\\in R^{n \\times n}\\) diagonalisierbar sein und ein Startvektor \\(v_0\\in \\C^n\\) mit der L\u00e4nge \\(1\\) definiert sein.  $$ \\begin{align} v_{k+1}&amp;=\\frac{Av_k}{||Av_k||2}\\ \\lambda \\end{align} $$}&amp;=\\frac{v_k^TAv_k}{v_k^Tv_k</p>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#sympy","title":"SymPy","text":"","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#matrizen","title":"Matrizen","text":"","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#normalisieren","title":"Normalisieren","text":"<pre><code>A.norm(ord=None)\n</code></pre>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#gaus-jordan","title":"Gaus-Jordan","text":"<pre><code>A.gauss_jordan_solve(B, freevar=False)\n</code></pre>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#qr-solve","title":"QR-Solve","text":"<pre><code>Q, R = A.QRdecomposition()  # to only do the QR decompostion\nA.QRsolve(b)                # to solve A|b with the QR decomposition\n</code></pre>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#vereinfachen","title":"Vereinfachen","text":"<ul> <li>Mit <code>simplify(&lt;expr&gt;)</code> kann eine SymPy Ausdruckt vereinfacht werden.</li> <li><code>expand(&lt;polynom&gt;)</code> kann ein Polynom expandieren: <code>expand((x+1)**2)</code> ergibt <code>x + 2*x + 1</code></li> <li><code>factor(&lt;expandiertes polynom&gt;)</code> ist die Umkehrfunktion von <code>expand(&lt;polynom&gt;)</code>: <code>factor(x + 2*x + 1)</code> ergibt <code>(x+1)**2</code></li> <li><code>cancel(&lt;bruch&gt;)</code> nimmt ein Bruch und vereinfacht diesen</li> </ul>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#integrieren-und-ableiten","title":"Integrieren und Ableiten","text":"<p><code>diff(&lt;expr&gt;, &lt;var&gt;)</code> leitet den angegebenen Ausdruck ab.</p> <pre><code>diff(x**4 + 2*x**3 + 9, x)  # returns 4x**3 + 6*x**2\n(x**4 + 2*x**3 + 9).diff(x) # does the same thing\n</code></pre> <p>Mit <code>integrate(&lt;expr&gt;, &lt;var&gt;)</code> kann einen Ausdruckt integriert werden.</p> <pre><code>integrate(x**4+2*x**3 + 9, x)   # returns x**5/5+x**4/2 + 9*x\n(x**4+2*x**3 + 9).integrate(x)  # does the same thing\n</code></pre> <p>Wenn \u00fcber ein bestimmten Bereich integriert werden soll, kann <code>integrate(expr, (&lt;var&gt;, &lt;start&gt;, &lt;end&gt;))</code> verwendet werden.</p> <pre><code>integrate(x**4+2*x**3 + 9, (x, 0, 1))       # returns 9.7\n(x**4 + 2*x**3 + 9).integrate((x, 0, 1))    # does the same thing\n</code></pre>","tags":["summary","HM1"]},{"location":"22HS/HM1/summary/HM1%20Summary.html#solvers","title":"Solvers","text":"<p>Mit <code>solveset(&lt;expr&gt;, &lt;var&gt;)</code> kann einen Ausdruck nach einer Variabel aufgel\u00f6st werden.</p> <pre><code>solveset(x**2 - x, x) # returns {0, 1}\n</code></pre>","tags":["summary","HM1"]},{"location":"22HS/ICAM/Critical%20Incident%20Analysis.html","title":"Critical Incident","text":"<p>A critical incident is an event which deviates from the expected norm. Usually it also implies negative consequences resulting from the incident.</p>"},{"location":"22HS/ICAM/Critical%20Incident%20Analysis.html#critical-incident-analysis","title":"Critical Incident Analysis","text":"<p>The critical incident analysis can be used to analysis what went wrong in a critical incident after the fact. The analysis identifies the different underlying expectations and norms.</p> <ol> <li>Identify all situation where something has happened with unforeseen or unintended consequences</li> <li>The situation should be objectively and neutrally described, including the beginning of the situation, its course and its ending</li> <li>Each person involved with as much information as possible (like their name, function, age group, gender, ...)</li> <li>The social and professional relationship between the persons involved must be named or described</li> <li>The place, time and occasion of the event</li> <li>The purpose of the actions which caused the critical incident</li> <li>All actions of all persons involved</li> </ol> <p>To get the best result from the analysis, multiple people should evaluate independently the description of the critical incident. Each elevator writes a description from the perspective from a different involved person. Later, to analysis the incident, role playing can be used to reenact the critical incident under observation. </p> <p>The following should be described:</p> <ul> <li>What were the motivations and objectives from the participants?</li> <li>How does their common history affect their decisions?</li> <li>Are there other possible explanations for their behaviour?</li> <li>What other actions would have been possible and would have let those to a better result and why?</li> </ul>"},{"location":"22HS/ICAM/Intercultural%20Competence.html","title":"Intercultural Competence","text":"<p>There is no one definition for what intercultural competence is, but scholar agree that intercultural competence is the appropriate and effective management of interaction between people who ... represent different or divergent affective, cognitive, and behavioural orientations to the world. Intercultural competence always includes multiple people.</p>"},{"location":"22HS/ICAM/Intercultural%20Competence.html#the-process-model-of-intercultural-competence","title":"The Process Model of Intercultural Competence","text":"<p>In the top left box, where the start is, the model says that one needs to be interested in becoming intercultural competent. </p> <p>The top right box says that in addition to wanting to become intercultural aware, one also needs knowledge about the culture and its contexts, comprehend this knowledge and skill (the common sense to what's acceptable both when talking and listening. Is it ok to talk about having had a poo with a random guy at the airport). This knowledge can be built up by either listening and observing (when screwing up) and then analyse and interpreter the situation or also by learning. In essence, to be aware about one's surrounding.</p> <p>The right bottom box says that these two previous box will result in an internal shift in how culture is perceived from always comparing everything with one's own culture to being able to seeing culture more holistic.</p> <p>The last box in the bottom left says that these steps will manifest them self in an external change in how effective and appropriate one can communicate and behave in an intercultural situation. As shown by the arrows, every box contributes to the \"External Outcome\" as each has an positive impact on one's intercultural competence. One can come to the external outcome by perspectivising.</p> <p>Finally, this is a never-ending process which will never stop. Therefore there is an arrow connecting \"External Outcome\" to \"Requisite Attitudes\".</p>"},{"location":"22HS/ICAM/Test.html","title":"Test","text":"<ul> <li>Print the two pages</li> <li>HutchingsWeir2006</li> <li> <p>2.1.Arasaratnam-Smith-2017-2(4)</p> </li> <li> <p>Darla Deardorff's model</p> </li> <li>What happens in each box</li> <li>(Critical Incidence Method)</li> <li>anxiaty modle</li> <li>Guansure &amp; Whatsa (or similar) Text</li> <li>perspectivizing</li> </ul>"},{"location":"22HS/ICAM/Test.html#semiotic-vs-pragmatic-model","title":"semiotic vs pragmatic model","text":"<p>Semiotic models require knowledge prior to the interaction, while in pragmatic model the knowledge is negotiated on the fly.</p>"},{"location":"22HS/ICAM/Test.html#perspectivising","title":"Perspectivising","text":"<p>Perspectivising is a process to create a common understanding between multiple parties which don't share a common cultural context.</p> <ol> <li>Generalizing: Telling the other, that the communication has broken down (with out sounding condensending) by talking about the a bigger group. For example: I'm not sure what is expected of me in this behaviour</li> <li>Perspectivising: Explain your own perspective of the context</li> <li>Contrasting: The speaker connects the different standpoints as sharing a common ground while representing separate aspects.</li> </ol> <p>An example: Question about salary:</p> <ol> <li>Generalizing: It's a bit strange that people in Malta ask about the salary</li> <li>Perspecitivising: In Switzerland it is a bit strange to talk about this.</li> <li>Contrasting: Your origin doesn't matter, salary is obvious something important. But I'm not really comfortable to talk about this. I hope you don't mind.</li> </ol>"},{"location":"22HS/ICAM/Test.html#emic-vs-etic-perspective","title":"Emic vs Etic Perspective","text":"<p>In the emic perspective, you explain something based on your context and how you feel this thing.</p> <p>In the etic perspective, you compare different view points of a thing.</p> <p>Both perspective are tools to prevent you from repeating cultural mishaps. </p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html","title":"Deskriptive Statistik","text":"\\[ \\DeclareMathOperator{\\rg}{rg} \\]"},{"location":"22HS/STS/Deskriptive%20Statistik.html#begriffe","title":"Begriffe","text":"<p>TODO</p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#merkmalstyp-messniveau","title":"Merkmalstyp / Messniveau","text":"<pre><code>flowchart TD\n    Merkmalstyp --&gt; kategoriel[Qualitativ/Kategoriell]\n    Merkmalstyp --&gt; quantitativ[Quantitativ/Metrisch]\n    kategoriel --&gt; Nominal[Nominal \\nl\u00e4sst sich nicht ordnen]\n    kategoriel --&gt; Ordinal[Oridnal \\nl\u00e4sst sich ordnen]\n    quantitativ --&gt; Diskret\n    quantitativ --&gt; Stetig\n</code></pre>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#stichproben","title":"Stichproben","text":"<p>Aus der Grundgesamtheit \\(\\Omega\\) k\u00f6nnen mit einer Stichprobe \\(n\\) Objekte \\(\\omega_1, \\omega_2, ..., \\omega_n\\) entnommen werden und die Merkmale \\(X(\\omega_1),..., X(\\omega_n)\\) betrachtet werden. H\u00e4ufig wird dies auch als \\(x_1, x_2, ..., x_n\\) geschrieben.</p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#absolute-und-relative-haufigkeit","title":"Absolute und relative H\u00e4ufigkeit","text":"<p>Die absolute H\u00e4ufigkeit \\(h_i\\), ist wie oft ein Wert vorgekommen ist. Die Summe aller \\(h_i\\) ergibt die Anzahl Werte \\(n\\). Die relative H\u00e4ufigkeit \\(f_i=\\frac{h_i}{n}\\), ist, was der Prozent-Anteil eines Wertes ist. Die Summe aller \\(f_i\\) ergibt \\(1\\)</p> <p>Die relative H\u00e4uffigkeit bei nicht klassierten Daten nennts isch PMF.</p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#kumulative-absolute-und-relative-haufigkeit-cdf-bei-nicht-klassierten-daten","title":"Kumulative absolute und relative H\u00e4ufigkeit (CDF) bei nicht-klassierten Daten","text":"<p>Die kumulative absolute H\u00e4ufigkeit \\(H(x)\\), ist definiert als alle Werte von \\(h_i\\) bis und mit \\(x\\). Es kann auch als \\(H(x)=\\sum_{a_i \\lt x}h_i\\).</p> <p>\u00c4hnlich ist die kumulative relative H\u00e4ufigkeit \\(F(x)\\), was alle Werte von \\(f_i\\) bis und mit \\(x\\). Es kann definiert werden als \\(F(x)=\\sum_{a_i}f_i=\\frac{H(x)}{n}\\)</p> <p>Die kumulative H\u00e4ufigkeiten zwischen zwei Werte. Zum Beispiel der Anteil von Familien, welche 2 - 4 Fl\u00fcge pro Jahr kaufen: \\(F(4) - F(2)\\) </p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#beispiel","title":"Beispiel","text":"Anzahl Flugreisen \\(a_i\\) 1 2 3 4 5 Total Absolute H\u00e4ufigkeit \\(h_i\\) \\(9\\) \\(8\\) \\(5\\) \\(7\\) \\(1\\) \\(30\\) Relative H\u00e4ufigkeit \\(f_i\\) (PMF) \\(\\frac 9 {30}\\) \\(\\frac{8}{30}\\) \\(\\frac{5}{30}\\) \\(\\frac{7}{30}\\) \\(\\frac 1 {30}\\) \\(1\\) Kumulative absolute H\u00e4ufigkeit \\(H(x)\\) \\(9\\) \\(17\\) \\(22\\) \\(29\\) \\(30\\) Kumulative relative H\u00e4ufigkeit \\(F(x)\\) (CDF) \\(\\frac 9{30}\\) \\(\\frac{17}{30}\\) \\(\\frac{22}{30}\\) \\(\\frac{29}{30}\\) \\(1\\)"},{"location":"22HS/STS/Deskriptive%20Statistik.html#pmf-und-pdf-bei-klassierten-daten","title":"PMF und PDF bei klassierten Daten","text":"<p>Die relative H\u00e4ufigkeit (PMF) bei klassierten Daten ist f\u00fcr die ganze Klasse definiert.</p> <p></p> <p>Wenn nun aber die PMF als Balkendiagramm dargestellt werden w\u00fcrde, w\u00fcrden Klassengr\u00f6ssen die Darstellung verzerren. Dies liegt daran, dass eine gr\u00f6ssere Klasse mehr Platz in Anspruch nimmt, da der Balken breiter ist. Daf\u00fcr gibt es die PDF. $$ PDF(x) = \\frac{f_x}{Klassengr\u00f6sse}=\\frac{h_x}{n\\cdot Klassengr\u00f6sse} $$</p> <p>Nun folgt ein Beispiel f\u00fcr PDFs.</p> \\(c_i\\) \\([4; 6[\\) \\([6:8[\\) \\([8:12[\\) \\(h_i\\) 1 7 2 \\(f_i\\) \\(\\frac 1 {10}\\) \\(\\frac{7}{10}\\) \\(\\frac{2}{10}\\) PDF \\(f\\) \\(\\frac{1}{10\\cdot 2}\\) \\(\\frac{7}{10\\cdot 2}\\) \\(\\frac{2}{10\\cdot 4}\\) CDF \\(F_i\\) \\(\\frac{1}{10}\\) \\(\\frac{8}{10}\\) \\(\\frac{10}{10}=1\\)"},{"location":"22HS/STS/Deskriptive%20Statistik.html#relative-haufigkeit-cdf-bei-klassierten-daten","title":"Relative H\u00e4ufigkeit (CDF) bei klassierten Daten","text":"<p>Wenn die CDF f\u00fcr klassierte Daten gebaut wird, werden die CDF-Werte der Klassengrenzen berechnet, wie bei nicht klassierten Daten. Danach wird eine Linie zwischen den CDF-Werte der Klassengrenzen gezogen.</p> <p></p> <p>Die Steigung der Linie ist die \\(PDF\\).</p> <p>Wenn nun mathematisch ein spezifischen CDF Wert berechnet werden soll, kann dies folgendermassen getan werden: $$ F(x)=\\frac{F(b)-F(a)}{b-a}\\cdot (x-a)+F(a)=PMF(x)\\cdot(x - a)+F(a)\\ \\text{wobei } a \\text{ und } b \\text{ die underte, bzw. obere Klassengrenzen sind} $$</p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#kenngrosse","title":"Kenngr\u00f6sse","text":""},{"location":"22HS/STS/Deskriptive%20Statistik.html#median","title":"Median","text":"<p>Der Median ist die Zahl in der \"Mitte\". $$ \\begin{cases} \\frac 1 2 (x_{[\\frac n 2]}+x_{[\\frac {n} 2 + 1]}) &amp; n \\text{ gerade}\\ x_{[\\frac {n+1} 2]} &amp; n \\text{ ungerade} \\end{cases} $$</p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#quantil-sts01p17","title":"Quantil (STS01/p.17)","text":"<p>Ein Quantil \\(R_q\\) unterteilt die Stichproben in zwei Teile: \\(n\\cdot q\\) und \\(n\\cdot (1 - q)\\).</p> <p></p> <p>Berechnet wird es folgendermassen. $$ R_q=\\begin{cases} \\frac{x_{[n \\cdot q]}+x_{[n\\cdot q + 1]}}{2} &amp; n \\cdot q \\text{ ganze Zahl}\\ x_{[\\lceil n\\cdot q\\rceil]} &amp; n\\cdot q \\text{ keine ganze Zahl} \\end{cases} $$ Ebenfalls \\(R_{0.5}\\) ist der Median, \\(R_{0.25}\\), \\(R_{0.5}\\) und \\(R_{0.75}\\) werden auch Quartile genannt</p> <p>Der Abstand zwischen dem -3. und 1. Quartile nennt sich auch Interquartilenabstand (IQR)</p> <p>Wenn die Daten kategorisiert sind kann das Quantil auch \u00fcber den CDF ausgerechnet werden. Daf\u00fcr kann folgende Formel verwendet werden:  $$ R_q=\\frac{b - a}{F(b) - F(a)}\\cdot (q - F(a)) + a $$</p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#modus","title":"Modus","text":"<p>Der Modus \\(x_{mod}\\) ist der Wert mit der h\u00f6chsten absoluten H\u00e4ufigkeit.</p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#durchschnitt-mittelwert","title":"Durchschnitt / Mittelwert","text":"\\[ \\overline x = \\frac 1 n \\sum^n_{i=1}x_i = \\frac 1 n \\sum^m_{i=1}h_i\\cdot a_i=\\sum^m_{i=1}f_i\\cdot a_i \\] <p>Bei klassierten Daten wird die Klassenmitte f\u00fcr die Berechnung des Durchschnitts verwendet.</p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#varianz-und-standardabweichung","title":"Varianz und Standardabweichung","text":"\\[ s^2 = \\frac 1 n \\sum^n_{i=1}(x_i - \\overline x)^2=\\frac 1 n \\left (\\sum^n_{i=1}x_i^2 \\right)- \\overline x ^2\\\\ s = \\sqrt{s^2} \\] <p>Die Varianz und das Streumass gibt an, wie fest die eigentlichen Werte vom Durchschnitt abweichen.  Bei klassierten Daten wird die Klassenmitte genommen (z.B. ist die Klassenmitte f\u00fcr \\([200-400[=300\\)).</p> <p>Oft werden auch die korrigierte Varianz und die korrigierte Standardabweichu genutzt. $$ s_{korr}^2=\\frac 1 {n-11}\\sum^n_{i=1}(x_i - \\overline x)^2          = \\frac n {n - 1}s^2\\ s_{korr} = \\sqrt{\\frac 1 {n-11}\\sum^n_{i=1}(x_i - \\overline x)^2}         = \\sqrt{\\frac n {n - 1}s^2} $$</p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#boxplot","title":"Boxplot","text":"<p>Der Boxplot besteht aus einer Box und zwei Antennen. Die Box ist zwischen dem \\(Q_1\\) und \\(Q_3\\), wobei der Strich in der Box bei \\(Q_2\\) ist. Die Antennen gehen h\u00f6chsten bis \\(1.5 \\cdot (Q_3 - Q_1)\\) von der Box (also relative zu \\(Q_1\\) oder \\(Q_3\\))</p> <p></p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#form-der-verteilung","title":"Form der Verteilung","text":"<p>F\u00fcr die meisten Verteilungen kann dabei festgehalten werden:</p> <ul> <li>rechtsschief: \\(x_{mod}&lt;x_{med}&lt;\\overline x\\)</li> <li>symmetrisch: \\(x_{mod}=x_{med}=\\overline x\\)</li> <li>linkschief: \\(x_{mod &gt; x_{med}&gt; \\overline x}\\)</li> </ul> <p></p> <p>Ebenfalls kann eine Verteilung uimodal, bimodal oder multimodal sein. </p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#darstellungsarten-bei-multivariaten-daten","title":"Darstellungsarten bei multivariaten Daten","text":"<p>Jenach, welcher Typ die Merkmale haben, welche verglichen werden sollen, k\u00f6nnen verschiedene Darstellungsarten verwendet werden.</p> Merkmale 1 Merkmal 2 Darstellungsart Kategoriell Kategoriell Tabelarisch, Mosaikplot Kategoriell Metrisch Tabelarisch, Boxplot-Diagram Metrisch Metrisch Scatterplot"},{"location":"22HS/STS/Deskriptive%20Statistik.html#tabelarisch","title":"Tabelarisch","text":"<p>Wenn zwei kategorielle Merkmale verglichen werden, kann es mit einer Tabelle dargestellt werden:</p> Zivielstand/Kaufkraft tief mittel Hoch Ledig 978 1884 1748 Partnerschaft 475 1044 1452 Verheiratet 781 1870 2550 <p>Dabei sagt eine \"Cell\" in der Tabelle, wie viele Leute welchen Zivielstand und Kaufkraft gleichzeitig haben.</p> <p>Dies kann auch mit einem kategoriellen und einem metrischen Merkmal ben\u00fctzt werden.</p> Mittelwert Standardtabweichung tief 2055.353 738.223 mittel 5049.234 1577.482 hoch 12053.706 3715.074 <p>Dabei sagt eine \"Cell\" in der Tabelle z.B. was die durschnittliche Einkaufsbetrag ist, bei Personen mit tiefer Kaufkraft.</p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#mosaikplot","title":"Mosaikplot","text":"<p>Kann nur bei zwei kategoriellen Merkmalen verwendet werden.</p> <p></p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#boxplot_1","title":"Boxplot","text":"<p>Dies kann verwendet werden, wenn ein Merkmal kategoriell ist und das zweite metrisch ist.</p> <p></p> <p>(Das rechte Diagram ist ein Stripplot)</p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#scatterplot","title":"Scatterplot","text":"<p>Scatterplots oder Streudiagramme sind n\u00fctztlich, wenn zwei metrische Merkmale visualisiert werden sollen.</p> <p></p> <p>Ein Risikio bei Scatterplots ist das Overplotten, was passiert, wenn es viele Datenpunkte in einem Bereich hat. Im folgenden Scatterplot hat es vermutlich mehr Punkte als ausgemacht werden k\u00f6nnen. Um dies zu erkennen, k\u00f6nnen weitere Kenngr\u00f6ssen analysiert werden.</p> <p></p> <p>Aus einem Scatterplot kann die Form, Richtung und St\u00e4rke gelesen werden.</p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#form","title":"Form","text":"<p>Die Form ist, wie die Punkte angeordnet sind. Es kann z.B. einen linearen Zusammenhang zwischen den Merkmalen bestehen. Oder die P\u00fcnkte k\u00f6nnen eine gekr\u00fcmmte Kurve oder andere beliebige Form bildet.</p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#richtung","title":"Richtung","text":"<p>Die Richtung kann entweder einen positiven oder negativen Zusammenhang sein. Wenn es Positiv ist, dann sind die beiden Merkmale proportional zueinander (Je gr\u00f6sser A, desto gr\u00f6sser ist B). Wenn es Negativ ist, dann sind die beiden Merkmale umgekehrt proportional zueinander (Je gr\u00f6sser A, desto kleiner B).</p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#starke","title":"St\u00e4rke","text":"<p>Die St\u00e4rke sagt aus, wie viel oder wenig Streung vorliegt. Wenn die St\u00e4rke klein ist, dann besteht ein starker Zusammenhang.</p> <p></p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#paerson-korrelationskoeffizient","title":"Paerson-Korrelationskoeffizient","text":"<p>Mit folgenden Formeln kann der Korrelationskoeffizient \\(r_{xy}\\) ausgerechnet werden. Dabei ist \\(\\tilde S_{x}\\) die Standardtabweichung und \\(\\tilde S_{xy}\\) die Kovarianz. $$ r_{xy}=\\frac{\\tilde S_{xy}}{\\tilde S_x \\cdot \\tilde S_y}\\ \\tilde S_{xy}=\\frac 1 n\\sum^n_{i=1}(x_i-\\overline x)(y_i-\\overline y)=\\overline{xy}-\\overline x \\cdot \\overline y\\ \\tilde S_x=\\sqrt{\\frac 1 n\\sum^n_{i=0}(x_i-\\overline x)^2}=\\sqrt{\\overline{x^2}-(\\overline x)^2}\\ \\tilde S_y=\\sqrt{\\frac 1 n\\sum^n_{i=0}(y_i-\\overline y)^2}=\\sqrt{\\overline{y^2}-(\\overline y)^2}\\ $$ Wenn der korrigierte Korrelationskoeffizient \\(r_{xy,korr}\\) ben\u00f6tigt wird, k\u00f6nnen folgende Formeln ben\u00fctzt werden: $$ r_{xy,korr}=\\frac{\\tilde S_{xy,korr}}{\\tilde S_{x,korr} \\cdot \\tilde S_{y,korr}}\\ \\tilde S_{xy,korr}=\\frac 1 {n -1}\\cdot \\tilde S_{xy}\\ \\tilde S_{x,korr}=\\sqrt{\\frac n {n - 1}\\tilde S_x^2}\\ \\tilde S_{y,korr}=\\sqrt{\\frac n {n - 1}\\tilde S_y^2}\\ $$ Der Korrelationskoeffizient sagt aus wie fest* zwei Merkmale korrelieren und ob sie proportional oder umgekehrt proportional sind.</p> <p>Wenn der Koeffizient gegen \\(1\\) oder \\(-1\\) geht, dann korrelieren die zwei Merkmale, wenn der Koeffizient gegen 0 tendiert, dann korrelieren die zwei Merkmale nicht oder nicht linear.</p> <p>Wenn der Koeffizient positiv ist, dann sind die Faktoren proportional, wenn der Koeffizient negativ ist, dann sind die Merkmale umgekehrt-proportional.</p> <p></p> <p>Achtung: Problem des Korrelationskoeffizient nach Paerson ist, dass er nur Korrelationen erkennen kann, welche linear sind. Falls die Kurve eine andere Form, als eine Gerade hat, dann wird der Koeffizient gegen \\(0\\) gehen, obwohl die Merkmale korrelileren.</p> <p>Ein weiteres Problem ist, dass der Paerson-Korrelationsfaktor nicht robust ist, und bei Ausreissern fehlerhaft eine Korrelation oder fehlerhaft keine Korrelation anzeigen.</p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#beispiele","title":"Beispiele","text":"Diagramme Korrelations-koeffizient Bemerkung \\(r_{xy}=0.988\\) Die beiden Merkmale korrelieren proportional \\(r_{xy}=0.174\\) Die beiden Merkmale korrelieren nicht \\(r_{xy}=-0.976\\) Die beiden Merkmale korrelieren umgekehrt proportional \\(r_{xy, mit}=0.909\\)\\(r_{xy, ohne}=0.597\\) Die beiden Merkmale sind proportional, wenn der Ausreisser mitgerechnet wird (\\(r_{xy, mit}\\)), hingegen, wenn der Ausreisser nicht mit gerechnet wird, dann sinkt \\(r_{xy}\\)"},{"location":"22HS/STS/Deskriptive%20Statistik.html#spearman-rangkorrelationskoeffizient","title":"Spearman-Rangkorrelationskoeffizient","text":"\\[ r_{Sp}=\\frac{\\sum^n_{i=1}(\\rg(x_i) - \\overline{\\rg(x)})\\cdot(\\rg(y_i)-\\overline{\\rg(y)})} {\\sqrt{\\sum^n_{i=1}(\\rg(x_i) - \\overline{\\rg(x)})^2} \\cdot \\sqrt{\\sum^n_{i=1}(\\rg(y_i) - \\overline{\\rg(y)})^2}} \\] <p>Dabei ist \\(\\rg(x_i)\\) Der Rang von \\(x_i\\) und kann als \\(\\rg(x_i)=1+Anzahl(j \\vert x_j &lt; x_i) + \\frac 1 2 Anzahl(j | x_j = x_i, i \\neq j)\\). In Deutsch: 1 + die Anzahl von Elementen \\(x_j\\), welche kleiner als \\(x_i\\) sind + die halbe Anzahl von Elementen, welche gleich sind, wie \\(x_i\\).</p> <p>Hier ist ein Beispiel: </p> <p></p> <p>Daraus ergibt sich folgendes: $$ \\sqrt{\\sum^n_{i=1}(\\rg(x_i) - \\overline{\\rg(x)})^2} = \\sqrt{\\sum^n_{i=1}(\\rg(y_i) - \\overline{\\rg(y)})^2}\\ \\sqrt{\\sum^n_{i=1}(\\rg(x_i) - \\overline{\\rg(x)})^2} =\\sqrt{2.5^2+(-0.5)^2 + 1.5^2 + (-2.5)^2+0.5^2+(-1.5)^2}=\\sqrt{17}\\ \\sum^n_{i=1}(\\rg(x_i)-\\overline{\\rg(x)})(\\rg(y_i)- \\overline{\\rg(y)})\\= 2.5 \\cdot 2.5 + (-0.5)\\cdot (-1.5) + 1.5 \\cdot 1.5 + (-2.5)\\cdot (-0.5) + 0.5 \\cdot 0.5 + (-1.5)\\cdot (-2.5)=14.5\\</p> <p>r_{Sp}=\\frac{\\sum^n_{i=1}(\\rg(x_i) - \\overline{\\rg(x)})\\cdot(\\rg(y_i)-\\overline{\\rg(y)})} {\\sqrt{\\sum^n_{i=1}(\\rg(x_i) - \\overline{\\rg(x)})^2} \\cdot \\sqrt{\\sum^n_{i=1}(\\rg(y_i) - \\overline{\\rg(y)})^2}} = \\frac{14.5}{\\sqrt{17.5}\\cdot\\sqrt{17.5}}\\approx 0.83 $$</p>"},{"location":"22HS/STS/Deskriptive%20Statistik.html#verbundene-range","title":"Verbundene R\u00e4nge","text":"<p>Wenn die x- oder y-Elemente doppelte Elemente enhalten (z.B. zwei <code>4</code>), dann wird von verbundenen R\u00e4ngen gesprochen. Dabei wird der Durchschnitt der R\u00e4nge berechnet</p> <p></p> <p>In diesem Fall w\u00e4re der Rang von \\(x_3\\) und \\(x_4\\) <code>3</code> oder <code>4</code>, daher wird der Durschschnitt als Ranggenommen und wird somit \\(\\rg(x_3)=\\rg(x_4)=3.5\\)</p> <p></p> <p>Das gilt auch, wenn mehr als zwei gleiche Werte existieren. In diesem Fall kann der Rang von \\(x_3\\), \\(x_4\\) und \\(x_5\\) <code>3</code>, <code>4</code>, oder <code>5</code> sein. Daher wird der Rang zum Durchschnitt von 3, 4, 5. \\(\\rg(x_3)=\\rg(x_4)=\\rg(x_5)=4\\)</p>"},{"location":"22HS/STS/Kombinatorik.html","title":"Kombinatorik","text":""},{"location":"22HS/STS/Kombinatorik.html#binomialkoeffizient","title":"Binomialkoeffizient","text":"\\[ \\begin{pmatrix}n \\\\k \\end{pmatrix}=\\frac{n!}{(n-k)!\\cdot k!} \\] <p>In Python der Befehl <code>scipy.special.binom(n, k)</code> kann benutzt werden</p>"},{"location":"22HS/STS/Kombinatorik.html#beispiels-probleme","title":"Beispiels Probleme","text":""},{"location":"22HS/STS/Kombinatorik.html#zahlenschloss-problem","title":"Zahlenschloss-Problem","text":"<p>Es gibt ein Zahlencode mit 6 Zahlen von 0 bis 9. In diesem Fall gibt es \\(10^6\\) Kombinationen. Es kommt dabei auf die Reihenfolge der Zahlen darauf an. Also <code>000222</code> ist nicht das selbe, wie <code>222000</code>.</p> <p>Generalisiert, wenn es \\(n\\) Stellen mit \\(b\\) M\u00f6glichkeiten gibt, dann gibt es \\(b^n\\) M\u00f6glichkeiten.</p>"},{"location":"22HS/STS/Kombinatorik.html#schwimmwettkampf-problem","title":"Schwimmwettkampf-Problem","text":"<p>Es starten 10 Schwimmerinnen, wie viel m\u00f6gliche Platzierungen gibt es, wenn nur die ersten drei Pl\u00e4tze betrachtet werden? F\u00fcr den ersten Platz gibt es \\(10\\) M\u00f6glichkeiten, f\u00fcr den zweiten \\(9\\) M\u00f6glichkeiten und f\u00fcr den dritten \\(8\\) M\u00f6glichkeiten. Daher \\(10\\cdot 9 \\cdot 8=\\frac{10!}{(10-3)!}=\\frac{10!}{7!}\\). Dabei kommt es auf die Reihenfolge darauf an.</p> <p>Dies kann generaliesiert auf folgendes werden: $$ \\frac{AnzahlStellen!}{(AnzahlStellen - AnzahlRelevantenStellen)!} $$</p>"},{"location":"22HS/STS/Kombinatorik.html#lotto-problem","title":"Lotto-Problem","text":"<p>Wie gross sind die Chancen beim Lotto \"6 aus 49\" mit einem Versuch sechs richtige Zahlen vorauszusagen? Es gibt 49 Kugel mit Zahlen, von welchen 6 gezogen werden. Nachdem eine Kugel gezogen wurde, wird sie nicht wieder zur\u00fcck gelegt und kann daher nicht zwei mal gezogen werden.</p> <p>\\(\\frac{49!}{(49-6)!}=\\frac{49!}{43!}\\) sind die Anzahl M\u00f6glichkeiten, wenn die Reihenfolge darauf ank\u00e4me. Bei diesem Lotto ist dies aber nicht der Fall, daher m\u00fcssen noch \\(6!\\) M\u00f6glichkeiten \"abgezogen\" werden, da es f\u00fcr jede Menge von 6 Zahlen \\(6!\\) M\u00f6glichkeiten gibt, sie anzuordnen. Es ergibt sich daraus \\(\\frac{49!}{(49-6)!\\cdot 6!}=\\begin{pmatrix}49 \\\\ 6\\end{pmatrix}\\)</p> <p>Generalisiert: Wenn \\(n\\) M\u00f6glichkeiten gibt, von welchen \\(k\\) von Interesse sind, dabei aber die Reihenfolge vernachl\u00e4ssigbar ist, dann wird der Binomialkoeffizienten ben\u00fctzt: \\(\\begin{pmatrix}n \\\\ k \\end{pmatrix}\\)</p>"},{"location":"22HS/STS/Kombinatorik.html#zahnarzt-problem","title":"Zahnarzt-Problem","text":"<p>Eine Zahn\u00e4rztin erlaubt den Kindern, nach der Behandlung zur Belohnung 3 Spielzeuge aus 5 T\u00f6pfen auszusuchen. Jeder Topf ist mit derselben Art von Spielzeugen gef\u00fcllt. Wie viele verschiedene M\u00f6glichkeiten hat ein Kind?</p> <p>F\u00fcr dieses Problem kann folgendes Ersatzproblem verwendet werden: Ein Spielzeug wird als <code>X</code> markiert. Die Markierungen werden mit <code>|</code> unterteilt, was die Grenzen zwischen den T\u00f6pfen markiert. Z.B. <code>X||XX||</code> heisst, das Kind hat 1 Spielzeug aus dem ersten Topf und zwei Spielzeuge aus dem dritten Topf genommen. Eine andere Betrachtungsweise w\u00e4re, es gibt 7 Stellen, wovon 3 eine <code>X</code> sind. Dies kann als \\(\\begin{pmatrix}7 \\\\ 3\\end{pmatrix}=\\begin{pmatrix}5+3-1 \\\\ 3\\end{pmatrix}\\) geschrieben werden.</p>"},{"location":"22HS/STS/Spezielle%20Verteilung.html","title":"Spezielle Verteilung","text":""},{"location":"22HS/STS/Spezielle%20Verteilung.html#normalverteilung","title":"Normalverteilung","text":"<p> $$ \\varphi_{\\mu, \\sigma}(x)=\\frac {1}{\\sqrt{2\\pi}\\cdot \\sigma}\\cdot e^{-\\frac 1 2((x-\\mu) : \\sigma)^2}\\ $$</p> <ul> <li>Die Normalverteilung ist normiert, heisst dass \\(\\int^\\infty_{-\\infty}\\varphi(x)dx=1\\)   Daher, je gr\u00e4sser \\(\\sigma\\) wird, desto breiter und niedriger wird die Glockenkurve.</li> </ul>"},{"location":"22HS/STS/Spezielle%20Verteilung.html#zentraler-grenzwert","title":"Zentraler Grenzwert","text":"<p>Wenn eine Liste von identische verteilte und stochastisch unabh\u00e4ngige Zufallsvariablen \\(X_1, X_2, ..., X_n\\) haben, dann</p>"},{"location":"22HS/STS/summary/STS%20Summary.html","title":"STS Summary","text":"","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#deskriptive-statistik","title":"Deskriptive Statistik","text":"Funktion Nicht Klassiert Klassiert absolute H\u00e4ufigkeit \\(h(x)\\) relative H\u00e4ufikeit (PMF) \\(f(x)\\) / \\(g(x)\\) \\(f(x)=\\frac{h(x)}n\\) \\(g(x)=f_i\\) Dichtefunktion \\(f(x)\\) (\\(b_i=\\) Klassengr\u00f6sse ) (PDF) - \\(f(x)=\\frac{g(x)}{b_i}\\) kummulative absolute H\u00e4ufigkeit \\(H(x)\\) \\(H(x)=\\sum_{a_i \\lt x}h_i\\) - kummulative relative H\u00e4ufigkeit (CDF) \\(F(x)\\) \\(F(x)=\\sum_{a_i}f_i=\\frac{H(x)}{n}\\) \\(F(x)=\\int^x_{-\\infty}f(y)\\mathrm d y\\), \\(F(x)=F(a_i)+\\frac{x-a_i}{a_{i+1}-a_i}\\cdot (F(a_{i+1})-F(a_i))\\) Modus \\(x_{mod}\\) H\u00f6chste absolute H\u00e4ufigkeit gleich Klassenmitte \\(M_i\\) - \\(M_i=\\frac{a_{i+1}-a_i}{2}\\) Stichprobenmittelwert \\(\\overline x\\) \\(\\overline x=\\frac 1 n\\sum^n_{i=1}x_i\\) \\(\\overline x=\\sum^n_{i=1}M_i\\cdot f_i\\) Varianz \\(s^2 = \\frac 1 n \\sum^n_{i=1}(x_i - \\overline x)^2 \\\\ = \\frac 1 n \\left (\\sum^n_{i=1}x_i^2 \\right)- \\overline x ^2\\) \\(s^2=\\sum^n_{i=1}(M_i-\\overline x)^2\\cdot f_i\\) Korrigierte Varianz \\(s_{korr}^2=\\frac 1 {n-1}\\sum^n_{i=1}(x_i - \\overline x)^2 \\\\ = \\frac n {n - 1}s^2\\) \\(s_{korr}^2= \\frac n {n - 1}s^2\\) (korrigierte) Standardabweichung \\(s\\) \\(s_{korr}=\\sqrt{s_{korr}^2}\\) gleich Kovarianz \\(s_{xy}=\\frac 1 n \\sum^n_{i=1}(x_i-\\overline x)\\cdot (y_i- \\overline y)\\\\= \\left(\\frac 1 n \\sum^n_{i=1}x_iy_i\\right)-\\overline x \\cdot \\overline y\\) -","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#taschenrechner-befehle","title":"Taschenrechner Befehle","text":"Funktion TR-Befehl <code>stat-menu</code> <code>shift</code> + <code>1</code> (<code>STAT</code>) Varianz f\u00fcr <code>x</code> <code>stat-menu</code> - <code>5: s-var</code> - <code>3: x\u03c3n</code> Varianz f\u00fcr <code>y</code> <code>stat-menu</code> - <code>5: s-var</code> - <code>6: y\u03c3n</code> Korrigierte Varianz f\u00fcr <code>x</code> <code>stat-menu</code> - <code>5: s-var</code> - <code>4: x\u03c3n-1</code> Korrigierte Varianz f\u00fcr <code>y</code> <code>stat-menu</code> - <code>5: s-var</code> - <code>7: x\u03c3n-1</code> Durchschnitt f\u00fcr <code>x</code> <code>stat-menu</code> - <code>5: s-var</code> - <code>2: x</code> Durchschnitt f\u00fcr <code>y</code> <code>stat-menu</code> - <code>5: s-var</code> - <code>5: y</code> Pearson-Korrelationskoeffizient \\(r_{xy}\\) <code>stat-menu</code> - <code>7: Reg</code> - <code>3: r</code> Regressions-Gerade \\(B * x + A\\) <code>stat-menu</code> - <code>7: Reg</code> - <code>1: A</code>, <code>stat-menu</code> - <code>7: Reg</code> - <code>2</code>","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#quantile-boxplot","title":"Quantile / Boxplot","text":"\\[ \\text{Nicht klassiert:}\\\\ R_q=\\begin{cases} \\frac{x_{[n \\cdot q]}+x_{[n\\cdot q + 1]}}{2} &amp; n \\cdot q \\text{ ganze Zahl}\\\\ x_{[\\lceil n\\cdot q\\rceil]} &amp; n\\cdot q \\text{ keine ganze Zahl} \\end{cases}\\\\\\\\ \\text{klassiert:}\\\\ R_q=\\frac{b - a}{F(b) - F(a)}\\cdot (q - F(a)) + a \\] <p>Note: F\u00fcr \\(a\\) als die untere und \\(b\\) als die obere Grenze der Klasse, welche das Quantil beinhaltet.</p> <p>Die Klasse, welche das Quantil beinhaltet, ist die erste Klasse, dessen CDF \\(q\\) \u00fcberschreitet.</p> <p></p> <p>\\(IQR=Q_3-Q_1\\)</p>","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#pearson-korrelationskoeffizient","title":"Pearson-Korrelationskoeffizient","text":"\\[ r_{xy}=\\frac{S_{xy}}{S_x\\cdot S_y}=\\frac{\\overline{xy}-(\\overline x \\cdot \\overline y)}{\\sqrt{\\overline{x^2}-\\overline x^2}\\cdot \\sqrt{\\overline {y^2}-\\overline y ^2}} \\] \\(r_{xy}\\approx 1\\) Positiver Linearer Zusammenhang \\(r_{xy}\\approx -1\\) Negatiber Linearer Zusammenhang \\(r_{xy}\\approx 0\\) Punkte sind gleichm\u00e4ssig um den Schwerpunkt \\((\\overline x, \\overline y)\\) verteilt <p>Der Pearon-Korrelationskoeffizient ist nicht robust und kann durch Ausreisser stark beeinflusst werden.</p>","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#spearman-rangkorrelationskoeffizient","title":"Spearman-Rangkorrelationskoeffizient","text":"\\[ \\DeclareMathOperator{\\rg}{rg} r_{Sp}=\\frac{\\sum^n_{i=1}(\\rg(x_i) - \\overline{\\rg(x)})\\cdot(\\rg(y_i)-\\overline{\\rg(y)})} {\\sqrt{\\sum^n_{i=1}(\\rg(x_i) - \\overline{\\rg(x)})^2} \\cdot \\sqrt{\\sum^n_{i=1}(\\rg(y_i) - \\overline{\\rg(y)})^2}}\\\\ \\rg(x_i)=1+Anzahl(j \\vert x_j &lt; x_i) + \\frac 1 2 Anzahl(j | x_j = x_i, i \\neq j)   \\] <p>Deutsch: \\(1\\) \\(+\\) die Anzahl von Elementen \\(x_j\\), welche kleiner als \\(x_i\\) sind \\(+\\) die halbe Anzahl von Elementen, welche gleich sind, wie \\(x_i\\).</p> <p>Wenn es doppelte \\(x\\)- oder \\(y\\)-Elemente gibt, dann wird von verbundenen R\u00e4ngen gesprochen, wobei der Durchschnitt der R\u00e4nge berechnet wird.</p> <p>Der Spearman-Rangkorrelationskoeffizient misst, ob die Daten eine Korrelation mit einer strengen monotonen Funktion haben (eine Funktion, welche immer steigt oder f\u00e4llt)</p> <p>TODO: Multivariate Daten darstellen</p>","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#kombinatorik","title":"Kombinatorik","text":"<p>Binomialkoeffizient: \\(\\begin{pmatrix}n \\\\k \\end{pmatrix}=\\frac{n!}{(n-k)!\\cdot k!}\\) Wieviele M\u00f6glichkeiten gibt es \\(k\\) Objekte von \\(n\\) Objekten auszuw\u00e4hlen?</p> <p>\\(n\\) sind die Anzahl Optionen, \\(k\\) wieviele gew\u00e4hlt werden.</p> <p></p> <p>Kombination mit Wiederholung: \\(k\\) Objekte aus \\(n\\) m\u00f6glchen Sorten/T\u00f6pfen</p> <p>Beispiele:</p> <ul> <li>Anzahl M\u00f6glichkeiten f\u00fcr eine beliebig grosse Gruppe mit 20 potenziellen Personen: \\(2^{20}-1\\)   Jede Person ist entweder in der Gruppe oder nicht und \\(-1\\) wegen der Leeren Gruppe</li> </ul>","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#wahrscheinlichkeit","title":"Wahrscheinlichkeit","text":"\\[ \\text{Z\u00e4hldichte: } \\rho: \\Omega \\to [0, 1]\\\\ \\text{Wahrscheinlichkeitsmass: } P: 2^\\Omega \\to [0, 1], P(M)=\\sum_{\\omega \\in M} \\rho(\\omega) \\] <p>Der Wahrscheinlichkeitsraum \\((\\Omega, P)\\) wird Laplace-Raum genannt, wenn alle Ereignisse gleich wahrscheinlich sind.</p> <ul> <li>\\(P(X=x)=f(x)\\)</li> <li>\\(P(X \\le x)=F(x)\\)</li> <li>\\(P(a \\le X \\le b)=P(X\\le b)-P(X\\le a)\\)</li> <li>\\(P(X &gt; x)=1-P(X\\le x)\\)</li> </ul>","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#kenngrossen","title":"Kenngr\u00f6ssen","text":"<p>Lagemass: Was ist das Zentrum Streumass: Die Verteilung des Merkmals</p> <ul> <li>Erwartungswert \\(E(X)=\\sum_{x\\in\\R}P(X=x)\\cdot x\\)</li> <li>\\(E(X+Y)=E(X)+E(Y)\\) und \\(E(\\alpha X) = \\alpha E(X)\\)</li> <li>Varianz    \\(V(X)=E(X^2)-(E(X))^2 = E((X-E(X)^2)=\\\\(\\sum_{x\\in\\R}P(X=x)\\cdot x^2)-E(X)^2=\\sum_{x\\in\\R}P(X=x)\\cdot(x-E(X))^2\\)</li> </ul>","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#bedingte-wahrscheinlichkeit","title":"Bedingte Wahrscheinlichkeit","text":"<ul> <li>Eintreten von \\(B\\), wenn \\(A\\) eingetroffen ist (Satz von Bayes): \\(P(B\\vert A) = \\frac{P(A\\cap B)}{P(A)}=\\frac{P(A\\vert B)\\cdot P(B)}{P(A)}\\)</li> <li>Multiplikationssatz: \\(P(A\\cap B)=P(A\\vert B)\\cdot P(B)=P(B\\vert A)\\cdot P(A)\\)</li> <li>Satz von der Totalen Wahrscheinlichkeit: \\(P(A)=P(A\\vert B)\\cdot P(B) + P(A|\\overline B)\\cdot P(\\overline B)\\)</li> </ul>","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#vierfeldertafel","title":"Vierfeldertafel","text":"<p>Die Ereignisse in einer Vierfeldertafel m\u00fcssen Disjunkt sein.</p>","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#stochastische-unabhangigkeit","title":"Stochastische Unabh\u00e4ngigkeit","text":"<p>Zwei Ereignisse \\(A\\) und \\(B\\) sind stochastisch unabh\u00e4ngig, wenn gilt \\(P(A\\cap B)=P(A)\\cdot P(B)\\).</p> <p>Wenn \\(A\\) und \\(B\\) stochastisch unabh\u00e4nig sind:</p> <ul> <li>sind auch \\(\\overline A\\) und \\(\\overline B\\), wie \\(\\overline A\\) mit \\(B\\) und \\(A\\) mit \\(\\overline B\\) unabh\u00e4ngig</li> <li>gilt \\(P(A\\vert B)=P(A)\\) und \\(P(B\\vert A)=P(B)\\)</li> <li>gilt \\(E(X\\cdot Y)=E(X)\\cdot E(Y)\\) und \\(V(X+Y)=V(X) + V(Y)\\)</li> </ul> <p>Um zu \u00fcberpr\u00fcfen ob \\(n\\) Ereignisse unabh\u00e4nig sind, braucht es \\(2^n - n -1\\) Gleichungen, da sie disjunkt unabh\u00e4ngig sein m\u00fcssen.</p>","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#spezielle-verteilungen","title":"Spezielle Verteilungen","text":"","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#hypergeometrische-verteilung-x-sim-hn-m-n","title":"Hypergeometrische Verteilung (\\(X \\sim H(N, M, n)\\))","text":"<p>Es gibt eine Urne mit \\(N\\) Objekte, von welchen \\(M\\) einer bestimmten Sorte angeh\u00f6hren (\\(N- M\\) geh\u00f6hren zu anderen Sorten). Zuf\u00e4llig wird eine Stichprobe von \\(n\\) Objekten aus der Urne genommen. Wichtig ist, dass sie nicht Zur\u00fcckgelegt werden.</p> <p>Die Zufallsvariable \\(X\\) beschriebt die Anzahl von Objekten von der Sorte \\(M\\). Es gilt \\(X \\sim H(N, M, n)\\)</p> \\[ P(X=x)=\\frac{\\begin{pmatrix}M\\\\x\\end{pmatrix}\\cdot \\begin{pmatrix}N - M\\\\n - x\\end{pmatrix}} {\\begin{pmatrix}N\\\\n\\end{pmatrix}}\\\\ \\] \\[ \\begin{align} \\mu=E(X)&amp;=n\\cdot \\frac M N\\\\ \\sigma^2=V(X)&amp;=n\\cdot \\frac M N \\cdot (1 - \\frac M N) \\cdot \\frac{N - n}{N - 1}\\\\ \\sigma = S(X)&amp;=\\sqrt{n\\cdot \\frac M N \\cdot (1 - \\frac M N) \\cdot \\frac{N - n}{N - 1}} \\end{align} \\]","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#bernoulliverteilung","title":"Bernoulliverteilung","text":"<p>Ein Bernoulli-Expermient, ist ein Zufallsexperiment, inwelchem es nur zwei M\u00f6glichkeiten gibt.</p> \\[ \\begin{align} P(X=1)&amp;=p\\\\ P(X=0)&amp;=1-p=q\\\\ \\end{align} \\] \\[ \\begin{align} E(X)&amp;= P(X=1)=p\\\\ E(X^2)&amp;= P(X=1) = p\\\\ V(X)&amp;=E(X^2)-(E(X))^2=p - p^2 \\end{align} \\]","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#binomailverteilung-xsim-bn-p","title":"Binomailverteilung (\\(X\\sim B(n, p)\\))","text":"<p>Wenn ein Bernoulliexperiment \\(n\\)-mal wiederholt wird und die Wahrscheinlichkeit f\u00fcr \\(P(X=1)=p\\) ist und \\(q=1-p\\). Die Wiederholungen m\u00fcssen stochastisch unabh\u00e4ngig sein. </p> <p>Es gilt \\(X\\sim B(n, p)\\)</p> \\[ P(X=x)=\\begin{pmatrix}n\\\\x\\end{pmatrix}\\cdot p^x\\cdot q^{n-x} \\] \\[ \\begin{align} \\mu=E(X)&amp;=np\\\\ \\sigma^2=V(X)&amp;=npq\\\\ \\sigma = S(X)&amp;=\\sqrt{npq} \\end{align} \\] <p>Wenn gilt \\(n \\lesssim \\frac N {20}\\), dann kann die eine hypergeometrische Verteilung mit einer Binomialverteilung angen\u00e4hert werden: \\(H(N, M, n)\\approx B(n, \\frac M N)\\)</p>","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#poissonverteilung-xsim-plambda","title":"Poissonverteilung (\\(X\\sim P(\\lambda)\\))","text":"<p>Die Poissonverteilung kann als stochastisches Modell benutzt werden, wenn es um die Wahrscheinlichkeit f\u00fcr das Eintreten einer bestimmten Anzahl gleichartiger Ereignisse geht, welche in einem gegebenen Bereich \\(\\lambda\\) (unabh\u00e4ngig voneinander) beliebig oft auftreten k\u00f6nnen.</p> \\[ P(X=x)=\\frac{\\lambda^x}{x!}\\cdot e^{-\\lambda} \\] \\[ \\begin{align} \\mu=E(X)&amp;=\\lambda\\\\ \\sigma^2=V(X)&amp;=\\lambda\\\\ \\sigma = S(X)&amp;=\\sqrt{\\lambda} \\end{align} \\] <p>F\u00fcr eine Binomialverteilung, wenn \\(n\\) gegen unendlich geht und \\(\\lambda=n \\cdot p\\) konstant ist, dann kann eine Binomialverteilung mit einer Poissonverteilung approximiert werden: \\(B(n, p)\\xrightarrow{n\\to \\infty \\text{ und } \\lambda=np \\text{ konstant}} Poi(\\lambda)\\)</p> <p>Ebenfalls wenn \\(n \\gtrsim 50\\) und \\(p\\lesssim 0.1\\), dann kann eine Binomialverteilung mit einer Poissonverteilung approximiert werden: \\(B(n, p)\\approx Poi(n\\cdot p)\\)</p>","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#gausssche-verteilung-xsim-nmu-sigma-xsim-n0-1","title":"Gauss'sche Verteilung (\\(X\\sim N(\\mu, \\sigma)\\) / \\(X\\sim N(0, 1)\\))","text":"\\[ \\begin{align} \\text{PDF: }\\varphi_{\\mu,\\sigma}(x)&amp;=\\frac{1}{\\sqrt{2\\pi}\\cdot\\sigma}\\cdot e^{-\\frac1 2\\cdot (\\frac{x-\\mu}{\\sigma})^2}\\\\ \\text{CDF: }\\phi_{\\mu, \\sigma}(x)&amp;=\\int^x_{-\\infty}\\varphi_{\\mu, \\sigma}(t)\\mathrm dt0 =\\frac 1 {\\sqrt{2\\pi}\\cdot \\sigma}\\cdot \\int^x_{-\\infty}e^{-\\frac 1 2(\\frac{t-\\mu}{\\sigma})^2}\\mathrm dt \\end{align} \\] <p>Wenn \\(\\mu=0\\) und \\(\\sigma = 1\\) ist, dann wird von einer Standardnormalverteilung gesprochen und wird einfach als \\(\\varphi(x)\\) bezeichnet:</p> <p>$$ \\varphi(x)=\\frac 1 {\\sqrt{2\\pi}}\\cdot e^{-\\frac 1 2 x^2} $$ Um eine \"normale\" Gauss'sche Verteilung zu standardisieren, wird anstatt der Zufallsvariable \\(X\\) folgende Definition \\(U=\\frac{X-\\mu} \\sigma\\) verwendet.</p> <p>Der Erwartungswert \\(\\mu\\) und Standardabweichung \\(\\sigma\\) sind Parameter.</p> <p>Eine Normalverteilung hat folgende Eigenschaften:</p> <ul> <li>Ist Symetrisch bei der Geraden \\(x=\\mu\\)</li> <li>Hat Wendepunkte bei \\(\\mu-\\sigma\\) und \\(\\mu + \\sigma\\)</li> <li>Ist normiert (totale Fl\u00e4che unter der Kurve = 1)</li> <li>Je gr\u00f6sser \\(\\sigma\\), desto breiter und niedriger wird die Glockenkurve</li> <li>Eine \u00c4nderung von \\(\\mu\\) verschiebt die Kurve in der x-Richtung</li> <li>\\(P(a \\le X \\le b) = P(a &lt; X &lt; b) = \\phi_{\\mu, \\sigma}(b)-\\phi_{\\mu, \\sigma}(a)\\)</li> <li>\\(P(\\vert X - \\mu \\vert \\le \\varepsilon)=P(\\mu - \\varepsilon \\le X \\le \\mu + \\varepsilon)=2\\cdot \\phi_{\\mu, \\sigma}(\\mu + \\varepsilon) - 1= 1 - 2\\cdot \\phi_{\\mu,\\sigma}(\\mu - \\varepsilon)\\)</li> </ul> <p></p> <p>F\u00fcr die Verteilung \\(N(\\mu, \\sigma)\\), liegen</p> <ul> <li>ca. 68% der Werte zwischen \\(\\mu-\\sigma\\) und \\(\\mu + \\sigma\\)</li> <li>ca. 95% der Werte zwischen \\(\\mu-2\\sigma\\) und \\(\\mu + 2\\sigma\\)</li> <li>ca 99.7% der Wete zwischen \\(\\mu-3\\sigma\\) und \\(\\mu + 3\\sigma\\)</li> </ul> <p></p>","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#approximationen","title":"Approximationen","text":"Was Bedingung Approximation \\(X\\sim B(n, p)\\) \\(npq&gt;9\\) \\(P(a\\le X \\le b)=\\sum^b_{x=a}P(X=x)\\approx \\phi_{\\mu, \\sigma}(b+\\frac 1 2)-\\phi_{\\mu,\\sigma}(a-\\frac 1 2)\\) \\(X\\sim P(\\lambda))\\) \\(x &gt; 9\\) \\(P(a \\le X \\le b)=\\sum^b_{x=a}P(X=x)\\approx \\phi_{\\mu, \\sigma}(b+\\frac 1 2)-\\phi_{\\mu,\\sigma}(a-\\frac 1 2)\\)","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#zentraler-grenzwertsatz","title":"Zentraler Grenzwertsatz","text":"<p>Wenn mehrere stochastisch unabh\u00e4ngige Zufallsvariabeln denselben Erwartungswert \\(\\mu\\) und dieselbe Varianz \\(\\sigma ^2\\) haben, dann gilt f\u00fcr die Summe \\(S_n=\\sum^n_{i=1}X_i\\) der Zufallsvariabeln folgendes:</p> <ul> <li>\\(E(S_n)=n\\mu\\)</li> <li>\\(V(S_n)=n\\sigma^2\\)</li> </ul> <p>Zus\u00e4tzlich gilt, dass die Vertielungsfunktion \\(F_n(u)\\) der standartisierten Zufallsvariable</p> <p>$$ U_n=\\frac{(X_1 + X_2 +...+X_n)-n\\mu}{\\sqrt n \\cdot \\sigma}=\\frac{\\overline X - \\mu}{\\frac \\sigma {\\sqrt{n}}}\\ \\overline X = \\frac {S_n} n $$ f\u00fcr \\(n\\to\\infty\\) gegen die Verteilungsfunktion \\(\\phi(u)\\) der Standardnormalverteilung konvergiert.</p> <p>Es kann ebenfalls gesagt werden, dass das arithmetische Mittel \\(\\overline X_n\\) von \\(n\\) identisch verteilten, unabh\u00e4nigen Zufallsvariablen n\u00e4herungsweise \\(N(\\mu, \\frac \\sigma {\\sqrt n})\\) verteilt ist.</p>","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#regression","title":"Regression","text":"<p>Das Ziel einer Regressions-Gerade \\(g=m\\cdot x + d\\) ist es, den Residuen (oder Fehler) \\(\\sum^n_{i=1} (y_i-g(x_i))^2\\) zu minimieren. </p> \\[ m=\\frac{S_{xy}}{S_x^2}{}\\\\ d=\\overline y - m\\overline x\\\\ S_\\epsilon^2=S_y^2-\\frac{S_{xy}^2}{S_x^2} \\] <p>\\(S_{xy}\\) ist die Kovarianz, \\(S_x^2\\) ist die (nicht korrigierte) Varianz, \\(S_\\epsilon^2\\) ist die Residualvarianz</p>","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#bestimmtheitsmass","title":"Bestimmtheitsmass","text":"\\[ \\begin{align} S_y^2&amp;=S_\\epsilon^2 + S_{\\hat y}^2\\\\ R^2&amp;=\\frac{S_{\\hat y}^2}{S_y^2}\\\\ R^2&amp;=\\frac{S_{xy}^2}{S_x^2\\cdot S_y^2}=r_{xy}^2 \\\\ \\sqrt R=\\sqrt{r_{xy}}&amp;=\\text{Pearson-Korrelationskoeffizient} \\end{align} \\] <p>Das Bestimmheitsmass ist zwischen 0 und 1 und gibt an, wieviel Prozent der Varianz durch \\(R^2\\) erkl\u00e4rt wird. 0 heisst dass die Gerade nicht passt. 1 heisst, dass die Gerade perfekt passt. Wenn \\(R^2=0.75\\) ist, bedeutet dies, dass 75% der gesamten Varianz durch die Regressionsgerade erkl\u00e4rt wird und 25% ist zufallsbedingt.</p> <p></p>","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#linearisieren","title":"Linearisieren","text":"<p>Eine nicht lineare Funktion kann linearisiert werden. Danach ist sie linear und kann durch eine Regressions-Gerade angen\u00e4hert werden.</p> <p></p>","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#matrizen","title":"Matrizen","text":"<p>Gegeben sind \\(n\\) Gleichungen und es sind \\(k\\) Regressionsparameter \\(x_1\\), \\(x_2\\), ..., \\(x_k\\) gesucht.</p> <p></p> <p>Die L\u00f6sung f\u00fcr \\(\\vec x\\) ist: \\(\\vec x=(A^TA)^{-1}X^T\\vec y\\)</p>","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#schliessende-statistik","title":"Schliessende Statistik","text":"<p>\\(\\Theta=g(X_1, X_2, ..., X_n)\\) ist eine Funktion, welche von \\(n\\) Stichprobenvariabeln die Grundgesammtheit sch\u00e4tzen kann. Ein Sch\u00e4tzwert wird als \\(\\hat \\theta\\) bezeichnet. \\(\\theta\\) (ohne Dach) ist der eigentliche, unbekannte Wert/Parameter.</p> <p></p> <p>\\(\\overline X\\) und \\(S^2\\) sind erwartungstreu (\\(E(\\Theta)=\\theta\\)) und konsistent. \\(S\\) ist konsitent (\\(E(\\Theta)\\to \\theta\\) und \\(V(\\Theta)\\to 0\\) f\u00fcr \\(n\\to \\infty\\)) aber nicht erwartungstreu. </p> <p>Eine Sch\u00e4tzfunktion \\(\\Theta_1\\) ist effizienter als \\(\\Theta_2\\) wenn gilt \\(V(\\Theta_1) &lt; V(\\Theta_2)\\)</p> <p></p>","tags":["summary","STS"]},{"location":"22HS/STS/summary/STS%20Summary.html#vertrauensintervalle","title":"Vertrauensintervalle","text":"<p>Es werden zwei Stichprobenfunktionen \\(\\Theta_u\\) und \\(\\Theta_o\\) bestimmt, welche den wahren Wert \\(\\theta\\) mit einer vorgegebenen Wahrscheinlichkeit von \\(\\gamma\\) einschliesst.</p> \\[ P(\\Theta_u \\le \\theta \\le \\Theta_o)=\\gamma \\] <p>Wenn konkrete Werte in \\(\\Theta_u\\) und \\(\\Theta_o\\) eingesetzt werden, dann wird das Intervall \\([c_u; c_o]\\) gebildet. \\(\\gamma\\) heisst das Vertrauensniveau (oder statistische Sicherheit) und \\(\\alpha = 1 - \\gamma\\) ist die Irrtumwahrscheinlichkeit.</p> <p></p> <p>In der folgenden Tabelle sind die mathematischen Zeichen von oben erkl\u00e4rt:</p> Zeichen Bedeutung \\(\\mu\\) Durchschnitt / Mittel \\(\\sigma\\), \\(S\\) Standardabweichung \\(\\sigma^2\\), \\(S^2\\) Varianz \\(p\\), \\(q\\) Wahrscheinlichkeits-Wert","tags":["summary","STS"]},{"location":"22HS/SWEN1/01_Usability%20Engineering.html","title":"Usability Engineering","text":""},{"location":"22HS/SWEN1/01_Usability%20Engineering.html#usabilityuxcustomer-experience","title":"Usability/UX/Customer Experience","text":"<p>Usability ist wie einfach kann eine Applikation verwendet werden.</p> <p>Eine gute Usability hat eine Software, wenn sie effiektiv, effizient und mit einer hohen Zufriedenheit vom Nutzer genutzt werdenn kann.</p> <ul> <li>Effekivit\u00e4t: Der Nutzer kann die Aufgaben mit gew\u00fcnschter Genauigkeit ausf\u00fchren</li> <li>Effizient: Der Nutzer kann die Aufgaben mit minimalem Aufwand ausf\u00fchren</li> <li>Zufriedenheit: selbsterkl\u00e4rend...</li> </ul> <p>Wenn von User Experience (UX) die Rede ist, wird gemeint, wie sich die Applikation anf\u00fchlt (Usability + Desirability). Wenn die Customer Experience gemeint ist, wird vom Gesammteindruck der App, der marke und der Firma gesprochen (Usability + UX + Brand Experience).</p> <p>Es gibt sieben Anforderungsbereiche der Usability (laut DIN EN ISO 9241-110). Je nach Applikation sind nicht alle wichtig oder treffen gar nicht zu.</p> <ol> <li>Aufgabenangemessenheit    Eine Aufgabe soll nur so viele Schritte ben\u00f6tigen, wie minimal n\u00f6tig. Ebenfalls soll nur Informationen angezeigt werden, welche f\u00fcr die aktuelle Aufgabe relevant ist (z.B. Hilfe).     Jede Eingabe sollte nur einmal get\u00e4tigt werden und Eingabefelder sollen Standartwerte oder/und Liste von vordefinierten Werte habe (z.B. L\u00e4nder). Zudem sollen ableitbare Eingaben vorgeschlagen werden.</li> <li>Lernf\u00f6rderlichkeit    Die Software soll Informationen \u00fcber Konzepte und Regeln anbieten, wenn der Nutzer dies w\u00fcnscht. Dies kann beispielsweise \u00fcber Tool-Tipps oder Hilfssystem bewerkstelligt werden.</li> <li> <p>Individualisierbarkeit    Die Applikationen soll sich dem Benutzer anpassen. Dies kann getan werden \u00fcber Tipps, Tool-Tips, Wizards oder auch Tastaturk\u00fcrzel f\u00fcr Experten.</p> </li> <li> <p>Erwartungskonformit\u00e4t    Die Applikation soll strickt interne Regeln anwenden. Die Konsistenz von der Terminologie, Reihenfolgen von Kn\u00f6pfen und Informationsdarstellung sind wichtig und helfen dem Nutzer.</p> </li> <li>Selbstbeschreibungsf\u00e4higkeit    Der Benutzer soll ausreichend informiert werden, wo er ist, was er tun soll und kann, wie er dies zu tun hat (z.B. Formate) und was das System macht.    Dabei k\u00f6nnen Dinge wie Labels und Fehlermeldung hilfreich sein.</li> <li>Steuerbarkeit/Kontrolle    Der Benutzer soll das Tempo und Dialogfluss steuern k\u00f6nnen. Ebenfalls soll der Benutzer zwischen verschiedenen Inputsmodalit\u00e4ten (Maus, Tastatur, Touch, ...) wechseln k\u00f6nnen. Darstellungsformate (Miles vs Kilometer) sollen einstellbar sein.</li> <li>Fehlertoleranz    Die Applikation soll dem Nutzer klar mitteilen, welche Werte als Input erwartet werded. Benutzeraktionen sollen zudem vor Aktionen \u00fcberpr\u00fcft werden. Bei Korrekturen und Fehlermeldungen d\u00fcrfen nie Daten verloren gehen.</li> </ol>"},{"location":"22HS/SWEN1/01_Usability%20Engineering.html#user-centered-design","title":"User-Centered Design","text":""},{"location":"22HS/SWEN1/01_Usability%20Engineering.html#user-domain-research","title":"User &amp; Domain Research","text":"<p>In dieser Phase geht es darum die Nutzer, ihr Umfeld und die Dom\u00e4ne zu verstehen. Daf\u00fcr sollten folgende Fragen beantwortet werden:</p> <ul> <li>\u00dcber den Nutzer:</li> <li>Wer sind die Benutzer?</li> <li>Was sind ihre Arbeit, ihre Aufgaben und Ziele?</li> <li>Wie sieht ihre Umgebung aus?</li> <li>was brauchen sie, um ihre Ziele zu erreichen</li> <li>Welche Begriffe verwenden sie?</li> <li>Welche Normen sind wichtig f\u00fcr sie (organisatorisch, kulturell, sozial)?</li> <li>Was sind Pain-Points in ihrer Arbeit?</li> <li>\u00dcber die Dom\u00e4ne</li> <li>Wie funktioniert das Gesch\u00e4ft der Firma?</li> <li>Was sind wichtige Konzepte, und Prozesse der Dom\u00e4ne?</li> </ul> <p>Um diese Fragen zu beantwortet k\u00f6nnen mehrere Tools benutzt werden: Contextual Inquiry, Interviews, Beobachtung, Fokusgruppen, Umfragen, Nutzungsauswertungen, Dokumentenstudium &amp; Mitbewerber studieren.</p> <p>Folgende Artifakte sollten nach diesem Schritt vorhanden sein: Personas, Usage-Szenarien, Mentales Moddel, Dom\u00e4nenmodell (Siehe Domainmodellierung), Stackeholder Map, Service Blueprint / Gesch\u00e4ftsprozessmodell, UI-Skizzen, Wireframes</p>"},{"location":"22HS/SWEN1/01_Usability%20Engineering.html#contextual-inquiry","title":"Contextual Inquiry","text":"<p>In diesem Verfahren wird ein Nutzer, welcher sein Job erledigt, von einem Experten beobachtet. Der Experte kann w\u00e4hrend des Beobachtens Fragen stellen. </p> <p>Der Nutzen davon ist, dass Nutzer ihre Arbeit demonstrieren k\u00f6nnen.</p>"},{"location":"22HS/SWEN1/01_Usability%20Engineering.html#persona","title":"Persona","text":"<p>Eine Persona ist eine fiktive Person, welche eine Benutzergruppe repr\u00e4sentiert. Dies kann ein n\u00fctzliches Tool sein, um Designentscheidungen zu diskutieren</p> <p>Folgendes sollte aufgeschrieben werden:</p> <ul> <li>Name, Alter, Geschlecht, Herkunft</li> <li>Beruf, Ausbildung, Erfahrung</li> <li>Verantwortlichkeiten, Aufgaben, Pers\u00f6nliche Ziele</li> <li>1 - 2 Usage Szenarien</li> <li>Haltung, Aktivit\u00e4ten, Bed\u00fcrfnisse</li> <li>Umgebung</li> <li>Pain-Points und Frustrationen</li> <li>Erwartungen an neue L\u00f6sung</li> <li>Foto, Kernaussage</li> </ul> <p></p>"},{"location":"22HS/SWEN1/01_Usability%20Engineering.html#usage-context-szenario","title":"Usage- &amp; Context-Szenario","text":"<p>Ein Szenario ist eine kurze Geschichte, welche beschreibt, wie ein Benutzer (Persona) das Produkt in einer konkreten Situation ben\u00fctzt, um eine bestimmte Aufgabe zu erledigen.</p> <p>Dabei wird zwischen einer Usage-Szenario, was beschreibt, wie das Problem bis her gel\u00f6st wurde, und einem Context-Szenario, was beschreibt, wie das Problem in der Zukunft gel\u00f6st wird, unterschieden.</p> <p>Typischerweise ist folgendes enhalten:</p> <ul> <li>Motivation/Trigger: Was l\u00f6st das Szenario aus?</li> <li>Persona und ihre Ziele</li> <li>Aktionen und Interaktionen</li> <li>Kontext</li> <li>Wo findet das Szenario statt?</li> <li>Wer/was ist sonst noch involviert?</li> <li>Probleme und wie damit umgegangen wird</li> </ul> <p>Ein Szenario kann auch als Storyboard umgesetzt werden.</p>"},{"location":"22HS/SWEN1/01_Usability%20Engineering.html#stakeholder-map","title":"Stakeholder Map","text":""},{"location":"22HS/SWEN1/01_Usability%20Engineering.html#service-blueprint-geschaftsprozess","title":"Service Blueprint / Gesch\u00e4ftsprozess","text":""},{"location":"22HS/SWEN1/02_Use%20Case.html","title":"Use-Case","text":"<p>Es gibt drei verschiedene Use-Case-Typen: Brief UC, Informell (Casual UC), Vollst\u00e4ndig (Fully dressed UC).</p> <p>Ein Use Case muss ein konkreten Nutzen f\u00fcr den Akteur erzeugen. Dabei enh\u00e4lt ein Use-Case meistens mehr als eine einzelne Interaktion.</p> <p>Der Titel eins Use-Case sollte dem Schema <code>Kasse er\u00f6ffnen</code> folgen.</p> <p>Der Boss-Test besagt, falls dein Boss dich frag, was du den ganzen Tag gemacht hast und du sagst, du hast die ganze Zeit den einen Use-Case ausgef\u00fchrt, sollte er zufrieden sein.</p> <p>Der Elementary Business Process Test (EBP-Test) besagt, dass ein Use Case eine Aufgabe, die von einer Person und einem Ort zu einer bestimmten Zeit ausgef\u00fchrt wird, als Reaktion auf einen Business Event.</p> <p>Wichtig bei Use-Cases: Das Ping-Pong zwischen den Akteure und dem System gut herausarbeiten. </p>"},{"location":"22HS/SWEN1/02_Use%20Case.html#use-case-finden","title":"Use-Case finden","text":"<ol> <li>Systemgrenzen definieren</li> <li>Prim\u00e4rakteure identifizieren</li> <li>Jobs (Ziele, Aufgaben) der Prim\u00e4rakteure identifizieren</li> </ol>"},{"location":"22HS/SWEN1/02_Use%20Case.html#use-case-diagramm","title":"Use-Case-Diagramm","text":"<p>Im folgenden Diagramm sieht man wie <code>&lt;&lt;extends&gt;&gt;</code> und <code>&lt;&lt;include&gt;&gt;</code> verwendet wird. Mit <code>&lt;&lt;include&gt;&gt;</code> werden Prozesse eingebunden, welche selbst keine vollen Use-Case sind und sind nicht mit einem Akteur verbunden. Der Prozess ist dann im Use-Case enthalten (z.B. Process Sale enh\u00e4lt Handle TWINT Payment). Ein Use-Case kann mit <code>&lt;&lt;extends&gt;&gt;</code> verbunden werden, wenn ein Use-Case erweitert wird (z.B. erweitert den Use-Case \"Process Sale with Voucher\" den Use-Case \"Process Sale\"). Ein erweiterten Use-Case kann eine Verbindung mit einem Akteur haben.</p> <p>Akteure k\u00f6nnen mit generalisiert werden (z.B. Junior Cashier is-a Cashier)</p> <p></p>"},{"location":"22HS/SWEN1/02_Use%20Case.html#brief-use-case","title":"Brief Use-Case","text":"<p>Ein Brief Use-Case wird meistens zu Beginn erstellt und ist in Prosa. In ein Brief Use-Case kommt folgendes enhalten werden:</p> <ul> <li>Nur Erfolgsszenario</li> <li>Trigger des Use-Case</li> <li>Akteure</li> <li>Summarischen Ablauf des Use-Case</li> </ul>"},{"location":"22HS/SWEN1/02_Use%20Case.html#casual-use-case","title":"Casual Use-Case","text":"<p>Ein Casual Use-Case wird ebenfalls zu Beginn der Analyse verwendet und enth\u00e4lt folgendes:</p> <ul> <li>Erfolgsszenario &amp; wichtigste Alternativszenarien</li> <li>Trigger des Use-Case</li> <li>Akteure</li> <li>Summarischen Ablauf des Use-Case</li> </ul>"},{"location":"22HS/SWEN1/02_Use%20Case.html#fully-dressed-use-case","title":"Fully-dressed Use-Case","text":"<ul> <li>Use-Case-Name</li> </ul> <p>Aktiv formulieren (ev. Objekt + Verb)</p> <ul> <li> <p>Umfang (Scope)   Beschreibung des zu entwickelnde System</p> </li> <li> <p>Ebene (Level)</p> </li> <li> <p>Prim\u00e4rakteur (Primary Actor)   Die Prim\u00e4rakteure und wer den Use-Case initiert</p> </li> <li> <p>Stakeholders und Interessen   F\u00fcr wen den Use-Case sonst noch relevant ist und welche Interesse diese haben</p> </li> <li> <p>Vorbedingungen (Preconditions)   Voraussetzungen, damit der Use-Case ablaufen kann</p> </li> <li> <p>Erfolgsgarantie/Nachbedingungen (Success   Guarantee)   Was nach der Ausf\u00fchrung gew\u00e4hrleistet werden muss</p> </li> <li> <p>Standardablauf (Main Sucess Scenario)   Der \"normale\" Ablauf in einer nummerierten Liste, aber keine L\u00f6sungsdetails</p> </li> <li> <p>Erweiterungen (Extensions)</p> </li> </ul> <p>Alternative Erfolgs- und Misserfolgsszenarien</p> <ul> <li> <p>Spezielle Anforderungen (Special Requirements)</p> </li> <li> <p>Liste der Technik und Datavariationen   (Technology and Data Variations)</p> </li> <li> <p>H\u00e4ufigkeit des Auftretens (Frequency of Occurance</p> </li> <li> <p>Verschiedenes (Miscellaneous)</p> </li> </ul>"},{"location":"22HS/SWEN1/02_Use%20Case.html#systemsequenzdiagram","title":"Systemsequenzdiagram","text":"<p>&lt;</p>"},{"location":"22HS/SWEN1/Dom%C3%A4nemodellierung.html","title":"Dom\u00e4nemodellierung","text":""},{"location":"22HS/SWEN1/Dom%C3%A4nemodellierung.html#anleitung","title":"Anleitung","text":"<ol> <li>Konzept identifizieren</li> <li>Attribute zu Konzepte hinzuf\u00fcgen     Nur primitiven Typen sollten verwendet werden</li> <li>Komplexe Attribute zu Konzepte hinzuf\u00fcgen    Komplexe Datentypen sollten als separate Konzepte erstellt werden und mit einer Assoziation verbunden werden</li> <li>Konzepte verbinden</li> </ol> <p>Dabei ist wichtig daran zu decken, dass unwichtige Konzepte weggelassen werden k\u00f6nnen. Ebenfalls ist das Dom\u00e4nenmodell nicht repr\u00e4sentativ der endg\u00fcltig Klassen.</p> <p>Folgende Antipattern sollten vermieden werden:</p> <ul> <li>Keine komplexe Datentype als Attribute</li> <li>Keine \"Software\" Klassen (z.B. <code>SalesDatabase</code>)</li> <li>Keine Methoden auf den Konzepte</li> </ul>"},{"location":"22HS/SWEN1/Dom%C3%A4nemodellierung.html#spezialisierung","title":"Spezialisierung","text":"<p>Folgendes ist im Dom\u00e4nenmodell erlaubt:</p> <p></p>"},{"location":"22HS/SWEN1/Dom%C3%A4nemodellierung.html#aggregation-und-komposition","title":"Aggregation und Komposition","text":""},{"location":"22HS/SWEN1/Dom%C3%A4nemodellierung.html#zustande","title":"Zust\u00e4nde","text":""},{"location":"22HS/SWEN1/Modelle.html","title":"Modelle","text":""},{"location":"22HS/SWEN1/Modelle.html#wasserfall-modell","title":"Wasserfall-Modell","text":"<p>Die Entwicklung wird zu beginn also Folge von Aktivit\u00e4ten und Phasen definiert und danach umgesetzt. Dies sollte f\u00fcr eine hohe Planbarkeit und eine klare Aufteilung der Aufgaben sorgen. Selten sind aber alle Anforderung zu beginn bekannt zudem ist das Risiko hoch, dass etwas \u00fcbersehen wurde.</p>"},{"location":"22HS/SWEN1/Modelle.html#scrum-iterativ-inkrementelle-prozesse","title":"Scrum (Iterativ-Inkrementelle Prozesse)","text":"<p>Beim iterativen Prozess wird in mehrere Iterationen aufgeteilt, welche in sich selbst ein quasi Wasserfall-Modell ist. Dies erh\u00f6ht die Flexibilit\u00e4t und vereinfacht das Risikomanagement. Leider verringert sich dabei die Planbarkeit zu Beginn des Projektes und der Kunde muss kontinuierlich im Prozess eingebunden sein.</p> <p></p>"},{"location":"22HS/SWEN1/Patterns.html","title":"Patterns","text":""},{"location":"22HS/SWEN1/Software%20Architektur.html","title":"Software Architektur","text":""},{"location":"22HS/SWEN1/Software%20Architektur.html#modulkonzept","title":"Modulkonzept","text":"<p>Ein Modul bietet gewisse Service an. Diese werden \u00fcber eine Schnittstelle freigegeben, welche als eine Art von Vertrag wirkt. Das Innenleben eines Moduls wird nicht ver\u00f6ffentlicht. </p> <p>Die Schnittstelle eines Moduls sollte soweit definiert sein, dass es einfach Ausgetauscht werden.</p>"},{"location":"22HS/SWEN1/Software%20Architektur.html#kohasion-und-koppelung","title":"Koh\u00e4sion und Koppelung","text":"<p>Zwischen den Modulen gibt es eine schwache Kopplung. Innerhalb eines Moduls gibt es hingegen eine starke Kopplung.</p>"},{"location":"22HS/SWEN1/Software%20Architektur.html#clean-architeture","title":"Clean Architeture","text":""},{"location":"22HS/SWEN1/Software%20Architektur.html#n-1-view-model","title":"N + 1 View Model","text":""},{"location":"22HS/SWEN1/Software%20Architektur.html#paketdiagramme","title":"Paketdiagramme","text":"<ul> <li>Tier, Layer und Partion</li> </ul>"},{"location":"22HS/SWEN1/Software%20Architektur.html#grasp","title":"GRASP","text":"<ul> <li>Information Expert</li> <li>Creator</li> <li>Controller</li> <li>Low Coupling</li> <li>High Cohesion</li> <li>Polymorphism</li> <li>Pure Fabrication</li> <li>Indirection</li> <li>Protected Variations</li> </ul>"},{"location":"22HS/SWEN1/Zusatz/GUI.html","title":"GUI","text":""},{"location":"22HS/SWEN1/Zusatz/GUI.html#patterns","title":"Patterns","text":""},{"location":"22HS/SWEN1/Zusatz/GUI.html#presentation-model","title":"Presentation Model","text":"<p>The problem with a MVC-Model can be where to put calculated states (like if a button is activated or not). It can be worth to put those states in to a presentation model which interacts more with the view and controller, while connecting to the model with observers.</p>"},{"location":"22HS/SWEN1/Zusatz/GUI.html#mvc","title":"MVC","text":""},{"location":"22HS/SWEN1/Zusatz/GUI.html#mvp","title":"MVP","text":"<p>There are two variants of MVP: the supervising controller and the passive view.</p> <p>In the MVP pattern, the controller is replaced by the presenter. </p>"},{"location":"22HS/SWEN1/Zusatz/GUI.html#mvp-supervising-controller","title":"MVP - Supervising Controller","text":"<p>In this variant of the MVP pattern, the presenter is allowed to change the view directly without interacting with the model. Another difference between MVC and MVP is that the view connects to the mode with data bindings instead of observers.</p> <p></p>"},{"location":"22HS/SWEN1/Zusatz/GUI.html#mvp-passive-view","title":"MVP - Passive View","text":"<p>In this variant, the view only interacts with the presenter, cannot update itself and is fully controlled by the controller. The presenter is connected with observers or properties with the model and the view to receive updates from them.</p> <p></p>"},{"location":"22HS/SWEN1/Zusatz/GUI.html#mvvm","title":"MVVM","text":"<p>In the MVVM pattern the view model (aka the controller in MVC) is connected to the view with data bindings in both ways. The view model is also notified of changes in the model with data bindings.</p> <p></p>"},{"location":"22HS/SWEN1/Zusatz/Persistenz.html","title":"Persistenz","text":""},{"location":"22HS/SWEN1/Zusatz/Persistenz.html#jdbc","title":"JDBC","text":"<p>JDBC ist ein Framework f\u00fcr Java, welches direkten Zugriff auf die DB erlaubt.</p> <p></p> <p>Der folgende Code ist ein Beispiel f\u00fcr JDBC.</p> <pre><code>public class DbTest {\n    public static void main(String[] args)\n            throws ClassNotFoundException, SQLException {\n\n        Connection con = DriverManager.getConnection(\n            \"jdbc:postgresql://test.zhaw.ch/testdb\",\n            \"user\", \"password\");\n        Statement st = con.createStatement();\n        ResultSet rs = st.executeQuery(\"SELECT * FROM test ORDER BY name\");\n        while (rs.next()) {\n            System.out.println(\"Column 1 contains '\" + rs.getString(2) +\"'\");\n        }\n\n        con.close();\n    }\n}\n</code></pre>"},{"location":"22HS/SWEN1/Zusatz/Persistenz.html#patterns-fur-persistenz","title":"Patterns f\u00fcr Persistenz","text":"<p>Grunds\u00e4tzlich gilt: Persistenz und Domainmodel nicht mischen!!!!</p>"},{"location":"22HS/SWEN1/Zusatz/Persistenz.html#active-record-anti-pattern","title":"Active Record (Anti-Pattern)","text":"<p>Beim Active Record Pattern ist jede Entit\u00e4t selbst daf\u00fcr zust\u00e4ndig. Dies ist aber ein Anti-Pattern, da die Koh\u00e4sion sehr tief wird. Zus\u00e4tzlich leidet die Testbarkeit deutlich.</p>"},{"location":"22HS/SWEN1/Zusatz/Persistenz.html#data-access-object-dao","title":"Data Access Object (DAO)","text":"<p>Abstrahiert und kapselt den Zugriff auf die Datenquelle. Nun gibt es zwei Klassen, welche beide eine hohe Koh\u00e4sion haben. Dies funktioniert gut f\u00fcr einfache F\u00e4lle, wird aber kompliziert f\u00fcr gr\u00f6ssere Applikation. Dies liegt daran, dass DAO keine Relationen unterst\u00fctzen und dies von Hand implementiert werden muss. ### Data Access Object (DAO)</p> <p>Abstrahiert und kapselt den Zugriff auf die Datenquelle. Nun gibt es zwei Klassen, welche beide eine hohe Koh\u00e4sion haben. Dies funktioniert gut f\u00fcr einfache F\u00e4lle, wird aber kompliziert f\u00fcr gr\u00f6ssere Applikation. Dies liegt daran, dass DAO keine Relationen unterst\u00fctzen und dies von Hand implementiert werden muss. </p> <p>Der folgende Code zeigt ein Beispiel f\u00fcr ein DAO:</p> <pre><code>//Interface to be implemented by all ArticleDAOs\npublic interface ArticleDAO {\n    public void insert(Article item);\n    public void update(Article item);\n    public void delete(Article item);\n    public Article findById(int id);\n    public Collection&lt;Article&gt; findAll();\n    public Collection&lt;Article&gt; findByName (String name);\n    public Collection&lt;Article&gt; findByPrice (float price);\n    ...\n}\n\npublic class Article {\n    private long id;\n    private String name;\n    private float price;\n\n    public long getId(){\n        return id;\n    }\n    public void setId(long id) {\n        this id = id\n    }\n    ...\n}\n</code></pre>"},{"location":"22HS/SWEN1/Zusatz/Persistenz.html#or-data-mapper","title":"O/R Data Mapper","text":"<p>Separate Klasse f\u00fcr das Mapping oder Einsatz eines ORM. Das ORM kann Beziehungen automatisch direkt aufl\u00f6sen.</p> <p>Wenn ein O/R Mapper ben\u00fctzt wird, ist die Anwendungslogik stark entkoppelt von der Datenbank. </p> <p></p> <p>F\u00fcr JPA ist das folgende das Minimum f\u00fcr eine Identit\u00e4t: <pre><code>@Entity\npublic class Employee {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY) \n    // there are also TableMapper and Auto strategies.\n    private long id;\n    private String name;\n    private String lastName;\n}\n</code></pre></p> <p>Folgendermassen werden Beziehungen definiert.</p>"},{"location":"22HS/SWEN1/Zusatz/Verteiltes%20System.html","title":"Verteiltes System","text":"<p>Verteilte System haben typischerweisse folgende Merkmale:</p> <ul> <li>Sehr gross</li> <li>Datenorientierte Anwendung, meist mit Datenbank im Zentrum der Anwendung</li> <li>Extrem interaktiv</li> <li>Nebenl\u00e4ufig, Grosse Anzahl an parallele arbeitende Benutzen</li> <li>Hohe Konsistenzanforderungen</li> </ul> <p></p> <p>Folgendes sind popul\u00e4re Architekturen f\u00fcr verteilte Systeme:</p> <p></p>"},{"location":"22HS/SWEN1/Zusatz/Verteiltes%20System.html#data-transfer-object-dto","title":"Data Transfer Object (DTO)","text":""},{"location":"22HS/SWEN1/Zusatz/Verteiltes%20System.html#heterogenitat","title":"Heterogenit\u00e4t","text":"<p>Verschiedene Systeme haben verschiedene Standardt (Little vs Big Endian, Betriebsysteme, ...). Um dies zu bek\u00e4mpfen gibt es Standarts, wie JSON, welche das versenden von Daten vereinfachen.</p> <p></p>"},{"location":"22HS/SWEN1/Zusatz/Verteiltes%20System.html#client-server-anwendung","title":"Client-Server Anwendung","text":"<p>Wo bei einer Client-Server Anwendung die einzelnen Layern (DAtenhanltung, Verarbeitung, Presentation) lauft ist nicht fix, wie folgendes Diagramm demonstriert:</p> <p></p>"},{"location":"22HS/SWEN1/Zusatz/Verteiltes%20System.html#zusatzliche-fehlersituationen","title":"Zus\u00e4tzliche Fehlersituationen","text":"<ul> <li>ein Auftrag (engl. request) verloren geht</li> <li>das Ergebnis (engl. reply) des Servers verloren   geht</li> <li>der Server w\u00e4hrend der Ausf\u00fchrung des Auftrags   abst\u00fcrzt</li> <li>der Server f\u00fcr die Bearbeitung des Auftrags zu   lange braucht</li> <li>der Client vor Ankunft des Ergebnisses abst\u00fcrzt.</li> </ul>"},{"location":"22HS/SWEN1/Zusatz/Verteiltes%20System.html#terminologie","title":"Terminologie","text":"<ul> <li>Ein Server ist die Platform von Serverbausteinen, welche in einem Server laufen</li> <li>Ein Serverbaustein ist ein Komponent/Klasse/Modul, welches bei einem Request einem Client zu geordnet wird</li> <li>Ein Service ist ein Dienst, welcher von einem Serverbaustein bereitgestellt wird</li> <li>Eine Servermethod (oder Serverprozedur) ist ein Teil eines Service und kann vom Client genutzt werden, in dem ein Request geschickt wird.</li> </ul> <p>Im folgenden Diagramm sieht man den Lebenszyklus eines Serverbaustein:</p> <p></p>"},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html","title":"SWEN1 Zusammenfassung","text":"","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#fragen","title":"Fragen","text":"<ul> <li>Domainmodelierung</li> <li>Ist es ok Klassen, wie \"PaymentState\" im  Domain-Modell zu haben? Dies klingt nach einer Software-Klasse.</li> </ul>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#todos","title":"Todos","text":"<ul> <li>Templates:</li> <li>Persona</li> <li>Use Case</li> <li>Class Diagram</li> <li>Domain Model</li> <li>Stake Holder Map</li> </ul>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#anforderungsanalyse","title":"Anforderungsanalyse","text":"","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#ux","title":"UX","text":"<p>Gute Usability einer Software:</p> <ul> <li>Effekivit\u00e4t: Der Nutzer kann die Aufgaben mit gew\u00fcnschter Genauigkeit ausf\u00fchren</li> <li>Effizient: Der Nutzer kann die Aufgaben mit minimalem Aufwand ausf\u00fchren</li> <li>Zufriedenheit: selbsterkl\u00e4rend...</li> </ul> <p>UX ist, wie gut sich die App anf\u00fchlt, Customer Experience, wie der Gesammteindruck der App, Marke und Firma ist.</p> <p>Es gibt sieben Anforderungsbereiche der Usability (laut DIN EN ISO 9241-110). Je nach Applikation sind nicht alle wichtig oder treffen gar nicht zu.</p> <ol> <li>Aufgabenangemessenheit    Eine Aufgabe soll nur so viele Schritte ben\u00f6tigen, wie minimal n\u00f6tig. Ebenfalls soll nur Informationen angezeigt werden, welche f\u00fcr die aktuelle Aufgabe relevant ist (z.B. Hilfe).     Jede Eingabe sollte nur einmal get\u00e4tigt werden und Eingabefelder sollen Standartwerte oder/und Liste von vordefinierten Werte habe (z.B. L\u00e4nder). Zudem sollen ableitbare Eingaben vorgeschlagen werden.</li> <li>Lernf\u00f6rderlichkeit    Die Software soll Informationen \u00fcber Konzepte und Regeln anbieten, wenn der Nutzer dies w\u00fcnscht. Dies kann beispielsweise \u00fcber Tool-Tipps oder Hilfssystem bewerkstelligt werden.</li> <li>Individualisierbarkeit    Die Applikationen soll sich dem Benutzer anpassen. Dies kann getan werden \u00fcber Tipps, Tool-Tips, Wizards oder auch Tastaturk\u00fcrzel f\u00fcr Experten.</li> <li>Erwartungskonformit\u00e4t    Die Applikation soll strickt interne Regeln anwenden. Die Konsistenz von der Terminologie, Reihenfolgen von Kn\u00f6pfen und Informationsdarstellung sind wichtig und helfen dem Nutzer.</li> <li>Selbstbeschreibungsf\u00e4higkeit    Der Benutzer soll ausreichend informiert werden, wo er ist, was er tun soll und kann, wie er dies zu tun hat (z.B. Formate) und was das System macht.    Dabei k\u00f6nnen Dinge wie Labels und Fehlermeldung hilfreich sein.</li> <li>Steuerbarkeit/Kontrolle    Der Benutzer soll das Tempo und Dialogfluss steuern k\u00f6nnen. Ebenfalls soll der Benutzer zwischen verschiedenen Inputsmodalit\u00e4ten (Maus, Tastatur, Touch, ...) wechseln k\u00f6nnen. Darstellungsformate (Miles vs Kilometer) sollen einstellbar sein.</li> <li>Fehlertoleranz    Die Applikation soll dem Nutzer klar mitteilen, welche Werte als Input erwartet werded. Benutzeraktionen sollen zudem vor Aktionen \u00fcberpr\u00fcft werden. Bei Korrekturen und Fehlermeldungen d\u00fcrfen nie Daten verloren gehen.</li> </ol>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#user-centered-design","title":"User-Centered Design","text":"","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#user-domain-research","title":"User &amp; Domain Research","text":"<p>In dieser Phase geht es darum die Nutzer, ihr Umfeld und die Dom\u00e4ne zu verstehen. Daf\u00fcr sollten folgende Fragen beantwortet werden:</p> <ul> <li>\u00dcber den Nutzer:</li> <li>Wer sind die Benutzer?</li> <li>Was sind ihre Arbeit, ihre Aufgaben und Ziele?</li> <li>Wie sieht ihre Umgebung aus?</li> <li>was brauchen sie, um ihre Ziele zu erreichen</li> <li>Welche Begriffe verwenden sie?</li> <li>Welche Normen sind wichtig f\u00fcr sie (organisatorisch, kulturell, sozial)?</li> <li>Was sind Pain-Points in ihrer Arbeit?</li> <li>\u00dcber die Dom\u00e4ne</li> <li>Wie funktioniert das Gesch\u00e4ft der Firma?</li> <li>Was sind wichtige Konzepte, und Prozesse der Dom\u00e4ne?</li> <li>Bei mobile Apps:  Wo, wann und warum wird das App ben\u00fctzt?</li> </ul> <p>Um diese Fragen zu beantwortet k\u00f6nnen mehrere Tools benutzt werden: Contextual Inquiry, Interviews, Beobachtung, Fokusgruppen, Umfragen, Nutzungsauswertungen, Dokumentenstudium &amp; Mitbewerber studieren.</p> <p>Folgende Artifakte sollten nach diesem Schritt vorhanden sein: Personas, Usage-Szenarien, Mentales Moddel, Dom\u00e4nenmodell (Siehe Domainmodellierung), Stackeholder Map, Service Blueprint / Gesch\u00e4ftsprozessmodell, UI-Skizzen, Wireframes</p>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#contextual-inquiry","title":"Contextual Inquiry","text":"<p>In diesem Verfahren wird ein Nutzer, welcher sein Job erledigt, von einem Experten beobachtet. Der Experte kann w\u00e4hrend des Beobachtens Fragen stellen.  Der Nutzen davon ist, dass Nutzer ihre Arbeit demonstrieren k\u00f6nnen.</p>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#contextual-interview","title":"Contextual Interview","text":"<p>Wird in Strukturierte(geschlossene Fragen, vollst\u00e4ndige vorbereitet, aka. m\u00fcndlichen Fragebogen), Semi-struturierte (geschlossene und offene Fragen, davon einige vorbereitet, der Rest abh\u00e4ngig von der Situation) und unstrukturierte Interviews (keine vorbereitete Fragen, nur grobe Ziele definiert) unterteilt. </p>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#persona","title":"Persona","text":"<p>Folgendes sollte aufgeschrieben werden:</p> <ul> <li>Name, Alter, Geschlecht, Herkunft</li> <li>Beruf, Ausbildung, Erfahrung</li> <li>Verantwortlichkeiten, Aufgaben, Pers\u00f6nliche Ziele</li> <li>1 - 2 Usage Szenarien</li> <li>Haltung, Aktivit\u00e4ten, Bed\u00fcrfnisse</li> <li>Umgebung</li> <li>Pain-Points und Frustrationen</li> <li>Erwartungen an neue L\u00f6sung</li> <li>Foto, Kernaussage</li> </ul>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#usage-context-szenario","title":"Usage- &amp; Context-Szenario","text":"<p>Ein Szenario ist eine kurze Geschichte, welche beschreibt, wie ein Benutzer (Persona) das Produkt in einer konkreten Situation ben\u00fctzt, um eine bestimmte Aufgabe zu erledigen.</p> <p>Dabei wird zwischen einer Usage-Szenario, was beschreibt, wie das Problem bis her gel\u00f6st wurde, und einem Context-Szenario, was beschreibt, wie das Problem in der Zukunft gel\u00f6st wird, unterschieden.</p> <p>Typischerweise ist folgendes enhalten:</p> <ul> <li>Motivation/Trigger: Was l\u00f6st das Szenario aus?</li> <li>Persona und ihre Ziele</li> <li>Aktionen und Interaktionen</li> <li>Kontext</li> <li>Wo findet das Szenario statt?</li> <li>Wer/was ist sonst noch involviert?</li> <li>(f\u00fcr Context-Szenario) \u00c4ndert der Kontext?</li> <li>Probleme und wie damit umgegangen wird</li> </ul> <p>Ein Szenario kann auch als Storyboard umgesetzt werden.</p>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#stakeholder-map","title":"Stakeholder Map","text":"","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#service-blueprint-geschaftsprozess","title":"Service Blueprint / Gesch\u00e4ftsprozess","text":"","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#use-case","title":"Use-Case","text":"<p>Der Boss-Test besagt, falls dein Boss dich frag, was du den ganzen Tag gemacht hast und du sagst, du hast die ganze Zeit den einen Use-Case ausgef\u00fchrt, sollte er zufrieden sein.</p> <p>Der Elementary Business Process Test (EBP-Test) besagt, dass ein Use Case eine Aufgabe, die von einer Person und einem Ort zu einer bestimmten Zeit ausgef\u00fchrt wird, als Reaktion auf einen Business Event.</p> <p>Wichtig bei Use-Cases: Das Ping-Pong zwischen den Akteure und dem System gut herausarbeiten.</p> <p>Checkliste:</p> <ul> <li> <p>Muss ein konkreten Nutzen f\u00fcr den Akteur erzeugen</p> </li> <li> <p>Title folgt dem Schema <code>Kasse er\u00f6ffnen</code></p> </li> <li> <p>Beschreibung beschreibt die Logik, nicht die konkrete Umsetzung (\"Kassier tippt die Produkt-ID ein.\" vs \"Kassier erfasst das Produkt.\")</p> </li> <li> <p>Keine kann-Formulierungen</p> </li> <li> <p>Alternative Interaktionen sind unter Erweiterungen aufgef\u00fchrt</p> </li> </ul> <p>Use-Case finden: </p> <ol> <li>Systemgrenzen definieren</li> <li>Prim\u00e4rakteure identifizieren</li> <li>Jobs (Ziele, Aufgaben) der Prim\u00e4rakteure identifizieren</li> </ol>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#brief-use-case","title":"Brief Use-Case","text":"<p>Ein Brief Use-Case wird meistens zu Beginn erstellt. In ein Brief Use-Case kommt folgendes enhalten werden:</p> <ul> <li>Nur Erfolgsszenario</li> <li>Trigger des Use-Case</li> <li>Akteure</li> <li>Summarischen Ablauf des Use-Case</li> </ul>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#casual-use-case","title":"Casual Use-Case","text":"<p>Ein Casual Use-Case wird ebenfalls zu Beginn der Analyse verwendet und enth\u00e4lt folgendes:</p> <ul> <li>Erfolgsszenario &amp; wichtigste Alternativszenarien</li> <li>Trigger des Use-Case</li> <li>Akteure</li> <li>Summarischen Ablauf des Use-Case</li> </ul>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#fully-dressed-use-case","title":"Fully-dressed Use-Case","text":"<ul> <li>Use-Case-Name</li> </ul> <p>Aktiv formulieren (ev. Objekt + Verb)</p> <ul> <li> <p>Umfang (Scope)   Beschreibung des zu entwickelnde System</p> </li> <li> <p>Ebene (Level)</p> </li> <li> <p>Prim\u00e4rakteur (Primary Actor)   Die Prim\u00e4rakteure und wer den Use-Case initiert</p> </li> <li> <p>Stakeholders und Interessen   F\u00fcr wen den Use-Case sonst noch relevant ist und welche Interesse diese haben</p> </li> <li> <p>Vorbedingungen (Preconditions)   Voraussetzungen, damit der Use-Case ablaufen kann</p> </li> <li> <p>Erfolgsgarantie/Nachbedingungen (Success   Guarantee)   Was nach der Ausf\u00fchrung gew\u00e4hrleistet werden muss</p> </li> <li> <p>Standardablauf (Main Sucess Scenario)   Der \"normale\" Ablauf in einer nummerierten Liste, aber keine L\u00f6sungsdetails</p> </li> <li> <p>Erweiterungen (Extensions)</p> </li> </ul> <p>Alternative Erfolgs- und Misserfolgsszenarien</p> <ul> <li> <p>Spezielle Anforderungen (Special   Requirements)</p> </li> <li> <p>Liste der Technik und Datavariationen   (Technology and Data Variations)</p> </li> <li> <p>H\u00e4ufigkeit des Auftretens (Frequency of   Occurance</p> </li> <li> <p>Verschiedenes (Miscellaneous)</p> </li> </ul>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#zusatzliche-anforderungen","title":"Zus\u00e4tzliche Anforderungen","text":"<p>Anforderungen (funktional, wie nicht funktional) , welche nicht in Use-Cases passen, werden in Anforderungsspezifikationen formuliert. </p> <ul> <li>Schema: \"Das System soll/muss mindestens/darf nicht...\"</li> <li>Muss messbar und verifizierbar sein</li> <li>KEINE L\u00f6sungsideen (aka. Das System muss eine Web-App sein)</li> </ul>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#furps","title":"FURPS+","text":"","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#systemsequenzdiagram","title":"Systemsequenzdiagram","text":"<p>Ziel: Wichtigsten Systemoperationen zu identifizieren</p> <p>Um Systemoperationen zu finden: Jeden Schritt des Akteurs analysieren, welche Systemoperationen ben\u00f6tigt werden. Checkliste:</p> <ul> <li>Systemoperation sind aus sicht des Akteur geschrieben.</li> <li>Zeitform ist presenz</li> </ul> <p></p>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#operation-contract","title":"Operation Contract","text":"<p>Pr\u00e4zisierung einer (System) Operation mit: Name, Parameterliste, Vorbedingungen, Nachbedinungen</p> <p>Vorbedingungen m\u00fcssen zwingend erf\u00fcllt sein, bevor die Systemoperation aufgerufen werden kann. Nachbedingungen m\u00fcssen erf\u00fcllt sein, nach der Ausf\u00fchrung der Systemoperation.</p>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#domanenmodellierung","title":"Dom\u00e4nenmodellierung","text":"","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#anleitung","title":"Anleitung","text":"<ol> <li>Konzept identifizieren (Jedes Substantiv in vorherigen Artifakten \u00fcberpr\u00fcfen)</li> <li>Attribute zu Konzepte hinzuf\u00fcgen     Nur primitiven Typen sollten verwendet werden</li> <li>Komplexe Attribute zu Konzepte hinzuf\u00fcgen    Komplexe Datentypen sollten als separate Konzepte erstellt werden und mit einer Assoziation verbunden werden</li> <li>Konzepte verbinden</li> </ol> <p>Dabei ist wichtig daran zu decken, dass unwichtige Konzepte weggelassen werden k\u00f6nnen. Ebenfalls ist das Dom\u00e4nenmodell nicht repr\u00e4sentativ der endg\u00fcltig Klassen.</p> <p>Folgende Antipattern sollten vermieden werden:</p> <ul> <li>Keine komplexe Datentype als Attribute</li> <li>Keine \"Software\" Klassen (z.B. <code>SalesDatabase</code>)</li> <li>Keine Methoden auf den Konzepte</li> </ul>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#tipps","title":"Tipps","text":"<ul> <li> <p>Wenn Attribute f\u00fcr viele/alle Objekte gleich sind, dann in ein separates Konzept extrahieren</p> </li> <li> <p>Sepzialisieren und Generalisierung</p> </li> <li> <p>Alle Instanzen eines spezialisierten Konzept m\u00fcssen auch Instanzen des generalisierten Konzept sein</p> </li> <li> <p>Spezialisiertes Konzept <code>is a</code> generalisiertes Konzept</p> <p></p> </li> <li> <p>Komposition und Komposition</p> </li> </ul> <p></p> <ul> <li>Zust\u00e4nde (Separate Hierarchie f\u00fcr die Zust\u00e4nde, \u00e4hnlich wie das State-Pattern)</li> </ul> <p></p> <ul> <li> <p>Rollen   M\u00f6glichkeiten: Einzelnes Konzept (wie Person), welches mit verschiedenen Assoziationen (wie emplys-to-manage, ...) verbunden ist. Zweite M\u00f6glichkeite: Anstelle von einem Konzept gibt es f\u00fcr jede Rolle ein eigenes Konzept   </p> </li> <li> <p>Assoziationsklassen   </p> </li> <li> <p>Einheiten   Oft sinnvoll Masseinheiten als Konzept zu modelieren</p> </li> </ul>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#software-engineering","title":"Software Engineering","text":"<p>Modulkonzept: Jedes Modul hat eine m\u00f6glichst kleine Kopplung, eine klare minimale Schnittstelle und enth\u00e4lt alle ben\u00f6tigten Funktionen und Datenstrukturen. Ein Modul kann ein Paket, Programmierkonstrukt, LIbrary, ... sein.</p> <p>Zwischen den Modulen gibt es eine schwache Kopplung. Innerhalb eines Moduls gibt es hingegen eine starke Kopplung und hohe Koh\u00e4sion.</p>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#clean-architeture","title":"Clean Architeture","text":"<p>Entites kapseln die Business Rules, Use-Cases orchestriert die Verwendung von den Entities, Interface Adapters \u00fcbersetzen externe Bibliotheken zu den internen Strukturen.</p> <p></p>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#n1-view-model","title":"N+1 View Model","text":"<ul> <li>Logical View: Welche Funktionalit\u00e4t wird gegen aussen angeboten? (Sequenzdiagram, Interaktionsdiagram, Klassendiagram, Zustandsdiagram)</li> <li>Process View: Welche Prozesse laufen wo und wie ab? (Klassendiagram, Interaktionsdiagram, Aktivit\u00e4tsdiagram)</li> <li>Development View: Wie wurde die logische Struktur umgesetzt? (Packetdiagram, Komponentdiagram)</li> <li>Physical View: Auf welcher Infrastruktur wir ein System augeliefert/betrieben? (Deployment Diagram)</li> <li>+1: Welches sind die wichtigsten Use-Cases und ihre nichtfunktionalen Anforderungen? Wie wurden sie umgesetzt? (UC-Diagram,  Sequenzdiagram)</li> </ul>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#schichtenkonzept","title":"Schichtenkonzept","text":"<p>Je weiter oben, desto anwendungs-spezifischer, je weiter unten, desto algeimeiner. Komplung immer von oben nach unten.</p> <p></p>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#grasp-general-responsibility-assignment-software-patterns","title":"GRASP (General REsponsibility Assignment Software Patterns)","text":"","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#implementierung","title":"Implementierung","text":"<ul> <li>Code-Driven Development: Zuerst die Klasse implementieren</li> <li>TDD: Test-Driven Development: Zuerst Tests f\u00fcr Klassen/Komponenten schreiben, dann den Code entwickeln</li> <li>BDD: Behavior-Driven Development: Tests aus Benutzersicht beschreiben</li> </ul>","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/summary/SWEN%20Zusammenfassung.html#refactoring","title":"Refactoring","text":"","tags":["summary","SWEN1"]},{"location":"22HS/SWEN1/template/Brief%20Use-Case.html","title":"Brief Use Case","text":""},{"location":"22HS/SWEN1/template/Brief%20Use-Case.html#brief-use-case","title":"Brief Use-Case","text":"<p>Ein Brief Use-Case wird meistens zu Beginn erstellt und ist in Prosa. In ein Brief Use-Case kommt folgendes enhalten werden:</p> <ul> <li>Nur Erfolgsszenario</li> <li>Trigger des Use-Case</li> <li>Akteure</li> <li>Summarischen Ablauf des Use-Case</li> </ul>"},{"location":"22HS/SWEN1/template/Brief%20Use-Case.html#checkout","title":"Checkout","text":"<p>Der Nutzer kann sich am Terminal aus checken lassen. Daf\u00fcr muss sich der Akteur, der Kunde, wieder die Buchungsnummer eingeben oder eine Karte scannen. Darauf hin das auschecken bes</p>"},{"location":"22HS/SWEN1/template/Brief%20Use-Case.html#status-abfragen","title":"Status Abfragen","text":"<p>Ein Mitarbeiter kann den aktuellen Status abfragen. Daf\u00fcr muss ein Mitarbeiter Passwort eingegeben werden. Danach wird der aktuelle Status des Terminals angezeigt.</p>"},{"location":"22HS/SWEN1/template/Fully%20Dressed%20Use-Case.html","title":"Use-Case","text":""},{"location":"22HS/SWEN1/template/Fully%20Dressed%20Use-Case.html#use-case-name","title":"Use-Case-Name","text":"<p>Buchung einchecken</p>"},{"location":"22HS/SWEN1/template/Fully%20Dressed%20Use-Case.html#umfang-scope","title":"Umfang (Scope)","text":"<p>Ein Terminal f\u00fcr das ein checken des Nutzers f\u00fcr ein Hot</p>"},{"location":"22HS/SWEN1/template/Fully%20Dressed%20Use-Case.html#ebene-level","title":"Ebene (Level)","text":"<p>Anwenderziel</p>"},{"location":"22HS/SWEN1/template/Fully%20Dressed%20Use-Case.html#primarakteur-primary-actor","title":"Prim\u00e4rakteur (Primary Actor)","text":"<p>(Die Prim\u00e4rakteure und wer den Use-Case initiert)</p> <p>Kunde</p>"},{"location":"22HS/SWEN1/template/Fully%20Dressed%20Use-Case.html#stakeholders-und-interessen","title":"Stakeholders und Interessen","text":"<p>(F\u00fcr wen den Use-Case sonst noch relevant ist und welche Interesse diese haben)</p> <p>Hotel-Inhaber</p>"},{"location":"22HS/SWEN1/template/Fully%20Dressed%20Use-Case.html#vorbedingungen-preconditions","title":"Vorbedingungen (Preconditions)","text":"<p>(Voraussetzungen, damit der Use-Case ablaufen kann)</p> <ul> <li>Kunde hat eine BuchungsNr</li> <li>Die BuchungNr ist valid zur Zeit des Ein-Checken</li> </ul>"},{"location":"22HS/SWEN1/template/Fully%20Dressed%20Use-Case.html#erfolgsgarantienachbedingungen-success-guarantee","title":"Erfolgsgarantie/Nachbedingungen (Success Guarantee)","text":"<p>(Was nach der Ausf\u00fchrung gew\u00e4hrleistet werden muss)*</p> <ul> <li>Ein Zimmer wurde einer Buchung zugewiessen</li> <li>Der Nutzer hat Karten f\u00fcr sein Zimmer erhalten</li> </ul>"},{"location":"22HS/SWEN1/template/Fully%20Dressed%20Use-Case.html#standardablauf-main-sucess-scenario","title":"Standardablauf (Main Sucess Scenario)","text":"<p>(Der \"normale\" Ablauf in einer nummerierten Liste, aber keine L\u00f6sungsdetails und aktive S)</p> <ol> <li>Kunde n\u00e4hert sich dem Terminal</li> <li>Der Kunde teilt dem Terminal seine Buchungs Nr mit</li> <li>Das System sucht die entsprechende Buchung und validiert sie</li> <li>Der Kunde muss seine Kundendaten und Buchungsdaten best\u00e4tigen</li> <li>Das System sucht ein Zimmer mit der entsprechender Kategorie der Buchung</li> <li>Das Zimmer wird der Buchung zugewiessen</li> <li>Der Kunde wird dazu aufgefordert eine Karte zu nehmen und diese zu scannen</li> <li>Sobald der Kunde ein Karte scannt, wird diese der Buchung und dem Zimmer zu geordnet</li> <li>Falls der Kunde weitere Karten scannt, wird schritt 7 wiederholt</li> <li>Der Kunde wird verabschiedet</li> </ol>"},{"location":"22HS/SWEN1/template/Fully%20Dressed%20Use-Case.html#erweiterungen-extensions","title":"Erweiterungen (Extensions)","text":"<p>(Alternative Erfolgs- und Misserfolgsszenarien)</p> <p>3b) Falls die Buchung nicht valide ist oder nicht existiert wird ein Fehler angezeigt und der Prozess wird beendet</p> <p>5b) Falls kein Zimmer gefunden wird, wird die Zentrale benachrichtigt, dies wird dem Nutzer mitgeteilt und der Prozess wird beendet</p> <p>*b) Falls der Nutzer w\u00e4hrend des Prozesses weglauft, wird nach einem Timeout den Prozess abgebrochen und die Zentrale gepingt.</p>"},{"location":"22HS/SWEN1/template/Fully%20Dressed%20Use-Case.html#spezielle-anforderungen-special-requirements","title":"Spezielle Anforderungen (Special Requirements)","text":""},{"location":"22HS/SWEN1/template/Fully%20Dressed%20Use-Case.html#liste-der-technik-und-datavariationen","title":"Liste der Technik und Datavariationen","text":"<p>(Technology and Data Variations)</p>"},{"location":"22HS/SWEN1/template/Fully%20Dressed%20Use-Case.html#haufigkeit-des-auftretens-frequency-of-occurance","title":"H\u00e4ufigkeit des Auftretens (Frequency of Occurance)","text":"<p>ca 200-500 mal pro Tag total f\u00fcr alle Hotels</p>"},{"location":"22HS/SWEN1/template/Fully%20Dressed%20Use-Case.html#verschiedenes-miscellaneous","title":"Verschiedenes (Miscellaneous)","text":""},{"location":"22HS/WBE/Browser.html","title":"Browser","text":"<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;link rel=\"stylesheet\" href=\"mystyle.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;script type=\"module\" src=\"code/date.js\"&gt;&lt;/script&gt; \n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"22HS/WBE/Browser.html#ajax","title":"Ajax","text":"<p>The following code uses the old low-level ajax api. </p> <pre><code>const xhr = new XMLHttpRequest()\nxhr.onreadystatechange = () =&gt; {\n    if (xhr.readyState === 4) {\n        xhr.status === 200 ? console.log(xhr.responseText) : console.error('error')\n    }\n}\nxhr.open('GET', 'https://yoursite.com')\nxhr.send()\n</code></pre>"},{"location":"22HS/WBE/Browser.html#fetch","title":"Fetch","text":"<pre><code>// fetch options\nconst options = {\n    \"method\": \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    \"body\": \"hello world\"\n}\n\nfetch(url, options).then(response =&gt; {\n    // returns the status code\n    console.log(response.status)\n    // returns the received headers\n    console.log(response.headers.get(\"Content-Type\"))\n    // returns a promise which resolve to the text\n    response.json().then(json =&gt; console.log(json))\n    // returns a promise which resolve to the text\n    response.text().then(text =&gt; console.log(text))\n}).catch(err =&gt; console.error(err))\n</code></pre>"},{"location":"22HS/WBE/Browser.html#local-storage-and-session-storage","title":"Local Storage and Session Storage","text":"<p>With <code>localStorage</code> and <code>sessionStorage</code>, data can be stored on the browser.</p> <pre><code>let user = {name: \"Hans\", highscore: 234}\nlocalStorage.setItem(\"user\", JSON.stringify(user))\nlocalStorage.msg = \"Hello World\"\nconsole.log(localStorage.getItem(\"user\"))\n</code></pre>"},{"location":"22HS/WBE/Browser.html#history","title":"History","text":"<pre><code>hsitory.length // the amount of history entries\nhistory.back() // goes back\nhistory.pushState(state, unused, url)\nhistory.replaceState(stateObj, unused, url)\n</code></pre>"},{"location":"22HS/WBE/Browser.html#web-workers","title":"Web Workers","text":"<p>With web workers, JavaScript can run code in a separate thread. However, the web worker has to communicate with the frontend code over events to avoid locking.</p> <pre><code>// squareworker.js\naddEventListener(\"message\", event =&gt; {\n    postMessage(event.data * event.data)\n})\n// main script\nlet squareWorker = new Worker(\"code/squareworker.js\")\nsquareWorker.addEventListener(\"message\", event =&gt; {\n    console.log(\"The worker responded:\", event.data)\n})\nsquareWorker.postMessage(10)\nsquareWorker.postMessage(24)\n</code></pre>"},{"location":"22HS/WBE/DOM.html","title":"DOM","text":"<p>The DOM is a tree structure. Every node has a <code>nodeType</code> attribute.</p> Node Type Constant Explaination 1 <code>Node.ELEMENT_NODE</code> \"normal\" tags 3 <code>Node.TEXT_NODE</code> Text nodes 8 <code>Node.COMMENT_NODE</code> Comment nodes <p>The children of a node can be retrieved by either <code>node.childNodes</code> which returns a <code>NodeList</code> or by <code>node.children</code> which returns an <code>HTMLCollection</code>. The <code>HTMLCollection</code> only contains element nodes.</p>"},{"location":"22HS/WBE/DOM.html#find-elements","title":"Find Elements","text":"<pre><code>let aboutus = document.getElementById(\"aboutus\")\nlet aboutlinks = aboutus.getElementsByTagName(\"a\")\nlet aboutimportant = aboutus.getElementsByClassName(\"important\")\nlet navlinks = document.querySelectorAll(\"nav a\")\n</code></pre>"},{"location":"22HS/WBE/DOM.html#modifiy-the-dom","title":"Modifiy the DOM","text":"<p>The DOM can be modified with the methods <code>parent.appendChild(node)</code>, <code>parent.insertBefore(node, sibling)</code> and <code>node.remove()</code> (removes itself).</p> <p>To create a new node, methods like <code>document.createElement(type)</code>, <code>document.createAttribute(name)</code>, <code>element.setAttributeNode(attributeObj)</code> are useful.</p> <pre><code>\n</code></pre>"},{"location":"22HS/WBE/DOM.html#event-handling","title":"Event Handling","text":"<p>An event handler can be registered with any DOM element.</p> <p>One caveat of  the <code>onclick</code> property is that only one <code>onclick</code> listener can be register per elements. No such restriction exists with <code>addEventListener</code></p> <pre><code>const listener = e =&gt; console.log(`button clicked at ${e.x}/${e.y}`)\nbutton.addEventListener(\"click\", listener)\n// or\nbutton.onclick = () =&gt; console.log(\"button clicked 2\")\n\n// to remove the listener\nbutton.removeEventListener(\"click\", listener)\n</code></pre> Event Type Explanation Event-Obj <code>click</code> When a DOM element was clicked by a mouse/touch <code>x</code>,  <code>y</code>, <code>button</code> <code>dblclick</code> When an DOM element was double clicked <code>mousedown</code> When a mouse button is pressed over the DOM element <code>x</code>, <code>y</code>, <code>button</code> <code>mouseup</code> When the mouse button was released <code>touchstart</code> When a touch event was started. <code>touchmove</code> When while touching the screen, the finger moves <code>touchend</code> When the touch gesture ends <code>keydown</code> When a key was pressed <code>keyup</code> When a key was lifted <code>input</code> When a character was inputted into a textfield <code>scroll</code> When the page is being scrolled <code>focus</code> When focusing an element. This event is not propagated. <code>blur</code> When the registered element looses focus. This event is not propagated. <code>load</code> When the registered element finished loading. Is emitted for <code>window</code>,  <code>document.body</code> and elements with external resources (like <code>img</code> tags). This event is not propagated. <code>beforeunload</code> Before the user leaves the page.This event is not propagated."},{"location":"22HS/WBE/DOM.html#event-object","title":"Event Object","text":"<p>MDM-Documentation: https://developer.mozilla.org/en-US/docs/Web/API/Event</p> <p>The event objects contains multiple properties which can be usefull:</p> Event-Typ Property Explanation general <code>target</code> The element which caused the event general <code>currentTarget</code> The element on which the listener was registered on"},{"location":"22HS/WBE/DOM.html#event-bubbling","title":"Event Bubbling","text":"<p>An event \"bubbles up\" until it reaches the <code>window</code> object or a handler calls <code>event.stopPropagation()</code>. With <code>event.preventDefault()</code> the default behaviour of an DOM element can be prevented.</p> <pre><code>document.querySelector(\"p\").addEventListener(\"mousedown\", () =&gt; console.log(\"Handler for paragraph.\"))\n\ndocument.querySelector(\"button\").addEventListener(\"mousedown\", event =&gt; { \n    console.log(\"Handler for button.\")\n    if (event.button == 2) event.stopPropagation()\n}\n\n                                                 document.querySelector(\"a\").addEventListener(\"click\", event =&gt; { \n    console.log(\"Handler for a link.\")\n    event.preventDefault() // prevents the link from working\n}\n</code></pre>"},{"location":"22HS/WBE/DOM.html#animation","title":"Animation","text":"<p><code>requestAnimationFrame(function)</code> will call the given function shortly before the browser draws the next frame. This enables animation to be created in javascript.</p> <pre><code>function animate (time, lastTime) {\n    /* calculate new position */\n    /* ... */\n    requestAnimationFrame(newTime =&gt; animate(newTime, time))\n}\n\nrequestAnimationFrame(animate)\n</code></pre>"},{"location":"22HS/WBE/DOM.html#svg","title":"SVG","text":"<p>SVG can be directly written in HTML with the <code>svg</code> tag and can be styled with css. SVGs can also be loaded with the <code>img</code> tag.</p> <pre><code>&lt;p&gt;Normal HTML here.&lt;/p&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\"&gt;\n    &lt;circle r=\"50\" cx=\"50\" cy=\"50\" fill=\"red\"/&gt;\n    &lt;rect x=\"120\" y=\"5\" width=\"90\" height=\"90\"\n    stroke=\"blue\" fill=\"none\"/&gt;\n&lt;/svg&gt;\n</code></pre> <p></p> <p>JavaScript can access and modify SVG graphics (when loaded with <code>svg</code>), like:</p> <pre><code>let circle = document.querySelector(\"circle\")\ncircle.setAttribute(\"fill\", \"cyan\")\n</code></pre>"},{"location":"22HS/WBE/DOM.html#canvas","title":"Canvas","text":"<p>TODO: insert better examples</p> <p>With a canvas, JavaScript can render graphics.</p> <pre><code>&lt;p&gt;Before canvas.&lt;/p&gt;\n&lt;canvas width=\"120\" height=\"60\"&gt;&lt;/canvas&gt;\n&lt;p&gt;After canvas.&lt;/p&gt;\n&lt;script&gt;\n    let canvas = document.querySelector(\"canvas\")\n    let context = canvas.getContext(\"2d\")\n    context.fillStyle = \"red\"\n    context.fillRect(10, 10, 100, 50)\n&lt;/script&gt;\n</code></pre> <p>With canvas, there are turtle-like graphics:</p> <pre><code>let cx = document.querySelector(\"canvas\").getContext(\"2d\")\ncx.strokeStyle = \"blue\" // sets the outline to blue\ncx.fillStyle = \"red\" // sets the color of the object to red\ncx.beginPath()\ncx.moveTo(50, 10)\ncx.lineTo(10, 70)\ncx.lineTo(90, 70)\ncx.fill()\n</code></pre> <p></p> <p>An image can be loaded like this:</p> <pre><code>let cx = document.querySelector(\"canvas\").getContext(\"2d\")\nlet img = document.createElement(\"img\")\nimg.src = \"img/hat.png\"\nimg.addEventListener(\"load\", () =&gt; {\n    for (let x = 10; x &lt; 200; x += 30) {\n        cx.drawImage(img, x, 10)\n    }\n})\n</code></pre> <p></p> <p>There are a lot more you can do with a <code>canvas</code> tag, like <code>quadraticCurveTo</code>, <code>bezierCurveTo</code>, <code>arc</code>, text, <code>scale</code>, <code>translate</code>, <code>rotate</code> and a stack infrastructure with <code>save</code> and <code>restore</code>.</p> <p>The coordinate system of a canvas starts in the top left corner at <code>(0/0)</code></p>"},{"location":"22HS/WBE/DOM.html#form","title":"Form","text":"<pre><code>&lt;form method=\"post\" action=\"/form1\"&gt;\n    &lt;label for=\"nameid\"&gt;Name: &lt;/label&gt;\n    &lt;input type=\"text\" id=\"nameid\"&gt;\n    &lt;label for=\"ageid\"&gt;Age: &lt;/label&gt;\n    &lt;input type=\"text\" id=\"ageid\" name=\"age\"&gt;\n    &lt;input type=\"submit\" value=\"Send\"&gt;\n&lt;/form&gt;\n\n&lt;form&gt;\n    &lt;label&gt;Name: &lt;input type=\"text\"&gt;&lt;/label&gt;\n    &lt;label&gt;Age: &lt;input type=\"text\"&gt;&lt;/label&gt;\n    &lt;input type=\"submit\" value=\"Send\"&gt;\n    &lt;button disabled&gt;disabled button&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>The <code>form</code>s above define a form in HTML. Both define the same form but the first one uses <code>for</code> to specify which <code>label</code> belongs to which <code>input</code>-element. In the second example this done by nesting the <code>input</code>-element in the <code>label</code>-element.</p> <p>When the <code>submit</code>-button has been pressed then the form will be sent to the server except if <code>preventDefault()</code> is called on the <code>submit</code>-event.</p> <p>Form elements can be disabled by adding a <code>disabled</code> attribute to the form-tag.</p> <p>The following attributes are useful to know:</p> <ul> <li>attribute <code>method</code>: if the form should be sent with a <code>post</code> request or a <code>get</code> request(like <code>/form1?nameid=...&amp;age=...</code>). But with <code>get</code> request the data is limited as it needs to be sent over the address line (often limited to 1000 chars)   </li> <li>attribute <code>action</code>: To where the form result should be sent </li> <li>attribute <code>name</code>: The name of form elements. If present it is used to name the parameter else the <code>id</code> is used in the get or post request</li> </ul> Form Example Screenshot text <code>&lt;input type=\"text\"&gt;</code> password <code>&lt;input type=\"password\"&gt;</code> date <code>&lt;input type=\"date\"&gt;</code> number <code>&lt;input type=\"number\"&gt;</code> email <code>&lt;input type=\"email\"&gt;</code> range <code>&lt;input type=\"range\"&gt;</code> search <code>&lt;input type=\"search\"&gt;</code> color <code>&lt;input type=\"color\"&gt;</code> textarea <code>&lt;textarea&gt;&lt;/textarea&gt;</code> radio <code>&lt;input type=\"radio\" checked&gt;</code> checkbox <code>&lt;input type=\"checkbox\" checked&gt;</code> select <code>&lt;select&gt;&lt;option value=\"1\"&gt;one&lt;/option&gt;&lt;/select&gt;</code> fieldset <code>&lt;fieldset&gt;&lt;legend&gt;description&lt;/legend&gt;...form...&lt;/fieldset&gt;</code> file <code>&lt;input type=\"file\" multiple&gt;</code>"},{"location":"22HS/WBE/DOM.html#focus","title":"Focus","text":"<p>With <code>document.activeElement</code> JS can retrieve the currently active focus. To focus (or blur) programaticly use the <code>focus()</code> and <code>blur()</code> methods on the DOMElement</p>"},{"location":"22HS/WBE/DOM.html#events","title":"Events","text":"<ul> <li><code>change</code>: If a form element actually changed</li> <li><code>input</code>: Input in a text field</li> <li><code>keydown</code>, <code>keypress</code>, <code>keyup</code>: Key presses on an active form-tag</li> <li><code>submit</code>: When the <code>submit</code>-input-tag has been pressed</li> </ul>"},{"location":"22HS/WBE/DOM.html#read-files","title":"Read files","text":"<pre><code>&lt;input type=\"file\" multiple&gt;\n&lt;script&gt;\nlet input = document.querySelector(\"input\")\ninput.addEventListener(\"change\", () =&gt; {\n    for (let file of Array.from(input.files)) {\n        let reader = new FileReader()\n        reader.addEventListener(\"load\", () =&gt; {\n            console.log(\"File\", file.name, \"starts with\",\n            reader.result.slice(0, 20))\n        })\n        reader.readAsText(file)\n    }\n})\n&lt;/script&gt;\n</code></pre>"},{"location":"22HS/WBE/Express.html","title":"Express","text":""},{"location":"22HS/WBE/Express.html#http-request-methods","title":"HTTP Request Methods","text":"<ul> <li><code>GET</code>: Retrieve resource</li> <li><code>POST</code>: Create a new resource</li> <li><code>PUT</code>: Update an already existing resource</li> <li><code>PATCH</code>: Partly update an already existing resource (e.g. only sending the first name if only this field is modified)</li> <li><code>DELETE</code>: Delete a resource</li> </ul>"},{"location":"22HS/WBE/Express.html#simple-http-server-client","title":"Simple HTTP Server &amp; Client","text":"<p>The simple server:</p> <pre><code>const {createServer} = require(\"http\")\nlet server = createServer((request, response) =&gt; {\n    response.writeHead(200, {\"Content-Type\": \"text/html\"})\n    response.write(`\n    &lt;h1&gt;Hello!&lt;/h1&gt;\n    &lt;p&gt;You asked for &lt;code&gt;${request.url}&lt;/code&gt;&lt;/p&gt;`)\n    response.end()\n})\nserver.listen(8000)\nconsole.log(\"Listening! (port 8000)\")\n</code></pre> <p>And the client:</p> <pre><code>const {request} = require(\"http\")\nlet requestStream = request({\n        hostname: \"eloquentjavascript.net\",\n        path: \"/20_node.html\",\n        method: \"GET\",\n        headers: {Accept: \"text/html\"}\n    }, response =&gt; {\n        console.log(\"Server responded with status code\", response.statusCode)\n    }\n)\nrequestStream.end()\n</code></pre>"},{"location":"22HS/WBE/Express.html#post-and-get-requests","title":"Post and Get Requests","text":"<p>The following code extracts get requests</p> <pre><code>const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.post('/shoes', function (req, res, next) {\n    // GET /shoes?order=desc&amp;shoe[color]=blue&amp;shoe[type]=converse\n    console.dir(req.query.order)\n    // =&gt; 'desc'\n    console.dir(req.query.shoe.color)\n    // =&gt; 'blue'\n    console.dir(req.params.name)\n}\n\napp.post('/user/:name', function (req, res, next) {\n    // GET /user/tj\n    console.dir(req.params.name)\n    // =&gt; 'tj'\n})\n\napp.listen(port, () =&gt; {\n    console.log(`Example app listening at http://localhost:${port}`)\n})\n</code></pre> <p>The following code extracts post requests:</p> <pre><code>const express = require('express')\nconst app = express()\nconst port = 3000\n// for parsing application/json\napp.use(express.json())\n// for parsing application/x-www-form-urlencoded\napp.use(express.urlencoded({ extended: true }))\napp.post('/profile', function (req, res, next) {\n    console.log(req.body)\n    res.json(req.body)\n})\n\napp.listen(port, () =&gt; {\n    console.log(`Example app listening at http://localhost:${port}`)\n})\n</code></pre> <p>To serve static content the <code>express.static</code> middleware can be used:</p> <pre><code>app.use(express.static('public'))\n// http://localhost:3000/css/style.css\n// Pfad zur Datei: public/css/style.css\n\napp.use('/static', express.static('public'))\n// http://localhost:3000/static/css/style.css\n// Pfad zur Datei: public/css/style.css\n</code></pre>"},{"location":"22HS/WBE/Express.html#middle-ware","title":"Middle Ware","text":"<p>Express is a sequence of middle wares. Some do error handling, some handle the actual request. Middle wares can also forward information to the next middle ware.</p> <pre><code>app.use(function (req, res, next) {\n    console.log('Time:', Date.now())\n    req.currentTime = Date.now()\n    next()\n})\n\napp.use('/user/:id', function (req, res, next) {\n    console.log(\"Time: \", req.currentTime)\n    console.log('Request Type:', req.method)\n    next()\n})\n</code></pre>"},{"location":"22HS/WBE/Express.html#cookies","title":"Cookies","text":"<p>Designed as a stateless protocol to store data on the browser. It can be set with the <code>Set-Cookie</code> header and can be read from JS (except if <code>HttpOnly</code> is set) with <code>document.cookie</code>. The client will send the cookie back with the <code>Cookie</code> Header.</p> <p></p>"},{"location":"22HS/WBE/Express.html#sessions","title":"Sessions","text":"<p>Sessions can be realised with cookies, but sessions can be hijacked when the session id can be stolen (e.g. when using http)</p> <p></p> <pre><code>// \"npm install express-session\" to install the express-session package\nvar express = require('express')\nvar cookieParser = require('cookie-parser')\nvar session = require('express-session')\n\nvar app = express();\n\napp.use(cookieParser())\napp.use(session({secret: \"Shh, its a secret!\"}))\n\napp.get('/', function(req, res){\n    if(req.session.page_views){\n        req.session.page_views++\n        res.send(\"You visited this page \" + req.session.page_views + \" times\")\n    } else {\n        req.session.page_views = 1\n        res.send(\"Welcome to this page for the first time!\")\n    }\n})\n\napp.listen(3000)\n</code></pre>"},{"location":"22HS/WBE/JavaScript.html","title":"JavaScript","text":""},{"location":"22HS/WBE/JavaScript.html#numbers","title":"Numbers","text":"<p>All numbers are 64 bit floating point numbers (following the IEEE 754 standard). As this includes all 32 bit integers, those can be stored exactly.</p> <p>Additionally, there are the special \"numbers\" <code>Infinity</code>, <code>-Infinity</code> and <code>NaN</code>.</p>"},{"location":"22HS/WBE/JavaScript.html#strings","title":"Strings","text":"<p>Strings in JavaScripts are a sequence of 16-bit Unicode characters. In <code>\"...\"</code> and <code>'...'</code> strings, the backslash (<code>\\</code>) is as an escape sequence. In template strings (<code>`...`</code>) strings a <code>\\</code> is rendered. Additionally, string interpolation can be done with <code>`...${var}...`</code>.</p> <p>Emojis can be made up of multiple 16-bit Unicode-characters. <code>str.charAt(pos)</code> will return only one character of those two. <code>str.codePointAt(pos)</code> will return the whole emoji UTF-character. <code>\"\ud83e\udd26\".length</code> will return 2 because it is made up of two 16-bit Unicode characters.</p>"},{"location":"22HS/WBE/JavaScript.html#bigint","title":"BigInt","text":"<p>With <code>BigInt(3)</code> or <code>3n</code>, a big integer is created. Big ints cannot be added, subtracted, multiplied or diveded by types other than other big ints. One exception is concating with strings, which still works.</p>"},{"location":"22HS/WBE/JavaScript.html#objects","title":"Objects","text":"<p><code>delete obj.name</code>  deletes the <code>name</code> property of the object <code>obj</code>.</p> <p>With <code>\"name\" in obj</code> the program can check if the property <code>name</code> is in the object <code>obj</code>. <code>in</code> checks the object itself, as well as the prototype chain. </p> <p>With <code>delete obj.key</code> can the <code>key</code> property be deleted.</p> <p>The syntax <code>obj?.name</code> is approximately equivalent to <code>obj &amp;&amp; obj.name</code> and will return the value of <code>name</code> or undefined if <code>obj</code> is null/undefined.</p> <p>Methods of interest:</p> <ul> <li><code>Object.keys(obj)</code>   Returns the keys of an object</li> <li><code>Object.values(obj)</code>   Returns the values of an object</li> <li><code>Object.assign(obj, ...otherObjects)</code>   Returns <code>obj</code> but with the properties of the <code>otherObjects</code>.</li> <li><code>Object.create(prototype)</code>   Returns a new object with the given prototype.</li> </ul>"},{"location":"22HS/WBE/JavaScript.html#arrays","title":"Arrays","text":"<pre><code>// The for-in loop should not be used for arrays.\n// It doesn't guarantee the order and inherited properties are also enumerated\nfor(let key in myArray) {\n    if(myArray.hasOwnProperty(key)) {\n        doSomethingWith(myArray[key])\n    }\n}\n\nfor (let entry of myArray) {\n    doSomethingWith(entry)\n}\n\nmyArray.forEach((entry, key, array) =&gt; doSomethingWith(entry))\n</code></pre> <p>Methods of interest:</p> <ul> <li><code>Array.isArray(obj)</code>   Checks if the given <code>obj</code> is an array.</li> <li><code>arr.length</code>   Returns the number of keys with a number key. Other properties are ignored</li> <li><code>arr.push(element)</code>   Adds an element at the end</li> <li><code>firstEl = arr.shift()</code>   Removes the element at index <code>0</code> and returns it</li> <li><code>arr.unshift(element1, element2, ...)</code>   Adds the given elements at the beginning of the array</li> </ul> <p></p>"},{"location":"22HS/WBE/JavaScript.html#reference-and-value-data-types","title":"Reference and Value Data Types","text":"<p><code>string</code>, <code>number</code>, <code>boolean</code> are value data types. <code>object</code>, array and <code>function</code> are reference data types.</p> <ul> <li>value data types</li> <li>When comparing their value is compared (except <code>NaN</code> which is always <code>false</code>)</li> <li>Cannot be modified (<code>numVar.hi = \"hello world\"</code> won't add the key <code>hi</code> to <code>numVar</code>)</li> <li>reference data types</li> <li>Compared by reference</li> <li>Can be modified</li> </ul>"},{"location":"22HS/WBE/JavaScript.html#modules","title":"Modules","text":"<p>Before other module systems:</p> <pre><code>(function(){\n    // module code goes here\n})()\n</code></pre> <p>CommonJS:</p> <pre><code>const {Wheel} = require('./steering')\nconst car = {\n    brand: 'Ford',\n    model: 'Fiesta',\n    steering: new Wheel()\n}\nmodule.exports = {car} //would be importat as const {car} = require('./car-lib')\n</code></pre> <p>ES6 module system:</p> <pre><code>/* square.js */\nconst name = 'square'\nfunction draw (ctx, length, x, y, color) { ... }\nfunction reportArea () { ... }\nexport { name, draw, reportArea }\n\n/* other js file */\nimport { name, draw, reportArea } from './modules/square.js'\n</code></pre>"},{"location":"22HS/WBE/JavaScript.html#this","title":"<code>this</code>","text":"<p><code>this</code> refers to the caller's object. However, every function can be called without an object. In this case, <code>this</code> refers to the global object or is <code>undefined</code> if <code>\"use strict\"</code> is specified at the beginning of the file or function.</p> <p><code>this</code> can be bound to a function using <code>Function.prototype.bind(thisObj, ...args)</code>, which will return a new wrapper function.</p> <p>With <code>Function.prototype.call(thisObj, ...args)</code> can a function be called immediately. Likewise with <code>Function.prototype.apply(thisObj, argsArray)</code>, but <code>apply</code> takes an array instead of a var-arg.</p>"},{"location":"22HS/WBE/JavaScript.html#prototype","title":"Prototype","text":"<p>With <code>Object.getPrototypeOf(obj)</code> the prototype object of <code>obj</code> can be returned. Types (like <code>Object</code>, or <code>String</code>) have a property <code>prototype</code>. <code>Object.prototype</code> will return the prototype of the \"class\".</p> <p>An object with a specific prototype can be created using <code>Object.create(protoObj)</code>. The returned object will have the given prototype object.</p> <p>The constructor of a prototype is stored in <code>Object.prototype.constructor</code>.</p>"},{"location":"22HS/WBE/JavaScript.html#classes","title":"Classes","text":"<pre><code>function Person (name) {\n    this.name = name\n}\n\nPerson.prototype.toString = function () {\n    return `Person with name '${this.name}'`\n}\n\nconsole.log(Person.prototype.constructor == Person) // will return 'true'\n\nlet p35 = new Person(\"John\")\n</code></pre> <pre><code>class Employee extends Person {\n    constructor (name, salary) {\n        super(name)\n        this.salary = salary\n    }\n\n    toString () {\n        return `${super.toString()} and salary ${this.salary}`\n    }\n\n    get salary100 () { return this.salary * 100 / this.percentage}\n    set salary100 (amount) { this.salary = amount * this.percentage / 100 }\n}\n\nlet e17 = new Employee(\"Mary\", 7000);\nconsole.log(e17.toString()) /* \u2192 Person with name 'Mary' and salary 7000 */\nconsole.log(e17.salary)     /* \u2192 7000 */\n</code></pre>"},{"location":"22HS/WBE/JavaScript.html#event-loop","title":"Event Loop","text":"<p><code>const id = setImmediate(() =&gt; ...)</code> works like <code>setTimeout(fun, timeoutInMillis)</code> or <code>setInterval(fun, intervalInMillis)</code></p> <p>Promises and tasks in the <code>nextTickQueue</code> (in the middle) are processed between phases (in node since version 11). The <code>nextTickQueue</code> is processed before promises.</p> <pre><code>Promise.resolve().then(() =&gt; console.log('promise resolved'))\nsetImmediate(() =&gt; console.log('set immediate'))\nprocess.nextTick(() =&gt; console.log('next tick'))\nsetTimeout(() =&gt; console.log('set timeout'), 0)\n\nsetTimeout(() =&gt; {\n  console.log(\"start timeout\")\n  process.nextTick(() =&gt; console.log(\"in nextTick() in setTieout()\"))\n  console.log(\"end timeout\")\n}, 0)\n//next tick\n//promise resolved\n//set timeout\n//start timeout\n//end timeout\n//in nextTick() in setTieout()\n//set immediate\n</code></pre>"},{"location":"22HS/WBE/JavaScript.html#promise","title":"<code>Promise</code>","text":"<p>The function given to the <code>Promise</code> constructor is executed synchronously. Only the first <code>resolve(...)</code>, <code>reject(...)</code> or <code>throw ...</code> has an effect on future stages.</p> <pre><code>const promise = new Prommise((resolve, reject) =&gt; {\n    throw Error('fail')\n    resolve()\n});\n\npromise\n    .then (() =&gt; console.log('step1')) // is skipped because of `throw Error('fail')`\n    .then (() =&gt; { throw Error('fail') }) // skipped\n    .then (() =&gt; console.log('step2')) // skipped\n    .catch(() =&gt; console.log('catch1')) // will be printed\n    .then (() =&gt; console.log('step3')) // will be printed\n    .catch(() =&gt; console.log('catch2')) // skippped\n    .then (() =&gt; console.log('step4')) // printed\n/*\nprinted:\ncatch1\nstep3\nstep4\n*/\n</code></pre> <p><code>Promise.all(promises)</code> returns a new promise which waits for all given promises to finish. <code>Promise.reace(promises)</code> returns a promise, which resolves to the result of the first resolving or rejecting promise.</p>"},{"location":"22HS/WBE/NodeJS.html","title":"NodeJS","text":""},{"location":"22HS/WBE/NodeJS.html#eventemitter","title":"<code>EventEmitter</code>","text":"<pre><code>const EventEmitter = require('events')\nconst door = new EventEmitter()\ndoor.on('open', (speed) =&gt; {\n    console.log(`Door was opened, speed: ${speed || 'unknown'}`)\n})\ndoor.emit('open')\ndoor.emit('open', 'slow')\n</code></pre> <p>The <code>emit(...)</code> method calls all listeners synchronously. In the event listener <code>this</code> is bound to the <code>EventEmitter</code> instance.</p> <p>If a listener should be executed asynchronously then the method body needs to be wrapped in a <code>setImmediate(fun)</code> call.</p> <pre><code>myEmitter.on('event', (a, b) =&gt; {\n    setImmediate(() =&gt; {\n        console.log('this happens asynchronously')\n    })\n})\n</code></pre>"},{"location":"22HS/WBE/NodeJS.html#jasmine","title":"Jasmine","text":"<pre><code>/* PlayerSpec.js - Auszug */\ndescribe(\"when song has been paused\", function() {\n    beforeEach(function() {\n        player.play(song)\n        player.pause()\n    })\n\n    it(\"should indicate that the song is currently paused\", function() {\n        expect(player.isPlaying).toBeFalsy()\n\n        /* demonstrates use of 'not' with a custom matcher */\n        expect(player).not.toBePlaying (song)\n    })\n\n    it(\"should be possible to resume\", function() {\n        player.resume()\n        expect(player.isPlaying).toBeTruthy()\n        expect(player.currentlyPlayingSong).toEqual (song)\n    })\n})\n</code></pre> <p>More examples:</p> <pre><code>//matchers\nexpect([1, 2, 3]).toEqual([1, 2, 3])\nexpect(12).toBeTruthy()\nexpect(\"\").toBeFalsy()\nexpect(\"Hello planet\").not.toContain(\"world\")\nexpect(null).toBeNull()\nexpect(8).toBeGreaterThan(5)\nexpect(12.34).toBeCloseTo(12.3, 1)\nexpect(\"horse_ebooks.jpg\").toMatch(/\\w+.(jpg|gif|png|svg)/i)\n\n// spies\nspyOn(dictionary, \"hello\")\nexpect(dictionary.hello).toHaveBeenCalled()\n// or...\nspyOn(dictionary, \"hello\").and.returnValue(\"bonjour\")\nspyOn(dictionary, \"hello\").and.callFake(fakeHello)\n</code></pre>"},{"location":"22HS/WBE/NodeJS.html#file-api","title":"File-API","text":"<p>The file API contains a submodule <code>promise</code> which contains the same methods but they return a promise. To import the promise variants, use <code>const fs = require(\"fs\").promises</code>.</p>"},{"location":"22HS/WBE/NodeJS.html#manipulate-paths","title":"Manipulate Paths","text":"<pre><code>const path = require('path')\nconst notes = '/users/bkrt/notes.txt'\n\npath.dirname(notes)                         // /users/bkrt\npath.basename(notes)                        // notes.txt\npath.extname(notes)                         // .txt\npath.basename(notes, path.extname(notes))   // notes\n</code></pre>"},{"location":"22HS/WBE/NodeJS.html#read-files","title":"Read Files","text":"<pre><code>const fs = require('fs')\n\nfs.open('test.txt', 'r', (err, fd) =&gt; {\n    // fd is our file descriptor\n})\n\nfs.stat('test.txt', (err, stats) =&gt; {\n    if (err) {\n        console.error(err)\n        return\n    }\n\n    stats.isFile()          /* true */\n    stats.isDirectory()     /* false */\n    stats.isSymbolicLink()  /* false */\n    stats.size              /* 1024000 = ca 1MB */\n})\n</code></pre>"},{"location":"22HS/WBE/NodeJS.html#write-files","title":"Write Files","text":"<pre><code>const fs = require('fs')\nconst content = 'Node was here!'\nfs.writeFile('/Users/bkrt/test.txt', content, (err) =&gt; {\n    if (err) {\n        console.error(`Failed to write file: ${err}`)\n        return\n    }\n    /* file written successfully */\n})\n</code></pre>"},{"location":"22HS/WBE/Tools.html","title":"Tools","text":"<p># Tools</p>"},{"location":"22HS/WBE/Tools.html#falsy-list","title":"Falsy List","text":"<ul> <li><code>0</code>/ <code>-0</code>/<code>0n</code></li> <li>empty strings </li> <li><code>null</code>|</li> <li><code>undefined</code></li> <li><code>NaN</code></li> <li><code>document.all</code></li> </ul> <p>All other values are truthy.</p>"},{"location":"22HS/WBE/Tools.html#typeof-table","title":"<code>typeof</code> Table","text":"Type Expression Result Undefined <code>typeof undefined</code> <code>\"undefined\"</code> Null (Object) <code>typeof null</code> <code>\"object\"</code> Boolean <code>typeof true</code> <code>\"boolean\"</code> Number <code>typeof 0</code> <code>\"number\"</code> BigInt <code>typeof  0n</code> <code>\"bigint\"</code> String <code>typeof \"test\"</code> <code>\"string\"</code> Symbol <code>typeof</code> <code>\"symbol\"</code> Function <code>typeof console.log</code> <code>\"function\"</code> Any other object <code>...</code> <code>\"object\"</code>"},{"location":"22HS/WBE/Tools.html#url","title":"URL","text":""},{"location":"22HS/WBE/Tools.html#http-request-methods","title":"HTTP Request Methods","text":"<ul> <li><code>GET</code>: Retrieve resource</li> <li><code>POST</code>: Create a new resource</li> <li><code>PUT</code>: Update an already existing resource</li> <li><code>PATCH</code>: Partly update an already existing resource (e.g. only sending the first name if only this field is modified)</li> <li><code>DELETE</code>: Delete a resource</li> </ul>"},{"location":"22HS/WBE/UI%20Library.html","title":"UI Library","text":""},{"location":"22HS/WBE/UI%20Library.html#framework-vs-library","title":"Framework vs Library","text":"<p>A library is called by our code, while a framework calls our code. The difference is where the control is. In a library our code controls which function runs when. In a framework the framework has the control and decides which functions to call.</p>"},{"location":"22HS/WBE/UI%20Library.html#web-components","title":"Web Components","text":"<p>To create your own html tag, a class can be created which extends from <code>HTMLElement</code> and then use <code>attachShowdow({mode: 'open'})</code> to create a shadow DOM (if <code>mode</code> is set to open then JS code outside of the element can access it. If, however, it is set to closed then only the element itself can access the shadow DOM). With the property <code>shadowRoot</code> of the element, code can access the shadow DOM.</p> <p>The shadow DOM ensures that JS, HTML and CSS inside the shadow DOM are isolated from the main code.</p> <p>The register the web component the following method <code>customElements.define(&lt;tag-name&gt;, &lt;tag-class&gt;)</code> needs to be called to register the component with the browser.</p> <pre><code>class CustomProgressBar extends HTMLElement {\n  constructor() {\n      super();\n      const shadowRoot = this.attachShadow({mode: 'open'});\n      shadowRoot.innerHTML = `\n          &lt;style&gt;\n              :host { \n                display: inline-block; \n                width: 5rem; \n                height: 1rem; \n              }\n              .progress { \n                display: inline-block; \n                position: relative; \n                border: solid 1px #000; \n                padding: 1px; \n                width: 100%; \n                height: 100%; \n              }\n              .progress &gt; .bar { \n                background: #9cf; \n                height: 100%;\n              }\n              .progress &gt; .label { \n                position: absolute; \n                top: 0; \n                left: 0; \n                width: 100%;\n                text-align: center; \n                font-size: 0.8rem; \n                line-height: 1.1rem; \n              }\n          &lt;/style&gt;\n          &lt;div class=\"progress\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\"&gt;\n              &lt;div class=\"bar\" style=\"width: 0px;\"&gt;&lt;/div&gt;\n              &lt;div class=\"label\"&gt;0%&lt;/div&gt;\n          &lt;/div&gt;\n      `;\n      this._progressElement = shadowRoot.querySelector('.progress');\n      this._label = shadowRoot.querySelector('.label');\n      this._bar = shadowRoot.querySelector('.bar');\n  }\n\n  static get observedAttributes() { return ['value']; }\n\n  // is called by the browser if attributes are added, removed or modified\n  attributeChangedCallback(name, oldValue, newValue, namespaceURI) {\n      if (name === 'value') {\n          const newPercentage = newValue === null ? 0 : parseInt(newValue);\n          this._progressElement.setAttribute('aria-valuenow', newPercentage);\n          this._label.textContent = newPercentage + '%';\n          this._bar.style.width = newPercentage + '%';\n      }\n  }\n\n  get progress() { return this.getAttribute('value'); }\n  set progress(newValue) { this.setAttribute('value', newValue); }\n};\n\n\ncustomElements.define('custom-progress-bar', CustomProgressBar);\n</code></pre>"},{"location":"22HS/WBE/UI%20Library.html#sjdonsuiweb","title":"SJDON/SUIWEB","text":"<p>The following is an example of SJDON:</p> <pre><code>const element =\n    [\"div\", {style: \"background:salmon\"},\n        [\"h1\", \"Hello World\"],\n        [\"h2\", {style: \"text-align:right\"}, \"from SuiWeb\"] ]\n/*\nEquivalent of:\n&lt;div style=\"background: salmon\"&gt;\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n    &lt;h2 style=\"text-align: right\"&gt;from SuiWeb&lt;/h2&gt;\n&lt;/div&gt;\n*/\n</code></pre> <p></p>"},{"location":"22HS/WBE/UI%20Library.html#states","title":"States","text":"<p>With states, a component can access and set a state. A state is initialised with <code>useState(stateName, key, initialValue)</code> which returns two values in an array.  <code>stateVar</code> is a variable to access the current value (not a function) and <code>setStateVar</code> is a function to update the state and rerender the component. In SUIWEB the <code>setState(setFun, update)</code> function takes a function which is called by the <code>setState()</code> function. If the <code>update</code> parameter is false then no rerending is done.</p> <pre><code>const [stateVar, setStateVar] = useState(stateName, key, initialValue)\n</code></pre> <p>The following is an example simulating a slow network speed:</p> <pre><code>const App = () =&gt; {\n    let initialState = {\n        heading: \"Awesome SuiWeb (Busy)\",\n        content: \"Loading...\",\n    }\n    // stateName = \"name\", key = 1, the inititial state is {heading: ...}\n    let [state, setState] = useState(\"state\", 1, initialState)\n    let [timer, setTimer] = useState(\"timer\", 1, null)\n\n    // setTimeout returns an timeout id, which is set as the state of timer\n    const startTimer = () =&gt; setTimeout(() =&gt; {\n        setState(() =&gt; ({\n            heading: 'Awesome SuiWeb',\n            content: 'Done!',\n        }))\n    }, 3000)\n    if (!timer) setTimer(startTimer, false)\n    const { heading, content } = state\n    return (\n        [\"main\",\n            [\"h1\", heading],\n            [\"p\", content] ]\n    )\n}\n</code></pre> <p>The following example shows a basic counter component which increments every second:</p> <pre><code>const Counter = (props) =&gt; {\n    let [count, setCount] = useState(\"mycounter\", props.key, props.count)\n    let [timer, setTimer] = useState(\"mytimer\", props.key, null)\n    if (timer) clearTimeout(timer)\n    setTimer(() =&gt; setTimeout(() =&gt; setCount(n =&gt; n+1), 1000), false)\n    return (\n        [\"p\",\n         {style: \"font-size:2em\", onclick: () =&gt; setCount(n =&gt; n + 1)},\n         \"Count \", count ]\n    )\n}\n\nconst App = (props) =&gt;\n    [\"div\",\n        [Counter, {count: 1, key: 1}],\n        [Counter, {count: 4, key: 2}],\n        [Counter, {count: 7, key: 3}] ]\n</code></pre>"},{"location":"22HS/WBE/UI%20Library.html#controlled-input","title":"Controlled Input","text":"<p>In the following example a textfield is created and on each key typed the states are updated. This setup can be used to for example only allow numbers or other restrictions. Because of this, it is called controlled input.</p> <p>If a state is of an input field is only updated when certain condition is met then it is vital to also set the old state if the condition is not met, otherwise no rerender is triggered and input field has the wrong type which the user typed still in it.</p> <pre><code>const App = ({init}) =&gt; {\n    let [text, setText] = useState(\"myTextInput\", 1, init)\n    let [otherText, setOtherText] = useState(\"myOther Text\", 1, \"\")\n\n    const updateValue = e =&gt; {\n        const value = e.target.value\n        const reg = /^\\d+\\.?\\d*$/\n        // !in both cases a rerender is triggered!\n        if(reg.text(value)) setText(() =&gt; value) \n        else setText(old =&gt; old)\n    }\n    const updateOtherValue = e =&gt; {\n        // do validation here\n        setOtherText(() =&gt; e.target.value)\n    }\n    useEffect(() =&gt;     document.querySelector(\"h1\").text = \"hdfa\")\n\n    return (\n        [\"div\", {style: \"background: lightblue\"},\n            [\"h1\", \"Controlled Input Elements\"],\n            [\"input\", {oninput: updateValue, value: text}],\n            [\"p\", \"Your input: \", text ],\n            [\"textarea\", {oninput: updateOtherValue}, otherText],\n            [\"p\", \"Your input: \", otherText ] ] )\n}\n\nconst element = [App, {init: \"Name\"}]\n</code></pre>"},{"location":"22HS/WBE/UI%20Library.html#container-component","title":"Container Component","text":"<p>A container component wraps another component and provides the data. This ensures that the wrapped component is only concerned with the UI and not fetching and managing date. Instead the container component does this and the concerns are separated and, additionally, the UI component is more reusable.</p>"},{"location":"22HS/WBE/UI%20Library.html#effect-hook","title":"Effect Hook","text":"<p>Effect hooks are executed after the componente has been rendered. Effect hooks can be used to execute side effects, like manipulating the DOM.</p> <pre><code>const MyContainer = () =&gt; {\n    // after the component has been rendered, set h1 to \"hello\"\n    useEffect(() =&gt; {\n        document.getElementById(\"test\").text = \"hello\"\n    })\n    return (\n        [\"h1\", {id: \"test\"}], \"moin\")\n}\n</code></pre>"},{"location":"22HS/WBE/UI%20Library.html#splitting-applications-into-components","title":"Splitting Applications into Components","text":"<p>The state of the application (or part of the application) should be concentrated in one top component. All children and children of children receive the current state via property and update the state with listeners.</p> <p>In the following example the <code>App</code> component \"owns\" the state and passes it down to its components, like <code>AddArticle</code> and <code>ArticleList</code>. The <code>AddArticle</code> list will inform the <code>App</code> about adding an article with the listener <code>onClickAdd</code>.</p> <p>The title and summary textbox in the <code>AddArticle</code> component are controlled inputs with states in the <code>App</code> component.</p> <pre><code>const App = () =&gt; {\n    let initialState = {\n        articles: [\n            {\n                id: cuid(),\n                title: 'Article 1',\n                summary: 'Article 1 Summary',\n                display: 'none',\n            },\n            ...\n        ],\n        title: '',\n        summary: '',\n    }\n    let [state, setState] = useState(\"state\", 1, initialState)\n    const onChangeTitle = e =&gt; setState((s) =&gt; ({...s, title: e.target.value}))\n    const onChangeSummary = e =&gt; { ... }\n    const onClickAdd = e =&gt; { ... }\n    const onClickRemove = (id) =&gt; {\n        let articles = state.articles.filter(a =&gt; a.id != id)\n        setState((s) =&gt; ({...s, articles}))\n    }\n    const onClickToggle = (id) =&gt; { ... }\n\n    return (\n        [\"section\",\n            [ AddArticle , {\n                name: \"Articles\",\n                title: state.title,\n                summary: state.summary,\n                onChangeTitle,\n                onChangeSummary,\n                onClickAdd,\n            }],\n            [ ArticleList , {\n                articles: state.articles,\n                onClickToggle,\n                onClickRemove,\n            }] ]\n        )\n}\n\nconst AddArticle = ({name, title, summary, onChangeTitle, onChangeSummary, onClickAdd}) =&gt; {\n    return (\n        [\"section\",\n            [\"h1\", name],\n            // controlled input\n            [\"input\", { placeholder: \"Title\", value: title,\n                oninput: onChangeTitle }],\n            // controlled input\n            [\"input\", { placeholder: \"Summary\", value: summary,\n                oninput: onChangeSummary }],\n            [\"button\", { onclick: onClickAdd }, \"Add\"] ]\n    )\n}\n</code></pre> <p>The code above produces the following web page: </p>"},{"location":"23FS/BSY/CMD%20Cheatsheet.html","title":"CMD Cheatsheet","text":""},{"location":"23FS/BSY/CMD%20Cheatsheet.html#file-systems","title":"File Systems","text":"<pre><code># create a ramdisk / tempfs\nmount -t tmpfs -o size=2G tmpfs /mnt/tmpfs\n</code></pre>"},{"location":"23FS/BSY/File%20System.html","title":"File System","text":"<p>Z\u00fcrcher Fachhochschule 22Implementing Files - Indexed AFile System</p>"},{"location":"23FS/BSY/File%20System.html#file-attributes","title":"File Attributes","text":""},{"location":"23FS/BSY/File%20System.html#master-boot-record-mbr","title":"Master Boot Record (MBR)","text":"<p>MBR contains a partition table, where the location and size of all partitions are listed.</p>"},{"location":"23FS/BSY/File%20System.html#implementation","title":"Implementation","text":""},{"location":"23FS/BSY/File%20System.html#block-size","title":"Block Size","text":"<p>The block size dictates how many bytes are in one block.</p> <ul> <li>Small block size:    There are many blocks per file which leads to slow access time. However, there is a small internal fragemention</li> <li>Big block size   There are fewer blocks per file which means faster access time, but more internal fragmentation.</li> </ul> <p></p>"},{"location":"23FS/BSY/File%20System.html#block-allocation","title":"Block Allocation","text":"<p>Which blocks are allocated to which file can be stored in multiple ways:</p> <p>It can be stored in a linked list.</p> <p></p> <p>Another possibility is indexed allocation...</p> <p></p>"},{"location":"23FS/BSY/File%20System.html#file-names","title":"File Names","text":"<p>A big problem with names is that their name is not limited in size. Either the file entry structure has a big empty space for potential names. Another approach is to store a link to a heap space, but this introduces fragmentation to the heap. </p> <p></p>"},{"location":"23FS/BSY/File%20System.html#blocked-used","title":"Blocked Used","text":"<p>To store which blocks are used or not, one can store a list of all unused blocks. An alternative approach is to store a bitmap field for all blocks.</p> <p></p>"},{"location":"23FS/BSY/File%20System.html#consistency","title":"Consistency","text":"<p>Consistency problems can start to occur if before flushing, the system crashes or stick gets unplugged. There are two tables to identify such inconsistencies: the free block table and the used block table.</p> <p>With the <code>fsck</code> command, one can check the consistency of a device.</p>"},{"location":"23FS/BSY/File%20System.html#journaling","title":"Journaling","text":"<p>The idea of a journal is that the file system write a log of all operations. When the disk is interrupted while writing, the transaction can be reconstruction from the journal. However, this can be a big overhead.</p> <p>For example when deleting a file, the following operations are written into the journal:</p> <ol> <li>Remove the file from its directory</li> <li>Release the i-node to the pool of the of free i-nodes</li> <li>Return all the disk blocks to the pool of free disk blocks</li> </ol> <p>If during deleting a file an error occurred, the file system can rollback to a consistent state and redo the operation.</p>"},{"location":"23FS/BSY/File%20System.html#virtual-file-system-vfs","title":"Virtual File System (VFS)","text":"<p>Goal: Integration of heterogeneous file systems into a single structure. As long as a concrete system supplies the functions the VFS requires, the VFS does not care what or where the underlying file system is.</p> <p></p>"},{"location":"23FS/BSY/File%20System.html#links","title":"Links","text":"<p>Hardlinks share the same i-node as the target file. This means that even when the target file is moved (in the same partition) the link still works. This comes with the draw back that </p> <ul> <li>a hard-link cannot point to a directory</li> <li>a hard-link cannot span across multiple partitions</li> </ul> <p>Soft links on the other hand contain a path to another file. Because of this moving the target file won't update the soft link, but it can span across multiple file systems.</p>"},{"location":"23FS/BSY/File%20System.html#extx","title":"ExtX","text":"<p>Ext2 subdivides a partition in multiple block groups with separate management data. If the first block is corrupted then the other blocks can still be read as the management is local to block groups.</p> <p>Ext3 added journaling, and ext4 separated the journal into a seperate</p>"},{"location":"23FS/BSY/File%20System.html#copy-on-write-cow","title":"Copy on Write (COW)","text":"<p>If multiple user access the same data (in the screenshot above A, B, C and D) they all access the same bits. As soon as one user write to it, the data is actually copied (as seen in the third picture above).</p>"},{"location":"23FS/BSY/File%20System.html#snapshots","title":"Snapshots","text":"<p>COW can allow creating snapshots without disabling write access. </p> <p>When creating snapshot, the snapshotting utility will \"copy\" all the data. If the source 1 modifies the data, a new copy is created.</p> <p></p>"},{"location":"23FS/BSY/File%20System.html#b-tree-file-system-btrfs","title":"B-Tree File System (BtrFS)","text":"<p>BtrFS is a copy-on-write file system, implemented with a b-tree, which consolidates many advanced features from other file system  utilities (like copy on write, snapshot, logical volume management, built-in data and metadata integrity with checksums, RAID, compression capabilities, inplace conversion from ext2/3/4 and ReiserFS, quota groups, online expansion and reduction of filesystem size, integrated device management, ...).</p> <ul> <li>Tree Items and Keys   Items are BtrFS keys with additioinal offset and size field held in leaf nodes. A key describes an object address.</li> <li>Subvolume   In BtrFS a subvolume works just like a directory, but has its own file tree, which can be mounted separately.</li> <li>Extend   A mapping from a logical area in a file, to a contiguous phyical area on disk</li> <li>Physical and logical chunks   BtrFS splits each device into physical chunks which are logically grouped. This allows a logical chunk to contain physical chunks from different disks.</li> </ul> <p>The following diagram shows the above terminology:</p> <p></p> <p>BtrFS constructs a forest of COW friendly b-trees, a tree for each management structures.</p> <p></p> <p>B-trees have the advantage that filesystem modifications, like deleting, adding, ..., can be implemented in a atomic fashion. To this, the modifications are done in a separate sub-tree and once all modifications are done, the sub-trees are exchanged.</p> <p></p> <p>In the tree above, the two big files point to an EXTENT data structure in which the actual content of the file is stored. However, for a smaller file, data can be stored in a INLINE_EXTEND. In this case, the data is stored in the management structure itself.</p>"},{"location":"23FS/BSY/File%20System.html#cow-basics","title":"COW Basics","text":"<p>In the above diagram a new element <code>19</code> is added in the bottom-right cell. To do the copy operation, the root is copied with a new node with <code>10, 11, 19</code>. At the end the new root replaces the old root.</p> <p></p> <p>The same is done for deleting an item, in this case <code>6</code> in the middle entry. First the root node is copied again, after which a new node with just <code>5, 7</code> is being created and linked to the new root. Finally, the new root replaces the old root.</p> <p></p> <p>Cloning is simple, since the node which should be cloned, needs to be duplicated and the reference counter incremented (red).</p> <p></p> <p>Similarly, if <code>Q</code> should be deleted, the reference counters have to be decremented (in red).</p> <p>The following shows how to relocate a chunk:</p> <p></p> <p>If a file should grow or shrink, new extends have to be allocated or deallocated. However, changes like this can propagate to different trees.</p> <p></p>"},{"location":"23FS/BSY/File%20System.html#example","title":"Example","text":"<pre><code># create new partition, format it with btrfs and mount it\nparted --script /dev/vdb \u201cmklabel gpt\u201d\nparted --script /dev/vdb \u201cmkpart primary 1 30%\u201d\nmkfs.btrfs /dev/vdb1\nbtrfs filesystem show /dev/vdb1\nmount /dev/vdb1 /mnt/mymntpoint\n\n# create a second partition and add it to the existing btrfs\nparted --script /dev/vdb \u201cmkpart primary 30% 60%\u201d\nbtrfs filesystem show /dev/vdb2\nbtrfs device add /dev/vdb2 /mnt/mymntpoint\n\n# balance the two paritions\nbtrfs balance start -d -m /mnt/mymntpoint\n\n# create a new btrfs raid 10\n# the individual drives don't need a gpt or mbr table\nsudo mkfs.btrfs -m raid10 -draid10 /dev/vdb /dev/vdc /dev/vdd /dev/vde -f\n</code></pre>"},{"location":"23FS/BSY/File%20System.html#raid-with-btrfs","title":"RAID with BtrFS","text":""},{"location":"23FS/BSY/File%20System.html#redundant-array-of-independent-disk-raid","title":"Redundant Array of Independent Disk (RAID)","text":"<p>The following diagrams shows a level 5 raid which does striping:</p> <p></p> <p>The next diagram shows other raid levels:</p> <p></p>"},{"location":"23FS/BSY/File%20System.html#overlayfs","title":"Overlayfs","text":"<p>The following command creates a new overlay fs. It combines all files set in the <code>lowerdir</code> option. If a file in the overlay file system is changed then a new file is written in the <code>uppderdir</code>. The overlayfs file system does copy-on-write. The working directory is used for management for the overlayfs.</p> <pre><code>mount -t overlay overlay -o lowerdir=/dir1:/dir2,upperdir=/upper,workdir=/work /merged\n</code></pre>"},{"location":"23FS/BSY/File%20System.html#linux","title":"Linux","text":"<p>In linux the physical file system is abstracted. This allows things like LLVM.</p> <p>There are the following file types in Linux:</p> <ul> <li>Normal files</li> <li>Directories</li> <li>Character and block device files   These represent IO device </li> <li>Other types: link files, socket files, named pipe files, ...</li> </ul>"},{"location":"23FS/BSY/File%20System.html#linux-file-system-convention","title":"Linux File System Convention","text":""},{"location":"23FS/BSY/File%20System.html#logical-volume-manager-lvm","title":"Logical Volume Manager (LVM)","text":"<p>LVM can group different physical volumes (PV) into a volume group (VG) from which logical volumes (LV) can be created.</p> <p>One thing LVM can do is thin-provisioning, in which the physically occupied size is the actual size and then grows until it reaches the volume size.</p> <p></p>"},{"location":"23FS/BSY/Networking.html","title":"Networking","text":""},{"location":"23FS/BSY/Networking.html#osi-layers","title":"OSI-Layers","text":""},{"location":"23FS/BSY/Networking.html#layer-1-physical-layer","title":"Layer 1 - Physical Layer","text":""},{"location":"23FS/BSY/Networking.html#layer-2-data-link-layer","title":"Layer 2 - Data-Link Layer","text":"<p>The following is how a naive network stack would implement the layering.</p> <p></p> <p>A much smarter approach is to give the upper layer just a memory pointer to content instead of copying the entire frames. This is also called a zero-copy stack.</p> <p></p> <p>Linux defines the struct <code>sk_buff</code> to store the network frames. To do the actual sharing DMA is used.</p> <p></p> <p>The following diagram shows how the data travels from the NIC to the application.</p> <p></p> <p>The following is how Linux actually implements the ip stack. The payload isn't copied. However, the headers are copied, since layers sometimes modify the headers  (e.g. TTL in IP).</p> <p></p> <p>Things like ARP, and briding is implemented in the kernel.</p> <p></p>"},{"location":"23FS/BSY/Networking.html#layer-3-networking-layer","title":"Layer 3 - Networking Layer","text":"<p>The diagram above shows how an IP packet flows through netfilter...</p>"},{"location":"23FS/BSY/Networking.html#layer-4-transport-layer","title":"Layer 4 - Transport Layer","text":"<ul> <li>Flow-Control: That the receiver doesn't get overwhelmed (e.g. when the receiver is a raspberry pi)</li> <li>Congestion-Control: That the network itself doesn't get overwhelmed (e.g. when a router is a raspberry pi)</li> </ul> <p>Netfilters a</p> <p>What is trafic engineering?</p>"},{"location":"23FS/BSY/Networking.html#layer-7-application-layer","title":"Layer 7 - Application Layer","text":""},{"location":"23FS/BSY/Networking.html#layer-2-briding","title":"Layer 2 Briding","text":""},{"location":"23FS/BSY/Networking.html#netfilter","title":"Netfilter","text":"<p>Netfilter structures how a frame traverses layer 2 and lever 3.</p>"},{"location":"23FS/BSY/Operating%20System.html","title":"Operating System","text":"<p>The job of the operating system is to create good abstractions and then implement and manage the abstract objects thus created</p> <p>The OS is split up into the user mode and kernel mode. The kernel mode has a northbound interface, which is towards the user mode (the API), and a southbound interface towards the hardware.</p> <p></p>"},{"location":"23FS/BSY/Operating%20System.html#basic-input-output-system-bios","title":"Basic Input Output System (BIOS)","text":"<p>The BIOS is loaded when booting from the ROM of the motherboard.</p> <p>It does the following steps:</p> <ol> <li>Performs the Power-On-Self-Test (POST)</li> <li>Discover devices by scanning PCI busses and initializing those devices</li> <li>Chooses a boot device from a list in the CMOS</li> <li>Reads the MBR master boot record in to memory and executs it</li> </ol> <p>The BIOS has the following disadwantages:</p> <ul> <li>It runs in 16-bit mode</li> <li>It relies on the MBR, which limits the number and size of partitions (max 2 TB.)</li> <li>It is not extensible</li> <li>It suffers from rootkit and bootkit attacks</li> </ul>"},{"location":"23FS/BSY/Operating%20System.html#mbr-master-boot-record","title":"MBR master boot record","text":"<p>The master boot record is the first partition </p>"},{"location":"23FS/BSY/Operating%20System.html#unified-extensible-firmware-interface-uefi","title":"Unified Extensible Firmware Interface (UEFI)","text":"<p>UEFI uses GPT (GUID Partitioning Table), which allos an arbitrary number of partition. It also is engineered with a modular design.</p> <p>When starting, UEFI starts a architecture-independent virtual machine which executes <code>*.efi</code> files. The OS provides an efi-file, which will bootstrap the OS. EFI binars are stored in the EFI System Parition (ESP), which is FAT formatted.</p>"},{"location":"23FS/BSY/Operating%20System.html#boot-process","title":"Boot Process","text":"<ol> <li>The OS queries the BIOS and/or the bus system for HW information and then intializes each device</li> <li>Loads hardware specific assembler instructions </li> <li>The OS initialze the managment structure (like  a process table)</li> <li>Creates the system services (system calls, IPC, signals, ...)</li> <li>Spawns a (user) interface </li> </ol> <p>The root process has the pid <code>1</code>.</p>"},{"location":"23FS/BSY/Operating%20System.html#ramdisk","title":"RAMDISK","text":"<p>A ramdisk contains additional drivers and files required to bootstrap the kernel. This is the solution for the chicken-and-egg problem, when having to load the driver of a disk from that disk.</p> <p>The bootloader can read the kernel and ramdisk as it is stored on the efi parition which is FAT formatted.</p>"},{"location":"23FS/BSY/Operating%20System.html#init-system","title":"Init System","text":""},{"location":"23FS/BSY/Operating%20System.html#original-unix","title":"Original Unix","text":"<p>The original Unix just ran all shell files in <code>/etc/rc</code></p>"},{"location":"23FS/BSY/Operating%20System.html#system-v","title":"System V","text":"<p>System V introduces runlevels, where each runlevel have a number of scripts associated with it. This is used to start only the services needed.</p> <p></p>"},{"location":"23FS/BSY/Processes.html","title":"Processes","text":"<p>Each program can have many processes. These run in user mode, while the kernel itself runs in kernel mode.</p>"},{"location":"23FS/BSY/Processes.html#creation","title":"Creation","text":"<p>When the parent-process requests the creation of a new child processes, the Linux kernel will create a new child process with an exact copy of parent's memory map. </p> <p>This can be either be done with:</p> <ul> <li>Distinct Address Space   The memory for the child is a copy in a different memory area</li> <li>Copy-on-Write   When spawning the child, nothing is copied. As long as the child only reads, nothing is copied, but as soon as the child tries to write, then the required memory is copied.</li> </ul>"},{"location":"23FS/BSY/Processes.html#termination","title":"Termination","text":"<p>A process can terminate in multiple ways:</p> <ul> <li>The process is done and exists voluntary</li> <li>An error occurred in the process (like a resource doesn't exist) and it exists voluntary</li> <li>An error occurred in the process (like a segmentation fault, or divide by zero) and exists involuntary</li> <li>The process was murdered/killed by the OS </li> </ul>"},{"location":"23FS/BSY/Processes.html#process-state","title":"Process State","text":"<p>If the process is <code>ready</code>, then it is put in to the queue for the kernel to be scheduled. Once the kernel picks the process, the state of the process is <code>running</code>. If the process needs access to resources (like a busy hard drive), the state is set to <code>blocked</code>. In this state, the process is not ran and not dispatched.</p> <p>The process' state might change because:</p> <ul> <li>The CPU allocated time expired</li> <li>An interrupt happend and the CPU needs to handle it</li> <li>A page fault happen</li> <li>The process requests a system call and the kernel takes over</li> </ul>"},{"location":"23FS/BSY/Processes.html#user-mode-vs-system-mode","title":"User Mode vs System Mode","text":"<p>All applications run in user mode, where there have access to a limited set of instructions. When a process wants to do something, they use a system call to request this from the kernel.</p> <p>The kernel runs in system mode (or kernel mode), where it has access to the complete set of instructions.</p>"},{"location":"23FS/BSY/Processes.html#mode-vs-context-switch","title":"Mode vs Context Switch","text":"<p>The process might call a system call or an hardware interrupt happend, the kernel needs to switch to kernel mode, execute something, an then the context of \\(P_0\\) is restored.</p> <p></p> <p>On a multi-processor, the scheduler tries to only give out time slices to different processes. If the slice expires, first a mode switch happens. Afterwards, a context switch happens, where the kernel switches the environment to the other process. This needs to be done in kernel mode, which is why the mode switch is necessary. </p> <p>After the context switch, the mode is reverted to user mode and the new process receives control over the CPU.</p>"},{"location":"23FS/BSY/Processes.html#process-control-blocks-and-process-table","title":"Process Control Blocks and Process Table","text":"<p>The kernel maintains a linked list of process control blocks, named for process tables, for all processes.</p>"},{"location":"23FS/BSY/Processes.html#threads-vs-processes","title":"Threads vs Processes","text":"<p>The difference between processes and threads, is that threads share the same context, while processes have different contexts, which needs to be switched.</p> <p></p> <p>Each thread has its own program counter, registers and stack, but share the other process resources. Because of this, threads are a lot lighter than process,  as creating threads and switching between them is a lot cheaper.</p> <p>Threads can be managed by the process itself or the kernel. However, if the threads are managed by the process and a system call in invoked then the process will be blocked and suspended. This negates the usefulness of threads.</p>"},{"location":"23FS/BSY/Processes.html#posix-threads","title":"POSIX Threads","text":"<p>The POSIX Thread library implements threads managed by the process.</p> <ul> <li>Advantage</li> <li>The software is portable</li> <li>Less overhead for thread management</li> <li>No mode switching</li> <li>Disadvantage</li> <li>All threads can only run on one execution unit</li> <li>System call release the rest of the remaining time slice</li> </ul>"},{"location":"23FS/BSY/Processes.html#kernel-supported-threads","title":"Kernel Supported Threads","text":"<p>With kernel supported threads, the kernel manages threads as if they were processes (The kernel doesn't actually has a concept of threads) with shared resources. Which resources are actually shared is configurable.</p> <ul> <li>Advantages:</li> <li>IO blocking is no issue</li> <li>Can run on multiple execution unites simultaneously</li> <li>Disatvantages:</li> <li>The kernel has more overhead</li> <li>The creation and removal is slower</li> <li>The kernel needs to mode switch to switch between threads</li> <li>The software is less portable</li> </ul>"},{"location":"23FS/BSY/Processes.html#kernel-threads","title":"Kernel Threads","text":"<p>A kernel thread runs in system mode and is part of the kernel itself. This thread also has an entry in the process table, but is flagged as a \"Kernel Thread\".</p> <p>Kernel thread is scheduled and dispatched by the scheduler, does not need a mode switch, and cannot be interrupted.</p> <p>Kernel threads are used with a thread pool of the kernel. This pool is dynamically managed by the kthreadd kernel thread.</p>"},{"location":"23FS/BSY/Processes.html#top","title":"Top","text":""},{"location":"23FS/BSY/Processes.html#scheduling","title":"Scheduling","text":"<p>The schedulers needs to schedules on different events:</p> <ul> <li>When a new process has been created</li> <li>When a process exists</li> <li>When a process is blocked on I/O</li> <li>Regularly on a timer</li> </ul> <p>There are different types of schedulers:</p> <ul> <li>A uni-process   There is no need for a scheduler as there is only one task</li> <li>Multi-processing</li> <li>Multi-tasking</li> </ul> <p>There are different scheduling types:</p> <ul> <li> <p>First-in-First-out   The first task is executed to completed (without preemption). This can lead to infinite loops. One possible objective could be to favour the earlier   </p> </li> <li> <p>Round-Robin   Each tasks gets a slice of time and is then preemptively stopped. The objective is fairness      One edge case is, when a task is added, if the new task is run or if the previous order is continued. The implemention needs to decide whether the scheduler favours newly arriving tasks or older tasks</p> </li> <li> <p>Multi-Level</p> </li> </ul> <p>If tasks have priorities, tasks are put in the queue for the specific priority. The scheduler will first run all the blue tasks, then the green tasks, and then the yellow tasks. However, this can lead to low priority tasks starving</p> <ul> <li> <p>Heuristic   </p> </li> <li> <p>Fair Share Scheduling</p> </li> </ul> <p>A virtual clock is calculate running for each task. The scheduler ensures that on average the run-time given to each task is equal   </p> <p>This scheduler is used in linux and ensures that all process received the same amount of processing time.   </p> <p></p> <p>If a process is requesting a resource (like a file for the hard drive), the os will put the process into the <code>Blocked Queue</code>, where until the requested resource is available, it will stay.</p>"},{"location":"23FS/BSY/Processes.html#policy","title":"Policy","text":"<p>Different schedulers have different policies to reach their objective.</p> <p>All schedulers have:</p> <ul> <li>Fairness</li> <li>Policy enforcement</li> <li>Balance</li> </ul> <p>Batch systems usually have the following:</p> <ul> <li>TODO</li> </ul> <p>Interactive systems usually have the following:</p> <ul> <li>TODO</li> </ul> <p>Real-time systems usually have the following:</p> <ul> <li>TODO </li> </ul>"},{"location":"23FS/BSY/Processes.html#metrics","title":"Metrics","text":"<p>Tasks have an arrival time, a start time and an execution time. The turnaround time is equal to <code>wait time + execution time</code>.</p>"},{"location":"23FS/BSY/Processes.html#real-time-schedulers","title":"Real-Time Schedulers","text":"<p>A real-time schedulers can ensure that deadlines are met. There is a distinguished between hard deadline, which have to absolutely be met, and soft deadline, where there is some wiggle room.</p>"},{"location":"23FS/BSY/Processes.html#rate-monotonic","title":"Rate-Monotonic","text":"<p>A rate monotonic scheduler gives the highest priority to the task with the highest repetition rate. </p> <p>In the formula, \\(C_i\\) is the run time of a task, \\(T_i\\) is the period after which it should scheduled again and \\(U\\) is the utilisation. (The first column in the note is \\(C_i\\) instead of \\(T_{ie}\\))</p> <p>If the utilisation is above \\(69%\\) the scheduler can meet all deadlines. Above this, some tasks might miss their deadlines.  This means that this is rather expensive, as \\(~30\\%\\) is unused.</p>"},{"location":"23FS/BSY/Processes.html#earliest-deadline-first","title":"Earliest Deadline First","text":"<p>The task with the earliest deadline is dealt first </p>"},{"location":"23FS/BSY/Processes.html#linux","title":"Linux","text":"<p>Linux maintains a single execution queue and can use different tasks with different schedulers.</p> <p>The priority is:</p> <ol> <li>Real-Time Schedulers</li> <li>Normal Schedulers</li> <li><code>SCHED_OTHER</code></li> <li><code>SCHED_BATCH</code></li> <li><code>SCHED_IDLE</code></li> </ol>"},{"location":"23FS/BSY/Processes.html#multicore-system","title":"Multicore System","text":"<p>The scheduler on a multicore system wants to run a process on the same core each time for caching reasons. Moving processes between.</p> <p>With the <code>/proc/sys/kernel/rt_runtime</code> parameter, one can tell the kernel, how much time it should spend on real time tasks and non-real-time tasks.</p>"},{"location":"23FS/BSY/Processes.html#nice","title":"Nice","text":"<p>The nice value ranges between <code>-20</code> and <code>19</code> and tells the scheduler how willing a task is to surrender cpu time to other tasks. This, however, isn't a hard priority and the scheduler can override the nice value at any time. It is only a suggestion.</p> <p>The nice value does not affect the real time scheduler.</p> <p></p>"},{"location":"23FS/BSY/Processes.html#sched_deadline-real-time","title":"<code>SCHED_DEADLINE</code> (Real-Time)","text":"<p><code>SCHED_DEADLINE</code> has the highest priority and tasks executed with this schedulers are not allowed to fork. Tasks can yield the remaining time with a syscall.</p>"},{"location":"23FS/BSY/Processes.html#sched_fifo-real-time","title":"<code>SCHED_FIFO</code> (Real Time)","text":"<p>There is a queue for each priority (conceptually 198 queues). If a task enters a higher priority queue than the current running task, then the running task is preempted.</p> <p>Tasks with <code>SCHED_FIFO</code> will run to completion, unless </p> <ul> <li>preempted by a higher priorty real-time thread</li> <li>blocked by I/O call</li> <li>yields the cpu time with <code>sched_yield</code></li> </ul>"},{"location":"23FS/BSY/Processes.html#sched_rr","title":"<code>SCHED_RR</code>","text":"<p>The round-robin scheduler has multiple queues for each priority.</p>"},{"location":"23FS/BSY/Processes.html#sched_other-fair-share-scheduling","title":"<code>SCHED_OTHER</code> (Fair Share Scheduling)","text":"<p>The complete fair scheduler</p>"},{"location":"23FS/BSY/Processes.html#sched_batch","title":"<code>SCHED_BATCH</code>","text":"<p>Can be used for batch processes. These are processes that do some steps without interaction (e.g end of the month salary calculations).</p>"},{"location":"23FS/BSY/Processes.html#sched_idle","title":"<code>SCHED_IDLE</code>","text":"<p>This scheduler runs tasks if no other productive tasks are running. </p>"},{"location":"23FS/BSY/SystemD.html","title":"Systemd","text":"<p>Systemd manages the system in a holistic way.</p>"},{"location":"23FS/BSY/SystemD.html#unit","title":"Unit","text":"<p>Systemd manages services in units. </p> <p>Units have a state:</p> <ul> <li>active: The unit is started,bound, etc. depending on the type</li> <li>inactive: The unit is stopped, unbound, etc. depending on the type</li> <li>activating/deactivating: In the process of being activated/deactivated</li> <li>failed: The unit failed in some way, while activating/deactivating or while running</li> </ul> <p>There are different types of units: </p> <p>A target unit (.target) is the equivalent of run levels in system v, but additionally, Systemd maintains that level. Target units are also called <code>synchronization points</code>. (Details can be viewed in <code>man systemd.target</code>)</p> <p>The following is an example for a Systemd unit:</p> <p>The following needs to be in the example:</p> <ul> <li>positive and negative dependencies</li> <li>ordering of dependencies</li> </ul> <pre><code>[Unit]\nDescription=Docker Application Container Engine\nDocumentation=https://docs.docker.com\nAfter=network-online.target docker.socket firewalld.service containerd.service time-set.target\nWants=network-online.target containerd.service\nRequires=docker.socket\n\n[Service]\nType=notify\nExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock\nExecReload=/bin/kill -s HUP $MAINPID\nTimeoutStartSec=0\nRestartSec=2\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Units are usually placed in <code>/lib/systemd/system/</code>.</p>"},{"location":"23FS/BSY/SystemD.html#slice-unit","title":"Slice Unit","text":"<p>A slice is a hierarchical way to group units and constraint resources.</p>"},{"location":"23FS/BSY/Test.html","title":"Test","text":"<ul> <li>Are copied pictures of slides allowed?</li> <li>PROC1</li> <li>     Why is with a mode switch no scheduler involved since a system mode triggers the processor to be blocked. This should require the scheduler to reschedule the process</li> <li>Scheduling</li> <li>what is the propritionality property of the interactive system? (p. 8)     </li> <li>Kernel threads are at the same time uninterruptable and and work with the same execution/priority scheme as other threads. This seems contradicting? </li> <li>How does Earliest Deadline First Scheduler works? When is a task interrupted?   </li> <li>Priorities are static?   </li> <li>Static Priority vs Execution Order Priority? (Slides: Schedulers p.30)</li> <li>What is the difference between Index Allocation and Linked-List Allocation? Both have a list of blocks (Files 1/p.24)</li> <li>How can page tables be swapped in an out (Mem/p.17)</li> <li>Page Table Entry: How does linux store that a page table entry is used by multiple processes? Wouldn't this require a reference-count? (Mem/p.14)</li> <li>Page Table Entry: Do both the locked bit and protected/read-only bit prevent the block from being swapped? (Mem/p.14)</li> <li>Where and when is are the following list written? Are these on the fs itself and are updated by the fs?</li> <li>In the same graphics, aren't these bit maps? </li> <li>How are free blocks found? Are there lists of free blocks?</li> <li>How can two free blocks exist? </li> <li>Can both blocks free and blocks in use be <code>1</code>?</li> <li>Can Logical Groups contain both logical and physical volumes? What are volume groups?</li> <li>What exactly are extends? And why are they needed?</li> </ul>"},{"location":"23FS/BSY/Resources/IO.html","title":"IO","text":"<p>IO devices can be categorised into two categories. Block-level devices operate on fixed size blocks with a certain size. Block operations are independent of each other. Examples are disks, but also Ethernet. On the other hand, character-level devices operate on a character and can be compared to Java's <code>CharacterStream</code> class.</p> <p></p> <p>On the software side, an OS usually implements an IO controller, which has IO interfaces which are developed by the device driver developers. An IO port interacts with the bus.</p>"},{"location":"23FS/BSY/Resources/IO.html#x86","title":"X86","text":"<p>There are different ways how IO is addressed. X86 uses version (c), where there are buffers in memory, but the IO is addressed in a separate address space. Because of this, there are separate instructions to move memory to the IO ports. </p> <p>This behaviour, however, is mostly there for legacy reasons. Today, IO is mapped to memory, like in (b).</p> <p>With <code>/proc/iomem</code> one can check the memory-bound IO devices (like with (b)). With <code>/proc/ioports</code> all IO ports can be listed. (like with (c))</p>"},{"location":"23FS/BSY/Resources/IO.html#direct-memory-access-dma","title":"Direct Memory Access (DMA)","text":"<p>The DMA controller is there to off-load work from the CPU.</p> <p>When the CPU encounters an IO operation, it tells the DMA controller to get it done. When the DMA controller is done, it sends an interrupt when its done.</p> <p>The DMA controller usually works only on a specific memory area, where the devices need to be mapped into. </p> <p>If a device isn't DMA enabled, the CPU has to handle itself.</p>"},{"location":"23FS/BSY/Resources/IO.html#logical-vs-physical-device","title":"Logical vs Physical Device","text":"<p>A physical device is the actual device that exists in the real world. A logical device is the software representation of this device. However, in for example a VM might have multiple logical network cards which map to one physical memory card.</p>"},{"location":"23FS/BSY/Resources/IO.html#io-access","title":"IO Access","text":"<p>On the right side, the CPU is doing continues IO access, where the kernel is continuously polling the device. However, this is a synchronous process.</p> <p>On the left side, the CPU is doing event-based IO access, where the kernel is sending an event to the hardware and then is interrupted by the hardware later. During this time the kernel can do other stuff. When the interrupt occurs, the CPU  decides whether to handle the interrupt, and if it handles, it suspends the current flow of execution and deals with the interrupt.</p>"},{"location":"23FS/BSY/Resources/IO.html#exclusive-vs-shared-access","title":"Exclusive vs Shared Access","text":"<p>Shared devices are shared by many processes while an exclusive access device can only be accessed by one process. Exclusive access device are rare (an example could be a camera or microphone).</p> <p>With <code>iostat</code>, one can check the statistics of shared IO devices.</p> <p></p>"},{"location":"23FS/BSY/Resources/IO.html#sequential-vs-random-access","title":"Sequential vs Random Access","text":"<p>There are data sources where the kernel can only read the next byte. Examples include include network cards.</p> <p>On the other hand, there are data spaces, like a SSD or RAM.</p>"},{"location":"23FS/BSY/Resources/IO.html#blocking-vs-non-blocking-device","title":"Blocking vs Non-Blocking Device","text":"<p>A blocking device needs time to process a request (displayed by the orange arrow). An non-blocking device is a device which responds immediately (displayed by the green arrow).</p> <p>This is a property of the producer, aka the device.</p>"},{"location":"23FS/BSY/Resources/IO.html#buffered-vs-direct-io","title":"Buffered vs Direct IO","text":"<p>A buffer can be used for:</p> <ul> <li>rate control   When the buffer overflows, it will leak (also called a leaky bucket)</li> <li>data verification   Data verification can be done on a buffer (CRC, ...)</li> <li>data manipulation   E.g. reordering TCP packets</li> </ul>"},{"location":"23FS/BSY/Resources/IO.html#error-handling","title":"Error Handling","text":""},{"location":"23FS/BSY/Resources/IO.html#interrupts","title":"Interrupts","text":"<p>Interrupts are handles by the programmable interrupt controller (PIC). The PIC will pull up a line connected to the CPU if an interrupt occured.</p> <p>Interrupt can be categorised into:</p> <ul> <li>Synchronous Interrupt:   Generated by executing an instruction, like divide by zero, segfault, ...</li> <li>Asynchronous Interrupt:   Generated by an external event, like IO device, ....</li> </ul> <p>In the following diagram the handling of multiple interrupts can be seen:</p> <p></p> <p>Some interrupts are maskable, which enables the CPU to deal with them later.</p> <p>With <code>/proc/interrupts</code>, the kernel reports the occurred interrupts.</p> <p></p>"},{"location":"23FS/BSY/Resources/IO.html#linux","title":"Linux","text":"<p>The kernel maintains a list information about each device, like</p> <ul> <li>the physical connected device</li> <li>the driver which handles the device</li> <li>the bus to which the device is connected</li> <li>the class, which group together devices with similar functionality</li> <li>the subsystem </li> </ul>"},{"location":"23FS/BSY/Resources/IO.html#sys-fs","title":"<code>/sys</code> FS","text":"<p>Elements maintained under sysfs: * block - block devices available in the system (disks, partitions) * bus - types of bus to connect physical devices (pci, ide, usb) * class - drivers classes in the system (net, sound, usb) * devices - hierarchical structure of devices connected to the system * firmware - information from system firmware (ACPI) * fs - information about mounted file systems * kernel - kernel status information (logged-in users, hotplug) * module - the list of modules (drivers) currently loaded * power - information related to the power management subsystem</p> <p>The sysfs information is found in files that contain attributes: * dev - Major and minor device identifier. It can be used to automatically create entries in the /dev directory * device - a symbolic link to the directory containing devices * driver - a symbolic link to the driver directory (located in /sys/bus/*/drivers )</p>"},{"location":"23FS/BSY/Resources/IO.html#udev","title":"UDEV","text":"<pre><code># device nodes in /dev and list the properties of the root partition\nls -al /dev/\nsudo fdisk -l\nls -al /dev/vda1\n# Print all sysfs properties of /dev/vda1\n# These properties are used in Udev rules to match the device\nudevadm info --attribute-walk /dev/vda1\n# Query the Udev database for all device information for /dev/vda1\nudevadm info --query=all --name=/dev/vda1\n# write random noise to the sound device /dev/audio (run on machine with speakers)\ncat /dev/urandom | padsp tee /dev/audio &gt; /dev/null\nsudo cat mouse0 | hexdump\n</code></pre>"},{"location":"23FS/BSY/Resources/Memory.html","title":"Memory","text":""},{"location":"23FS/BSY/Resources/Memory.html#framentation","title":"Framentation","text":"<p>Internal fragmentation is seen on the left side and happens if a process requires less memory than the kernel allocated. On the other hand, external fragmentation is when a process terminates and leaves behind an unused area of memory the size of the process. To fully being able to use this memory, a process with the same memory requirements needs to come along (which almost never happens).</p>"},{"location":"23FS/BSY/Resources/Memory.html#buddy-algorithm","title":"Buddy Algorithm","text":"<p>The buddy algorithm divides the memory in halve to find the smallest possible match (1M -&gt; 512K -&gt; 256K -&gt; 128K -&gt; ~~64K~~). This match is then allocated for the process.</p> <p></p> <p>The algorithm can keep track of the occupied memory is either a bit map (e.g. a bit for every 8-bit word) or a linked list</p>"},{"location":"23FS/BSY/Resources/Memory.html#linuxs-buddy-algorithm","title":"Linux's Buddy Algorithm","text":"<p>Linux uses a modified buddy algorithm. Pages are used as the smallest unit. A list with free pages chunks is kept up to <code>MAX_ORDER - 1</code>.</p> <p></p> <p>The Linux implementation can only only allocate continuous area larger then <code>MAX_ORDER</code>. </p> <p>Linux uses <code>kcompactd</code> daemon to defragment the area.</p> <p>The kernel often uses small memory chunks. This would result in a lot of internal fragmentation. To battle this, the kernel uses a SLAB allocator manage memory in pages.</p> <p></p>"},{"location":"23FS/BSY/Resources/Memory.html#slab-allocator","title":"SLAB Allocator","text":"<p>Because the kernel uses a lot of small memory (e.g. for a struct) chunks, an additional allocator is used which manages pages. This is only used for the kernel as it uses additional CPU power and memory.</p> <p>If the kernel asks for memory, first the SLAB allocator checks if there is space available in an already allocated page. If a page is found, the memory is allocated in the memory. If  no page was found, a new page is allocated.</p> <p></p>"},{"location":"23FS/BSY/Resources/Memory.html#swapping","title":"Swapping","text":"<p>When there is no memory left, part of the memory can be swapped out to the disk and loaded back in if required.</p>"},{"location":"23FS/BSY/Resources/Memory.html#virtual-memory","title":"Virtual Memory","text":"<p>The OS subdivides a process into pages of equal size. Pages are then in turn loaded into memory frames. Frames and Pages have the same size.</p> <p>Pages can be loaded everywhere in the memory.</p> <p></p> <p>The kernel maintains a page table with the page number and the associated frame number, along with some status bits.</p> <p>The diagram below shows how addresses are translated from the logical/virtual address to the physical address.</p> <p></p> <p>The status bit has the following fields:</p> <p></p> <p>Virtual memory is usually managed by the memory management unity (MMU) by the CPU. In addition, the CPU checks within the memory production unit if a programmed tried to read memory not allocated by it.</p> <p></p> <p>To optimise this, the translation lookaside buffer (TLB) caches ~64 entries (on a 32bit system).</p>"},{"location":"23FS/BSY/Resources/Memory.html#linux","title":"Linux","text":"<p>Linux uses the following process:</p> <p></p>"},{"location":"23FS/BSY/Resources/Memory.html#reclaim-frames","title":"Reclaim Frames","text":"<p>If a process requires an additional frame in a memory constraint scenario, the kernel can either do:</p> <ul> <li>Global strategy   Take a frame from an other process, ideally, the one which is the least needed</li> <li>Local strategy   If a process needs an additional frame, it also needs to give one up</li> </ul> <p>The optimal frame to take away from another process would be the frame which is used the latest, but this would require fortune telling. Linux takes the least recently used.</p> <p></p> <p>Another way would be First-in First-out, but this is not very effective:</p> <p></p> <p>Linux tracks the pages in use, the working set, and the pages in memory, the resident set. The working set is smaller or equal to the size of the resident set.</p> <p>The reclaim active is a two stage least recently used algorithm. It maintains two lists of page-frames: actives and inactive frames. </p> <p>If however, </p>"},{"location":"23FS/BSY/Resources/Memory.html#huge-page-frames","title":"Huge Page Frames","text":"<p>Linux puts pages into a folder structure. This yields an speed advantage and also makes the frame sizes more flexible by using less of the address for the folder structure and more for the offset. This results in bigger pages, which can be advantages for certain application.</p>"},{"location":"23FS/BSY/Resources/Resources.html","title":"Resources","text":"<p>Cgroups can be used to organise tasks into groups whose usage of various types of resources can then be strictly controlled.</p> <p>To control cgroups, one creates a tempfs (optionally), creates a directory in it and mounts a resource control interface into that directory. Magically, configuration file associated with the resource type appear in the config directory. Later a PID needs to be associated with a controll configuration.</p>"},{"location":"23FS/BSY/Resources/Resources.html#termonology","title":"Termonology","text":"<ul> <li>Cgroup   A collection of processes that are bound to a set of limits</li> <li>Subsystem/Resource Controllers   A kernel component related to a resource type</li> <li>Hierarchy   Controllers are arranged in a hierarchy. A process cannot exceed the limits placed by the related cgroup and all its parent cgroups.  Cgroups higher in the hierarchy means that less restrictions are placed up on it.</li> </ul>"},{"location":"23FS/BSY/Resources/Resources.html#setup-up","title":"Setup Up","text":"<ol> <li> <p>Create a temp file system    <code>sudo mount -t tmpfs -o size=10M tmpfs /mnt/mytmpfs</code></p> </li> <li> <p>Mount the resource control interface in the tempfs    <code>mount -t cgroup -o cpu,cpuacct none /mnt/mytempfs/cpu,cpuacct</code></p> </li> <li> <p>A new cgroup can be created by creating a directory</p> </li> </ol> <p><code>mkdir /mnt/mytempfs/cpu/cg1</code></p> <ol> <li> <p>To associate a PID with a cgroup, it needs to be appended    <code>echo $$ &gt; /mnt/mytempfs/cpu/cg1/cgroup.procs</code></p> </li> <li> <p>To remove the configuration, unmount the tmpfs    <code>umount /mnt/mytempfs/</code></p> </li> </ol>"},{"location":"23FS/BSY/Resources/Resources.html#limitations","title":"Limitations","text":"<p>A controller can only be associated with one directory structure.</p> <p></p> <p>A processes cannot be associated with two cgroups on the same hierarchy for the same controller.</p> <p></p>"},{"location":"23FS/BSY/Resources/Resources.html#controllers","title":"Controllers","text":"<p>Usually, an lower limit can be configured to guarantee an amount of resource and an upper limit to limit the amount of resource.</p> <ul> <li>CPU   The time share</li> <li></li> <li>Cpuset   A specific set of cpus</li> <li>Memory   The process memory, kernel memory and swap used</li> <li> <p>Blkio (block-io device)</p> </li> <li></li> </ul>"},{"location":"23FS/BSY/Resources/Resources.html#example","title":"Example","text":"<p><code>100'000</code> was written into <code>cpu.cfs_period_us</code>  and <code>cpu.cfs_quota_us</code> to <code>10'000</code> and <code>20'000</code> respectively.</p> <p>The following steps is an example to deny the access to the device <code>/dev/null</code>. <code>echo 0 &gt; sys/fs/cgroup/devices/group0/tasks</code> will deny access for the current process, in this case the current shell.</p> <p></p>"},{"location":"23FS/CT2/Analog%20and%20Digital.html","title":"Analog and Digital","text":"<p>LSB is the smalest possible voltage which is noticable in the digital world. It can be calculated with \\(1 LSB = \\frac{V_{REF}}{2^N}\\). </p> <p>\\(V_{REF}\\) is never reached, only \\(V_{FSR}\\), which is Full Scale Ranger. It is defined as \\(V_{REF}- LSB\\)</p> <p></p>"},{"location":"23FS/CT2/Analog%20and%20Digital.html#analog-to-digital-converter-adc","title":"Analog to Digital Converter (ADC)","text":"<p>\\(V_{REF+}\\) is the max. voltage for \\(V_{in+}\\) and \\(V_{in-}\\)</p> <p>Because analog signals are often differential, the ADC needs two inputs. If there is only one (single ended), \\(V_{in-}\\) can be seet to GND and \\(V_{in+}\\) can be used as the actual input.</p> <p>Characteristics of ADC:</p> <ul> <li>Conversion Time   The time needed when the analog signal is sampled to when the digital signal is available</li> <li>Quantization Error   Because an ADC quantises the ADC might have an quantisation error up to \\(\\pm 1 LSB\\) </li> <li>Offset Error   An ADC might be offset resulting in an offset error    (Offset Error is -1.5LSB in the diagram above)</li> <li>Gain Error    How well the digital slope matches the actual signal. This can be expressed in LSB or a percentage of the full-scale range (%FSR)</li> <li>Full-Scale Error   The full-scale-error is defined als <code>offset error</code> + <code>gain error</code> and is the total error without the quantisiation error.</li> </ul>"},{"location":"23FS/CT2/Analog%20and%20Digital.html#flash-dc","title":"Flash DC","text":"<p>These things  will output <code>1</code> if <code>+</code> &gt; <code>-</code> and outputs <code>0</code>, if <code>+</code> &lt; <code>-</code>.</p> <p>If for example \\(V_{REF}=8V\\) and \\(V_{in}=2.3V\\).</p>"},{"location":"23FS/CT2/Analog%20and%20Digital.html#successiv-approximation-register-adc-sar-adc","title":"Successiv Approximation Register ADC (SAR-ADC)","text":"<p>A SAR-ADC does a binary search to find the digital value of \\(V_{in}\\). To do this, it guesses a number, generates the analog value for it by using a DAC and compares \\(V_{DAC}\\) to \\(V_{in}\\).</p> <p>The <code>Sample/Hold</code> block reads \\(V_{in}\\) and holds it for a specified time. This is needed since the input against, which the state machines tests against, shouldn't change. Additionally, it also decouples the SAR-ADC from the input resulting the input not being loaded.</p> <p></p> <p>The algorithm sets each bit to <code>1</code>, starting with the <code>MSB</code>. It then generates this voltage and compares it to the \\(V_{in}\\). If it is larger, the algorithm keeps the <code>1</code>, otherwise a <code>0</code> is written. </p> <p>SAR-ADCs are a lot cheaper, as it uses a cheap DAC. For each additionall bit of resolution an additional clock cycle is needed for the SAR-ADC.</p>"},{"location":"23FS/CT2/Analog%20and%20Digital.html#stm32f429","title":"STM32F429","text":"<p><code>SQR1/2/3</code> specifies the sequence of channels.</p> <p></p> <p>When the ADC is done then the <code>EOC</code> signal is set in the status register. There is also an EOC interrupt available.</p> <p>In single channel mode, the ADC only samples one signal.</p> <p></p> <p>The sampling rate depends on the internal sampling rate and the conversion time: \\(T_{total}=T_{sample} + T_{conv}\\)</p> <p>\\(T_{sample}\\) can be between 3 and 480 cycles and is set in <code>ADC_SMPR1</code> and <code>ADC_SMPR2</code>. \\(T_{conv}\\) depends on the resolution and has a one-to-one relea:</p> <ul> <li>12 bits 12 ADCCLK cycles</li> <li>10 bits 10 ADCCLK cycles</li> <li>8 bits 8 ADCCLK cycles</li> <li>6 bits 6 ADCCLK cycles</li> </ul> <p>The sampling rate is \\(f=\\frac 1 {T_{total}}\\)</p> <p>The max sample rate is:  $$ f_{max}=\\frac{f_{ADC}}{PreScaler \\cdot T_{total}} $$</p> <p>There is also a watch dog available, which can check a specific chanel for a high and log threashold and interrupts the CPU if the signal trips the watch dog.</p> <p></p> <p></p> <p></p> <p></p> <p><code>L</code> specifies the number of chanels to sample. <code>0</code> =&gt; 1 chanel, <code>1</code> =&gt; 2 chanels, ...</p> <p></p> <p>The following is a diagram of the timing of an ADC:</p> <p></p>"},{"location":"23FS/CT2/Analog%20and%20Digital.html#digital-to-analog-converter-dac","title":"Digital to Analog Converter (DAC)","text":"<p>The following shows an potential implementation of a DAC:</p> <p></p> <p><code>R</code>s are resistors. Depending on which switch (\\(S7-S0\\)) is enabled, \\(V_{REF}\\) is lowered or not.</p> <p>The following component is a follower. It outputs whatever signal it sees on the <code>+</code> input. This is needed to decouple the internals from \\(V_{OUT}\\)</p> <p></p>"},{"location":"23FS/CT2/Cache.html","title":"Cache","text":"<p>The L1-cache can be split into data and instruction cache which would represent a Harvard architecture.</p> <p></p>"},{"location":"23FS/CT2/Cache.html#principle-of-locality","title":"Principle of Locality","text":"<ul> <li>Spacial Locality   If one byte is read, it is probable that the next few bytes will read as well   This is archived by having a cache which works in blocks.</li> <li>Temporal Locality   If one byte is read, it will probably be read again   This is automatically archived by a cache.</li> </ul> <pre><code>for(int i = 0; i &lt; 10000; i++) {\n    a[i] = b[i]; // spatial locality\n}\n\nif(a[1234] == a[4321]) { // temporal locality\n    a[1234] = 0;\n}\n</code></pre>"},{"location":"23FS/CT2/Cache.html#cache-mechanism","title":"Cache Mechanism","text":"<p>The cache works with blocks of data. This satisfies both spacial and temporal locality.</p> <p>If the CPU requests a block, which currently is not in the cache, then this is a cache miss. A cache miss is expensive since the CPU has to wait for a slower cache or RAM. If a requested block is cached, then this is a cache hit.</p> <p>One way to improve performance is to optimise for higher hit rates.</p>"},{"location":"23FS/CT2/Cache.html#cache-organisation","title":"Cache Organisation","text":"<p>The <code>tag</code> specifies which block in memory is cached, <code>v</code> is a bit which indicates the cache line is valid, and in the <code>data</code> bytes the actual cached data is stored. </p> <p>From a memory block id, its corresponding memory address can be calculated. </p> <p></p> <p>In the following example, such a table is used. Each block is the size of 4 bytes.</p> <p></p>"},{"location":"23FS/CT2/Cache.html#fully-associative","title":"Fully Associative","text":"<p>To check and retrieve data from the cache, the controller cuts of the offset and compares the tag with each cache line tag. If a matching tag line is found and its valid bit is set then the CPU can read from the byte selector.</p> <p></p> <p>This organisation schema has a few disadvantages:</p> <ul> <li>If the cache is full there needs to be a replacement logic built in hardware</li> <li>A lot of comparators are needed</li> </ul>"},{"location":"23FS/CT2/Cache.html#direct-mapped","title":"Direct Mapped","text":"<p>In a direct mapped cache each block can be at exactly one place. E.g. block <code>0</code>, <code>256</code>, <code>512</code>, ... can only be placed in the cache line <code>0</code>. </p> <p></p> <p>To read from the cache, only one comparator is needed since the cache line can be calculated by the requested address. The cache only has to validate that the stored block in the cache line is the actually requested address.</p> <p></p> <p>To find the cache line, the index is used. Because of this, less memory has to be used to store which memory has been cached.</p> <p></p> <p>The advantage of this is:</p> <ul> <li>The replacement strategy, if the cache is full, is already built in</li> <li>Only one comparator is needed</li> <li>Less memory is needed for management</li> </ul>"},{"location":"23FS/CT2/Cache.html#n-way-set-associative","title":"N-Way Set Associative","text":"<p>N-way set associative is a compromise between direct mapped and full associative.</p> <p>Compared to direct mapped, a block can only be in exactly one set, which consists of multiple cache line.</p> <p></p> <p>The following shows how block addresses are split up:</p> <p></p> <p></p> <p>This shows the logic to read from the cache:</p> <p></p>"},{"location":"23FS/CT2/Cache.html#comparison","title":"Comparison","text":"<p>The following table \\(m\\) is the number of lines, \\(n\\) is the number of lines per set</p> <p></p>"},{"location":"23FS/CT2/Cache.html#cache-miss","title":"Cache Miss","text":"<p>A cold miss happens on the first access of a block.</p> <p>A capacity miss happens when a block was already read but was purged due to the capacity of the cache.</p> <p>A conflict miss happens when a block was purged because another block associated with the set has been cached in the set.</p> <p>There are a number of performance metrics:</p> <p>Hit Rate is the number of hits per total number of accesses, while the miss rate is the number of misses per total number of accesses.</p> <p>The hit time is the time required to access a cached block. The miss penalty is the time needed to access a byte which was not cached.</p> <p>The average access time is calculated with: $Access Time=HitTime + MissRate\\cdot MissPenality $</p>"},{"location":"23FS/CT2/Cache.html#replacement-strategy","title":"Replacement Strategy","text":"<ul> <li>LRU: Least recently used</li> <li>LFU: Least frequently used</li> <li>FIFO: First In\u2013First Out (= oldest)</li> <li>Random Replace: randomly chosen</li> </ul> <p>For all, except random replace, needs additional memory for the required statistics for the replacement strategy.</p>"},{"location":"23FS/CT2/Cache.html#write-strategy","title":"Write Strategy","text":"<p>If a byte is written and there is a cache entry, there are two potential strategies:</p> <ul> <li>Write-through: Write immediately to memory and clear the cache</li> <li>Write-back: Delay writing to memory. Instead write to the cache and write it back, once the block is replaced.</li> </ul> <p>If there is no cache entry, these strategies are possible:</p> <ul> <li>Write-allocate: Load line into cache (from memory) and update the line in the cache</li> <li>No-write-allocate: Write immediately to memory</li> </ul>"},{"location":"23FS/CT2/Cache.html#optimisations","title":"Optimisations","text":""},{"location":"23FS/CT2/Fragen.html","title":"Fragen","text":"<p>Bei folgendem Tri-State Inverter, wieso ist ein Inverter vor dem zweiten p-type , anstelle von einem n-type?</p> <p></p> <p>Bei folgendem Diagramm (Basics/p.35), werden wait states generiert bis der Slave <code>ready</code> aktiviert?</p> <p></p> <p>In PROM was sind diese Bauteile? Tri-State Inverters oder Tri-State Buffers? (Memory/p.9)</p> <p></p>"},{"location":"23FS/CT2/GPIO.html","title":"GPIO","text":"<p>GPIO refers to general purpose input/output and are used to map internal chips to the \"outside\" of the chip. </p> <p>The gpio pins are organised in banks, named from <code>A</code> to <code>K</code>, each containing 16 pins. </p> <p></p> <p>Each bank has reserved <code>1024</code> bytes. </p>"},{"location":"23FS/CT2/GPIO.html#pin-sharing","title":"Pin Sharing","text":"<p>Because the chip doesn't have enough pins for all internal periphery, the programmer can choose which pins are mapped to the GPIO pins.</p> <p>This makes it configurable which pins need to be accessible from the outside of the chip.</p>"},{"location":"23FS/CT2/GPIO.html#gpio-structure","title":"GPIO Structure","text":"<p>The IO pin is, after passing through a schmitt-trigger, received by a data cell (input data - IDR). This data cell is only readable if the <code>idr_read_enable</code> register is set.</p> <p>If the pin is used as an output then the second data cell (output data - ODR) is used. To switch between the output and input data cell, the control tri-state driver is used. It is controlled by the <code>MODER</code> register.</p> <p>If a pin should be driven by an internal chip, then the \"alternate output\" route is used.</p> <p>A pin can also be configured to have a pull-up or pull-down resistor.</p>"},{"location":"23FS/CT2/GPIO.html#gpio-register","title":"GPIO Register","text":"<p>When wanting to set a bit, it is important to only change the target bits to not affect other functionality.</p> <p>In C, this can be done with:</p> <pre><code>GPIO-&gt;MODER &amp;= (~0x00c000000);  //0x00c0'00000\nGPIO-&gt;MODER |= 0x00400000;      //0x0040'0000\n</code></pre> <p></p> <p>The following graphics shows all register and their default values.</p> <p></p>"},{"location":"23FS/CT2/GPIO.html#gpiox_moder","title":"<code>GPIOx_MODER</code>","text":"<p>The <code>MODER</code> register sets the output mode of a GPIO pin and each pin has two bits.</p> <ul> <li><code>00</code>: Input</li> <li><code>01</code>: General purpose output mode</li> <li><code>10</code>: Alternate function mode when mapping other internal chips to a GPIO pin</li> <li><code>11</code>: Analog mode </li> </ul>"},{"location":"23FS/CT2/GPIO.html#gpiox_otyper","title":"<code>GPIOx_OTYPER</code>","text":"<p>GPIOx_OTYPER</p> <p>The <code>OTYPER</code> (output type register) register controls the output type. When <code>MODER</code> is set to input then this register doesnt't affect anything.</p> <ul> <li><code>0</code>: Output push pull</li> <li><code>1</code>: Open Drain</li> </ul>"},{"location":"23FS/CT2/GPIO.html#push-pull-vs-open-drain","title":"Push-pull vs. Open-drain","text":"<p>When push-pull is activated then the output behaves as a normal output which can be set to high or low. </p> <p>When open-drain is activated, then the pin can either be low or a floating pin. This is useful when multiple device run on the same bus.</p> <p></p>"},{"location":"23FS/CT2/GPIO.html#gpiox_pupdr","title":"<code>GPIOx_PUPDR</code>","text":"<p>The <code>PUPDR</code> (pull-up pull-down register) controls whether a pull-up or pull-down register should be connected to the pin.</p> <ul> <li><code>00</code>: No pull-up, no pull-down</li> <li><code>01</code>: pull-up</li> <li><code>10</code>: pull-down</li> <li><code>11</code>: reserved</li> </ul>"},{"location":"23FS/CT2/GPIO.html#gpiox_ospeedr","title":"<code>GPIOx_OSPEEDR</code>","text":"<p>The <code>OSPEEDR</code> (output speed register) register controls how fast an output pin changes from <code>0</code> to <code>1</code> and from <code>1</code> to <code>0</code>.</p> <ul> <li><code>00</code>: Low speed</li> <li><code>01</code>: Median speed</li> <li><code>10</code>: Fast speed</li> <li><code>11</code>: High speed</li> </ul>"},{"location":"23FS/CT2/GPIO.html#gpiox_idr","title":"<code>GPIOx_IDR</code>","text":"<p>The <code>IDR</code> register contains the input value of the pin and is read only and only relevant if <code>MODER</code> is set to input.</p>"},{"location":"23FS/CT2/GPIO.html#gpiox_odr","title":"<code>GPIOx_ODR</code>","text":"<p>The <code>ODR</code> register can be read and written to by the software and is only relevant if <code>MODR</code> is set to general purpose output.</p>"},{"location":"23FS/CT2/GPIO.html#gpiox_bsrr","title":"<code>GPIOx_BSRR</code>","text":"<p>The <code>BSRR</code> (bit set and reset register) is a workaround to not having to read and write the <code>ODR</code> register. </p> <p>The <code>set</code> bit can be used to set the bits where <code>1</code> is set. The <code>clear</code> bits can be used to clear the bits where <code>1</code> is set. The clear bit have the same index as the set bit but shifted by 16.</p>"},{"location":"23FS/CT2/GPIO.html#hal-abstraction-of-registers","title":"HAL Abstraction of Registers","text":"<p>To create an abstracts, a structure is created with the relevant fields. This structure is pinned to the base address by cleverly casting a pointer to the structure.</p> <pre><code>#define GPIOA ((reg_gpio_t) *) 0x40020000\n#define GPIOB ((reg_gpio_t) *) 0x40020400\n#define GPIOC ((reg_gpio_t) *) 0x40020800\n#define GPIOD ((reg_gpio_t) *) 0x40020c00\n#define GPIOE ((reg_gpio_t) *) 0x40021000\n#define GPIOF ((reg_gpio_t) *) 0x40021400\n#define GPIOG ((reg_gpio_t) *) 0x40021c00\n#define GPIOH ((reg_gpio_t) *) 0x40022000\n#define GPIOI ((reg_gpio_t) *) 0x40022400\n#define GPIOJ ((reg_gpio_t) *) 0x40022800\n#define GPIOK ((reg_gpio_t) *) 0x40022c00\n\n//TODO\n</code></pre>"},{"location":"23FS/CT2/Hardware.html","title":"Hardware","text":""},{"location":"23FS/CT2/Hardware.html#system-bus","title":"System Bus","text":"<p>The signal bus has address lines, data lines and control signals.</p> <p>Address lines are unidirectional from the master to the slave. The master dictates on which address is operated upon. The number of lines is equal to the size of the address space.</p> <p>The data lines are 8, 16, 32 or 64 parallel lines which transports the data. The data lines are bidirectional as data can be read or written.</p> <p>The control signals provide the current command, like read or write, as well as timing information. There are four control signals:</p> <ul> <li><code>CLK</code>: The clock signal</li> <li><code>NE</code>: Not Enable   Indicates the start and end of a read or write cycle</li> <li><code>NWE</code>: Not Write Enabled   Indicates that the CPU will write</li> <li><code>NOE</code>: Not Output Enabled   Indicates that the CPU will read</li> </ul> <p>Note: the N-prefix means that connected to ground means <code>1</code>,  connected to 5V means <code>0</code>. In other words, the line is active-log</p> <p>The slave is allowed to read and write data from and to the data lines on the fourth rising flank after NE was enabled.</p> <p>The following diagram shows an example read and write operation.</p> <p>Note: The signals, like <code>NE</code>, or <code>NOE</code>, fall on the falling edge of the clock and rise on the rising edge of the clock.</p> <p></p> <p>(This  symbol stands for all the data lines)</p> <p>To also support the half-word and byte version of <code>LDR</code> and <code>STR</code>, there are four <code>NBL</code> lines, which communicates to the slave which data lines are active. If one or two bytes are stored or loaded, the data lines used aren't necessary the first and second (as also seen in the byte example).</p> <p></p> <p>Wait states are used when the CPU talks to a slower slave. The first read has 3 wait states inserted, while the second read has no wait states. </p> <p></p> <p>Another option for a slave with variable timing or very long wait states is, that the CPU generates wait states until the slave pulls up a ready line. After that the CPU knows that the slave is ready.</p> <p></p>"},{"location":"23FS/CT2/Hardware.html#example-slave","title":"Example Slave","text":"<p>Notes: The Flip-Flops write the <code>D</code> to the <code>Q</code> output, if <code>E</code> is set and <code>CLK</code> is a rising edges.</p> <p><code>OE cycle counter</code> and <code>WE cycle counter</code> count the number of rising edges in the clock and output <code>1</code> after counting four.</p> <p>The second row of inverters are tri-state inverters. If <code>read_enable</code> is cleared than the output is floating.</p> <p></p> <p>The address decoding can be built by cleverly combining inverters and a big and-gate:</p> <p></p> <p>The address decoder can be categorised in two categories: </p> <p></p>"},{"location":"23FS/CT2/Hardware.html#slow-slaves","title":"Slow Slaves","text":"<p>The CPU reads the data lines after 4 <code>T</code>s. To still be able to integrate slower slaves, there two possibilities:</p> <ul> <li>Introduce additional wait states   Configure the CPU to generate wait state. The CPU will read the data later</li> <li>Slaves informs the CPU when ready   The slave has a ready signal which it sets when its ready. As soon as the CPU receive this signal, it will read the data. This variant is not supported on the CT-Board.</li> </ul> <p></p>"},{"location":"23FS/CT2/Hardware.html#control-and-status-bits","title":"Control and Status Bits","text":"<p>A status bit is written by the slave and cannot be written by the CPU. The CPU can use these status to monitor the slave.</p> <p>Control bits are written by the CPU but control the slave (like turning on and off a LED). Control bits can also be read by CPU.</p>"},{"location":"23FS/CT2/Hardware.html#synchronous-vs-asynchronous","title":"Synchronous vs Asynchronous","text":"<p>The system bus is a synchronouse bus and has one clock which provides the clock signal on the bus with the control signals.</p> <p></p> <p>All devices on the system bus are connected with a tri-state inverter</p> <p>An asynchronous bus is a bust where every device has its own clock. </p> <p> </p>"},{"location":"23FS/CT2/Hardware.html#driver-tri-state-inverter","title":"Driver: Tri-State Inverter","text":"<p>A tri-state-inverter has one input and an enable line. When the enable line is set, then the inverter functions normally. If the enable line is cleared, then the tri-state inverter is not set or floating.</p> <p>A CMOS Inverter is build in the following way: A n-type conducts if the gate is <code>1</code>, a p-type conducts if the gate is <code>0</code>.</p> <p></p> <p>This can be extended to allow an additional enable state to disable the inverter:</p> <p></p> <p></p>"},{"location":"23FS/CT2/Math.html","title":"Math","text":""},{"location":"23FS/CT2/Math.html#timer","title":"Timer","text":"\\[ f_{end}=\\frac{f_{initial}}{PreScaler \\cdot (f_{ARR})}\\\\ f_{ARR}=\\frac 1 {ARR + 1} \\]"},{"location":"23FS/CT2/Math.html#adc","title":"ADC","text":"\\[ \\begin{flalign} &amp;1 LSB = \\frac{V_{REF}}{2^N}\\\\ &amp;\\text{Full Scale Range (FSR): } V_{FSR}=V_{REF}- LSB \\\\ &amp;\\text{Max Sample Rate: } f_{max}=\\frac{f_{ADC}}{PreScaler} \\end{flalign} \\]"},{"location":"23FS/CT2/Math.html#cache","title":"Cache","text":"\\[ Access Time=HitTime + MissRate\\cdot MissPenality \\] \\[ \\begin{align} HitRate &amp;= \\frac{NrOfHits}{NrOfAccess}\\\\ MissRate &amp;= \\frac{NrOfMiss}{NrOfAccess}=1 - HitRate\\\\ \\end{align} \\]"},{"location":"23FS/CT2/Math.html#performance","title":"Performance","text":"\\[ impact=f_{int}\\cdot t_{ISR}\\cdot 100\\% \\]"},{"location":"23FS/CT2/Math.html#c-code","title":"C Code","text":""},{"location":"23FS/CT2/Math.html#read-current-value-in-memory","title":"Read Current Value in Memory","text":"<pre><code>uint8_t a = *((volatile uint8_t*) (0x61000007));\n// or\n#define A_REG (*((volatile uint8_t*) (0x61000007)))\nuint8_t a2 = A_REG;\n</code></pre>"},{"location":"23FS/CT2/Math.html#change-specific-bit","title":"Change Specific Bit","text":"<p>In this example, bit 16 is manipulated.</p> <pre><code>volatile uint16_t* reg = 0x61000010;\n// Clear 16th bit\nreg &amp;= ~(1 &lt;&lt; 16);\n// Set 16th bit\nreg |= 1 &lt;&lt; 16;\n// Toggle 16th bit\nreg ^= 1 &lt;&lt; 16;\n</code></pre>"},{"location":"23FS/CT2/Memory.html","title":"Memory","text":""},{"location":"23FS/CT2/Memory.html#memory-cell","title":"Memory Cell","text":"<p>One memory cell is a transistor which can pull down the bit line, if \"set\". This means a transistor is by default <code>1</code>, and only if programmed can become a <code>1</code>.</p> <p></p>"},{"location":"23FS/CT2/Memory.html#rom","title":"ROM","text":""},{"location":"23FS/CT2/Memory.html#programmable-read-only-memory-prom","title":"Programmable Read-Only Memory (PROM)","text":"<p>This kind of memory can only be written to once by burning fuses. When the fuse is burnt, the data line will be <code>1</code>. Otherwise, if not burn, then the data line will be <code>0</code>.</p> <p></p> <p>In addition, see diagram below.</p>"},{"location":"23FS/CT2/Memory.html#floating-gate-memory","title":"Floating Gate Memory","text":"<p>Memory cells are organised in a grid:</p> <p></p> <p></p>"},{"location":"23FS/CT2/Memory.html#nor-and-nand-flash","title":"NOR and NAND Flash","text":""},{"location":"23FS/CT2/Memory.html#ram","title":"RAM","text":""},{"location":"23FS/CT2/Memory.html#static-random-access-memory-sram","title":"Static Random Access Memory (SRAM)","text":"<p>(Has an asynchronous interface/without a clock)</p> <p>SRAM has the following advantages and disadvantages:</p> <ul> <li>All accesses take roughly the same time, independent of what was previously read/written or the location</li> <li>No refreshs are needed</li> <li>Memory is volatile</li> </ul> <p></p> <p></p> <p>(X=don't care, L=low, H=high)</p> <p>The control lines are active-low, meaning that <code>L=enabled</code> and <code>H=disabled</code></p> <p>The following shows the internal of SRAM:</p> <p></p> <p>SRAM uses a stable circuit which \"self-confirms\". This can be easily be archived by chaining two inverters.</p> <p></p> <p>To override such a circuit, one has to apply a high voltage current (a <code>1</code> to one side and a <code>0</code> to the other side). Because of the high voltage, this will overpower the inverters and overwrite their value.</p> <p>The following steps explain how to write and read an SRAM cell.</p> <p></p>"},{"location":"23FS/CT2/Memory.html#synchronous-dynamic-random-access-memory-sdram","title":"Synchronous Dynamic Random Access Memory (SDRAM)","text":"<p>SDRAM uses a capacitor as a battery to store the individual bits. However, capacitor loos their charge over time and thus the RAM controller needs to periodically read and immediately write the value back to recharge the capacitor.</p> <p> </p> <p>The following diagram shows the layout of a SDRAM chip.</p> <p></p> <p>Compared to SRAM, SDRAM has a lot wider storage matrix. This makes the refreshing faster, but also more complicated.</p> <p>To access a byte in SDRAM, the FMC/CPU first enables <code>not RAS</code> (row address strobe) by writing <code>0</code>  and sending the row address.  When <code>not RAS</code> is zero, the address is sent to the row decoder. Then <code>not CAS</code> is set to <code>0</code> which causes the next address being sent to the column decoder.</p> <p>For the first byte, the SDRAM needs a lot of cycle, but further bytes in the same row are really fast as the row is already \"loaded\". This makes this storage technology not appropriate for direct CPU access. To still be able to use DRAM, the CPU has caches which are a lot faster and more predictable.</p> <p></p> <p>Comparison:</p> <p></p>"},{"location":"23FS/CT2/Memory.html#stm32f429zi","title":"STM32F429ZI","text":"<p>The following shows the simplified architecture of the STM32F429ZI:</p> <p></p> <p>Sectors can only be erased as a whole.</p> <p></p> <p>The flash has a 128bit buffer in front, which pre-fetches the next instructions. This minimises the latency of flash.</p> <p></p>"},{"location":"23FS/CT2/Memory.html#flexible-memory-controller-fmc","title":"Flexible Memory Controller (FMC)","text":"<p>The FMC allows a programmer to specify how external memory is mapped to the CPU.</p> <p></p> <p>The FMC is a slave on the system bus and a master on the external bus.</p> <p></p> <p>The external bus has a 26-bit address bus with 8, 16 or 32 bit data lines.</p> <p>If the FMC needs to translate a 32-bit bus to a lower bit bus (e.g. 16bit or 8bit bus) then the FMC needs to write multiple data packages. The FMC caches the data, meaning that while the FMC is writing, the CPU and system bus can do something else.</p> <p></p> <p>If reading, the CPU and system bus need to wait for the external read to finish.</p> <p></p> <p>The FMC controls the following memory area:</p> <p></p> <p>Each bank are designed for different kind of memory. The FMC will produce different electrical signals for different \"bank types\". </p> <p>Each bank can have 4 devices connected.</p>"},{"location":"23FS/CT2/Memory.html#bank-1-sram-nor-psram","title":"Bank 1 (SRAM, NOR, PSRAM)","text":"<p>The following shows a schematic of the wiring of bank 1:</p> <p></p> <p>The following truth table shows the selected functionality when different pins are high/low.</p> <p></p> <p>The following table shows the inputs and outputs of the FMC:</p> <p></p> <p></p> <p>The FMC is connected in the following way:</p> <p></p> <p>The following configuring options exist:</p> <p></p> <p></p> <p><code>HCLK</code> is the clock cycle of the CPU and the internal bus and is configured to 82 MHz during the startup of the CT board.</p>"},{"location":"23FS/CT2/Performance.html","title":"Performance","text":""},{"location":"23FS/CT2/Performance.html#numbers","title":"Numbers","text":"<p>\\(f_{int}\\) the the frequency of an interrupt occuring.</p> <p></p> <p>\\(t_{ISR}\\) is the time needed to handle a specific interrupt. This depends on the number of instructions in the IR, the required clock cycles per instruction, the CPU clock frequency and the time for switching and returning from the ISR. Of those factors, only the size of the ISR can be adjusted.</p> <p></p> <p>The <code>impact</code> is the percentage of the CPU time used by a service interrupt: $$ impact=f_{int}\\cdot t_{ISR}\\cdot 100\\% $$ In the case of a keyboard with \\(f_{int}=20Hz\\) and \\(t_{ISR}=6 us\\), the impact is \\(20 Hz \\cdot 6us \\cdot 100\\% = 0.012\\%\\).</p>"},{"location":"23FS/CT2/Performance.html#interrupt-performance","title":"Interrupt Performance","text":"<p>A ISR needs to be short, not just short on average, since if the ISR takes longer and an interrupt for this ISR occures, then the interrupt is lost.</p> <p>To implement this, the following can be done:</p> <ul> <li>Move tasks with relaxed time-constraints to the main loop</li> <li>Make ISR available for an other time-ciritical taks</li> <li>Feed the interrupt into a queue and dequeue in the main process.</li> </ul>"},{"location":"23FS/CT2/Performance.html#interrupt-latency","title":"Interrupt Latency","text":"<p>\\(t_{latency}\\) is the time needed to start executing the first \"usful\" instruction of the ISR. This can be relevant where guaranteed service time required (e.g. audio/video steaming).</p> <p>The \\(t_{latency}\\) can be influenced by hardware (pipelining, different execution time per instruction) or software code, like saving additional registers, higher prioritised interrupts, ...</p> <p>While reducing this can be difficult, there are some tricks to improve it:</p> <ul> <li>Avoid saving additional register on the stack</li> <li>Change the prioritisation</li> <li>Disabling masked interrupts</li> </ul>"},{"location":"23FS/CT2/Performance.html#polling-loops","title":"Polling Loops","text":"<p>Extremely short polling loops can be very fast and responsive, where invoking an ISR is a costly operation. Thus, if pure speed is the goal, a polling loop isn't necessarily a bad idea.</p> <p>Additionally, consider that every interrupt is able to interrupt the main and take control away.</p>"},{"location":"23FS/CT2/Performance.html#managing-latency","title":"Managing Latency","text":"<p>In the ISR above, there is a loop marked with the red bracket. Since this is a high priority ISR, this loop has the potential to block the whole system.</p> <p>To remedy this, instead of letting the ISR write to the output directly, the ISR should write to a FIFO queue.</p> <p></p> <p>If there are multiple ISRs, the architecture will look like this. In this design, there is a polling main loop again, which effectively is the lowest prioritised \"ISR\".</p> <p></p> <p>This can be furthered enhanced, by combining all event queues together.</p> <p></p>"},{"location":"23FS/CT2/State%20Machines.html","title":"State Machines","text":"<p>Finite state machines in hardware can run in parallel, since a large number of flip-flops can simultaneously change by a common clock signal. However, in software this parallelism doesn't exist. </p> <p>To optimise, a software finite state machine should only change when something changed. To enable this, an event based system can work well.</p>"},{"location":"23FS/CT2/State%20Machines.html#terminology","title":"Terminology","text":"<p>The internal states are the finite number of states the state machine can be in. An action is the effect a given state has on the outside world (e.g. enable the red light on a traffic line). Each event may or may not change the internal state  (a transition) or/and trigger actions.</p>"},{"location":"23FS/CT2/State%20Machines.html#uml-state-diagrams","title":"UML State Diagrams","text":"<p>In the transition <code>on / lamp_on</code>, <code>on</code> is the event which happend and <code>lamp_on</code> is the action which will occurre. The transition <code>/action</code> doesn't have an event, like the initial transition.</p> <p>For a state machine to be valid, the following rules are violated:</p> <ul> <li>Every state machine must have an initial state</li> <li>Each state has to be reachable through a transition (but not every state needs a transition away from it, e.g. an error state)</li> <li>The state diagram has to be deterministic</li> </ul> <p>The following is an example of a state machine for a traffic light:</p> <p></p> <p>(Note: the transition between <code>cars_green</code> and <code>cars_red</code> starts a timer with <code>start_timer</code>. The next transition waits for this timer by listing the event to <code>time_out</code>)</p>"},{"location":"23FS/CT2/State%20Machines.html#event-queue","title":"Event Queue","text":""},{"location":"23FS/CT2/State%20Machines.html#state-machine-in-c","title":"State Machine in C","text":"<p>A state machine can be implemented with the following flow diagram:</p> <p></p> <p>The following c code implements this:</p> <pre><code>int main(void) {\n    event_t event;\n    fsm_init();\n    while (1) {\n        event = get_event();\n        if (event != NO_SWITCH) {\n            fsm_handle_event(event);\n        }\n    }\n}\n</code></pre> <p><code>fsm_handle_event(event)</code> follows the following flow. Important: Do not forget BREAK in switch statements!!!!!</p> <p></p>"},{"location":"23FS/CT2/Timer.html","title":"Timer","text":"<p>The counter counts up or down with every pulse it receives. If the counter hits <code>0</code>, then the <code>ARR</code> is loaded in the counter, and if the counter hits <code>ARR</code> then <code>0</code> is loaded into the counter. The counter will reach the value of the <code>ARR</code> registry, meaning that the timer counts from <code>0</code> to <code>ARR</code> inclusively.</p> <p>The pulses from the CPU might still be too fast. To further slow down the counter, a prescaler can be used.</p> <p>In the following example, the prescaler is set to <code>4</code> and the timer is configured as a countdown timer with the <code>ARR</code> registry set to <code>2546</code>:</p> <p></p> <p>Importantly, the UIF flag has to be reset in the interrupt service routine. Otherwise, the CPU will invoke the interrupt immediately afterwards.</p> <p>The frequency can be calculated with: $$ f_{end}=\\frac{f_{initial}}{PreScaler \\cdot (f_{ARR})}\\ f_{ARR}=\\frac 1 {ARR + 1}\\ $$</p>"},{"location":"23FS/CT2/Timer.html#stm32f4xx","title":"STM32F4xx","text":"<p>The <code>TIM2</code> and <code>TIM5</code> are 32-bit timers and the <code>TIM3</code> and <code>TIM4</code> are 16-bit timers. Both timer types can count up or down and can have a prescaler between 0 and 65536.</p> <p></p> <p>To enable the timers, the respective control bits need to be enabled in the <code>reset and clock control</code> (RCC) registry.</p> <p>The following shows the RCC registry configuration:</p> <p></p> <p></p> <ul> <li><code>DIR</code>: Tells the timer if it should count up (<code>0</code>) or down (<code>1</code>)</li> <li><code>UIE</code>: Enables the interrupt from the timer</li> <li><code>CMS</code> (Center-alligned mode): should be set to <code>00</code> to use the <code>DIR</code></li> </ul> <p>In C, the structures <code>TIMx</code> can be used to configure it (e.g. <code>TIM2-&gt;ARR = 3200 - 1;</code>).</p> <p>The <code>TIMx_ARR</code> (<code>TMx-&gt;ARR</code>) is the <code>ARR</code> flag, the <code>TIMx_CNT</code> (<code>TIMx-&gt;CNT</code>) is the counter variable and the <code>TIMx_PSC</code> (<code>TIMx-&gt;PSC</code>) is the prescaler.</p> <p>When the center-aligned mode is enabled, the timer counts from <code>0</code> up to <code>ARR-1</code>, and then from <code>ARR</code> to <code>1</code>. This leads to the counter register having the following values: <code>[0, 1, 2, 3, 4, 3, 2, 1, ...]</code> for <code>ARR=4</code>.</p> <p>The slave mode control register (<code>SMCR</code>) is usually set to <code>000</code> which causes the timer to use the internal clock as the clock source.</p>"},{"location":"23FS/CT2/Timer.html#input-capture","title":"Input Capture","text":"<p>After the <code>CCR</code> captured a value it needs to be re-enabled before the next value is written into the <code>CCR</code> register.</p> <p>In the <code>capture mode</code>, when the input triggers (can be configured) then the counter is stored to the <code>CCR</code> register and an interrupt is generated.</p> <p>In the <code>compare mode</code>, when then <code>CCR</code> is equal to the <code>counter</code> then an interrupt is generated. </p>"},{"location":"23FS/CT2/Timer.html#pulse-width-modulation-pwm","title":"Pulse Width Modulation (<code>PWM</code>)","text":"<p> $$ V_{avg}=D\\cdot V_H + (1-D)\\cdot V_L\\ DutyCycle=\\frac{On Time}{Period}\\cdot 100\\% $$ </p> <p>PWM signals can be generated by the timer hardware by setting the <code>CCR</code> register to the \\(1-DutyCycle\\) or \\(DutyCacle\\) (depending on the PWM mode). The compare output from the <code>CCR</code> (if the counter value is higher then the <code>CCR</code> register) is directly used as the PWM signal.</p> <p></p> <p>Depending on the PWM mode and if the counter counts up or down, CCR needs to be set to \\(DutyCycle\\) or \\(1-DutyCycle\\).</p> <p></p> <p>To calculate the CRR for a duty cycle:</p> <ul> <li>When up counting: then \\((ARR + 1)\\cdot DutyCycle\\)</li> <li>When down counting: then \\((ARR + 1)\\cdot DutyCycle-1\\)</li> </ul> <p></p> <p>TODO:  Calculate ARR and CCR from specifiction $$</p> <p>$$</p>"},{"location":"23FS/CT2/Serial%20Protocols/Comparision.html","title":"Comparison","text":"<p>Note: UART is marked as full-duplex because usually UART is built in both ways</p>"},{"location":"23FS/CT2/Serial%20Protocols/I%C2%B2C.html","title":"I\u00b2C","text":""},{"location":"23FS/CT2/Serial%20Protocols/I%C2%B2C.html#start-and-stop","title":"Start and Stop","text":"<p>The master initiates a transaction with a falling edge on <code>SDA</code> while the clock signal <code>SCL</code> is high. The transaction is ended with a rising edge on the data line <code>SDA</code> when the clock <code>SCL</code> is high.</p> <p></p>"},{"location":"23FS/CT2/Serial%20Protocols/I%C2%B2C.html#addressing","title":"Addressing","text":"<p>The first 7bits when starting a transaction is the address of the slave.</p> Bits Content Sent By 0-7 Address send of slave (MSB is sent first) Master 8 <code>1</code> = the master reads, <code>0</code> the master writes Master 9 <code>ACK</code> by slave Slave <p></p> <p>If the master wants to check if there is a slave with a given address, then the master can start a transaction and see if there is an acknowledgement.</p>"},{"location":"23FS/CT2/Serial%20Protocols/I%C2%B2C.html#data","title":"Data","text":"<p>The MSB is sent first, meaning that the Data doesn't need to be flipped (other than with UART)</p> <p>While transmitting data, <code>SDA</code> only changes while the clock <code>SCL</code> is low. When the clock signal is high, <code>SDA</code> does not change, except when sending the start and stop condition.</p> <p>When a byte is complete, then the slave pulls the line down. If nobody acknowledges the transaction, then no slave will pull down the line and will stay up.</p> <p></p> <p>The following diagrams show a read and write transaction.</p> <p></p> <p>When reading from a slave, the slave can never send data after a stop signal has been sent by the master. This is because the stop condition is sent when the clock signal is high.</p>"},{"location":"23FS/CT2/Serial%20Protocols/I%C2%B2C.html#stm32f4xxx","title":"STM32F4xxx","text":""},{"location":"23FS/CT2/Serial%20Protocols/SPI.html","title":"SPI (Serial Data Transfer)","text":"<p>A SPI Interface can be:</p> <ul> <li>Simplex: Only unidirectional</li> <li>Half-duplex: Bidirectional, but only in one direction at a time</li> <li>Full-duplex: Bidirectional, both directions simultaneously</li> </ul> <p>The timing component of an SPI bus can be:</p> <ul> <li>Asynchronous: Each node uses an individual clock</li> <li>Synchronous: All nodes use the same clock signal generated by the master</li> </ul> <p>In SPI, it is configurable if the MSB or LSB is sent first.</p>"},{"location":"23FS/CT2/Serial%20Protocols/SPI.html#data-connections","title":"Data Connections","text":"<p>SPI is full duplex and has to following lines:</p> <ul> <li>MOSI (Master-out-Slave-in): Data from master to slave</li> <li>MISO (Master-in-Slave-out): Data from slave to master</li> <li>SSx (Slave Select): The master sets the SS to <code>0</code> to initiate the data transfer. Each slave needs its own <code>SSx</code> line.</li> </ul>"},{"location":"23FS/CT2/Serial%20Protocols/SPI.html#implementation","title":"Implementation","text":"<p>The shift register are 8 flip-flops which are chained together. Each clock cycle the input signal is stored in the first flip-flop, the data of the first flip-flip is written to the second flip-flip, etc. After 8 clock cycles the whole 8-bit shift register was overwritten. </p> <p>Importantly, data is always sent and received simultainously.</p> <p>The clock signal of the master is inverted. This was done to help with the inherit timing issue that long lines can create. This way, the flanks are effectively sent a half-flank earlier.</p> <p>For the CPU the Rx-Buffer and Tx-Buffer are at the same address.</p>"},{"location":"23FS/CT2/Serial%20Protocols/SPI.html#flagsinterrupts","title":"Flags/Interrupts","text":"<p>The following flags generate interrupts</p> <ul> <li>TXE: TX-Buffer empty   The CPU had wrote some data to the TX-Buffer which was sent out</li> <li>RXNE: RX-Buffer not empty   Data was received and the CPU can access it</li> </ul>"},{"location":"23FS/CT2/Serial%20Protocols/SPI.html#timing","title":"Timing","text":"<p>The data is read on the sampling edge of the clock. The data can change on the toggling edge. Which edge (raising or falling) is which edge, can be configured in the CPU.</p> <ul> <li>CPOL (Clock Polarity): Where the clock rests, when nothing is transmitted</li> <li>CPHA (Clock Phase): If set to <code>0</code>, then the first edge (rasing or falling) is the sampling edge. On the other hand, if <code>CPHA</code> is set to <code>1</code>, then the second edge is the sampling edge.</li> </ul> <p></p> <p>In the following diagram, the internal communication in the CPU, when transmitting three bytes, is displayed. Interesting enough, the <code>TXE</code> flag is set to <code>1</code>  again way earlier than it is actually sent. This is done to relieve the CPU, because as soon the SPI chip copied the TR-buffer to its internal button, the CPU can write another byte into it.</p> <p></p> <p>It works similarly when the CPU receives data.</p> <p></p> <p>The following flow can be used to simultaneously read and write from a SPI device. Alternatively interrupts, which are generated when <code>TXE</code> and <code>RXNE</code> change to <code>1</code>, can be used.</p> <p> </p>"},{"location":"23FS/CT2/Serial%20Protocols/SPI.html#implementation-on-the-stm32f4xxx","title":"Implementation on the STM32F4xxx","text":"<ul> <li>Control Register</li> <li>MSTR (Master): If set to <code>1</code> then the CPU is a master, otherwise a slave</li> <li>BR0-2: Used to set the baud rate</li> <li>CPOL (Clock Polarity): Where the clock rests, when nothing is transmitted</li> <li>CPHA (Clock Phase): If set to <code>0</code>, then the first edge (rasing or falling) is the sampling edge. On the other hand, if <code>CPHA</code> is set to <code>1</code>, then the second edge is the sampling edge.</li> <li>Status Registers</li> <li>BSY (Busy): If set, then the SPI chip is busy</li> <li>OVR (Overrun): If the CPU doesn't read data fast enough and a new byte already arrived, then the data register is overwritten and the <code>OVR</code> bit is set.</li> <li>TXE (TX-Buffer empty): The CPU had wrote some data to the TX-Buffer which was sent out</li> <li>RXNE (RX-Buffer not empty): Data was received and the CPU can access it</li> </ul>"},{"location":"23FS/CT2/Serial%20Protocols/UART.html","title":"UART","text":"<p>UART is an asynchronous protocol and requiring synchronisation at the start of each message. It allows for a cable up to 10m and uses \\(-3V\\) to \\(-15V\\) for <code>1</code> and \\(3V\\) to \\(15V\\) for <code>0</code>. This increases its reliability.</p> <p>The diagram below shows an example implementation of a transmitter and receiver for a 9600 baud (\\(Baud=\\frac {Bits} s\\)). To archive this baud rate with both a 2000 MHz and a 5000 MHz clock, dividers are used.</p> <p></p> <p>The clocks need to be close enough that the max deviation is \\(\\pm 0.5 bits\\)</p>"},{"location":"23FS/CT2/Serial%20Protocols/UART.html#timing","title":"Timing","text":"<p>UART starts with a start bit to synchronise the clocks. After the receiver reads the start bit, it waits for \\(1.5T\\) before reading data. This is to ensure that the receiver reads in the middle of the clock signal.</p> <p></p> <p>Both clocks needs to in sync enough to stay synchronous for 10 bits by not drifting more than \\(\\pm0.5\\)bit.</p> <p>The diagram above shows the value \\(0b0100'1011\\), meaning that the LSB is sent first.</p> <p>This means, when 8 data bits are sent, the clock can shift \\(\\pm 0.5\\) over \\(8.5\\) bits.</p> <p></p>"},{"location":"23FS/CT2/Serial%20Protocols/UART.html#stop-bits","title":"Stop Bits","text":"<p>To make UART more reliable, the number of stop bits can configured to <code>1</code>, <code>1.5</code> or <code>2</code>. This helps the receiver to parse the start bit. However, even more non-data is sent, reducing the data-throughput even more.</p>"},{"location":"23FS/CT2/Serial%20Protocols/UART.html#parity-data","title":"Parity Data","text":"<p>In UART there is parity-bit before the stop bit(s).</p> <ul> <li>none   No parity bit will be sent and is missing entirely</li> <li>Mark   The parity bit will always be <code>1</code></li> <li>Space   The parity bit will always be <code>0</code></li> <li>Even   If there is an even number of <code>1</code> (incl. the parity bit), then a <code>1</code> is sent, otherwise <code>0</code>   (Without the parity bit, if there are an even number of <code>1</code> a <code>0</code> is sent)</li> <li>Odd   If there is an odd number of <code>1</code> (incl. the parity bit), then a <code>1</code> is sent, otherwise <code>0</code>   (Without the parity bit, if there are an odd number of <code>1</code> a <code>0</code> is sent)</li> </ul>"},{"location":"23FS/CT2/Serial%20Protocols/UART.html#differential-transmission","title":"Differential Transmission","text":"<p>To futher improve the reliability, two cables per line can be used. In one cable the inverted signal is sent. Distortion will apply to both signals in the same way and can be later filtered out.</p>"},{"location":"23FS/CT2/Serial%20Protocols/UART.html#stm32f4xxx","title":"STM32F4xxx","text":""},{"location":"23FS/CT2/Serial%20Protocols/UART.html#rs-485","title":"RS-485","text":"<p>This protocol is based on UART, but adds diferential signal encoding. This enables it to carry a signal up to 100m.</p> <p></p>"},{"location":"23FS/CT2/Serial%20Protocols/UART.html#calculations","title":"Calculations","text":"<p>UART Overhead: $$ SentData = 1 + DataBits + ParityBits + StopBits\\ Overhead = \\frac{DataBits}{1 + ParityBits + StopBits} $$</p> <p>The following is an example:</p> <p></p> <p></p> <p>The solution is \\(\\frac 3 8\\cdot 100\\%\\) </p>"},{"location":"23FS/EAP/Presentation%20Notes.html","title":"Presentation Notes","text":""},{"location":"23FS/EAP/Presentation%20Notes.html#openai","title":"OpenAI","text":"<ul> <li>reading too much of his notes / not as fluently</li> <li>Good idea to use chat gpt to generate passages</li> <li>good slides (minimal, not just reading of the slides, but enough information to help following)</li> <li>hand over was good</li> <li>only a feature run down - ethical questions, impact on society. </li> </ul>"},{"location":"23FS/EAP/Presentation%20Notes.html#notes","title":"Notes","text":"<ul> <li>Introduction: Too detailed, I think should only have 3-4 topics</li> <li>numbers (incl. year) should be put on slides</li> <li>hand over</li> <li>uniform power point design</li> <li>How do we need to provide unusual vocas</li> </ul>"},{"location":"23FS/EAP/Presentation%20Notes.html#the-jobs-well-lose-to-machines-and-the-ones-we-dont","title":"The jobs we'll lose to machines -- and the ones we don't","text":"<p>Anthony Goldbloom</p> <p>50% jobs will be eliminated by machines, mostly by machine learning.</p> <p>ML started with simple tasks, like evaluating credit risk. In 2012 ML could match grade given by experts on tests. </p> <p>The advantage of ML is frequent high-volume task as they can process millions of bits per seconds, but they struggle with novel situation. Humans can tackle novel situations, e.g. connect two separate threads. Because of this, there is a limit how much of our jobs machines can automate.</p>"},{"location":"23FS/EAP/Presentation%20Notes.html#summary","title":"Summary","text":"<p>Anthony Goldbloom stated in his talk \"The Jobs we'll lose to machines -- and the ones we don't\" that machines have a big advantage when the task at hand is to process high-frequency, high-volume tasks, since they can process millions of bytes every second without needing to sleep or eat. However, they struggle when they encounter a novel situation, which wasn't included in their training data.</p> <p>On the other hand, human excel at this. The brain can connect two distance threads to create new original ideas without requiring petabytes of training data. This creates a fundamental limit on what machines can do and how much of our jobs can be automated. Goldbloom estimated that 50% of our jobs will be automated.</p> <p>Jobs that can be reduced to high-frequency, high-volume tasks will either be completely replaced or in drastically less demand compared to today. Jobs that require original thoughts, such as creating marketing material or a business plan to fill a market gap, will most likely be safe from the machines.</p>"},{"location":"23FS/EAP/Presentation.html","title":"Presentation","text":"<ul> <li>A lot of caveats before the presentation started</li> </ul>"},{"location":"23FS/EAP/Presentation.html#the-algorithm","title":"The Algorithm","text":"<p>A black box of code which is given a list of human curated examples. It then devices a category-system those and learn from from them. Later completely new information can be given to the black box to be categorised.</p> <p>These categories do not need to be known to humans.</p> <p>This can go wrong. </p> <p>An example being YouTube's ad-apocalypse, where YouTube created an algorithm to tell them, if a video is deemed safe for advertising. They gave the algorithm two sets of data: One with a list of completely safe videos, and one with videos definitely over the line. However, there was a bias in the training data. Creators talking about LGBTQ were more likely to talk explicitly about sex and the algorithm picked up on this. This manifested itself as the algorithm deeming LGBTQ content more unsafe for ads.</p> <p>Creating a algorithms without bias is extremely difficult.</p> <p>YouTube trains their recommending algorithm with the goal of recommending high quality video which keeps people on the platform. However, this incentives creators to produce click-baity videos and conspiracy theories. YouTube has to balance the algorithm between educational video and click-bait to retain the viewer, but also the advertiser. This means finding the least-worst solution.</p> <p>YouTube's algorithm (accidentally) became very good at radicalising people. First a a-political video, then a bit political video, then a click-baity political video, and then straight misinformation. Or from jogging to running ultra-marathons. Or from vegetarianism to veganism.</p>"},{"location":"23FS/EAP/Presentation.html#marmite-example","title":"Marmite Example","text":"<p>Falsehood flies and the truth comes limping after it.</p> <p>by Jonathan Swift</p> <p></p> <p></p> <p>Everybody, who saw and retweeted the tweet, assumed that this statement has been fact-checked.</p> <p>On social media platforms, which ever way you want to make a decision, the platforms will have content in supporting that decision.</p>"},{"location":"23FS/EAP/Presentation.html#the-state-of-science-communication","title":"The State of Science Communication","text":"<p>For content to be popular, an authoritative person it needed. People watch content not because the presenter is especially knowledgeable, but rather because they are popular/authoritative.</p> <p>A hit does not make one successful. Rather to become that, one has to have several minor successes to build up and audience, to then pitch upwards to success.</p>"},{"location":"23FS/EAP/Presentation.html#parasocial","title":"Parasocial","text":"<p>The viewer is invested in the presenter, but the presenter doesn't know the viewer.</p> <p>People watch hour long streams, not because they like the game, but because they like the person playing it. It feels like hanging out with their \"friend\". But when bundled together with fund raising tools, like Patreon, Twitch Bits and YouTube memberships, it means selling friendship for the creator.</p> <p>Streamers often shout out names of donators and recently joint subscribers to give them attention as a reward, maybe also depending on the amount of money that the thanked one gave.</p> <p>The following screenshot shows advice from Patreon to raise more subscribers:</p> <p></p> <p></p> <p>The line between being a fan of somebody's work and being a fan of somebody is blurry and can be (mis-)used for profit. For a lot of people there is no distinction between this.</p> <p>In essence: For somebody to be successful in communicating science, their background and knowledge does not matter. Much more important is, that they can tell a story about somebody, preferable about themselves.</p> <p>In the days of TV, there were some standards that kept quality to a degree, but on the online world this isn't really the case.</p>"},{"location":"23FS/EAP/Presentation.html#echo-chambers-and-nazi-bars","title":"Echo Chambers and Nazi Bars","text":"<p>https://youtu.be/leX541Dr2rU?t=2752</p> <p>These two content policy are at the opposite of the scale. One allows everything that is legal, while the other allow only agreement and no dissent.</p>"},{"location":"23FS/EAP/Presentation.html#nazi-bars","title":"Nazi Bars","text":"<p>If you allow every speech that is legal, then the worst kind of people (like nazis) will move in and swing the conversation in their direction. This causes more careful people to leave. This cycle continuous.</p> <p>This view on content policy can be seen on sites like Reddit.</p>"},{"location":"23FS/EAP/Presentation.html#echo-chambers","title":"Echo Chambers","text":"<p>Everybody in a group has to agree on the opinion of the larger group. If one dissents (https://www.dictionary.com/browse/dissent) then they are mobbed out of the group. This causes a radicalisation of a group and the discussions will shift to more extreme topics.</p>"},{"location":"23FS/EAP/Presentation.html#cyberbullying-and-misinformation","title":"Cyberbullying and Misinformation","text":"<p>In the tweet above, a company advertised a \"homeopathic flu shot\" and the response of Twitter users was to reply a lot and ratio this tweet.</p> <p>However, an algorithm cannot discern between this and cyberbullying of vulnerable persons. This means that every measure against cyberbullying will also help people who spread misinformation.</p>"},{"location":"23FS/EAP/Presentation.html#centralisation","title":"Centralisation","text":"<p>In the real world, vastly different registers are used depending on where one is (e.g. the difference between an university and a scooter game). This also applies online but all of those subgroups live on the same platform and the same content policies need to apply to all of them. Additionally, the content policies also need to appease the advertisement companies.</p> <p>These content policies are somewhere between Nazi bars and echo chambers.</p> <p>Also noteworthy, when these groups live on more federated servers, like it is the case with discord, then bubbles can arise where misinformation spread. </p>"},{"location":"23FS/EAP/Presentation.html#there-is-no-algorithm-for-truth","title":"There is no Algorithm for Truth","text":"<p>If there were such an algorithm, which would ban all posts with misinformation, the already misinformed people would go the comment sections (or similar) and comment their opinion. Other people would go there as well and see their own believes confirmed.</p> <p>Note: However, if these comments would be banned as well, wouldn't that help? Especially overtime</p> <p>There is currently no algorithm for truth. The only current existing alternative is ourselves. We have to fact check before we pass on knowledge</p>"},{"location":"23FS/EAP/Presentation.html#bottom-line","title":"Bottom Line","text":"<ul> <li>Algorithm always have bias</li> <li>Bias can be useful</li> <li>My thought: Telling the truth between where bias is useful and harmless and where it is imperative to only allow the truth is a blurry line (e.g. cat photos and vaccination shots)</li> <li>Companies need to decide were on the scale of content policy they land</li> <li>Banning a certain kind of content and recommending the \"truth\" can lead to people creating echo chambers at unexpected places</li> <li>The bias of the creator of the platforms (mostly from the bay area in America) also affects the platforms themselves. </li> <li>A potential solution is to hire a diverse group of people so there is a group with bias (which is probably impossible)</li> </ul>"},{"location":"23FS/EAP/Presentation.html#chat-gpt","title":"Chat GPT?","text":"<p>The following section wasn't from the talk</p> <ul> <li>Large language models, like ChatGPT, can generate millions of authentic looking messages in a very little time. This can make it easier to create fake accounts that look real and are nearly indistinguishable from \"real\" accounts, even for real humans</li> <li>Virtual, generated influencers are already a thing (https://www.theverge.com/23475447/digital-creators-avatars-diigitals-social-media-podcast-vergecast)</li> <li>How does this affect minors</li> </ul>"},{"location":"23FS/EAP/Presentation.html#qa-section","title":"QA Section","text":""},{"location":"23FS/EAP/Presentation.html#algorithmic-bias-can-be-useful","title":"Algorithmic Bias can be Useful","text":"<p>Having an algorithm with your bias can be really useful. For example, when searching for cats, it is helpful when the algorithm shows you cats that you like.</p>"},{"location":"23FS/EAP/Presentation.html#battle-against-bots","title":"Battle against Bots","text":"<p>A similar conundrum exists requiring everybody on a platform to be identified and speak under their real name to battle bots. While this would reduce the amount of bots spreading misinformation by coordinating attacking certain groups, but on the other hand, it would also harm people who are afraid of speaking out (Because of their government, their gender or similar).</p> <p>Additionally, when AI is used to find those accounts, similarly, AI will be used to circumvent these systems and fool the AI that they are real accounts.</p>"},{"location":"23FS/EAP/There%20is%20no%20Algorithm%20for%20Truth.html","title":"There is no Algorithm for Truth","text":""},{"location":"23FS/EAP/There%20is%20no%20Algorithm%20for%20Truth.html#para-social","title":"Para-Social","text":"<ul> <li>People watch videos/tv programs/... not for the content, but for the presenter</li> <li>Example: Twitch streamers</li> <li>Example: Presenters, like David Attenborough</li> <li>Even platforms advertise for this: Patreon example from talk</li> <li>In the TV days, there were gatekeepers (like an editor), but with YT and similar, everybody can upload something. Because people don't check, and just trust authority, misinformation can run rampant</li> </ul> <p>Why do you think that people watch streamers for hours at a time playing a game, they could play themselves? - Certainly not because of the game. Rather is is the para-social relationship between the streamer and the viewer.</p> <p>Parasocial is defined as a one-sided relationship and they were always a thing. In the TV day, people watched programs, like Top Gear or Planet Earth, because of their authoritative presenters.  </p> <p>But this gets problematic when they ask for money. On platforms, like patreons, creators have the ability to monetise viewers. In return the maybe provide behind the scene videos or pictures. Or other exclusive content. It gives the viewer the impression that they know the creator. What they are doing is, essentially, selling friendship.</p> <p>These two sentences are directly from a Patreon on how to gain more paying subscribers. The goal is clearly to make creators more human. That they are more like your school friend with which your share intimate moments. But they are not. Viewers think that they know their idol very well, even though, they never met them. And, conversely, the creator probably never met the viewer. There is such a power imbalance that there cannot be a genuine friendship.</p> <p>If you want more proof that para social relationships are working, look no further than ads on social media. The reason why company spend big bugs on product-integrations and shout outs is because they work. People trust their beloved creators, even if the creator declares the sponsor.</p> <p>But this, like parasocial relationships themselves, is nothing new. Actors in the 80s had phone lines where fans could pay to send their idol a message. That is quite expesnive for hearing a recorded message on the phone.</p> <p>Another issue is, that presenters may not be experts in the topic which they present. At least in case of TV documentaries, radio talk shows or newspaper columnist, there was an editor which proof-read stories. So there was some amount of quality control. It was worth to TV stations, like the BBC, to \"reuse\" loved presenters as it engaged viewers more.</p> <p>On social media, everybody has a metaphorical microphone, in which they can spout none-sens all day long, consciously or unconsciously. As we have already discussed, corrections are rarely seen by the same number of people who saw the original post. This means, misinformation spreads a lot easier these days.</p> <p>I do want to mention, that there are of course individuals who source all their content diligently. Channel like Tom Scott, Vertasium and many more do awesome work in the science communication field.</p>"},{"location":"23FS/EAP/There%20is%20no%20Algorithm%20for%20Truth.html#the-ai-revolution","title":"The AI Revolution","text":"<p>One way users and also</p>"},{"location":"23FS/EAP/There%20is%20no%20Algorithm%20for%20Truth.html#conclusion","title":"Conclusion","text":"<p>Let's quickly recap the presention</p> <p>First of all, I think, it is really important for everybody to realise that every algorithm has biases. Those can be extremely subtle, but can have enormous ramifications.</p> <p>Secondly, every recommendation algorithm lays on the spectrum of speech. Ranging from, everything which is legal is allowed, the Nazi Bar, to only opinions a group agrees up on is allowed, the Echo Chamber.</p> <p>Lastly, Para-social relationships are a powerful and sometimes dangerous tool. It can be leveraged to educate people on topics they otherwise might not have learned. But it is also used to spread misinformation and sell viewers products and \"friendships\".</p> <p>Currently, there is no algorithm which tells the truth, even though we sometimes desperately need it. But this means that our brains have to be this algorithm. As such, we have to be aware on how recommendation algorithms work and how parasocial relationships can trick our brain in to believing things it should.</p>"},{"location":"23FS/EAP/There%20is%20no%20Algorithm%20for%20Truth.html#discussion-questions","title":"Discussion Questions","text":"<ul> <li>What are advantages to bias algorithms?   It is handy to have search engines which are biased to your views. Say your looking for cat pictures, a search engine can show you only pictures of cats you like.</li> </ul>"},{"location":"23FS/HM2/Differentialgleichungen.html","title":"Differentialgleichungen","text":"<p>Eine gew\u00f6hnliche Differentialgleichung ist eine Gleichung, welche nur nach einer Variable abgeleitet wird: $$ \\frac{\\part y}{\\part t} = f(t, y(t)) $$ Im oben Beispiel ist es eine gew\u00f6hnliche Differentialgleichung 1. Ordnung, da nur einmal Abgeleitet wurde.</p> <p>Genereller ausgedr\u00fcckt, folgendes ist eine gew\u00f6hnliche Differentialgleichung \\(n\\)-ter Ordnung: $$ y^{(n)}(x) = f(x, y(x), y'(x), ..., y^{(n-1)}(x)) $$ Eine allgemeine L\u00f6sung f\u00fcr eine Differentialgleichung \\(n\\)-ter Ordnung hat \\(n\\) unabh\u00e4ngige Parameter (von den Integrationskonstanten).</p> <p>Differentialgleichungen, welche die folgende Form haben $$ \\frac{\\part n}{\\part t}=-\\lambda n $$ haben die L\u00f6sung \\(n(t)\\): $$ n(t)=n_0e^{-\\lambda t} $$</p>"},{"location":"23FS/HM2/Differentialgleichungen.html#anfangswertproblem","title":"Anfangswertproblem","text":"<p>Bei einem Anfangswertproblem wird, zus\u00e4tzlich zu der Gleichung, den Funktionswert bei \\(x_0\\), wie auch den Wert f\u00fcr jede ben\u00fctzte Ableitung bei dem selben Wert \\(x_0\\).</p> <p>Als Beispiel f\u00fcr folgende Funktion \\(s\\) wird \\(C_1\\) und \\(C_2\\) ben\u00f6tigt, damit ein Resultat berechnet werden kann. Es wird also \\(s(t=0)\\) und \\(s'(t=0)\\) ben\u00f6tigt, um das Anfangswertproblem zu l\u00f6sen. $$ s''=g\\ s(t)=\\frac 1 2 g t^2 + C_1t + C_2\\ s(t=0)=C_2\\ s'(t=0)=v(t=0)=C_1 $$</p>"},{"location":"23FS/HM2/Differentialgleichungen.html#richtungsfelder","title":"Richtungsfelder","text":"<p>Ein Richtungsfeld stellt die Steigung als Pfeile dar. Daf\u00fcr wurde in diesem Beispiel alle \\(y'\\) f\u00fcr alle Punkte berechnet und eingezeichnet.</p>"},{"location":"23FS/HM2/Differentialgleichungen.html#eulerverfahren","title":"Eulerverfahren","text":""},{"location":"23FS/HM2/Differentialgleichungen.html#klassisch","title":"Klassisch","text":"<p>Um eine L\u00f6sung f\u00fcr eine Differentialgleichung mit einem Richtungsfeld zu finden, kann eine Schrittweite \\(h\\) definiert werden. Jeder Punkt \\((x_i, y_i)\\) soll nun den Pfeilen im Feld folgen. Dies kann folgendermassen f\u00fcr eine Differentialgleichung \\(y'=f(x, y)\\) erledigt werden: $$ \\begin{align} x_{i+1} &amp;= x_i + h\\ y_{i+1} &amp;= y_i + y' \\cdot h \\         &amp;= y_i + f(x_i, y_i) \\cdot h \\end{align} $$ Zus\u00e4tzlich wird auch noch ein Startpunkt \\((x_0, y_0)\\) ben\u00f6tigt.</p>"},{"location":"23FS/HM2/Differentialgleichungen.html#mittelpunkt","title":"Mittelpunkt","text":"<p>Im Vergleich zum Eulerverfahren, wo die Steigung beim Punkt \\((x_i, y_i)\\) berechnet wird, wird beim Mittelpunkt-Verfahren die Steigung bei \\((x_i+\\frac h 2, y_i + \\frac h 2)\\) berechnet. </p> <p>Daf\u00fcr muss aber der Punkt \\((x_i+\\frac h 2, y_i + \\frac h 2)\\) zuerst berechnet werden. Daher ergibt sich folgendes: $$ \\begin{align} x_{h/2} &amp;= x_i + \\frac h 2\\ y_{h/2} &amp;= y_i + \\frac h 2 \\cdot f(x_i, y_i)\\ \\ x_{i+1} &amp;= x_i + h\\ y_{i+1} &amp;= y_i + f(x_{h/2}, y_{h/2}) \\cdot h \\end{align} $$</p>"},{"location":"23FS/HM2/Differentialgleichungen.html#modifiziert","title":"Modifiziert","text":"<p>Beim modifizierten Verfahren wird zuerst die Steigung bei \\((x_i, y_i)\\) und bei \\((x_{i+1}, y_{i+1})\\) berechnet. Danach wird der n\u00e4chste Punkt mit dem Mittel zwischen den beiden Steigungen den n\u00e4chsten Punkt berechnet.</p> <p></p>"},{"location":"23FS/HM2/Differentialgleichungen.html#fehler","title":"Fehler","text":"<p>Der lokaler Fehler ist definiert als: $$ \\varphi(x_i, h) := y(x_{i+1}) - y_{i+1} $$ Wenn der lokaler Fehler folgendermassen schreiben kann, dann hat es  die Konsistenzordnung \\(p\\): $$ \\varphi(x_i, h)\\le C\\cdot h^{p+1} $$ Ebenfalls gibt es ein globalen Fehler, welcher definiert ist als: $$ y(x_n)-y_n $$ Wenn der globalen Fehler folgendermassen schreiben kann, dann hat es folgende Konvergenzordnung \\(p\\): $$ |y(x_n)-y_n| \\le C\\cdot h^p $$ Wie auch an den Formeln von der Konsistenzordnung und Konvergenzordnung zu sehen ist, h\u00e4ngt dieser Fehler von der Schrittweite \\(h\\) ab.</p> <p></p> <p>Es ist interesant ein Verfahren mit der Konvergenzordnung \\(p\\ge 1\\) und \\(h&lt;1\\), da dann \\(C\\cdot h^p\\) gegen \\(0\\) strebt.</p> <p>F\u00fcr das Eulerverfahren gilt folgenden lokalen Fehler: $$ \\begin{align} \\varphi(x_n, h)=\\frac{h^2}{2}y''(z) &amp;&amp;\\text{, wobei } z \\in [x_n, x_n+h] \\end{align} $$ Das Mittelpunkt und modifizierte Eulerverfahren haben eine Konsistenz- und Konvergenzordnung \\(p=2\\).</p> <p>In der folgenden Abbildung ist der lokale Fehler f\u00fcr diverse Verfahren auf einem log-log Plot:</p> <p></p>"},{"location":"23FS/HM2/Differentialgleichungen.html#runge-kutta-verfahren","title":"Runge-Kutta Verfahren","text":"<p>Im Runge-Kutta-Verfahren wird zuerst die Steigung \\(k_1\\) bei \\(x_i\\) berechnet, dann \\(k_2\\) in der Mitte zwischen \\(x_i\\) und \\(x_{i+1}\\), \\(k_3\\) ist ebenfalls beim Mittelpunkt, aber mit der Steigung \\(k_2\\). Zuletzt wird \\(k_4\\) am Punkt \\(x_{i+1}\\) berechnet.</p> <p></p> <p>Die Konsistenz- und Konvergenzordnung von Runge-Kutta ist \\(p=4\\).</p>"},{"location":"23FS/HM2/Differentialgleichungen.html#allgemeines-s-stufiges-runge-kutta-verfahren","title":"Allgemeines s-stufiges Runge-Kutta-Verfahren","text":"<p>Das allgemeine s-stufige Runge-Kutta-Verfahren: $$ \\begin{align} k_n&amp;=f\\left(x_i + c_nh, y+h \\sum^{n-1}{m=1}a n=1,...,s\\ y_{i+1}&amp;=y_i+h\\sum^s_{n=1}b_nk_n \\end{align} $$ Dabei ist }k_m\\right) &amp;&amp; \\text{f\u00fcr \\(s\\in \\N\\) die Stufenzahl und \\(a_{nm}\\), \\(b_n\\) und \\(c_n\\) sind Konstante.</p> <p></p> <ul> <li>Euler-Verfahren: \\(s=1\\) </li> <li>Mittelpunkt-Verfahren: \\(s=2\\) </li> <li>Modifiziertes Euler-Verfahren: \\(s=2\\) </li> <li>Klassisches Runge-Kutta Verfahren: \\(s=4\\) </li> </ul>"},{"location":"23FS/HM2/Differentialgleichungen.html#differentialgleichung-system","title":"Differentialgleichung-System","text":"<p>Um ein Differentialgleichung-System zu l\u00f6sen, kann \\(y(x)\\) als vektorwertige Funktion geschrieben werden.</p> <p>Das Euler-Verfahren kann folgendermassen f\u00fcr Vektoren angepasst werden: $$ x_{i+1}=x_i + h\\ \\vec y_{i+1}=\\vec y_i + \\vec f(x_i, y_i)\\cdot h $$ Oben ist es mit dem klassischen Eulerverfahren beschrieben. Dies kann aber mit allen Eulerverfahren gel\u00f6st werden.</p>"},{"location":"23FS/HM2/Differentialgleichungen.html#beispiel","title":"Beispiel","text":"<p>Das folgende Beispiel kommt aus dem n\u00e4chsten Unterkapitel \"Differentialgleichung k-ter Ordnung zu DGL-System\". $$ \\begin{align} z_1'&amp;=z_2\\ z_2'&amp;=z_3\\ z_3'&amp;=10e^{\u2212x} \u2212 5z_3 \u2212 8z_2 \u2212 6z_3 \\end{align} $$ Zu dem gelten folgende Anfangswerte: $$ \\vec z(0)=\\begin{pmatrix}2 \\ 0 \\ 0\\end{pmatrix} $$ Nun kommen die Iterationen:</p> <p></p>"},{"location":"23FS/HM2/Differentialgleichungen.html#differentialgleichung-k-ter-ordnung-zu-dgl-system","title":"Differentialgleichung k-ter Ordnung zu DGL-System","text":"<p>Um eine Differentialgleichung mit Ableitungen h\u00f6her als erster Ableitungen zu l\u00f6sen gibt es einen Trick: $$ y'''+5y''+ 8y' + 6y = 10e^{-x} $$</p> <ol> <li> <p>Nachh der h\u00f6chsten Ableitung umformen:     \\(y''' = 10e^{\u2212x} \u2212 5y'' \u2212 8y' \u2212 6y\\)</p> </li> <li> <p>Alle Ableitungen von \\(y\\) tiefer als die h\u00f6chste Ableitungen durch \\(z_i\\) ersetzen:    \\(z_1=y, z_2=y', z_3=y''\\)</p> </li> <li> <p>Und in der Gleichung einsetzen    \\(y''' = 10e^{\u2212x} \u2212 5y'' \u2212 8y' \u2212 6y\\Rightarrow z_3'=y''' = 10e^{\u2212x} \u2212 5z_3 \u2212 8z_2 \u2212 6z_3\\)</p> </li> <li> <p>Es sind nun drei Gleichungen:     \\(z_1'=y'=z_2\\) \\(z_2'=y''=z_3\\) \\(z_3' = 10e^{\u2212x} \u2212 5z_3 \u2212 8z_2 \u2212 6z_3\\) </p> </li> <li> <p>In diesem Fall k\u00f6nnen sie auch vektoriel geschrieben werden:    \\(\\begin{pmatrix}z_2 \\\\ z_3 \\\\ 10e^{\u2212x} \u2212 5z_3 \u2212 8z_2 \u2212 6z_3 \\end{pmatrix}=\\begin{pmatrix}z_1' \\\\ z_2' \\\\ z_3'\\end{pmatrix}\\) </p> </li> </ol> <p>Mit der Start-Bedingungen: \\(\\vec z(0)=\\begin{pmatrix}0 \\\\ 0 \\\\ 0\\end{pmatrix}\\)</p>"},{"location":"23FS/HM2/Differentialgleichungen.html#stabilitat","title":"Stabilit\u00e4t","text":"<p>Wie stabil eine L\u00f6sung einer DGL ist h\u00e4ngt von dem benutzten Verfahren, der Schrittbreite und dem spezifischen Anfangsproblem ab.</p> <p></p>"},{"location":"23FS/HM2/Interpolation.html","title":"Interpolation","text":"<p>Gegeben sind \\(n+1\\) St\u00fctzpunkte/Wertpaare \\((x_i, y_i)\\), wobei \\(x_i \\neq x_i\\) f\u00fcr \\(i\\neq j\\) gelten muss. Gesucht ist nun eine stetige Funktion \\(g\\) mit der Eigenschaft \\(g(x_i)=y_i\\) f\u00fcr alle \\(i=0, ..., n\\)</p>"},{"location":"23FS/HM2/Interpolation.html#polynominterpolation","title":"Polynominterpolation","text":"<p>Wenn \\(n+1\\) St\u00fctzpunkte gegen sind, kann das Polynom \\(P_n(x)=a_0 + a_1x + a_2+x^2 + ... + a_nx^n\\)</p> <p>Wenn \\(x\\) ein Vektor ist, kann auch eine Vandermonde-Matrix gebildet werden: $$ \\begin{align} a_0 + a_1x_0 + a_2+x_0^2 + ... &amp;+ a_nx_0^n\\ a_0 + a_1x_1 + a_2+x_1^2 + ... &amp;+ a_nx_1^n\\ ...&amp; \\ a_0 + a_1x_n + a_2+x_n^2 + ... &amp;+ a_nx_n^n\\ \\end{align} $$</p> \\[ \\begin{pmatrix} 1 &amp; x_0 &amp; x_0^2 &amp; ... &amp; x_0^n\\\\ 1 &amp; x_1 &amp; x_1^2 &amp; ... &amp; x_1^n\\\\ &amp; &amp; &amp; ... \\\\ 1 &amp; x_n &amp; x_n^2 &amp; ... &amp; x_n^n\\\\ \\end{pmatrix} \\cdot \\begin{pmatrix} a_0 \\\\ a_1 \\\\ ... \\\\ a_n\\\\ \\end{pmatrix} = \\begin{pmatrix} y_0 \\\\ y_1 \\\\ ... \\\\ y_n\\\\ \\end{pmatrix} \\] <p>Diese Rechnung ist allerdings oft schlecht Konditioniert und wird f\u00fcr \\(n&gt; 20\\) St\u00fctzpunkte instabil. Ein m\u00f6glichen Ersatz ist das Lagrange Polynom</p>"},{"location":"23FS/HM2/Interpolation.html#lagrange-interpolation","title":"Lagrange Interpolation","text":"<p>Das Lagrange Polynom kann f\u00fcr \\(n\\) St\u00fctzpunkte berechnet werden und ergibt ein Polynom mit dem Rang \\(n-1\\). $$ P_n(x)=\\sum^n_{i=0}I_i(x)y_i\\ I_i(x)=\\prod^n_{\\substack{j=0\\i\\neq j}}\\frac{x-x_j}{x_i-x_j} $$ Der maximale absoluten Fehler der dabei entstehen kann ist: $$ |f(x)-P_n(x)| \\le \\frac{|(x-x_0)(x-x_1)...(x-x_n)|}{(n+1)!}\\cdot(\\max_{x0\\le \\xi \\le x_n}|f^{(x+1)}(\\xi)|) $$ Als Bemerkung \\(f^{(x+1)}\\) ist die \\((x+1)\\)-te Ableitung</p> <p>Da f\u00fcr die Fehlerberechnung die eigentliche Funktion \\(f\\) ben\u00f6tigt wird, ist dies recht nutzlos.</p>"},{"location":"23FS/HM2/Interpolation.html#spline-interpolation","title":"Spline Interpolation","text":"<p>Es wird f\u00fcr jedes Intervall \\([x_i, x_{i+1}]\\) (f\u00fcr \\(i=0, 1, 2,, ..., n-1\\)) wird ein Polynom \\(s_i\\) angesetzt. Das Polynom muss folgende Gleichungen erf\u00fcllen:</p> <ul> <li>Es muss durch alle Punkte im Intervall \\([x_i, x_{i+1}]\\) gehen   \\(s_i(x_i)=y, s_i(x_{i+1})=y_{i+1}, ...\\)</li> <li>Der \u00dcbergang zwischen den Polynomen muss stetig sein   \\(s_i(x_{i+1})=s_{i+1}(x_{i+1})\\)</li> <li>Es darf kein Knick beinhalten   \\(s_i'(x_{i+1})=s_{i+1}'(x_{i+1})\\)</li> <li>Die Kr\u00fcmmung von zwei Splines soll auch gleich sein   \\(s_i''(x_{i+1})=s_{i+1}''(x_{i+1})\\)</li> </ul> <p></p> <p>Um die Spline von oben zu berechnen, k\u00f6nnen nun folgende Polynome definiert werden: $$ \\begin{align} S_0&amp;=a_0+b_0(x-x_0)+c_0(x-x_0)^2 + d_0(x-x_0)^3 &amp;, x\\in [x_0, x_1] \\ S_1&amp;=a_1+b_1(x-x_1)+c_1(x-x_1)^2 + d_1(x-x_1)^3 &amp;, x\\in [x_1, x_2]\\ S_2&amp;=a_2+b_2(x-x_2)+c_2(x-x_2)^2 + d_2(x-x_2)^3 &amp;, x\\in [x_2, x_3]\\ \\end{align} $$ Aus diesen k\u00f6nnen nun folgendes Gleichungssytem aufgestellt werden: $$ \\begin{align} S_0(x_0)&amp;=y_0\\ S_1(x_1)&amp;=y_1 \\ S_2(x_2)&amp;=y_2 \\ S_2(x_3)&amp;=y_3 \\ \\ S_0(x_1)&amp;=S_1(x_1)\\ S_1(x_2)&amp;=S_2(x_2)\\ \\ S_0'(x_1)&amp;=S_1'(x_1)\\ S_1'(x_2)&amp;=S_2'(x_2)\\ \\ S_0''(x_1)&amp;=S_1''(x_1)\\ S_1'0(x_2)&amp;=S_2''(x_2)\\ \\end{align} $$ Dies sind aber \"nur\" 10 Gleichungen, nicht die ben\u00f6tigten 12. Daher gibt es noch zus\u00e4tzliche Bediungen:</p> <ul> <li>nat\u00fcrliche kubische Splinefunktion   \\(S_0''(x_0)=0, S_2(x_3)''=0\\)</li> <li>peridodische kubische Splinefunktion   \\(S_0'(x0)=S_2'(x_3), S_0''(x0)=S_2''(x_3)\\)</li> <li>kubische Spliefunktion (mit not-a-knot Bedinungen)   \\(S_0'''(x_1)=S_1'''(x_1), S_1'''(x_2)=S_2'''(x_2)\\)</li> </ul>"},{"location":"23FS/HM2/Interpolation.html#algorithmus","title":"Algorithmus","text":"<p>F\u00fcr \\(n+1\\) St\u00fctzpunkte werden \\(n\\) Gleichungen nach der Form \\(S_i=a_i+b_i(x-x_i)+c_i(x-x_i)^2 + d_i(x-x_i)^3, x\\in [x_i, x_{i+1}]\\) gesucht. Daf\u00fcr kann folgender Algorithmus f\u00fcr jedes \\(S_i\\) angewendet werden:</p> <ol> <li>Wenn die nat\u00fcrliche kubische Splinefunktion gesucht ist, wird \\(c\\) auf \\(0\\) gesetzt damit die zweite Ableitung \\(0\\) ergibt    \\(c_0=0, c_n=0\\)</li> <li>F\u00fcr jedes Polynom \\(S_i\\)</li> <li>\\(a_i=y_i\\)</li> <li>Die Breite des Intervalles       \\(h_i=x_{i+1}-x_i\\)</li> <li>\\(c_i\\) bestimmen</li> <li>\\(b_i\\) und \\(d_i\\) f\u00fcr jedes \\(S_i\\) bestimmen</li> <li>\\(b_i=\\frac{y_{i+1}-y_i}{h_i}-\\frac{h_i}{3}(c_{i+1}+2c_i)\\)</li> <li>\\(d_i=\\frac 1{3h_i}(c_{i+1}-c_i)\\)</li> </ol> <p>F\u00fcr das Beispiel \\(...\\):</p> \\(i\\) 0 1 2 3 \\(x_i\\) 0 1 2 3 \\(y_i\\) 2 1 2 2 \\(a_i\\) 2 1 2 - \\(h_i\\) 1 1 1 - \\(c_i\\) 0 ? ? 0 <p>Um \\(c_1\\) und \\(c_2\\) zu finden kann folgendes Gleichungssystem gel\u00f6st werden: $$ A=\\begin{pmatrix} 2(h_0+g_1) &amp; h_1 \\ h_1 &amp; 2(h_1+h_2) \\end{pmatrix} \\ \\vec z = \\begin{pmatrix} 3\\frac{y_2 - y_1}{h_1} - 3\\frac{y_1-y_0}{h_0}\\ 3\\frac{y_3 - y_2}{h_2} - 3\\frac{y_2-y_1}{h_1}\\ ... \\ 3\\frac{y_n - y_{n-1}}{h_{n-1}} - 3\\frac{y_{n_1}-y_{n-2}}{h_{n-}}\\ \\end{pmatrix}\\ A \\cdot \\begin{pmatrix}c_1 \\ c_2 \\end{pmatrix} = \\vec z $$</p>"},{"location":"23FS/HM2/Interpolation.html#lineare-ausgleichunsrechnung","title":"Lineare Ausgleichunsrechnung","text":"<p>Es wird eine Funktion gesucht, in der Form: $$ f(x)=\\lambda_1f_1(x)+... + \\lambda_mf_m(x) $$ Ein m\u00f6gliches Beispiel w\u00e4re: \\(f(x)=\\lambda_1 \\cdot \\underbrace{1}_{f_1(x)} + \\lambda_2\\cdot \\underbrace x_{f_2(x)} + \\lambda_3 \\cdot \\underbrace{x^2}_{f_3(x)}\\)</p> <p>Um nun die \\(\\lambda\\)s zu finden, damit \\(f(x)\\) Datenpunkte nachgeht, muss der Fehler \\(E(f)\\) zu den Datenpunkten minimieren:</p> <p>$$ E(f)=w\\cdot||y_f-(x)||2^2 = \\sum^nw_i\\cdot (y_i - f(x_i))^2 $$ Mit \\(w\\) kann ein Punkt st\u00e4rker oder schw\u00e4cher gewichtet werden</p> <p>Um dies zu minimieren, wird die Ableitung von \\(E(f)=0\\) gesetzt:</p> <p></p> <p>Aus dem folgt:</p> <p></p> <p></p> <p>Dies funktioniert allerdings nur f\u00fcr eine Gerade. Die selbe Methode kann aber auch f\u00fcr h\u00f6here Polynomen verwendet werden: $$ E(f)=||\\vec y-f(\\vec x)||2^2=\\sum^n\\lambda_jf_j(x_i)\\right)^2=||\\vec y-A\\lambda||_2^2 $$ Mit folgender Matrix }(y_i-f(x_i))^2 = \\sum^n_{i=1}\\left(y_i - \\sum^m_{j=1\\(A\\):  </p> <p>Die Gleichung \\(E(f)=0\\) hat nur im Spezialfall eine L\u00f6sung, wenn \\(m=n\\) und wenn die Funktion \\(f\\) durch alle Punkte geht.</p>"},{"location":"23FS/HM2/Interpolation.html#normalgleichungen","title":"Normalgleichungen","text":"<p>Um \\(E(f)\\) zu minimieren muss die erste Ableitung von \\(E'(f)=0\\) sein. Daher muss \\(E(f)\\) nach jedem \\(\\lambda\\) abgeleitet werden: $$ \\frac{\\part E(f)(\\lambda_1, ..., \\lambda_m)}{\\part \\lambda_j}=0 , j=0,...,m $$ Dies nennt sich eine Normalgleichung und l\u00e4sst sich als \\(A^TA\\lambda=A^Ty\\). </p> <p>\\(A\\) ist oft schlecht konditioniert und die L\u00f6sung sollte daher mit dem QR-Verfahren gel\u00f6st werden. </p>"},{"location":"23FS/HM2/Interpolation.html#linearisieren","title":"Linearisieren","text":"<p>Falls eine \\(f\\) Funktion auf den ersten Blick nicht linear erscheint, kann sie eventuell linearisiert werden.</p> <p>Z.B. die Funktion \\(ae^{bx}\\) kann mit \\(\\log_e\\) linearisiert werden.</p> <p></p> <p></p>"},{"location":"23FS/HM2/Interpolation.html#nicht-lineare-ausgleichsrechnung","title":"Nicht-Lineare Ausgleichsrechnung","text":"\\[ f(\\lambda_1, \\lambda_2, ..., \\lambda_m, x)=... \\] <p>Das allgemeine Ausgleichsproblem besteht darin folgendes \\(E\\) zu minimieren:</p> <p></p> <p>Die Ableitung von \\(E\\) wird auf \\(E'(f)=0\\) gesetzt. Daf\u00fcr kann das Gauss-Newton-Verfahren.</p>"},{"location":"23FS/HM2/Interpolation.html#gauss-newton-verfahren","title":"Gauss-Newton-Verfahren","text":"<p>Das Quadratmittelproblem ist es einen Vektor \\(x\\in\\R^m\\) zu finden, welcher die Fehlerfunktional \\(E: \\R^m \\to \\R:=||g(x)||_2^2\\) minimiert. \\(E\\) geh\u00f6rt zur Funktion \\(g: \\R^m \\to \\R^n\\)</p> <p>\\(g\\) wird nun definiert als \\(g(\\lambda):=y-f(\\lambda)\\).</p> <p>Um nun f\u00fcr eine nicht lineare Funktionen \\(f\\) eine L\u00f6sung zu finden, muss \\(f\\) linearisiert werden: $$ \\begin{align} g(\\lambda)&amp;\\approx g(\\lambda_0)+Dg(\\lambda_0)\\cdot(\\lambda - \\lambda_0)\\ \\ Dg(x)&amp;=\\begin{pmatrix} \\frac{\\partial g_1}{\\partial x_1}(\\vec x) &amp; \\frac{\\partial g_1}{\\partial x_2}(\\vec x) &amp; ... &amp; \\frac{\\partial g_1}{\\partial x_n}(\\vec x) \\</p> <p>\\frac{\\partial g_2}{\\partial x_1}(\\vec x) &amp; \\frac{\\partial g_2}{\\partial x_2}(\\vec x) &amp; ... &amp; \\frac{\\partial g_2}{\\partial x_n}(\\vec x) \\</p> <p>... &amp; ... &amp; ... &amp; ... \\ \\frac{\\partial g_m}{\\partial x_1}(\\vec x) &amp; \\frac{\\partial g_m}{\\partial x_2}(\\vec x) &amp; ... &amp; \\frac{\\partial g_m}{\\partial x_n}(\\vec x) \\ \\end{pmatrix} \\end{align} $$ \\(E\\) kann nun folgendermassen definiert werden: $$ \\tilde E(\\lambda) = ||\\underbrace{g(\\lambda_k)}{\\tilde y} + \\underbrace{Dg(\\lambda_k)}_\\delta||_2^2 $$ Wobei } \\cdot \\underbrace{(\\lambda-\\lambda_k)\\(k=0,1,...\\) ist.  </p> <p>Dies kann nun wie eine lineare Gleichung gel\u00f6st werden: $$ Dg(\\lambda_k)^TDg(\\lambda_k)\\delta_k=-Dg(\\lambda_k)^T\\cdot g(\\lambda_k) $$ Oder mit dem QR-Verfahren: $$ Dg(\\lambda_k)=Q_kR_k\\ R_k\\lambda_k=-Q_k^Tg(\\lambda_k) $$ F\u00fcr jedes \\(k\\) wird nun \\(\\tilde E\\) minimiert, bzw. die obere Gleichung aufgel\u00f6st. </p> <p>Das n\u00e4chste \\(\\lambda\\) kann wie folgt ausgerechnet wird: $$ \\lambda_{k+1}=\\lambda_k+\\delta_k $$</p>"},{"location":"23FS/HM2/Interpolation.html#gedampftes-gauss-newton-verfahren","title":"Ged\u00e4mpftes Gauss-Newton-Verfahren","text":"<p>Das ged\u00e4mpte Gauss-Netwon-Verfahren funktioniert gleich, wie das \"normale\" Verfahren, nur das \\(\\delta_k\\) verkleinert wird.</p> <p>Um das \\(\\delta_k\\) f\u00fcr die n\u00e4chste Iteration zu finden, soll folgende f\u00fcr folgende Formel das minimale \\(p\\in{0, 1, ..., p_{max}}\\) gefunden werden $$ ||g\\left(\\lambda_k+\\frac{\\delta_k}{2^p}\\right)||2^2 &lt; ||g(\\lambda_k)||_2^2 $$ \\(\\lambda_{k+1}\\) wird nun folgendermassen berechnet: $$ \\lambda $$ Falls kein minimales }=\\lambda_k+\\frac{\\delta_k}{2^p\\(p\\) gefunden werden kann, wird mit \\(p=0\\) gerechnet.</p>"},{"location":"23FS/HM2/Nichtlineare%20Gleichungssysteme.html","title":"Nichtlineare Gleichungssysteme","text":""},{"location":"23FS/HM2/Nichtlineare%20Gleichungssysteme.html#multivariate-funktionen","title":"Multivariate Funktionen","text":""},{"location":"23FS/HM2/Nichtlineare%20Gleichungssysteme.html#skalarwertige-funktion","title":"Skalarwertige Funktion","text":"<p>Eine Funktion, welche mehrere \\(x\\)-Werte nimmt und ein \\(y\\)-Wert zur\u00fcck gibt. $$ f:  \\mathbb R ^n \\to \\mathbb R \\ y = f(x_1, x_2, ..., x_n) $$</p>"},{"location":"23FS/HM2/Nichtlineare%20Gleichungssysteme.html#vektorwertige-funktion","title":"Vektorwertige Funktion","text":"<p>Eine Funktion, welche mehrere \\(x\\)-Werte nimmt und mehrere \\(y\\)-Werte zur\u00fcck gegeben $$ f: \\mathbb R^n \\to \\mathbb R^m \\ (y_1, y_2, ..., y_m) = f(x_1, x_2, ..., x_n) $$</p>"},{"location":"23FS/HM2/Nichtlineare%20Gleichungssysteme.html#explizite-und-implizite-funktionen","title":"Explizite und implizite Funktionen","text":"<p>Explizite Funktionen haben die folgende Form: \\(y=f(x_1, x_2, ..., x_n)\\)</p> <p>Implizite Funktionen haben die folgende Form: \\(F(x_1, x_2, ..., x_n, y)=0\\)</p>"},{"location":"23FS/HM2/Nichtlineare%20Gleichungssysteme.html#partielle-ableitung","title":"Partielle Ableitung","text":"<p>Um die Funktion \\(z=f(x, y) = 2x^2 + 5 y\\) abzuleiten, kann nach \\(x\\) und \\(y\\) separat abgeleitet werden: $$ \\begin{align} \\text{nach }x: \\frac{\\partial f}{\\partial x} &amp;= 4x + 0 \\ \\text{nach }y: \\frac{\\partial f}{\\partial y} &amp;= 0 + 5 \\ \\end{align} $$ Diese Ableitung kann folgendermassen visualisiert werden:</p> <p></p>"},{"location":"23FS/HM2/Nichtlineare%20Gleichungssysteme.html#jacobi-matrix","title":"Jacobi-Matrix","text":"<p>F\u00fcr die Funktion \\(f: \\mathbb R^n \\to \\mathbb R^m\\) mit \\(\\vec y = f(\\vec x)=\\begin{pmatrix}y_1=f_1(\\vec x) \\\\ y_2 = f_2(\\vec x)\\\\ ... \\\\ y_m=f_m(\\vec x)\\end{pmatrix}\\) und \\(\\vec x = (x_1, x_2, ..., x_n)^T\\) ist die Jacobi-Matrix das folgende: $$ Df(x)=\\begin{pmatrix} \\frac{\\partial f_1}{\\partial x_1}(\\vec x) &amp; \\frac{\\partial f_1}{\\partial x_2}(\\vec x) &amp; ... &amp; \\frac{\\partial f_1}{\\partial x_n}(\\vec x) \\</p> <p>\\frac{\\partial f_2}{\\partial x_1}(\\vec x) &amp; \\frac{\\partial f_2}{\\partial x_2}(\\vec x) &amp; ... &amp; \\frac{\\partial f_2}{\\partial x_n}(\\vec x) \\</p> <p>... &amp; ... &amp; ... &amp; ... \\ \\frac{\\partial f_m}{\\partial x_1}(\\vec x) &amp; \\frac{\\partial f_m}{\\partial x_2}(\\vec x) &amp; ... &amp; \\frac{\\partial f_m}{\\partial x_n}(\\vec x) \\ \\end{pmatrix} $$ In dieser Matrix ist in einer Reihe alle m\u00f6glichen partiellen Ableitungen f\u00fcr \\(f_1(\\vec x)\\)</p>"},{"location":"23FS/HM2/Nichtlineare%20Gleichungssysteme.html#linearisierung","title":"Linearisierung","text":"<p>Eine Approximation f\u00fcr \\(y=f(x)\\) kann mit \\(f(x)\\approx f(x_0) + f'(x-x_0)\\).</p> <p>Dasselbe kann auch f\u00fcr eine multivariante Funktion mithilfe der Jacobi-Matrix getan werden: \\(g(\\vec x)=f(\\vec {x_0}) + Df(\\vec {x_0})\\cdot (\\vec x-\\vec {x_0})\\) </p> <p>(\\(Df(\\vec x)\\) ist die Jacobi-Matrix)</p> <p>Nach dem Linearisieren wird ein nichtlineare Funktion lineare und kann mit bekannten Verfahren gel\u00f6st werde</p>"},{"location":"23FS/HM2/Nichtlineare%20Gleichungssysteme.html#newton-verfahre","title":"Newton-Verfahre","text":"<p>Das Newton-Verfahren erwartet, dass \\(f(\\vec x_n)=\\vec 0\\) gilt.</p> \\[ \\vec x_{n+1}=\\vec x_n-(Df(\\vec x_n))^{-1}\\cdot f(\\vec x_n) \\] <p>Um nicht die Jacobi-Matrix invertieren zu m\u00fcssen, kann folgender Trick angewendet werden: $$ \\vec \\delta_n :=-(Df(\\vec x_n))^{-1}\\cdot f(\\vec x_n)\\ \\text{Dies kann in folgendes Umgewandlet werden:}\\ Df(\\vec x_n)\\cdot \\vec\\delta x_n = -f(\\vec x_n) $$ Die Gleichung \\(Df(\\vec x_n)\\cdot \\vec\\delta x_n = -f(\\vec x_n)\\) ist ein lineares Gleichungssystem, welches relativ einfach gel\u00f6st werden kann. Danach kann \\(\\vec \\delta _n\\) anstelle von \\(-(Df(\\vec x_n))^{-1}\\cdot f(\\vec x_n)\\) verwendet werden: \\(\\vec x_{n+1}=\\vec x_n+\\vec \\delta_n\\)</p> <p>Das Newton-Verfahren konvergiert quadratisch f\u00fcr nah genug an einer Nullstelle \\(\\overline x\\) liegende Startwerte, wenn \\(Df(\\overline x)\\) regul\u00e4r und \\(f\\) dreimal stetig differenzierbar ist.</p> <p>F\u00fcr eine Nichtregul\u00e4re Matrix A gilt \\(\\det(A)\\ne 0\\)</p> <p>M\u00f6gliche Abbruchskriterien sind:</p> <ul> <li>\\(n &gt; n_{max}\\)</li> <li>\\(||\\vec x_{n+1}-\\vec x_n||\\le ||\\vec x_{n+1}||\\cdot \\varepsilon\\)</li> <li>\\(||\\vec x_{n+1}-\\vec x_n||\\le \\varepsilon\\)</li> <li>\\(||f(\\vec x_{n+1})||\\le \\varepsilon\\)$</li> </ul>"},{"location":"23FS/HM2/Nichtlineare%20Gleichungssysteme.html#vereinfachtes-newton-verfahren","title":"Vereinfachtes Newton-Verfahren","text":"<p>Beim regul\u00e4ren Newton-Verfahren muss bei jeden Iterationsschritt die Jacobi-Matrix \\(Df(\\vec x)\\) neuberechnen. Beim vereinfachten Newton-Verfahren wird \\(Df(\\vec x)\\) nur f\u00fcr den Startvektor berechnet. $$ \\vec x_{n+1}=\\vec x_n-(Df(\\vec x_0))^{-1}\\cdot f(\\vec x_n)\\ Df(\\vec x_0)\\cdot \\vec\\delta x_n = -f(\\vec x_n) $$ Wegen dieser Vereinfachung kovergiert das Verfahren nur noch linear gegen die Nullstelle, wenn \\(Df(\\overline x)\\) nicht regul\u00e4r ist.</p>"},{"location":"23FS/HM2/Nichtlineare%20Gleichungssysteme.html#gedamptes-newton-verfahren","title":"Ged\u00e4mptes Newton-Verfahren","text":"<p>Wenn \\(Df(\\vec x_n)\\) schlecht konvergiert, dann kann nicht generell erwartet werden, dass \\(\\vec x_{n+1}=\\vec x_n + \\vec \\delta_n\\) nicht gilt.</p> <p></p> <p>F\u00fcr das ged\u00e4mpfte Newton-Verfahren werden folgende Schritte angewendet:</p> <ol> <li>Berechne \\(\\delta_n\\) mit \\(Df(\\vec x_n)\\delta_n=-f(\\vec x_n)\\) ausgerechnet</li> <li>Finde das minimale \\(k\\in \\{0, 1, ...\\}\\) f\u00fcr das gilt: \\(||f(\\vec x_n + \\frac{\\vec \\delta_n}{2^k})||_2 &lt; ||f(\\vec x_n)||_2\\)</li> <li>Wenn kein \\(k\\) gefunden wird, soll mit \\(k=0\\) weiter gerechnet werden</li> <li>Nun soll die Iterationsgleichung \\(\\vec x_{n+1}=\\vec x_n + \\frac{\\vec \\delta_n}{2^k}\\) verwendet werden</li> </ol>"},{"location":"23FS/HM2/Numerische%20Integration.html","title":"Numerische Itegration","text":""},{"location":"23FS/HM2/Numerische%20Integration.html#rechteck-trapezregel","title":"Rechteck- &amp; Trapezregel","text":"<p>Die folgenden formel ziehen ein Rechteck, bzw. Trapez \u00fcber das ganze Integral. </p> <p>$$ \\text{Das Integral}\\ \\int_a^b f(x)\\mathrm d x\\ \\ \\text{kann folgendermassen approximiert werden}\\ Rf=f\\left(\\frac{a+b}{2}\\right) \\cdot (b - a)\\ Tf=\\frac{f(a) + f(b)} 2 \\cdot (b - a) $$ (Rf = Rechtecksregel, Tf = Trapezregel)</p> <p>F\u00fcr die summierte Rechteck- &amp; Trapezregel wird das Integral in kleinere Schritte mit der breite \\(h\\) unterteilt.</p> <p>$$ Rf(h)=h\\cdot \\sum^{n-1}{i=0} f(x_i +\\frac h 2)\\ Tf(h)=h\\cdot \\left(\\frac{f(a) + f(b)}{2} +\\sum^{n-1} f(x_i) \\right)\\ \\text{wobei gilt} x_i=a+i\\cdot h\\ h=\\frac{b-a} n $$ </p>"},{"location":"23FS/HM2/Numerische%20Integration.html#simpsonregel","title":"Simpsonregel","text":"<p>F\u00fcr das l\u00f6sen eines Segments m\u00fcssen folgende Formel ausgerechnet werden. Dabei wird das Polynom \\(p(x)=\\alpha+\\beta(x-a) + \\gamma(x-a)(x-b)\\) verwendet.</p> <p></p> <p>Da \\(f(x)\\approx p(x)\\) gilt, kann das Polynom integriert werden:</p> <p></p> <p>Die Regel oben haben nur ein Segment benutzt. Wie aber auch bei der Rechtecks- und Trapezregel, kann auch hier die summierte Simpsonregel verwendet werden. $$ Sf(h)=\\frac h 3 \\left(\\frac 1 2 f(a) + \\sum^{n-1}{i=1} f(x_i)  + 2 \\sum^n \\right) + \\frac 1 2 f(b) \\right) $$ Die Simpsonsregel kann auch mit dem Rechtecks- und Trapezregel berechnet werden: $$ Sf(h)=\\frac 1 3 (Tf(h) + 2 Rf(h)) $$} f\\left (\\frac{x_{i-1}+x_i}{2</p>"},{"location":"23FS/HM2/Numerische%20Integration.html#fehlerabschatzung","title":"Fehlerabsch\u00e4tzung","text":""},{"location":"23FS/HM2/Numerische%20Integration.html#gaussformel","title":"Gaussformel","text":"<p>Die folgenden Formel bestimmen das Integral zwischen \\(a\\) und \\(b\\), wenn es \\(n\\) St\u00fctzpunkte gibt. Dabei m\u00fcssen die St\u00fctzpunkte nicht \u00e4quidistant sein.</p> <p></p>"},{"location":"23FS/HM2/Numerische%20Integration.html#romberg-extrapolation","title":"Romberg Extrapolation","text":"<p>Die Rekursion wird ausgerechnet bis \\(k=0\\) wird, da dann die Formel \\(T_{j0}=Tf\\left(\\frac{b-a}{2^j}\\right)\\)</p> <p>Da die Werte von \\(f(...)\\) immer in \\(T_{j0}\\) wiederverwendet werden, kann dies mit der folgenden Formel vereinfacht werden: $$ T_{j0}=\\frac 1 2 T_{j-1,0}+h_j\\sum^{n_{j-1}}_{i=1}f(a+(2i-1)h_j) $$  Die zweite Spalte \\(T_{j1}\\) kann mit der Simpson-Regel berechnet werden: $$</p> <p>$$</p> <p>Die folgende Graphik zeigt die oben abgebildete Rekursion:</p> <p></p> <p>Die folgenden zwei Graphen zeigen \\(T_{00}\\) und \\(T_{10}\\). Wenn \\(j\\) um <code>1</code> h\u00f6her wird, wird die X-Achse halbiert. Dasselbe gilt f\u00fcr \\(T_{30}\\) und \\(T_{40}\\)</p> <p></p> <p></p>"},{"location":"23FS/HM2/summary/all.html","title":"Differentialgleichungen","text":"<p>Eine gew\u00f6hnliche Differentialgleichung ist eine Gleichung, welche nur nach einer Variable abgeleitet wird: $$ \\frac{\\part y}{\\part t} = f(t, y(t)) $$ Im oben Beispiel ist es eine gew\u00f6hnliche Differentialgleichung 1. Ordnung, da nur einmal Abgeleitet wurde.</p> <p>Genereller ausgedr\u00fcckt, folgendes ist eine gew\u00f6hnliche Differentialgleichung \\(n\\)-ter Ordnung: $$ y^{(n)}(x) = f(x, y(x), y'(x), ..., y^{(n-1)}(x)) $$ Eine allgemeine L\u00f6sung f\u00fcr eine Differentialgleichung \\(n\\)-ter Ordnung hat \\(n\\) unabh\u00e4ngige Parameter (von den Integrationskonstanten).</p> <p>Differentialgleichungen, welche die folgende Form haben $$ \\frac{\\part n}{\\part t}=-\\lambda n $$ haben die L\u00f6sung \\(n(t)\\): $$ n(t)=n_0e^{-\\lambda t} $$</p>"},{"location":"23FS/HM2/summary/all.html#anfangswertproblem","title":"Anfangswertproblem","text":"<p>Bei einem Anfangswertproblem wird, zus\u00e4tzlich zu der Gleichung, den Funktionswert bei \\(x_0\\), wie auch den Wert f\u00fcr jede ben\u00fctzte Ableitung bei dem selben Wert \\(x_0\\).</p> <p>Als Beispiel f\u00fcr folgende Funktion \\(s\\) wird \\(C_1\\) und \\(C_2\\) ben\u00f6tigt, damit ein Resultat berechnet werden kann. Es wird also \\(s(t=0)\\) und \\(s'(t=0)\\) ben\u00f6tigt, um das Anfangswertproblem zu l\u00f6sen. $$ s''=g\\ s(t)=\\frac 1 2 g t^2 + C_1t + C_2\\ s(t=0)=C_2\\ s'(t=0)=v(t=0)=C_1 $$</p>"},{"location":"23FS/HM2/summary/all.html#richtungsfelder","title":"Richtungsfelder","text":"<p>Ein Richtungsfeld stellt die Steigung als Pfeile dar. Daf\u00fcr wurde in diesem Beispiel alle \\(y'\\) f\u00fcr alle Punkte berechnet und eingezeichnet.</p>"},{"location":"23FS/HM2/summary/all.html#eulerverfahren","title":"Eulerverfahren","text":""},{"location":"23FS/HM2/summary/all.html#klassisch","title":"Klassisch","text":"<p>Um eine L\u00f6sung f\u00fcr eine Differentialgleichung mit einem Richtungsfeld zu finden, kann eine Schrittweite \\(h\\) definiert werden. Jeder Punkt \\((x_i, y_i)\\) soll nun den Pfeilen im Feld folgen. Dies kann folgendermassen f\u00fcr eine Differentialgleichung \\(y'=f(x, y)\\) erledigt werden: $$ \\begin{align} x_{i+1} &amp;= x_i + h\\ y_{i+1} &amp;= y_i + y' \\cdot h \\         &amp;= y_i + f(x_i, y_i) \\cdot h \\end{align} $$ Zus\u00e4tzlich wird auch noch ein Startpunkt \\((x_0, y_0)\\) ben\u00f6tigt.</p>"},{"location":"23FS/HM2/summary/all.html#mittelpunkt","title":"Mittelpunkt","text":"<p>Im Vergleich zum Eulerverfahren, wo die Steigung beim Punkt \\((x_i, y_i)\\) berechnet wird, wird beim Mittelpunkt-Verfahren die Steigung bei \\((x_i+\\frac h 2, y_i + \\frac h 2)\\) berechnet. </p> <p>Daf\u00fcr muss aber der Punkt \\((x_i+\\frac h 2, y_i + \\frac h 2)\\) zuerst berechnet werden. Daher ergibt sich folgendes: $$ \\begin{align} x_{h/2} &amp;= x_i + \\frac h 2\\ y_{h/2} &amp;= y_i + \\frac h 2 \\cdot f(x_i, y_i)\\ \\ x_{i+1} &amp;= x_i + h\\ y_{i+1} &amp;= y_i + f(x_{h/2}, y_{h/2}) \\cdot h \\end{align} $$</p>"},{"location":"23FS/HM2/summary/all.html#modifiziert","title":"Modifiziert","text":"<p>Beim modifizierten Verfahren wird zuerst die Steigung bei \\((x_i, y_i)\\) und bei \\((x_{i+1}, y_{i+1})\\) berechnet. Danach wird der n\u00e4chste Punkt mit dem Mittel zwischen den beiden Steigungen den n\u00e4chsten Punkt berechnet.</p> <p></p>"},{"location":"23FS/HM2/summary/all.html#fehler","title":"Fehler","text":"<p>Der lokaler Fehler ist definiert als: $$ \\varphi(x_i, h) := y(x_{i+1}) - y_{i+1} $$ Wenn der lokaler Fehler folgendermassen schreiben kann, dann hat es  die Konsistenzordnung \\(p\\): $$ \\varphi(x_i, h)\\le C\\cdot h^{p+1} $$ Ebenfalls gibt es ein globalen Fehler, welcher definiert ist als: $$ y(x_n)-y_n $$ Wenn der globalen Fehler folgendermassen schreiben kann, dann hat es folgende Konvergenzordnung \\(p\\): $$ |y(x_n)-y_n| \\le C\\cdot h^p $$ Wie auch an den Formeln von der Konsistenzordnung und Konvergenzordnung zu sehen ist, h\u00e4ngt dieser Fehler von der Schrittweite \\(h\\) ab.</p> <p></p> <p>Es ist interesant ein Verfahren mit der Konvergenzordnung \\(p\\ge 1\\) und \\(h&lt;1\\), da dann \\(C\\cdot h^p\\) gegen \\(0\\) strebt.</p> <p>F\u00fcr das Eulerverfahren gilt folgenden lokalen Fehler: $$ \\begin{align} \\varphi(x_n, h)=\\frac{h^2}{2}y''(z) &amp;&amp;\\text{, wobei } z \\in [x_n, x_n+h] \\end{align} $$ Das Mittelpunkt und modifizierte Eulerverfahren haben eine Konsistenz- und Konvergenzordnung \\(p=2\\).</p> <p>In der folgenden Abbildung ist der lokale Fehler f\u00fcr diverse Verfahren auf einem log-log Plot:</p> <p></p>"},{"location":"23FS/HM2/summary/all.html#runge-kutta-verfahren","title":"Runge-Kutta Verfahren","text":"<p>Im Runge-Kutta-Verfahren wird zuerst die Steigung \\(k_1\\) bei \\(x_i\\) berechnet, dann \\(k_2\\) in der Mitte zwischen \\(x_i\\) und \\(x_{i+1}\\), \\(k_3\\) ist ebenfalls beim Mittelpunkt, aber mit der Steigung \\(k_2\\). Zuletzt wird \\(k_4\\) am Punkt \\(x_{i+1}\\) berechnet.</p> <p></p> <p>Die Konsistenz- und Konvergenzordnung von Runge-Kutta ist \\(p=4\\).</p>"},{"location":"23FS/HM2/summary/all.html#allgemeines-s-stufiges-runge-kutta-verfahren","title":"Allgemeines s-stufiges Runge-Kutta-Verfahren","text":"<p>Das allgemeine s-stufige Runge-Kutta-Verfahren: $$ \\begin{align} k_n&amp;=f\\left(x_i + c_nh, y+h \\sum^{n-1}{m=1}a n=1,...,s\\ y_{i+1}&amp;=y_i+h\\sum^s_{n=1}b_nk_n \\end{align} $$ Dabei ist }k_m\\right) &amp;&amp; \\text{f\u00fcr \\(s\\in \\N\\) die Stufenzahl und \\(a_{nm}\\), \\(b_n\\) und \\(c_n\\) sind Konstante.</p> <p></p> <ul> <li>Euler-Verfahren: \\(s=1\\) </li> <li>Mittelpunkt-Verfahren: \\(s=2\\) </li> <li>Modifiziertes Euler-Verfahren: \\(s=2\\) </li> <li>Klassisches Runge-Kutta Verfahren: \\(s=4\\) </li> </ul>"},{"location":"23FS/HM2/summary/all.html#differentialgleichung-system","title":"Differentialgleichung-System","text":"<p>Um ein Differentialgleichung-System zu l\u00f6sen, kann \\(y(x)\\) als vektorwertige Funktion geschrieben werden.</p> <p>Das Euler-Verfahren kann folgendermassen f\u00fcr Vektoren angepasst werden: $$ x_{i+1}=x_i + h\\ \\vec y_{i+1}=\\vec y_i + \\vec f(x_i, y_i)\\cdot h $$ Oben ist es mit dem klassischen Eulerverfahren beschrieben. Dies kann aber mit allen Eulerverfahren gel\u00f6st werden.</p>"},{"location":"23FS/HM2/summary/all.html#beispiel","title":"Beispiel","text":"<p>Das folgende Beispiel kommt aus dem n\u00e4chsten Unterkapitel \"Differentialgleichung k-ter Ordnung zu DGL-System\". $$ \\begin{align} z_1'&amp;=z_2\\ z_2'&amp;=z_3\\ z_3'&amp;=10e^{\u2212x} \u2212 5z_3 \u2212 8z_2 \u2212 6z_3 \\end{align} $$ Zu dem gelten folgende Anfangswerte: $$ \\vec z(0)=\\begin{pmatrix}2 \\ 0 \\ 0\\end{pmatrix} $$ Nun kommen die Iterationen:</p> <p></p>"},{"location":"23FS/HM2/summary/all.html#differentialgleichung-k-ter-ordnung-zu-dgl-system","title":"Differentialgleichung k-ter Ordnung zu DGL-System","text":"<p>Um eine Differentialgleichung mit Ableitungen h\u00f6her als erster Ableitungen zu l\u00f6sen gibt es einen Trick: $$ y'''+5y''+ 8y' + 6y = 10e^{-x} $$</p> <ol> <li> <p>Nachh der h\u00f6chsten Ableitung umformen:     \\(y''' = 10e^{\u2212x} \u2212 5y'' \u2212 8y' \u2212 6y\\)</p> </li> <li> <p>Alle Ableitungen von \\(y\\) tiefer als die h\u00f6chste Ableitungen durch \\(z_i\\) ersetzen:    \\(z_1=y, z_2=y', z_3=y''\\)</p> </li> <li> <p>Und in der Gleichung einsetzen    \\(y''' = 10e^{\u2212x} \u2212 5y'' \u2212 8y' \u2212 6y\\Rightarrow z_3'=y''' = 10e^{\u2212x} \u2212 5z_3 \u2212 8z_2 \u2212 6z_3\\)</p> </li> <li> <p>Es sind nun drei Gleichungen:     \\(z_1'=y'=z_2\\) \\(z_2'=y''=z_3\\) \\(z_3' = 10e^{\u2212x} \u2212 5z_3 \u2212 8z_2 \u2212 6z_3\\) </p> </li> <li> <p>In diesem Fall k\u00f6nnen sie auch vektoriel geschrieben werden:    \\(\\begin{pmatrix}z_2 \\\\ z_3 \\\\ 10e^{\u2212x} \u2212 5z_3 \u2212 8z_2 \u2212 6z_3 \\end{pmatrix}=\\begin{pmatrix}z_1' \\\\ z_2' \\\\ z_3'\\end{pmatrix}\\) </p> </li> </ol> <p>Mit der Start-Bedingungen: \\(\\vec z(0)=\\begin{pmatrix}0 \\\\ 0 \\\\ 0\\end{pmatrix}\\)</p>"},{"location":"23FS/HM2/summary/all.html#stabilitat","title":"Stabilit\u00e4t","text":"<p>Wie stabil eine L\u00f6sung einer DGL ist h\u00e4ngt von dem benutzten Verfahren, der Schrittbreite und dem spezifischen Anfangsproblem ab.</p> <p></p>"},{"location":"23FS/HM2/summary/all.html#interpolation","title":"Interpolation","text":"<p>Gegeben sind \\(n+1\\) St\u00fctzpunkte/Wertpaare \\((x_i, y_i)\\), wobei \\(x_i \\neq x_i\\) f\u00fcr \\(i\\neq j\\) gelten muss. Gesucht ist nun eine stetige Funktion \\(g\\) mit der Eigenschaft \\(g(x_i)=y_i\\) f\u00fcr alle \\(i=0, ..., n\\)</p>"},{"location":"23FS/HM2/summary/all.html#polynominterpolation","title":"Polynominterpolation","text":"<p>Wenn \\(n+1\\) St\u00fctzpunkte gegen sind, kann das Polynom \\(P_n(x)=a_0 + a_1x + a_2+x^2 + ... + a_nx^n\\)</p> <p>Wenn \\(x\\) ein Vektor ist, kann auch eine Vandermonde-Matrix gebildet werden: $$ \\begin{align} a_0 + a_1x_0 + a_2+x_0^2 + ... &amp;+ a_nx_0^n\\ a_0 + a_1x_1 + a_2+x_1^2 + ... &amp;+ a_nx_1^n\\ ...&amp; \\ a_0 + a_1x_n + a_2+x_n^2 + ... &amp;+ a_nx_n^n\\ \\end{align} $$</p> \\[ \\begin{pmatrix} 1 &amp; x_0 &amp; x_0^2 &amp; ... &amp; x_0^n\\\\ 1 &amp; x_1 &amp; x_1^2 &amp; ... &amp; x_1^n\\\\ &amp; &amp; &amp; ... \\\\ 1 &amp; x_n &amp; x_n^2 &amp; ... &amp; x_n^n\\\\ \\end{pmatrix} \\cdot \\begin{pmatrix} a_0 \\\\ a_1 \\\\ ... \\\\ a_n\\\\ \\end{pmatrix} = \\begin{pmatrix} y_0 \\\\ y_1 \\\\ ... \\\\ y_n\\\\ \\end{pmatrix} \\] <p>Diese Rechnung ist allerdings oft schlecht Konditioniert und wird f\u00fcr \\(n&gt; 20\\) St\u00fctzpunkte instabil. Ein m\u00f6glichen Ersatz ist das Lagrange Polynom</p>"},{"location":"23FS/HM2/summary/all.html#lagrange-interpolation","title":"Lagrange Interpolation","text":"<p>Das Lagrange Polynom kann f\u00fcr \\(n\\) St\u00fctzpunkte berechnet werden und ergibt ein Polynom mit dem Rang \\(n-1\\). $$ P_n(x)=\\sum^n_{i=0}I_i(x)y_i\\ I_i(x)=\\prod^n_{\\substack{j=0\\i\\neq j}}\\frac{x-x_j}{x_i-x_j} $$ Der maximale absoluten Fehler der dabei entstehen kann ist: $$ |f(x)-P_n(x)| \\le \\frac{|(x-x_0)(x-x_1)...(x-x_n)|}{(n+1)!}\\cdot(\\max_{x0\\le \\xi \\le x_n}|f^{(x+1)}(\\xi)|) $$ Als Bemerkung \\(f^{(x+1)}\\) ist die \\((x+1)\\)-te Ableitung</p> <p>Da f\u00fcr die Fehlerberechnung die eigentliche Funktion \\(f\\) ben\u00f6tigt wird, ist dies recht nutzlos.</p>"},{"location":"23FS/HM2/summary/all.html#spline-interpolation","title":"Spline Interpolation","text":"<p>Es wird f\u00fcr jedes Intervall \\([x_i, x_{i+1}]\\) (f\u00fcr \\(i=0, 1, 2,, ..., n-1\\)) wird ein Polynom \\(s_i\\) angesetzt. Das Polynom muss folgende Gleichungen erf\u00fcllen:</p> <ul> <li>Es muss durch alle Punkte im Intervall \\([x_i, x_{i+1}]\\) gehen   \\(s_i(x_i)=y, s_i(x_{i+1})=y_{i+1}, ...\\)</li> <li>Der \u00dcbergang zwischen den Polynomen muss stetig sein   \\(s_i(x_{i+1})=s_{i+1}(x_{i+1})\\)</li> <li>Es darf kein Knick beinhalten   \\(s_i'(x_{i+1})=s_{i+1}'(x_{i+1})\\)</li> <li>Die Kr\u00fcmmung von zwei Splines soll auch gleich sein   \\(s_i''(x_{i+1})=s_{i+1}''(x_{i+1})\\)</li> </ul> <p></p> <p>Um die Spline von oben zu berechnen, k\u00f6nnen nun folgende Polynome definiert werden: $$ \\begin{align} S_0&amp;=a_0+b_0(x-x_0)+c_0(x-x_0)^2 + d_0(x-x_0)^3 &amp;, x\\in [x_0, x_1] \\ S_1&amp;=a_1+b_1(x-x_1)+c_1(x-x_1)^2 + d_1(x-x_1)^3 &amp;, x\\in [x_1, x_2]\\ S_2&amp;=a_2+b_2(x-x_2)+c_2(x-x_2)^2 + d_2(x-x_2)^3 &amp;, x\\in [x_2, x_3]\\ \\end{align} $$ Aus diesen k\u00f6nnen nun folgendes Gleichungssytem aufgestellt werden: $$ \\begin{align} S_0(x_0)&amp;=y_0\\ S_1(x_1)&amp;=y_1 \\ S_2(x_2)&amp;=y_2 \\ S_2(x_3)&amp;=y_3 \\ \\ S_0(x_1)&amp;=S_1(x_1)\\ S_1(x_2)&amp;=S_2(x_2)\\ \\ S_0'(x_1)&amp;=S_1'(x_1)\\ S_1'(x_2)&amp;=S_2'(x_2)\\ \\ S_0''(x_1)&amp;=S_1''(x_1)\\ S_1'0(x_2)&amp;=S_2''(x_2)\\ \\end{align} $$ Dies sind aber \"nur\" 10 Gleichungen, nicht die ben\u00f6tigten 12. Daher gibt es noch zus\u00e4tzliche Bediungen:</p> <ul> <li>nat\u00fcrliche kubische Splinefunktion   \\(S_0''(x_0)=0, S_2(x_3)''=0\\)</li> <li>peridodische kubische Splinefunktion   \\(S_0'(x0)=S_2'(x_3), S_0''(x0)=S_2''(x_3)\\)</li> <li>kubische Spliefunktion (mit not-a-knot Bedinungen)   \\(S_0'''(x_1)=S_1'''(x_1), S_1'''(x_2)=S_2'''(x_2)\\)</li> </ul>"},{"location":"23FS/HM2/summary/all.html#algorithmus","title":"Algorithmus","text":"<p>F\u00fcr \\(n+1\\) St\u00fctzpunkte werden \\(n\\) Gleichungen nach der Form \\(S_i=a_i+b_i(x-x_i)+c_i(x-x_i)^2 + d_i(x-x_i)^3, x\\in [x_i, x_{i+1}]\\) gesucht. Daf\u00fcr kann folgender Algorithmus f\u00fcr jedes \\(S_i\\) angewendet werden:</p> <ol> <li>Wenn die nat\u00fcrliche kubische Splinefunktion gesucht ist, wird \\(c\\) auf \\(0\\) gesetzt damit die zweite Ableitung \\(0\\) ergibt    \\(c_0=0, c_n=0\\)</li> <li>F\u00fcr jedes Polynom \\(S_i\\)</li> <li>\\(a_i=y_i\\)</li> <li>Die Breite des Intervalles       \\(h_i=x_{i+1}-x_i\\)</li> <li>\\(c_i\\) bestimmen</li> <li>\\(b_i\\) und \\(d_i\\) f\u00fcr jedes \\(S_i\\) bestimmen</li> <li>\\(b_i=\\frac{y_{i+1}-y_i}{h_i}-\\frac{h_i}{3}(c_{i+1}+2c_i)\\)</li> <li>\\(d_i=\\frac 1{3h_i}(c_{i+1}-c_i)\\)</li> </ol> <p>F\u00fcr das Beispiel \\(...\\):</p> \\(i\\) 0 1 2 3 \\(x_i\\) 0 1 2 3 \\(y_i\\) 2 1 2 2 \\(a_i\\) 2 1 2 - \\(h_i\\) 1 1 1 - \\(c_i\\) 0 ? ? 0 <p>Um \\(c_1\\) und \\(c_2\\) zu finden kann folgendes Gleichungssystem gel\u00f6st werden: $$ A=\\begin{pmatrix} 2(h_0+g_1) &amp; h_1 \\ h_1 &amp; 2(h_1+h_2) \\end{pmatrix} \\ A \\cdot \\begin{pmatrix}c_1 \\ c_2 \\end{pmatrix}  = \\begin{pmatrix}</p> <p>\\end{pmatrix} $$</p>"},{"location":"23FS/HM2/summary/all.html#lineare-ausgleichunsrechnung","title":"Lineare Ausgleichunsrechnung","text":"<p>Es wird eine Funktion gesucht, in der Form: $$ f(x)=\\lambda_1f_1(x)+... + \\lambda_mf_m(x) $$ Ein m\u00f6gliches Beispiel w\u00e4re: \\(f(x)=\\lambda_1 \\cdot \\underbrace{1}_{f_1(x)} + \\lambda_2\\cdot \\underbrace x_{f_2(x)} + \\lambda_3 \\cdot \\underbrace{x^2}_{f_3(x)}\\)</p> <p>Um nun die \\(\\lambda\\)s zu finden, damit \\(f(x)\\) Datenpunkte nachgeht, muss der Fehler \\(E(f)\\) zu den Datenpunkten minimieren:</p> <p>$$ E(f)=w\\cdot||y_f-(x)||2^2 = \\sum^nw_i\\cdot (y_i - f(x_i))^2 $$ Mit \\(w\\) kann ein Punkt st\u00e4rker oder schw\u00e4cher gewichtet werden</p> <p>Um dies zu minimieren, wird die Ableitung von \\(E(f)=0\\) gesetzt:</p> <p></p> <p>Aus dem folgt:</p> <p></p> <p></p> <p>Dies funktioniert allerdings nur f\u00fcr eine Gerade. Die selbe Methode kann aber auch f\u00fcr h\u00f6here Polynomen verwendet werden: $$ E(f)=||\\vec y-f(\\vec x)||2^2=\\sum^n\\lambda_jf_j(x_i)\\right)^2=||\\vec y-A\\lambda||_2^2 $$ Mit folgender Matrix }(y_i-f(x_i))^2 = \\sum^n_{i=1}\\left(y_i - \\sum^m_{j=1\\(A\\):  </p> <p>Die Gleichung \\(E(f)=0\\) hat nur im Spezialfall eine L\u00f6sung, wenn \\(m=n\\) und wenn die Funktion \\(f\\) durch alle Punkte geht.</p>"},{"location":"23FS/HM2/summary/all.html#normalgleichungen","title":"Normalgleichungen","text":"<p>Um \\(E(f)\\) zu minimieren muss die erste Ableitung von \\(E'(f)=0\\) sein. Daher muss \\(E(f)\\) nach jedem \\(\\lambda\\) abgeleitet werden: $$ \\frac{\\part E(f)(\\lambda_1, ..., \\lambda_m)}{\\part \\lambda_j}=0 , j=0,...,m $$ Dies nennt sich eine Normalgleichung und l\u00e4sst sich als \\(A^TA\\lambda=A^Ty\\). </p> <p>\\(A\\) ist oft schlecht konditioniert und die L\u00f6sung sollte daher mit dem QR-Verfahren gel\u00f6st werden. </p>"},{"location":"23FS/HM2/summary/all.html#linearisieren","title":"Linearisieren","text":"<p>Falls eine \\(f\\) Funktion auf den ersten Blick nicht linear erscheint, kann sie eventuell linearisiert werden.</p> <p>Z.B. die Funktion \\(ae^{bx}\\) kann mit \\(\\log_e\\) linearisiert werden.</p> <p></p> <p></p>"},{"location":"23FS/HM2/summary/all.html#nicht-lineare-ausgleichsrechnung","title":"Nicht-Lineare Ausgleichsrechnung","text":"\\[ f(\\lambda_1, \\lambda_2, ..., \\lambda_m, x)=... \\] <p>Das allgemeine Ausgleichsproblem besteht darin folgendes \\(E\\) zu minimieren:</p> <p></p> <p>Die Ableitung von \\(E\\) wird auf \\(E'(f)=0\\) gesetzt. Daf\u00fcr kann das Gauss-Newton-Verfahren.</p>"},{"location":"23FS/HM2/summary/all.html#gauss-newton-verfahren","title":"Gauss-Newton-Verfahren","text":"<p>Das Quadratmittelproblem ist es einen Vektor \\(x\\in\\R^m\\) zu finden, welcher die Fehlerfunktional \\(E: \\R^m \\to \\R:=||g(x)||_2^2\\) minimiert. \\(E\\) geh\u00f6rt zur Funktion \\(g: \\R^m \\to \\R^n\\)</p> <p>\\(g\\) wird nun definiert als \\(g(\\lambda):=y-f(\\lambda)\\).</p> <p>Um nun f\u00fcr eine nicht lineare Funktionen \\(f\\) eine L\u00f6sung zu finden, muss \\(f\\) linearisiert werden: $$ \\begin{align} g(\\lambda)&amp;\\approx g(\\lambda_0)+Dg(\\lambda_0)\\cdot(\\lambda - \\lambda_0)\\ \\ Dg(x)&amp;=\\begin{pmatrix} \\frac{\\partial g_1}{\\partial x_1}(\\vec x) &amp; \\frac{\\partial g_1}{\\partial x_2}(\\vec x) &amp; ... &amp; \\frac{\\partial g_1}{\\partial x_n}(\\vec x) \\</p> <p>\\frac{\\partial g_2}{\\partial x_1}(\\vec x) &amp; \\frac{\\partial g_2}{\\partial x_2}(\\vec x) &amp; ... &amp; \\frac{\\partial g_2}{\\partial x_n}(\\vec x) \\</p> <p>... &amp; ... &amp; ... &amp; ... \\ \\frac{\\partial g_m}{\\partial x_1}(\\vec x) &amp; \\frac{\\partial g_m}{\\partial x_2}(\\vec x) &amp; ... &amp; \\frac{\\partial g_m}{\\partial x_n}(\\vec x) \\ \\end{pmatrix} \\end{align} $$ \\(E\\) kann nun folgendermassen definiert werden: $$ \\tilde E(\\lambda) = ||\\underbrace{g(\\lambda_k)}{\\tilde y} + \\underbrace{Dg(\\lambda_k)}_\\delta||_2^2 $$ Wobei } \\cdot \\underbrace{(\\lambda-\\lambda_k)\\(k=0,1,...\\) ist.  </p> <p>Dies kann nun wie eine lineare Gleichung gel\u00f6st werden: $$ Dg(\\lambda_k)^TDg(\\lambda_k)\\delta_k=-Dg(\\lambda_k)^T\\cdot g(\\lambda_k) $$ Oder mit dem QR-Verfahren: $$ Dg(\\lambda_k)=Q_kR_k\\ R_k\\lambda_k=-Q_k^Tg(\\lambda_k) $$ F\u00fcr jedes \\(k\\) wird nun \\(\\tilde E\\) minimiert, bzw. die obere Gleichung aufgel\u00f6st. </p> <p>Das n\u00e4chste \\(\\lambda\\) kann wie folgt ausgerechnet wird: $$ \\lambda_{k+1}=\\lambda_k+\\delta_k $$</p>"},{"location":"23FS/HM2/summary/all.html#gedampftes-gauss-newton-verfahren","title":"Ged\u00e4mpftes Gauss-Newton-Verfahren","text":"<p>Das ged\u00e4mpte Gauss-Netwon-Verfahren funktioniert gleich, wie das \"normale\" Verfahren, nur das \\(\\delta_k\\) verkleinert wird.</p> <p>Um das \\(\\delta_k\\) f\u00fcr die n\u00e4chste Iteration zu finden, soll folgende f\u00fcr folgende Formel das minimale \\(p\\in{0, 1, ..., p_{max}}\\) gefunden werden $$ ||g\\left(\\lambda_k+\\frac{\\delta_k}{2^p}\\right)||2^2 &lt; ||g(\\lambda_k)||_2^2 $$ \\(\\lambda_{k+1}\\) wird nun folgendermassen berechnet: $$ \\lambda $$ Falls kein minimales }=\\lambda_k+\\frac{\\delta_k}{2^p\\(p\\) gefunden werden kann, wird mit \\(p=0\\) gerechnet.</p>"},{"location":"23FS/HM2/summary/all.html#nichtlineare-gleichungssysteme","title":"Nichtlineare Gleichungssysteme","text":""},{"location":"23FS/HM2/summary/all.html#multivariate-funktionen","title":"Multivariate Funktionen","text":""},{"location":"23FS/HM2/summary/all.html#skalarwertige-funktion","title":"Skalarwertige Funktion","text":"<p>Eine Funktion, welche mehrere \\(x\\)-Werte nimmt und ein \\(y\\)-Wert zur\u00fcck gibt. $$ f:  \\mathbb R ^n \\to \\mathbb R \\ y = f(x_1, x_2, ..., x_n) $$</p>"},{"location":"23FS/HM2/summary/all.html#vektorwertige-funktion","title":"Vektorwertige Funktion","text":"<p>Eine Funktion, welche mehrere \\(x\\)-Werte nimmt und mehrere \\(y\\)-Werte zur\u00fcck gegeben $$ f: \\mathbb R^n \\to \\mathbb R^m \\ (y_1, y_2, ..., y_m) = f(x_1, x_2, ..., x_n) $$</p>"},{"location":"23FS/HM2/summary/all.html#explizite-und-implizite-funktionen","title":"Explizite und implizite Funktionen","text":"<p>Explizite Funktionen haben die folgende Form: \\(y=f(x_1, x_2, ..., x_n)\\)</p> <p>Implizite Funktionen haben die folgende Form: \\(F(x_1, x_2, ..., x_n, y)=0\\)</p>"},{"location":"23FS/HM2/summary/all.html#partielle-ableitung","title":"Partielle Ableitung","text":"<p>Um die Funktion \\(z=f(x, y) = 2x^2 + 5 y\\) abzuleiten, kann nach \\(x\\) und \\(y\\) separat abgeleitet werden: $$ \\begin{align} \\text{nach }x: \\frac{\\partial f}{\\partial x} &amp;= 4x + 0 \\ \\text{nach }y: \\frac{\\partial f}{\\partial y} &amp;= 0 + 5 \\ \\end{align} $$ Diese Ableitung kann folgendermassen visualisiert werden:</p> <p></p>"},{"location":"23FS/HM2/summary/all.html#jacobi-matrix","title":"Jacobi-Matrix","text":"<p>F\u00fcr die Funktion \\(f: \\mathbb R^n \\to \\mathbb R^m\\) mit \\(\\vec y = f(\\vec x)=\\begin{pmatrix}y_1=f_1(\\vec x) \\\\ y_2 = f_2(\\vec x)\\\\ ... \\\\ y_m=f_m(\\vec x)\\end{pmatrix}\\) und \\(\\vec x = (x_1, x_2, ..., x_n)^T\\) ist die Jacobi-Matrix das folgende: $$ Df(x)=\\begin{pmatrix} \\frac{\\partial f_1}{\\partial x_1}(\\vec x) &amp; \\frac{\\partial f_1}{\\partial x_2}(\\vec x) &amp; ... &amp; \\frac{\\partial f_1}{\\partial x_n}(\\vec x) \\</p> <p>\\frac{\\partial f_2}{\\partial x_1}(\\vec x) &amp; \\frac{\\partial f_2}{\\partial x_2}(\\vec x) &amp; ... &amp; \\frac{\\partial f_2}{\\partial x_n}(\\vec x) \\</p> <p>... &amp; ... &amp; ... &amp; ... \\ \\frac{\\partial f_m}{\\partial x_1}(\\vec x) &amp; \\frac{\\partial f_m}{\\partial x_2}(\\vec x) &amp; ... &amp; \\frac{\\partial f_m}{\\partial x_n}(\\vec x) \\ \\end{pmatrix} $$ In dieser Matrix ist in einer Reihe alle m\u00f6glichen partiellen Ableitungen f\u00fcr \\(f_1(\\vec x)\\)</p>"},{"location":"23FS/HM2/summary/all.html#linearisierung","title":"Linearisierung","text":"<p>Eine Approximation f\u00fcr \\(y=f(x)\\) kann mit \\(f(x)\\approx f(x_0) + f'(x-x_0)\\).</p> <p>Dasselbe kann auch f\u00fcr eine multivariante Funktion mithilfe der Jacobi-Matrix getan werden: \\(g(\\vec x)=f(\\vec {x_0}) + Df(\\vec {x_0})\\cdot (\\vec x-\\vec {x_0})\\) </p> <p>(\\(Df(\\vec x)\\) ist die Jacobi-Matrix)</p> <p>Nach dem Linearisieren wird ein nichtlineare Funktion lineare und kann mit bekannten Verfahren gel\u00f6st werde</p>"},{"location":"23FS/HM2/summary/all.html#newton-verfahre","title":"Newton-Verfahre","text":"<p>Das Newton-Verfahren erwartet, dass \\(f(\\vec x_n)=\\vec 0\\) gilt.</p> \\[ \\vec x_{n+1}=\\vec x_n-(Df(\\vec x_n))^{-1}\\cdot f(\\vec x_n) \\] <p>Um nicht die Jacobi-Matrix invertieren zu m\u00fcssen, kann folgender Trick angewendet werden: $$ \\vec \\delta_n :=-(Df(\\vec x_n))^{-1}\\cdot f(\\vec x_n)\\ \\text{Dies kann in folgendes Umgewandlet werden:}\\ Df(\\vec x_n)\\cdot \\vec\\delta x_n = -f(\\vec x_n) $$ Die Gleichung \\(Df(\\vec x_n)\\cdot \\vec\\delta x_n = -f(\\vec x_n)\\) ist ein lineares Gleichungssystem, welches relativ einfach gel\u00f6st werden kann. Danach kann \\(\\vec \\delta _n\\) anstelle von \\(-(Df(\\vec x_n))^{-1}\\cdot f(\\vec x_n)\\) verwendet werden: \\(\\vec x_{n+1}=\\vec x_n+\\vec \\delta_n\\)</p> <p>Das Newton-Verfahren konvergiert quadratisch f\u00fcr nah genug an einer Nullstelle \\(\\overline x\\) liegende Startwerte, wenn \\(Df(\\overline x)\\) regul\u00e4r und \\(f\\) dreimal stetig differenzierbar ist.</p> <p>F\u00fcr eine Nichtregul\u00e4re Matrix A gilt \\(\\det(A)\\ne 0\\)</p> <p>M\u00f6gliche Abbruchskriterien sind:</p> <ul> <li>\\(n &gt; n_{max}\\)</li> <li>\\(||\\vec x_{n+1}-\\vec x_n||\\le ||\\vec x_{n+1}||\\cdot \\varepsilon\\)</li> <li>\\(||\\vec x_{n+1}-\\vec x_n||\\le \\varepsilon\\)</li> <li>\\(||f(\\vec x_{n+1})||\\le \\varepsilon\\)$</li> </ul>"},{"location":"23FS/HM2/summary/all.html#vereinfachtes-newton-verfahren","title":"Vereinfachtes Newton-Verfahren","text":"<p>Beim regul\u00e4ren Newton-Verfahren muss bei jeden Iterationsschritt die Jacobi-Matrix \\(Df(\\vec x)\\) neuberechnen. Beim vereinfachten Newton-Verfahren wird \\(Df(\\vec x)\\) nur f\u00fcr den Startvektor berechnet. $$ \\vec x_{n+1}=\\vec x_n-(Df(\\vec x_0))^{-1}\\cdot f(\\vec x_n)\\ Df(\\vec x_0)\\cdot \\vec\\delta x_n = -f(\\vec x_n) $$ Wegen dieser Vereinfachung kovergiert das Verfahren nur noch linear gegen die Nullstelle, wenn \\(Df(\\overline x)\\) nicht regul\u00e4r ist.</p>"},{"location":"23FS/HM2/summary/all.html#gedamptes-newton-verfahren","title":"Ged\u00e4mptes Newton-Verfahren","text":"<p>Wenn \\(Df(\\vec x_n)\\) schlecht konvergiert, dann kann nicht generell erwartet werden, dass \\(\\vec x_{n+1}=\\vec x_n + \\vec \\delta_n\\) nicht gilt.</p> <p></p> <p>F\u00fcr das ged\u00e4mpfte Newton-Verfahren werden folgende Schritte angewendet:</p> <ol> <li>Berechne \\(\\delta_n\\) mit \\(Df(\\vec x_n)\\delta_n=-f(\\vec x_n)\\) ausgerechnet</li> <li>Finde das minimale \\(k\\in \\{0, 1, ...\\}\\) f\u00fcr das gilt: \\(||f(\\vec x_n + \\frac{\\vec \\delta_n}{2^k})||_2 &lt; ||f(\\vec x_n)||_2\\)</li> <li>Wenn kein \\(k\\) gefunden wird, soll mit \\(k=0\\) weiter gerechnet werden</li> <li>Nun soll die Iterationsgleichung \\(\\vec x_{n+1}=\\vec x_n + \\frac{\\vec \\delta_n}{2^k}\\) verwendet werden# Numerische Itegration</li> </ol>"},{"location":"23FS/HM2/summary/all.html#rechteck-trapezregel","title":"Rechteck- &amp; Trapezregel","text":"<p>Die folgenden formel ziehen ein Rechteck, bzw. Trapez \u00fcber das ganze Integral. $$ \\text{Das Integral}\\ \\int_a^b f(x)\\mathrm d x\\ \\ \\text{kann folgendermassen approximiert werden}\\ Rf=f\\left(\\frac{a+b}{2}\\right) \\cdot (b - a)\\ Tf=\\frac{f(a) + f(b)} 2 \\cdot (b - a) $$ (Rf = Rechtecksregel, Tf = Trapezregel)</p> <p>F\u00fcr die summierte Rechteck- &amp; Trapezregel wird das Integral in kleinere Schritte mit der breite \\(h\\) unterteilt. $$ Rf(h)=h\\cdot \\sum^{n-1}{i=0} f(x_i +\\frac h 2)\\ Tf(h)=h\\cdot \\left(\\frac{f(a) + f(b)}{2} +\\sum^{n-1} f(x_i) \\right)\\ \\text{wobei gilt} x_i=a+i\\cdot h\\ h=\\frac{b-a} n $$ </p>"},{"location":"23FS/HM2/summary/all.html#simpsonregel","title":"Simpsonregel","text":"<p>F\u00fcr das l\u00f6sen eines Segments m\u00fcssen folgende Formel ausgerechnet werden. Dabei wird das Polynom \\(p(x)=\\alpha+\\beta(x-a) + \\gamma(x-a)(x-b)\\) verwendet.</p> <p></p> <p>Da \\(f(x)\\approx p(x)\\) gilt, kann das Polynom integriert werden:</p> <p></p> <p>Die Regel oben haben nur ein Segment benutzt. Wie aber auch bei der Rechtecks- und Trapezregel, kann auch hier die summierte Simpsonregel verwendet werden. $$ Sf(h)=\\frac h 3 \\left(\\frac 1 2 f(a) + \\sum^{n-1}{i=1} f(x_i)  + 2 \\sum^n \\right) + \\frac 1 2 f(b) \\right) $$ Die Simpsonsregel kann auch mit dem Rechtecks- und Trapezregel berechnet werden: $$ Sf(h)=\\frac 1 3 (Tf(h) + 2 Rf(h)) $$} f\\left (\\frac{x_{i-1}+x_i}{2</p>"},{"location":"23FS/HM2/summary/all.html#fehlerabschatzung","title":"Fehlerabsch\u00e4tzung","text":""},{"location":"23FS/HM2/summary/all.html#gaussformel","title":"Gaussformel","text":"<p>Die folgenden Formel bestimmen das Integral zwischen \\(a\\) und \\(b\\), wenn es \\(n\\) St\u00fctzpunkte gibt. Dabei m\u00fcssen die St\u00fctzpunkte nicht \u00e4quidistant sein.</p> <p></p>"},{"location":"23FS/HM2/summary/all.html#romberg-extrapolation","title":"Romberg Extrapolation","text":"<p>Die Rekursion wird ausgerechnet bis \\(k=0\\) wird, da dann die Formel \\(T_{j0}=Tf\\left(\\frac{b-a}{2^j}\\right)\\)</p> <p>Da die Werte von \\(f(...)\\) immer in \\(T_{j0}\\) wiederverwendet werden, kann dies mit der folgenden Formel vereinfacht werden: $$ T_{j0}=\\frac 1 2 T_{j-1,0}+h_j\\sum^{n_{j-1}}_{i=1}f(a+(2i-1)h_j) $$  Die zweite Spalte \\(T_{j1}\\) kann mit der Simpson-Regel berechnet werden: $$</p> <p>$$</p> <p>Die folgende Graphik zeigt die oben abgebildete Rekursion:</p> <p></p> <p>Die folgenden zwei Graphen zeigen \\(T_{00}\\) und \\(T_{10}\\). Wenn \\(j\\) um <code>1</code> h\u00f6her wird, wird die X-Achse halbiert. Dasselbe gilt f\u00fcr \\(T_{30}\\) und \\(T_{40}\\)</p> <p></p> <p></p>"},{"location":"23FS/ITS/0_Basic.html","title":"Basics","text":""},{"location":"23FS/ITS/0_Basic.html#cia-triad","title":"CIA Triad","text":"<p>Most measures in IT security have one of these three high-level goal.</p> <p>The availability category is further subdivided.</p> <p></p> <p>The following counter meassures can be used:</p> <p></p>"},{"location":"23FS/ITS/0_Basic.html#business-continuity-management","title":"Business Continuity Management","text":""},{"location":"23FS/ITS/0_Basic.html#model-of-communication","title":"Model of Communication","text":"Name Goal Capabilities Alice, Bob Communiacte securerly send, receive messages, perform computation Eve Read messages (eavesdrop) intercept messages Mallory Manipulates messages (man-in-the-middle) intercept, delete, modify, replay messages Trent Help Alice and Bob (trusted thirt-party) send, receive messages, perform computation <p>When using secret-key cryptography then the open channel is secured by a key \\(k\\) .</p> <p></p>"},{"location":"23FS/ITS/0_Basic.html#goals-of-cryptography","title":"Goals of Cryptography","text":"<ul> <li>Confidentiality: Only Alice and Bob can read the message they sent</li> <li>Integrity: Ensure that data was not tampered with during transit</li> <li>: Ensure that the sender is actually Alice</li> <li>Freshness:  Ensure that the received message from Alice is not a reply attack</li> <li>Non-repudiation: Alice and Bob cannot deny they received a message (in this case they are the attackers)</li> </ul>"},{"location":"23FS/ITS/0_Basic.html#math-terms","title":"Math Terms","text":""},{"location":"23FS/ITS/0_Basic.html#kerckhoffs-principal","title":"Kerckhoff's Principal","text":"<p>Kerckhoff's principal says, that the security of a cipher must only relay on the key being a secret, NOT the cipher itself. Security-by-obscurity does not work!</p>"},{"location":"23FS/ITS/0_Basic.html#properties-of-good-encryption-methods","title":"Properties of good encryption methods","text":""},{"location":"23FS/ITS/0_Basic.html#cryptocraphic-work-factor","title":"Cryptocraphic Work Factor","text":"<p>This factor describes how many keys one has to try on average before they guess the right one. This depends on the distribution of the keys and assumes that the right key can be detected. If every key is equally likely then the work factor is maximised. Additionally, when choosing a key it is vital to choose randomly so every key is equally likely.</p> <p>The general formula is  $$ WF(X)=\\sum^n_{k=1}x_k\\cdot P(x_k) $$ where \\(x_k\\) is a possible character in the password and \\(P(x_k)\\) is the probability that \\(x_k\\) </p>"},{"location":"23FS/ITS/0_Basic.html#perfect-secrecyinformation-theoretically-secure","title":"Perfect Secrecy/Information-Theoretically Secure","text":"<p>The probability that a plaintext produced a given ciphertext c under key k is independent of c and k.</p> <p>This has the effect that if even if an attacker guessed the correct key, they can't verify that, since all messages \"look the same\".</p> <p>An example is the following: A system which the two keys <code>1</code> and <code>0</code>. The attacker intercepts a message and when decrypting it with the key <code>0</code>, the result is <code>I have thrown a coin and it came up heads</code>. If the attacker decrypts it with the key <code>1</code>, the result is <code>I have thrown a coin and it came up tails</code>. Which one is now correct?</p> <p>Shanon calls this \"perfect secrecy\".</p> <p>However, no modern encryption algorithm has this property(, except one-time pad).</p>"},{"location":"23FS/ITS/0_Basic.html#computationally-secure","title":"Computationally Secure","text":"<p>A cipher has to have the following properties:</p> <ul> <li>Only the correct key results in an intelligable result</li> <li>The work factor is \\(\\frac 1 2\\) of the key space</li> </ul> <p>However, there is no known algorithm to this day.</p>"},{"location":"23FS/ITS/0_Basic.html#one-time-pad","title":"One-Time Pad","text":"<p>In one-time pad (vernam cipher) the plain text and key are xored. They key has to consists out of bits where both <code>1</code> and <code>0</code> are equally likely and each bit is independent of each other.</p> <p>It has the following properties:</p> <ul> <li>The key length is equal to the plain text length</li> <li>Has perfect secrecy (, since every result is equally likely)</li> <li>Key must not be reused and would lead to catastrophic loss of security since \\(p_1 \\oplus k = c_1\\) and \\(p_2 \\oplus k = c_2\\). From this the following is valid \\(c_1 \\oplus c_2 = p_1 \\oplus p_2\\).</li> </ul>"},{"location":"23FS/ITS/0_Basic.html#man-in-the-middle-mitm","title":"Man-in-the-Middle (MitM)","text":"<p>To do a man in the middle attack, one needs to setup arp poisening or arp spoofing.</p>"},{"location":"23FS/ITS/0_Basic.html#strict-transport-security-header","title":"<code>Strict-Transport-Security</code> Header","text":"<p>This header enforces that a webpage can, from now on, only be reached via https. However, this only applies after the first connection to the webpage.</p>"},{"location":"23FS/ITS/0_Basic.html#public-key-pins-header","title":"<code>Public-\u00adKey-\u00adPins</code> Header","text":"<p>The <code>Public-Key-Pins</code> header instructs the browser to only allow a connection to a server where the hash of the public key matches one of the listed hashes.</p> <pre><code>Public-Key-Pins:\n\"pin-sha256=\"8MfHQC9XAUF/XBmQ/mZ8S/XEc5aSYzOlj0EHTj870+s=\";\npin-sha256=\"tpFbv65QoYvcWNVl7gAEd1FAWWn/pjL8Fo2+f1pTrC8=\";\npin-sha256=\"WKbBsAclTiyDM7EEJ5yUmrWmp9DxWM/hG+D+wcCLA24=\";\npin-sha256=\"nxpEakAMgSw92zksspA8LdZyrdW/MGGr70VfcIT7DBU=\";\nmax-age=31536000; includeSubDomains\"\n</code></pre> <p>However, this can be problematic if the certificate was stolen or lost. In this case the server administrator need to create a new certificate. The browser won't connect to the server since the new certificate isn't listed in the <code>Public-Key-Pings</code> header.</p>"},{"location":"23FS/ITS/1_Block%20Ciphers.html","title":"Block Ciphers","text":"<p>A block cipher always operates on fixed sized blocks, which gets encrypted to a cipher text block with the same size.</p> <p>The block size needs to be large enough to ensure that the cipher is random enough. In the extreme case, where \\(n=1 bit\\),  the block cipher produces either the same bit or the inverted bit.</p> <p>Usually the plain text's length isn't a multiple of the block size. To still use a block cipher, padding is introduced. Today usually PKCS7 is used</p> <p></p>"},{"location":"23FS/ITS/1_Block%20Ciphers.html#pkcs7-padding","title":"PKCS7 Padding","text":"<p>If the block size is \\(n\\) bytes, and the final block consists of \\(k \\le n\\) data bytes then,</p> <ul> <li>If \\(k &lt; n\\), the padding data fills up the last block with \\(n - k\\) bytes with the value \\(n - k\\)   Example: </li> <li>If \\(k=n\\), the padding data consists of a new block of \\(n\\) bytes with the value \\(n\\)   Example: </li> </ul>"},{"location":"23FS/ITS/1_Block%20Ciphers.html#des-data-encryption-standard","title":"DES (Data Encryption Standard)","text":"<p>DES was published by the National Institute of Standards and Technology (NIST) which is controlled by the NSA. This leads to the public not totally trusting as the NSA might had meddled with.</p> <p>Today, DES is totally insecure because the key size of 56 is too small. Apart from this, the cipher is secure and the NSA probably didn't interfere with the design. </p> <p>Until today, brute force attack is still the best way to attack DES.</p>"},{"location":"23FS/ITS/1_Block%20Ciphers.html#double-des-and-meet-in-the-middle-attack","title":"Double DES and Meet-in-the-middle Attack","text":"<p>One idea to increase the work factor was to encrypt a text twice with a different key.</p> <p>A possible know-plain-text attack</p> <p></p>"},{"location":"23FS/ITS/1_Block%20Ciphers.html#tripple-des","title":"Tripple DES","text":"<p>The second stage \\(D_{K2}\\) decrypts the result of \\(E_{K1}\\). Because in DES encrypting and decrypting have different algorithms, this results in an actual work factor of 112 bits.</p> <p>The 112 come from the application of the attack above, but the hash map size grows to 112 bits.</p> <p></p>"},{"location":"23FS/ITS/1_Block%20Ciphers.html#aes-advanced-encryption-standard","title":"AES (Advanced Encryption Standard)","text":"<p>AES was developed as a successor to DES with the following requirements:</p> <ul> <li>AES shall be publicly defined</li> <li>AES shall be a secret key (symmetric) block cipher</li> <li>AES shall be implementable efficiently in both hardware and software</li> <li>AES shall have a block size of n = 128 bits</li> <li>AES shall have flexible key sizes of k = 128, 192, and 256 bits</li> <li>AES shall be freely available (no patents like IDEA etc.)</li> </ul> <p>The the key sizes are 128, 192 and 256, while the standard is 128 bit. The block size is 128 bits long.</p>"},{"location":"23FS/ITS/1_Block%20Ciphers.html#block-cipher-mode","title":"Block Cipher Mode","text":""},{"location":"23FS/ITS/1_Block%20Ciphers.html#ecb-electronic-code-book-mode","title":"ECB (Electronic Code-Book) Mode","text":"<p>Each block is processed by the encryption algorithm \\(E\\).</p> <p>A problem with ECB is that when \\(P_1\\) and \\(P_2\\) is the same, then \\(C_1\\) and \\(C_2\\) will be the same as well. </p> <p></p> <p>When ECB is used, then individual blocks can be substituted to other blocks from the same data:</p> <p></p>"},{"location":"23FS/ITS/1_Block%20Ciphers.html#cipher-block-chaining-cbc-mode","title":"Cipher Block Chaining (CBC) Mode","text":"<p>When using CBC, the result of an encryption is used in the next encryption. This means that even if \\(P_1\\) and \\(P_2\\) are equal to each other, \\(C_1\\) and \\(C_2\\) won't be.</p> <p>However, if the initialisation vector is reused then the first blocks of two plain text will have the same problem as with ECB.</p> <p>The IV does not need to be kept secret but needs to be different for every transmission.</p> <p>A possible modification attack to CBC is the following:</p> <p></p> <p>Now all what Mike has to do is choose \\(M\\) in a way that \\(P_{17} \\oplus M\\) equals to the desired result:</p> <p></p>"},{"location":"23FS/ITS/2_Stream%20Ciphers.html","title":"Stream Ciphers","text":"<p>Stream ciphers work by generating a random stream of bytes which are xored with the plain text. This is advantageous when having high performance requirements, as the key stream can be pre-generated when idling. Later, when data is available then the generated bytes are xored with the plain text.</p> <p></p>"},{"location":"23FS/ITS/2_Stream%20Ciphers.html#counter-ctr-mode","title":"Counter (CTR) Mode","text":"<p>The CTR mode can be used to use a block cipher as a stream cipher. For this, an initialisation vector is used together with a key to generate the key stream. Each block uses the last initialisation vector + 1 to generate the next block of the key stream. The key stream is then xored with the plain text.</p> <p>Important is to use each initialisation vector only once.  </p>"},{"location":"23FS/ITS/3_Public%20Key%20Cryptography.html","title":"Public Key Cryptography","text":"<p>In public key cryptography, Bob generates a public-private key pair and publishes only the public key (not the private key). Alice will retrieve this public key and encrypts  her message with this key. Because messages, which were encrypted using the public key, can only be decrypted with its corresponding private key, Bob is the only one who is able to read the sent message.</p>"},{"location":"23FS/ITS/3_Public%20Key%20Cryptography.html#groups","title":"Groups","text":"<p>A set \\(G\\) with an operator \\(\\circ\\) is a group if and only if</p> <ul> <li>\\(\\circ\\) is associative (like \\(+\\) and \\(\\cdot\\)): for all \\(a, b, c \\in G\\), we have \\((a \\circ b) \\circ c = a \\circ (b \\circ c)\\)</li> <li>There exists a neutral element \\(e\\) so that for all  \\(a \\in G\\), we have \\(e \\circ a = a \\circ e = a\\)</li> <li>For each \\(a \\in G\\) there exists an inverse element \\(a' \\in G\\) so that \\(a' \\circ a = e\\)</li> </ul> <p>The order of a group is \\(|G|\\). A group is called a cyclic group, if there is a generator \\(a\\in G\\) and \\(\\{[n]a\\vert n\\}=G\\)  (With \\(a[n]\\) can the whole group be created).</p> <p>The following notation can be used:</p> <ul> <li>\\([n]a = a\\circ ... \\circ a\\) (n times)</li> <li>\\([-n]a=(a \\circ ... \\circ a)'=a' \\circ ... \\circ a'=[n]a'\\) (n times)</li> <li>\\([m]a \\circ [n]a = [m+n]a\\)</li> <li>\\([m]([n]a)=[mn]a\\)</li> </ul> <p>A possible example is residual group (Rest Gruppe) \\(Zp*=\\{1, ..., p-1\\}; G=(Zp*, \\times)\\), where \\(p\\) is a prime is a cyclic group. Because of the modulo \\([k]a=a \\times a \\times ... \\times a=a^k \\mod p\\). </p> <p>The group is also abelian as for each element \\(a+b=b+a\\) and \\(a\\times b = b \\times a\\) is valid.</p> <p></p>"},{"location":"23FS/ITS/3_Public%20Key%20Cryptography.html#discrete-logarithm-problem-dlp","title":"Discrete Logarithm Problem (DLP)","text":"<p>For the discrete logarithm problem, we have a finite cyclic group \\((G, \\circ)\\) with the generator \\(g\\) (any \\(a\\in G\\) can be generated with \\([k]g\\), where \\(1\\le k \\le |G|\\))</p> <p>The problem is to find \\(k\\), when given \\(a\\in G\\) and a generator \\(g\\in G\\), for \\(a=[k]g\\)</p> <p>For \\((Zn, +)\\) with Euclid's extended algorithm, \\(k\\) can be found in \\(O(\\log n)\\), but for \\((Zp*, \\times)\\) no fast algorithm is known and can be solved in \\(O((\\log n)^k)\\)</p> <p>Essentially, the problem comes down to the following formula: \\(g^n\\mod a = x\\). Calculating \\(n\\) if \\(x\\), \\(g\\) and \\(a\\) is known can only be done with brute force and as such this is a one-way function.</p> <p></p>"},{"location":"23FS/ITS/3_Public%20Key%20Cryptography.html#diffie-hellman","title":"Diffie-Hellman","text":"<p>Alice and Bob agree on cyclic group \\(G\\) with a difficult-to-solve DLP and a generator \\(g\\) for \\(G\\). \\(g\\) and \\(G\\) are not secrets and this can be done in public.</p> <ol> <li>Alice and Bob choose as their private keys a random number \\(a\\) and \\(b\\) with \\(1 &lt; a,b &lt; |G|\\)</li> <li>Alice sends her public key \\(A=[a]g\\)</li> <li>Bob sends his public key \\(B = b[g]\\)</li> <li>Alice computes \\(SA=[a]B=[a]([b]g)=[ab]g\\)</li> <li>Bob computes \\(SB=[b]A=[b]([a]g)=[ba]g\\)</li> </ol> <p>After this \\(SA=SB\\). Alice and Bob can now use \\(SA\\) or \\(SB\\) to generate a key. This is necessary as:</p> <ul> <li>Some bits may always be zero or easily guessed</li> <li>\\(SA\\) or \\(SB\\) may not be uniformly distributed</li> <li>\\(SA\\) or \\(SB\\) may not be long enough</li> </ul> <p>To solve this, \\(SA\\) is put through a key derivation function (KDF). For a Dieffie-Hellman based key exchange, a hash based key derivation function (HKDF) can be used.</p> <p></p>"},{"location":"23FS/ITS/3_Public%20Key%20Cryptography.html#man-in-the-middle","title":"Man-in-the-Middle","text":"<p>This is possible when Alice and Bob can't check their respective identity. To solve this, Bob and Alice have to check each others identity before starting data.</p>"},{"location":"23FS/ITS/3_Public%20Key%20Cryptography.html#integrated-encryption-scheme-ies","title":"Integrated Encryption Scheme (IES)","text":"<p>IES works if the receiver isn't online.</p> <p></p>"},{"location":"23FS/ITS/3_Public%20Key%20Cryptography.html#elliptic-curve-cryptography","title":"Elliptic-Curve Cryptography","text":"<p>Let \\(F\\) be a set with the operations \\(\\times\\) and \\(+\\), so that</p> <ul> <li>\\((F, +)\\) is a commutative group</li> <li>\\((F\\setminus\\{0\\}, \\times)\\) is a commutative group</li> <li>\\(\\times\\) distributes over +: \\(a\\times (a+b)=a\\times b + a \\times c\\)</li> </ul> <p>For right choice of curve, recommend 256-bit-size field for 128-bit work factor.</p>"},{"location":"23FS/ITS/4_Integrity%20and%20Authentication.md.html","title":"Integrity and Authentication","text":"<p>In this chapter, errors during transit aren't important and are usually already handled by the hardware. These hash functions are used to prevent malicious modifications of messages.</p>"},{"location":"23FS/ITS/4_Integrity%20and%20Authentication.md.html#cryptographic-hash-function","title":"Cryptographic Hash Function","text":"<p>A cryptographic hash function maps a variable-length input bits to a fixed-size output string. Typically, the output size is <code>128</code>, <code>160</code>, <code>256</code> or <code>512</code> (today only <code>256</code> bits and upwards should be used).</p> <p>Important properties are:</p> <ul> <li>The hash can be efficiently computed</li> <li>The mapping should be pseudo-random. No connection between the message and its hash should exist. Usually, this means one bit in the input should change half of the output bits.</li> <li>Given a hash, I should be practically impossible to find a message that produces the hash (preimage resistance).</li> <li>It should be practically impossible to find two messages that map to one hash (collision resistance).</li> </ul> <p>If an algorithm fulfils all of these properties, a hash can be used as a stand-in for a message.</p> <p>These are some popular hash functions:</p> <ul> <li>MD5 (128-bits, broken)</li> <li>SHA-1 (160-bits, broken)</li> <li>SHA-2 (224-512-bits, considered secure)   There are no known attacks. However, the NSA was involved in the design. It is considerable faster than SHA-3 and BLAKE.</li> <li>SHA-3 (224-512-bits, considered secure)   Was a winning algorithm in a contest and uses a completely different construction as SHA-2. It significantly slower than SHA-2</li> <li>BLAKE (224-512-bits, considered secure)   Was another finalist, but SHA-3 won. It is a bit faster than SHA-3, but less known and less tested.</li> </ul>"},{"location":"23FS/ITS/4_Integrity%20and%20Authentication.md.html#possibilities","title":"Possibilities","text":"<p>One case is, if one wants to detect accidental errors during data transmission. To do this, when sending a message, the corresponding hash is computed and appended. The receiver will check the received hash.</p> <p>This helps against accidental changes, but not against malicious attacker, as the attacker can just replace the hash.</p> <p>Possible solutions are</p> <ul> <li>Adding secrets to hash functions (Message Authentication Code (MAC))</li> <li>Use a hash function together with digital signatures</li> </ul>"},{"location":"23FS/ITS/4_Integrity%20and%20Authentication.md.html#message-authentication-code-mac","title":"Message Authentication Code (MAC)","text":"<p>A popular example for a MAC is HMAC. The inner hash function does not need to be collision resistance, only the pseudo-random mapping is necessary. The inner and outer key must be different.</p> <p>The key is padded with <code>0</code> if it is not 512 bits long.</p> <p></p>"},{"location":"23FS/ITS/4_Integrity%20and%20Authentication.md.html#digital-signatures","title":"Digital Signatures","text":"<p>The hash value is encrypted with the private key and sent to the receiver. The receiver will decrypt the hash with the public key and check the hash value.</p> <p>This is done, over just encrypting the message, for performance reasons. Hashing a gigabyte of data is a lot faster then encrypting it. There is also the added complexity of having to use a cipher mode for the public-cryptographic encryption.</p> <p></p> <p>Popular digital signature schemes are:</p> <ul> <li>RSA (recommended key length: 3072 bits)</li> <li>DSA (recommended key length:  256 bits)</li> </ul>"},{"location":"23FS/ITS/4_Integrity%20and%20Authentication.md.html#forging-documents","title":"Forging Documents","text":"<p>To brake a digital signatures, the following options exists:</p> <ul> <li>Brake the digital signature scheme by obtaining the Boss' private key</li> <li>Prepare the real letter first, let it be signed and then a fake reference letter that has the same hash as the original one (preimage).</li> <li>Prepare both the real letter and the fake letter at the same time. </li> </ul> <p>The following image shows a preimage attack:</p> <p></p> <p>To find a collision for a given hash value, on average, halve of the hashes need to be tried: \\(2^{h-1}\\) (\\(h\\) is the length of the hash)</p> <p>To create two documents with the same hash, on average, \\(2^{\\frac h 2}\\) hashes are needed.</p> <p>To still have a a work factor of 128 bits, a hash needs to have at least 256 bits.</p>"},{"location":"23FS/ITS/4_Integrity%20and%20Authentication.md.html#mac-then-encrypt-mte-and-encrypt-then-mac-etm","title":"MAC-then-encrypt (MtE) and encrypt-then-MAC (EtM)","text":"<p>In MtE, first a MAC is created and then it is encrypted. In EtM, first it is encrypted and then the MAC is built.</p> <p>An advantage for EtM is that if an bug in the encryption is found (like a buffer overflow), then this can be taken advantage of. If the MAC fails, then the file won't be decrypted. </p>"},{"location":"23FS/ITS/4_Integrity%20and%20Authentication.md.html#authenticated-encryption-with-additional-data-aead","title":"Authenticated Encryption with Additional Data (AEAD)","text":"<p>One example for AEAD is AES-GCM.</p> <p></p> <ul> <li>Advantages:</li> <li>Good performance, as the encrpytion of the blocks can be done in parallel and the multiplication in \\(GF(2^{128})\\) requires relatively little computing power</li> <li>It is an official NIST standard</li> <li>It follows the Encrypt-then-MAC approach</li> <li>Disadvantages:</li> <li>Much more complicated than straight-up CBC with MAC in EtM</li> <li>Can lose all of its security with a very small mistake, like reusing the initialisation vector \\(IV\\)</li> </ul>"},{"location":"23FS/ITS/4_Integrity%20and%20Authentication.md.html#authentication-with-passwords","title":"Authentication with Passwords","text":"<p>There are two security problems with passwords:</p> <ul> <li>Sniffing   If the password is sent over the network, others can sniff the password. To prevent this, the password needs to be encrypted with TLS or similar</li> <li>Physhing   The user is directed to a fake login screen where the password can be phished.</li> <li>Online Attacks   Attackers can guess passwords directly on the target systems. The site should slow the process down, if multiple wrong passwords were found. The website should never report if the user or the password was wrong, only that both was wrong</li> <li>Offline Attacks   The attacker compromises the system itself and gets the password files</li> <li>Password Re-Use   User often re-use the passwords. If passwords were comprimised at a website, crackers can try them on other websites</li> </ul>"},{"location":"23FS/ITS/4_Integrity%20and%20Authentication.md.html#hashed-passwords","title":"Hashed Passwords","text":"<p>Password should only be store hashed. </p> <p></p> <p>This can be cracked by:</p> <ul> <li>Using rainbow-tables (precompiled attack)</li> <li>Dictionary attack</li> </ul> <p>To protect against those attacks, salting should be used. When hashing a password a random 64 - 128 bits value is added. This value, also called salt, can be stored in plain text. It should be different for every password. This means that the attacker would need to store 64 - 128 bits more per password.</p> <p></p> <p>There is also peppering, where an additional secret is added to the password before hashing. This secret is the same for all the password, but is stored in an hardware security module.</p> <p></p> <p>Another trick is to do \"key-streching\" where when hashing the password is hashed multiple times. This results in the hashing taking longer.</p> <p>To store passwords, Argon2d and Argon2id should be used</p>"},{"location":"23FS/ITS/4_Integrity%20and%20Authentication.md.html#computational-effort-to-crack-a-password","title":"Computational effort to crack a Password","text":""},{"location":"23FS/ITS/5_Certificates.html","title":"Certificates","text":""},{"location":"23FS/ITS/5_Certificates.html#certificate-chains","title":"Certificate Chains","text":"<p>All certificates, except the root certificate, are sent by the web server. Each certificates authority can be checked by verifying it with the previous certificate in the chain. </p> <p>Root certificates are self-signed as they are signed with itself.</p> <p>The root certificates are prepacked with the browser or the OS. If there is a breach of a CA, the browser or OS needs an update.</p>"},{"location":"23FS/ITS/5_Certificates.html#obtaining-a-certificate","title":"Obtaining a Certificate","text":"<ol> <li>Alice creates a key pair (\\(K_{www.alice.com, pub}\\), \\(K_{www.alice.com, priv}\\))</li> <li>Alice sends a Certifficate Signing Request (CSR) containing (www.alice.com, \\(K_{www.alice.com, pub}\\), \\(K_{www.alice.com, priv}\\)) to her CA of choice</li> <li>The CA verifies that Alice really owns www.alice.com</li> <li>The CA signes Alice's CSR  giving the signature \\(S=\\mathrm{sign}(CSR, K_{Trent, priv})\\)</li> <li>The CA now puts the following together into a certificate:</li> <li>The subject name: www.alice.com</li> <li>The subject public key \\(K_{www.alice.com, pub}\\)</li> <li>The issuer name: The name of the CA</li> <li>The issuer signature \\(S\\)</li> <li>Alice pays the CA and the CA sends the certificate to Alice</li> </ol>"},{"location":"23FS/ITS/5_Certificates.html#verifying-a-certificate","title":"Verifying a certificate","text":"<p>To very the signature of a certificate, one needs to have the public key of the certificate authority (CA). However, this certificate needs to be verified as well.</p> <ol> <li>Bob connects to www.alice.com</li> <li>The server sends the certificate chain to Bob (except the root certificate). The chain has the certs \\(C[1], ..., C[n]\\), where \\(C[1]\\) is Alice's certificate.</li> <li>Check that \\(C[1].name = www.alice.com\\)</li> <li>for i = 1 to \\(n-1\\)</li> <li>Check that \\(C[i].issuer = C[i+1].subject\\)</li> <li>Check that \\(C[i].signature\\) can be verified with \\(C[i+1].publicKey\\)</li> <li>Check that \\(C[i]\\) is currently valid</li> <li>Locate the root certificate \\(R\\) with \\(C[n].issuer = R.subject\\). If no root certificate can be found, fail</li> <li>Verify \\(C[n].signature\\) with \\(R.publicKey\\)</li> <li>Verify \\(R.signature\\) with \\(R.publicKey\\) (since \\(R\\) is a self-signed root certificate)</li> </ol> <p>The following graphic also shows the flow of information when verifying a certificate:</p> <p></p>"},{"location":"23FS/ITS/5_Certificates.html#what-can-go-wrong","title":"What can go wrong?","text":""},{"location":"23FS/ITS/5_Certificates.html#x509","title":"X.509","text":"<p>X.509 relies on ASN.1, the 1988 version of JSON.</p> <p></p> <p>The yellow part is signed with the green part.</p> <p></p> <p>Notes:</p> <ul> <li>Names are specified with attributes to disambiguate different subjects: <code>CN=Janet,O=International Business Machines Corporation,OU=Accounting,C=Switzerland</code></li> <li>This is similar to MAC-then-encrypt </li> </ul>"},{"location":"23FS/ITS/5_Certificates.html#types","title":"Types","text":"<ul> <li>TLS certificate</li> <li>Domain Validation (DV)     Only validates the domain, but not who operates it. This is essentially what Let's Encrypt does.</li> <li>Organization Validation (OV)     Verifies the data of the organization</li> <li>Extended Validation (EV)     Verifies additional things about the domain.</li> <li>Code signing certificate   Confirms authenticity of software or files</li> <li>Client certificates</li> <li>Digital ID that identifies individual user/machine</li> <li>Used for email signatures or access control</li> </ul>"},{"location":"23FS/ITS/5_Certificates.html#certificate-transparency","title":"Certificate Transparency","text":"<p>The logs of certificate are append only, cryptographically assured and publicly auditable. Monitors monitor all logs and report any suspicious certificates. User agent only accepts certificates registered in the logs.</p>"},{"location":"23FS/ITS/5_Certificates.html#certification-revocation","title":"Certification Revocation","text":"<p>If the private key of a certificate is stolen, it needs to be revoke. However, the subject can't change their own certificate. Instead it needs to be marked as revoked. </p>"},{"location":"23FS/ITS/5_Certificates.html#certificate-revocation-list-crl","title":"Certificate Revocation List (CRL)","text":"<p>CA has a list of all revoked certificate (the Certificate Revocation List - CRL) and the browser needs to check if a certificate is on this list.</p> <p></p> <p>To check the validity, for each certificate in the chain a CRL needs to be downloaded and checked if the certificate is not on it.</p> <p></p> <p>However, the CRL is downloaded with HTTP, not HTTPS</p> <ul> <li>CRLs are updated only every couple of days; there is a   time window between revoking a certificate and finding   it on the list</li> <li>Can\u2019t remove a cert from CRL, even when it is expired,   since you may need to check if a signature was made   with a key that was revoked even though it was still valid   (e.g., last will and testament)</li> <li>Sometimes, many certs go onto a CRL in a short amount   of time, e.g., Heartbleed</li> <li>CRLs only get larger, delay / scalability issue for CRL   download</li> <li>Due to these limitations, support for CRL downloading is getting smaller, CAs not provide them   anymore, many programs no longer use them</li> </ul>"},{"location":"23FS/ITS/5_Certificates.html#online-certification-status-protocol-ocsp","title":"Online Certification Status Protocol (OCSP)","text":"<p>Alternatively there is the Online Certification Status Protocol (OCSP). Every certificate comes with an URL where the browser can check if the certificate is still valid. This is done over HTTP, but the answer is signed with the private key of the CA and can be trusted.</p> <p></p> <ul> <li>Advantages compared to CRL:</li> <li>Fresh status information about a certificate</li> <li>Only little information is exchanged</li> <li>Disadvantages</li> <li>There is a privacy issue as the CA can see who vists which server</li> <li>The OCSP must always be available</li> <li>Most client implement a soft fail. If OCSP response is not received in time then a certificate is treated as good</li> </ul> <p>Those issues were tried to be fixed with OCSP Stapling. Here the server queries the OCSP-Responder and caches the answer. The client will receive the OCSP-response from the server itself. This has a timestamp in it and is signed with the private key of the CA.</p> <p></p> <p>Benefits of this are:</p> <ul> <li>Less dependent on the availability of the OCSP-responder as if it cannot be reached, the server can still use the cached copy</li> <li>Scalability</li> <li>The privacy issue is solved</li> </ul> <p>Issues of this are:</p> <ul> <li>There is a validity period of a OCSP response</li> <li>If no valid OCSP response is cached, the server won't include one. If the client can't reach the OCSP endpoint it will default to a soft fail.</li> </ul> <p>There is a third alternative, OCSP must-staple, in which the certificate is rejected if no stable is included (hard fail). This reintroduces the DOS problem of OCSP (without stable). The <code>must-staple</code> flag is included in the sent certificate.</p> <p>With Browser-Summarized CRLs, where browser vendors download CRLs centrally and compress this with a bloom filter. The browser vendor push regular updates (every 6h) to the client.</p>"},{"location":"23FS/ITS/5_Certificates.html#root-certificate-revocation","title":"Root Certificate Revocation","text":"<p>To revoke a root certificate, every library and application, which bundles root certificates, need to be updated. All certificates, issued by a revoked root certificate, need to be revoked as well.</p>"},{"location":"23FS/ITS/5_Certificates.html#lets-encrypt","title":"Let's Encrypt","text":"<p>The following shows how Let's Encrypt verifies the domain owner ship. This is done, by generating a key pair. One value is kept on the server accessible the other is sent to Let's Encrypt.</p> <p></p> <p>Let's Encrypt uses both browser-summarized CRLs and OCSP.</p> <p></p>"},{"location":"23FS/ITS/6_Firewall.html","title":"Firewall","text":"<p>A firewall is a device that sits between two or more networks to control the packet flow between them.</p> <p>A firewall can:</p> <ul> <li>Control access from the internal (company) network to the internet</li> <li>Control access from the internet to the internal computers</li> <li>Block malicious incoming web traffic</li> <li>...</li> </ul>"},{"location":"23FS/ITS/6_Firewall.html#packet-filtering-firewall","title":"Packet Filtering Firewall","text":"<p>This firewall operates on the network and transport layer and packets (with IPs and ports). However, application data is not inspected.</p> <p>An advantage is how fast those firewalls are, but the content of the traffic is not inspected.</p>"},{"location":"23FS/ITS/6_Firewall.html#stateful-packet-filtering-firewalls","title":"Stateful Packet Filtering Firewalls","text":"<p>A stateful packet filtering firewall tracks TCP connections and UDP sessions. The firewall stores information about the session, like protocol, source/destination address, ports, session duration, protocol phase in TCP and many more.</p>"},{"location":"23FS/ITS/6_Firewall.html#application-layer-firewall","title":"Application-Layer Firewall","text":"<p>This firewall operates on the application layer. To do this, they split the end-to-end connection. This results in a connection between the server and the firewall and the firewall and the client.</p> <p>While this allows deep inspection data, it is relatively slow, encrypted data can be a limit and this firewall are usually optimised for one specific protocol. Additionally, the security depends on how up-to-day the firewall is.</p>"},{"location":"23FS/ITS/6_Firewall.html#typical-scenario","title":"Typical Scenario","text":"<p>All traffic from the internet has to go through the firewall and usually a connection can only be initiated from the internal network.</p> <p>The purpose of the DMZ is to provide a space for externally accessible server. From the internal network and the internet can a connection be initiated to the DMZ. If a server in the DMZ gets hacked, the traffic still has to go through a firewall.</p> <p></p> <p>This provides largely the same benefits</p> <p></p> <p>The diagram above shows a diagram with a Web Application Firewall (WAF), which is in front of the server accessible from the external network.</p>"},{"location":"23FS/ITS/6_Firewall.html#limitations","title":"Limitations","text":"<p>Firewalls create a perimeter around the internal network and can control the access to this internal network. However, if a hacker can circumvent the firewall somehow, the firewall becomes entirely useless.</p> <p>Additionally, most firewall can't inspect the application data.</p>"},{"location":"23FS/ITS/6_Firewall.html#netfilternftables","title":"Netfilter/Nftables","text":"<p>The diagram above shows how the Linux kernel handles network packages and what hooks are called during the processing of a packet.</p>"},{"location":"23FS/ITS/6_Firewall.html#nftable-rules","title":"Nftable Rules","text":"<p>A rule has a classification part and an action part. The classification says to which packet this rule applies and the action what to do with this package. Typical rules are:</p> <ul> <li> <p>Accept   Continue to process the packet</p> </li> <li> <p>Drop   Stop processing the packet</p> </li> <li> <p>Reject</p> </li> </ul> <p>Stop processing the packet and tell the sender with an ICMP \"port unreachable\" packet</p> <ul> <li>Jump   Continue processing the packet somewhere else</li> </ul> <p>Here are some examples for rules:</p> <pre><code>ip saddr 8.8.8.8 ct state new  accept # the source address = 8.8.8.8 and enable ct for this connection\n\nip daddr 8.8.8.8 drop # daddr = destination address\n\nip daddr 8.8.8.8 counter drop # counts all packets to 8.8.8.8 and then drops it\n\nip daddr 8.8.8.8 reject # rejects all packets to the ip 8.8.8.8\n\n# does the same thing, but sends a ICMP host-prohibited message\nip daddr 8.8.8.8 reject with icmp type host-prohibited \n\nip6 nexthdr tcp accept # accept all IPv6 packets carrying TCP (nexthdr=next header)\n\nip6 nexthdr != tcp accept # accept all IPV6 packets which don't carry TCP\n\n# (iifname = input interface name) accept all packets comming on the innterface eth2\niifname eth2 accept \n\n# Accept a max of 10 ICMP echo messages per second\nicmp type echo-request limit rate 10/second accept\n\n# Reject packets from multiple ip addresses\nip daddr { 8.8.8.8, 1.1.1.1 } reject\n\n# Accept packets going to port 80 and 443\ntcp dport { http, https } accept\n\n# Accept ICMPv6 neighbour-discovery packets\nicmpv6 type { nd-neighbor-solicit, nd-neighbor-advert, nd-router-solicit, nd-router-advert } accept\n\n# combine multiple conditions. The order matters\nip saddr 10.0.0.0/8 tcp dport ssh accept\n# (saddr 10.0.0.0/8) (tcp dport ssh) \n</code></pre> <p>The followings are conditions:</p> <pre><code>iifname $ifc accept # accept if input interface name = $ifc\noifname $ofc accept # accept if output interface name = $ofc\n\nip saddr 8.8.8.8 accept # the source address = 8.8.8.8\nip daddr 8.8.8.8 accept # the destination address = 8.8.8.8\n\nnexthdr tcp accept # next header (=nexthdr) carries tcp\nnexthdr tcp != accept # next header (=nexthdr) has to not carry tcp\n\nip6 accept # accept all ipv6 packets\n\nicmp type echo-request accept # accept ping request\nicmp type echo-responde accept # accept ping response\n\ntcp dport { http, https, 30 } accept # accept tcp ports to http, https and port 30\n\nlimit rate 10/second accept # rate limit\n\ntcp flags == syn accept # only initial tcp connection request \n\nct state established,related accept # accept established and related connections (if connection tracking is enabled)\n</code></pre>"},{"location":"23FS/ITS/6_Firewall.html#chains","title":"Chains","text":"<p>A chain contains rules and a default policy. By default policy is accept if not changed. A chain which is called on a hook are Base-Chain and chains which are not associated with a hook are called non-base-chain.</p> <p>Linux goes through the chain top-down until a rule matches.</p> <p>Chains have types, but we only have looked at <code>filter</code>. Similarly, chains also have a priority.</p> <p>These are some examples for chains:</p> <pre><code># name ssh-traffic is just a name used to refer to this chain\nchain ssh-traffic {\n    # specifies the type=filter and the used hook is INPUT\n    # the priority is 0 and the default policy is drop\n    type filter hook input priority 0; policy drop;\n    # one filter in the chain\n    tcp dport ssh count accept\n}\n</code></pre> <pre><code>chain tcp-traffic {\n    type filter hook input priority 0; policy drop;\n    # if this rule matches, go to http-traffic chain\n    tcp dport { https, http } jump http-traffic\n}\nchain http-traffic { # non-base-chain\n    # no input hook -&gt; non-base-chain\n    type filter; policy drop;\n    # no condition, matches everything\n    count accept\n}\n</code></pre>"},{"location":"23FS/ITS/6_Firewall.html#tables","title":"Tables","text":"<p>Chains must be wrapped in a table directive. Tables have a packet family for which they are used. <code>ip</code> = IPv4, <code>ip6</code> = IPv6 and <code>inet</code> = IPv4 and IPv6</p> <pre><code>#!/usr/sbin/nft -f\nflush ruleset # clear all tables and chains\n\n# inet = ipv4 and ipv6\ntable inet mytable {\n    chain tcp-traffic {\n        type filter hook input priority 0; policy drop;\n        tcp dport { https, http } jump http-traffic\n    }\n    chain http-traffic { # non-base-chain\n        type filter; policy drop;\n        count accept\n    }\n}\n</code></pre> <p>By using the <code>#!/usr/sbin/nft -f</code> , this can be executed as a shell script. All changes will be done in an atomic fashion.</p>"},{"location":"23FS/ITS/6_Firewall.html#variables","title":"Variables","text":"<p>These scripts can also use variables:</p> <pre><code>#!/usr/sbin/nft -f\ndefine ifc = eth1\ndefine svcs = { ssh, http, https }\ndefine net6 = 2001:db8:2:c::/64\ntable inet myfilter {\n    chain myinput {\n        type filter hook input priority 0; policy drop;\n        iifname $ifc ip6 saddr $net6 jump ip6-input\n        tcp dport $svcs accept\n    }\n}\n</code></pre>"},{"location":"23FS/ITS/6_Firewall.html#example","title":"Example","text":"<pre><code>#!/usr/sbin/nft -f\ndefine iifc = eth0 # Interface to internal network\ndefine difc = eth1 # Interface to DMZ network\ndefine eifc = eth2 # interface to external network\ndefine inet = 160.85.200.0/24 # Internal network\ndefine dnet = 160.85.201.0/24 # DMZ network\n#define enet = # Not defined\ndefine iaddr = 160.85.200.1 # FW address on internal net\ndefine daddr = 160.85.201.1 # FW address on DMZ\ndefine eaddr = 160.85.202.1 # FW address on external net\n\ntable ip myfilter {\n    # chain to local processes\n    chain myinput {\n        type filter hook input priority 0; policy drop;\n        # allow internal host to ping the firewall\n        iifname $iifc ip saddr $inet ip daddr $iaddr icmp type echo-request accept\n    }\n    # chain from local processes\n    chain myoutput {\n        type filter hook output priority 0; policy drop;\n        # allow the firewall to reply to ICMP echo request from the internal network\n        oifname $iifc ip daddr $inet ip saddr $iaddr icmp type echo-reply accept\n    }\n\n    # chain for forwarded packages\n    chain myforward {\n        type filter hook forward priority 0; policy drop;\n        # allow hosts from external network to communicate the DNS server in the DMZ\n        iifname $eifc oifname $difc ip daddr 160.85.201.67 udp dport domain accept\n        # allow the DNS server to send packets outwards (to reply)\n        iifname $difc oifname $eifc ip saddr 160.85.201.67 udp sport domain accept\n\n        # allow internal hosts to connect to the web server on the external network\n        iifname $iifc oifc $eifc ip saddr $inet tcp dport http accept\n        # filter packets from the external network to the internal connected\n        # with a sync flag set (used to initiated the tcp connection)\n        iifname $eifc oifc $iifc ip daddr $inet tcp sport http tcp flags != syn accept\n    }\n}\n</code></pre>"},{"location":"23FS/ITS/6_Firewall.html#stateful-chains","title":"Stateful Chains","text":"<p>To enable connection tracking, <code>ct</code> has to be specified.</p> <pre><code>chain myinput {\n    type filter hook input priority 0; policy drop;\n    # enables connection tracking\n    # This means, if there is an already established connection or a connection \n    # related to an existing connection, this packet should be accepted.\n    ct state established,related accept\n    # the \"ct state new accept\" creates an established connection in the tracker\n    iifname $iifc ip saddr $inet icmp type echo-request ct state new accept\n}\n\nchain myoutput {\n    type filter hook output priority 0; policy drop;\n    # This accepts all packages with an already established or related connection\n    ct state established,related accept\n}\n\nchain myforward {\n    type filter hook forward priority 0; policy drop;\n    ct state established,related accept\n    iifname $eifc oifname $difc ip daddr 160.85.201.67 udp dport domain \\\n        ct state new accept\n    iifcname $iifc oifname $eifc ip saddr $inet tcp dport { http, https } \\\n        ct state new accept\n}\n</code></pre>"},{"location":"23FS/ITS/6_Firewall.html#nat","title":"NAT","text":"<p>The following enables network address translation (NAT) for addresses</p> <pre><code>define i4nw = 10.109.1.0/24      # Internal IPv4 network\n\ndefine eifc = ens5               # Interface name to external network\ndefine e4nw = 10.109.3.0/24      # External IPv4 network\ndefine e4ad = 10.109.3.5         # External IPv4 address\n\ntable ip mynat {\n    chain mysnat {\n        type nat hook postrouting priority 0;\n\n        oifname $eifc ip saddr $i4nw ip daddr $e4nw snat $e4ad\n    }\n}\n</code></pre>"},{"location":"23FS/ITS/6_Firewall.html#port-scanning","title":"Port Scanning","text":"<p>With port scanning, an actor can determine the services running on a host.</p> <p>The following steps are usually done:</p> <ol> <li>Check if the host is available by pinging it</li> <li>Establishing a TCP connections to the ports</li> <li>If a connection can be stablished, then a service is available</li> <li>If the server responds with a TCP RST, then no service is available</li> </ol> <p>There are also UDP scans, which sends datagram to the ports and receive either and answer or an ICMP port unreachable message (or nothing).</p>"},{"location":"23FS/ITS/6_Firewall.html#nmap","title":"<code>nmap</code>","text":""},{"location":"23FS/ITS/7_VPN.html","title":"VPN","text":""},{"location":"23FS/ITS/7_VPN.html#performance","title":"Performance","text":""},{"location":"23FS/ITS/7_VPN.html#scenarios","title":"Scenarios","text":"<p>VPNs are often used to allow other subsidiaries/partners or mobile/work from hose users to access company internal networks.</p> <p>This can be a problem if the client uses a dynamic IP, since a firewall can't do reliable access control via the source IP.</p>"},{"location":"23FS/ITS/7_VPN.html#ipsec","title":"IPSec","text":"<p>See Secure Communication/IPSec.md</p>"},{"location":"23FS/ITS/7_VPN.html#openvpn","title":"OpenVPN","text":"<p>OpenVPN operates a virtual network card as an application in user space and packages IP packets into UDP packets. OpenVPN usually is used over UDP since TCP over TCP can lead to very poor performance.</p> <p>OpenVPN is partly based on TLS.</p>"},{"location":"23FS/ITS/7_VPN.html#packets","title":"Packets","text":"<p><code>P_ACK</code> has the same function as the TCP ACK package.</p> <p>For <code>P_DATA</code> a packet looks like the following:</p> <p></p> <p>Note the <code>Seq. Nr</code>: this prevents replay attacks since the attacker can't just reply an already sent package. The <code>Pad</code> field is to match the block size for the block cipher.</p>"},{"location":"23FS/ITS/7_VPN.html#wireguard","title":"WireGuard","text":"<p>WireGuard can be very little configured  since miss-configured systems are an often cause. Like IPSec, it works on layer 3 and uses the ChaCha20 cipher with the Curve25519  curve.</p> <p>WireGuard has perfect forward secrecy (PFS), meaning if an endpoint is compromised and old messages were recoreded, then these old messages can't be decrypted.</p> <p></p> <p>WireGuard needs a kernel module, since it doesn't has an user space application.</p> <p>Wireguard has a crypto routing table:</p> <p></p> <p>This table shows one wireguard interface, which has a public key, private key and an udp port. There are allowed source IPs (of the tunnled device), to which the interface is allowed to receive packets. With each source IP is a public key associated which is selected depending on the source IP. </p> <p>These are used to verify the integrity of a received packet. When a packet is received, it is decrypted with the interface's private key and then the source IP is read and checked with the associated public key.</p> <p>Internet endpoint is the equivalent of gateways.</p> <p></p> <p>WireGuard has DoS mitigation by sending a cookie reply under load. The client has to do some work to actually do a successful handshake. This means more work for a potential flooder.</p>"},{"location":"23FS/ITS/8_Authentication_Protocols.html","title":"Authentication Protocol","text":"<ul> <li>Identification:    The user says they are <code>xy</code></li> <li>Authentication   The service checks if the user is actually <code>xy</code> by authenticating the user e.g. via a password or other means. More general one proofs who they are by something that only they know (passwords), only they have (hardware token) or they are (e.g. fingerprint, faceID, ...)</li> <li>Authorisation   The service checks if the user has permissions to access some page or service</li> <li>Accounting   The logging trail to later reconstruct log ins or attacks</li> </ul>"},{"location":"23FS/ITS/8_Authentication_Protocols.html#two-factor-authentication-2fa","title":"Two-Factor Authentication (2FA)","text":"<p>2FA should protect the user in case the password was leaked, a potential attacker still needs a second factor. Most prominent today, this is archived by a password and a one-time password (OTP)</p> <p>One attack is, that an attacker creates a fake web site and phishes the user.</p> <p></p> <p>To prevent this, a challenge-response based approach can be used (e.g. like what post finance used). However, this can still be attacked with a phishing-attack:</p> <p></p> <p>This sometimes is also done on the smartphone. This, however, doesn't improve security.</p> <p>Another, still popular approach, is mobile TAN (mTAN), where a message via SMS is sent to the user which the user then enters on the web site.</p>"},{"location":"23FS/ITS/8_Authentication_Protocols.html#indirect-user-authentication","title":"Indirect User Authentication","text":"<p>The user logins are stored and managed by one centralised server. </p> <p>Direct user authentication would be if the user directly logged in in the server without the server asking a RADIUS server (or similar).</p>"},{"location":"23FS/ITS/8_Authentication_Protocols.html#windows-nt-lan-manager-ntlm","title":"Windows NT LAN Manager (NTLM)","text":"<p>A windows domain is a collection of users and services, with the access being controlled by a domain controller (DC). Each user has only one account per domain. Users can be assigned to groups.</p> <p>All users and servers must trust the domain controller, since the domain controller decides if a user/group has access. (A server one has to trust, is one that can attack you!)</p> <p></p> <p>When starting the computer, the user enters the domain, username and password. The client computes the MD4-hash and forgets the password. The server sends the user a challenge, to which the user computes the response with the MD4-hash which is returned to the server. The server sends the domain, username, challange and response to the domain controller which checks the access. The server and domain controller have a shared secret.</p> <p></p> <p>The following shows how the client creates a response to the challenge </p> <p></p>"},{"location":"23FS/ITS/8_Authentication_Protocols.html#kerberos","title":"Kerberos","text":"<p>In kerberos, each participant is called a principal. Each principal shares a common seccret with a centralised server, the key distribution centre (KDC) (this is the equivalent to the domain controller).</p> <p>All principals trust the KDC.</p> <p>Kerberos uses tickets, which are issued by the KDC, and proof to a server the authentication.</p> <p></p> <p>Kerberos allows federated acccess across realms:</p> <p></p> <p>When logging in, the Authentication Service (AS) grants a Ticket Granting Ticket (TGT). For this, Alice encrypts and send the time to the AC. The AC then creates the TGT and a session key. Both are needed to get access to a server.</p> <p></p> <p>Alice sends a the TGT encrypted with the session key to the Ticket-Granting Service (TGS). The TGS response with its own session key which then is used to access the server.</p> <p></p> <p>Then Alice can use the sam's session key to access sam's server.</p> <p></p>"},{"location":"23FS/ITS/8_Authentication_Protocols.html#shibboleth","title":"Shibboleth","text":""},{"location":"23FS/ITS/9_Authorization.html","title":"Authorization","text":""},{"location":"23FS/ITS/9_Authorization.html#security-policy","title":"Security Policy","text":"<p>The security policy defines who is allowed to do what and often is role based. The security policy is defined by the business requirement. The security administrator then reads and implements this document.</p> <p>A problem can be authorisation creep when users change roles and their security roles grow and grow. Alternatively, an old role might also be extended. Employees are usually trustworthy. However, these roles become important if an account gets hacked.</p> <p>ITIL defines the following process for managing the access control:</p> <p></p>"},{"location":"23FS/ITS/9_Authorization.html#discretionary-access-control-dac","title":"Discretionary Access Control (DAC)","text":"<p>The user and group of a file has full discretion who can do what.  DAC can be implemented in multiple ways, like ACL or user-group-other schema.</p> <p>Usually there is a bypass, like the root user, as described in the following table:</p> <p></p>"},{"location":"23FS/ITS/9_Authorization.html#access-control-list-acl","title":"Access Control List (ACL)","text":"<p>ACL is a list of permissions for each subject. </p> <p>The standard Linux permissions can be implemented with ACL (but rarely are since they are just bitmasks).</p>"},{"location":"23FS/ITS/9_Authorization.html#posix-acl","title":"Posix ACL","text":"<p>ACL in Linux are implemented as an extension on the existing DAC permission model. It must be explicitly be enabled in <code>/etc/fstab</code> or while mounting with the <code>acl</code> mount option.</p> <p>If one mounts a disk with ACL permissions without the <code>acl</code> flag, they might get more permission.</p> <p>With <code>getfacl &lt;file&gt;</code> the ACL permissions of a file can be read, which outputs the following:</p> <pre><code># file: meetings/\n# owner: root\n# group: management\nuser::rwx\ngroup::r-x\nother::---\n</code></pre> <p>This is the minimal ACL and is what is outputted if no additional ACL rules are set. <code>user::</code> represents the owner, <code>group::</code> is the group and <code>other::</code> represents the other group.</p> <p>With <code>setfacl -m user:$user:$permission $file</code> new user roles can be set. Equally with <code>setfacl -m group:$user:$permission  $file</code> new group roles can be set. The same is true for <code>other</code>. </p> <p>For example: <code>sudo setfacl -m group:development:rwx meetings</code></p> <p>In the following example, the directory <code>normal</code> the group <code>root</code> has <code>rwx</code>, while the normal group has <code>r-x</code>. The mask is equal to all permissions ored and represents the effective permission present on the file system: <code>drwxrwxr-x+ 2 sebi sebi 40 Jun 18 21:42 normal/</code>. The <code>+</code> tells the user that additional ACL permissions are set.</p> <pre><code># file: normal/\n# owner: sebi\n# group: sebi\nuser::rwx\ngroup::r-x\ngroup:root:rwx\nmask::rwx\nother::r-x\n</code></pre>"},{"location":"23FS/ITS/9_Authorization.html#standard-linux-permission-model","title":"Standard Linux Permission Model","text":"<p><code>rwxrwxrwx</code> is often displayed as an three octal numbers</p> <ul> <li><code>x</code> = 1</li> <li><code>w</code> = 2</li> <li><code>r</code> = 4</li> </ul> <p></p> <p>On a directory:</p> <ul> <li><code>r</code> allows you to get the file names in the directory (but not to read it)</li> <li><code>w</code> allows you to modify the file name, as well as create and delete the file. To write to the file <code>w</code> on the file is required</li> <li><code>x</code> allows you to read the inodes of the files and change in the directory</li> </ul> <p>To change the permission of a file, the user needs to be the owner of the file.</p> <p>Additionally to the three <code>rwx</code>, there are setuid, setgid and the sticky bit</p> <ul> <li><code>Setuid</code> bit (SUID): If set and the file is executed by any user, the process will have the same rights as the owner of the file. If set, an <code>s</code> appears after the user portion: <code>rwsr-xr-x</code>. It can be set by <code>chmod u+s</code></li> <li><code>Setguid</code> bit (SGID): If set and the file is executed by any user, the process will have the same rights as the group. If a directory has the SGID bit set, it may mean (depending on the system), that newly created file in that directory inherit the group of the directory instead of the user creating it.  If set, an <code>s</code> appears after the group portion: <code>rwr-xsr-x</code>. It can be set by <code>chmod g+s</code></li> <li><code>Sticky</code> bit: If the sticky bit is set on a directory, a file contained by the directory can only be deleted or renamed by the root or the owner of the file. If set, a <code>t</code> appears instead of the last <code>x</code>  (<code>T</code> if other doesn't have <code>x</code> permissions). It can be set by <code>chmod +t</code></li> </ul>"},{"location":"23FS/ITS/9_Authorization.html#linux-vs-windows","title":"Linux vs Windows","text":""},{"location":"23FS/ITS/9_Authorization.html#capability","title":"Capability","text":"<p>A capability is a unforgeable token owned by a subject the contains all the granted permissions (e.g. <code>[ (port 80, {read,write}), (/var/www, {read,write}) ,\u2026 ]</code>).</p> <p>Tokens can be given to other subjects/processes which then \"inherit\" those permissions.</p> <p></p>"},{"location":"23FS/ITS/9_Authorization.html#confused-deputy-problem","title":"Confused Deputy Problem","text":"<p>One problem with ACL implementation is when a user delegates something to an other process (a deputy) with higher privileges. The deputy then needs to do authorisation.</p> <p></p> <p>Capabilities solves this problem since Alice would give the compiling service her token which is then used by the compilation service. This is called Confused Deputy Problem</p> <p></p> <p>One problem with ACL implementation is when a user delegates something to an other process (a deputy) with higher privileges. The deputy then needs to do authorisation.</p> <p></p> <p>Capabilities solves this problem since Alice would give the compiling service her token which is then used by the compilation service.  This is called Principle of Least Authority or Principle of Least Privilege.</p>"},{"location":"23FS/ITS/9_Authorization.html#mandatory-access-control-mac","title":"Mandatory Access Control (MAC)","text":"<p>MAC allows a system administrator to specify system-wide policies. Importantly, these can't be altered by a normal user in comparison to DAC.</p> <p>Concrete implementations are SELinux and AppArmor.</p>"},{"location":"23FS/ITS/9_Authorization.html#windows","title":"Windows","text":"<p>(MIC = Mandatory Integrity Control)</p> <p>Windows has integrity levels (IL), which are:</p> <ul> <li>Installer</li> <li>System (OS Processes)</li> <li>High (administrators)</li> <li>Medium (non-administrators)</li> <li>Low (temporary internet files)</li> <li>Untrusted (logged on anonymously)</li> </ul> <p>These are assigned to objects and processes. Processes inherit their IL from their parent. However, a process can start a process with a reduced IL. The goal of this system is to enforce the no write-up rule (e.g. prevent a process started by a user to make arbitrary modifications to the user's files).</p> <p>The following are some commands used for Windows administration:</p> <p></p>"},{"location":"23FS/ITS/9_Authorization.html#role-based-access-control-rbac","title":"Role-Based Access Control (RBAC)","text":"<p>Role based access control can be a natural way for \"normal\" users to express what permissions a user has (e.g. a user should have the role of a developer).</p> <p>RBAC can support the following three security principles: </p> <ul> <li>Principle of least privilege (or authority)   By defining the roles and associated permissions of these roles in an organisation and then associate each user one ore more roles</li> <li>Separation of duty   For example, requiring an accounting clerk and account manager to participate in issuing a check. These two roles must be mutually exclusive</li> <li>Data abstraction   Administrating permissions on a high level instead of the lower-level access control mechanisms (like ACL or capabilities) on an object-by-object basis.</li> </ul> <p>However, RBAC is not typically supplied by the OS. Additionally, RBAC doesn't allows for roles based on attributes (e.g. Allows an employee to access a file, if he is at their desk).</p>"},{"location":"23FS/ITS/9_Authorization.html#attribute-based-access-control-abac","title":"Attribute Based Access Control (ABAC)","text":""},{"location":"23FS/ITS/Fragen.html","title":"ITS Fragen","text":"<ul> <li>F\u00fcr EAP: Wie funktioniert beim EAP-Type LEAP \"Hash over challenge and password\" f\u00fcr den Server? Es wird kaum ein Sys-Admin jedesmal ein Passwort eingeben.</li> </ul>"},{"location":"23FS/ITS/Secure%20Communication/Basic.html","title":"Basic - Secure Communication","text":"<p>These protocols should archive the following:</p> <ul> <li>Confidentially   Only the endpoints can read the data</li> <li>Integrity   The endpoint detect if the data has been modified</li> <li>Authenticity   The endpoints notice if the other isn't genuine</li> </ul> <p>Further goals can optionally be non-repudiation (an endpoint cannot deny having receive or sent data) and anonymity (the endpoints cannot identify them self).</p> <p>Secure protocols don't help against all attacks:</p> <ul> <li>Software vulnerabilities (like SQL injection or buffer overflows)</li> <li>Malware</li> <li>DDoS Attack</li> </ul>"},{"location":"23FS/ITS/Secure%20Communication/IPSec.html","title":"IPSec","text":"<p>IPSec enables secure end-to-end communication at the network IP layer. This means all protocols on top of IP, like TCP, UDP, ICMP, ... are protected. However, this also means that IPSec needs to be supported by the kernel and all application on the host have access to the tunnel, since it is not application specific.</p> <p>IPSec functions similar to a VPN, like OpenVPN.</p> <p>In the following diagram is shown how a IP packet is wrapped in an ESP IPSec packet.</p> <p></p> <p>If IPsec receives a duplicate <code>SeqNr</code>, then the second packet is dropped.</p> <p></p>"},{"location":"23FS/ITS/Secure%20Communication/IPSec.html#tunnel-mode","title":"Tunnel Mode","text":"<p>IPsec can be used in a tunnel mode, where the whole IP-Packet is packaged in the IPsec packet. This allows IPsec to be used as a VPN-protocol</p>"},{"location":"23FS/ITS/Secure%20Communication/Layer%202.html","title":"Layer 2 - Data Link","text":"<p>Except in wireless networks, layer 2 security is uncommon, since layer 2 security only secures hop-to-hop communication, rather then end-to-end. </p>"},{"location":"23FS/ITS/Secure%20Communication/Layer%202.html#extensible-authentication-protocol-eap","title":"Extensible Authentication Protocol (EAP)","text":"<p>EAP is an extensible authentication protocol implemented on layer 2.</p> <p>EAP sends the following packates:</p> <p></p> <p>There are multiple types defined for the authentication protocol. The following list is not exhaustive.</p> <p></p> <p></p>"},{"location":"23FS/ITS/Secure%20Communication/Layer%202.html#ieee-8021x","title":"IEEE 802.1X","text":"<p>This is a port-based (as in Ethernet jacks) acccess control for LANs. By default the LAN port is not open. If a client connects to it, it first has to authenticate itself. For the authentication part, EAP is used.</p> <p>However, IEEE 802.1X is not very effective. It protects against an attacker which has physical hardware access. But with the following steps, it can be circumvent:</p> <p></p> <p></p> <p>The actual flow of communication looks the following:</p> <p></p>"},{"location":"23FS/ITS/Secure%20Communication/Layer%202.html#wlan","title":"WLAN","text":"<p>Because there is no cable and everything is sent as broadcast, it becomes trivial to sniff packets. </p>"},{"location":"23FS/ITS/Secure%20Communication/Layer%202.html#wep","title":"WEP","text":"<p>In WEP every AP and client shares the same preconfigured long-term key. Since all clients use the same key, everybody who knows the key can read everything on the network.</p> <p>An additional problem is that the key is only either 40bits or 104 bits and uses RC4 encryption (which is broken).</p> <p></p> <p>The following issues exist:</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"23FS/ITS/Secure%20Communication/Layer%202.html#wpa-wifi-protected-access","title":"WPA (WiFi Protected Access)","text":"<p>In WPA clients have to first authenticate themselves at the access point. This can be done with IEEE 802.1X either with EAP and a RADIUS Server or WPA-Enterprise. Alternatively, pre-shared keys (PKS) can be used.</p> <p>Compared to WEP, every client gets its own key and different clients cannot listen in on each other. To still enable broadcast functionality, two sets of 128 bit keys are needed:</p> <ol> <li>For unicast communication (This key is unique per device and session)</li> <li>For broadcast communication (This key is the same for all clients)</li> </ol> <p>To avoid the IV-wrap around issue, the keys are periodically exchanged.</p>"},{"location":"23FS/ITS/Secure%20Communication/Layer%202.html#key-exchange","title":"Key Exchange","text":"<p>To communicate in a WPA/WPA2 WLAN, a client needs the master key, which can be obtained by either with IEEE 802.1X (based on EAP) or with pre-shared keys (PKS).</p> <p>When using IEEE, 802.1X the following describes the flow of information (assuming EAP-TLS is used):</p> <p></p> <p>If pre-shared keys (PKS) is used, then following diagram describes the flow:</p> <p></p>"},{"location":"23FS/ITS/Secure%20Communication/Layer%202.html#temporary-key-integrity-protection-tkip","title":"Temporary Key Integrity Protection (TKIP)","text":"<p>TKIP uses a MAC (message authentic) to protect against the integrity vulnerabilities of WEP. </p> <p>TKIP has the following weaknesses:</p> <ul> <li>The MAC, Micheal, is a two-way function, which enables attackers to learn the integrity key if they know both the plaintext and the MAC</li> <li>RC4 has significant weakness</li> </ul> <p>(This algorithms were chosen for their performance and backwards compatibility with WEP)</p> <p>Because of these weaknesses TKIP shouldn't be used today as it is insecure.</p>"},{"location":"23FS/ITS/Secure%20Communication/Layer%202.html#cbc-mac-protocol-ccmp","title":"CBC-MAC Protocol (CCMP)","text":"<p>In the packet, there are headers, a packet number (PN) to prevent replay attacks and the actual payload. \\(PL(x)\\) is based on \\(PN\\) and a block counter \\(x\\) and is unique p</p> <p>This also protects the header from modification, which is important to protect against attacker redirecting packets to them self. </p>"},{"location":"23FS/ITS/Secure%20Communication/Layer%202.html#wpa2-ieee-80211i","title":"WPA2 (IEEE 802.11i)","text":"<p>Is the second iteration of WPA.</p>"},{"location":"23FS/ITS/Secure%20Communication/TLS.html","title":"TLS (Transport Layer Security)","text":"<p>TLS works on top of TCP and can be implemented in user mode. Each application can use their own implementation independent of the OS. Additionally, TLS doesn't has to worry about lost and re-transmitted data, since this is already handled by the TCP.</p> <p>TLS provides authenticated, integrity-protected and confidential data exchange in addition to disallowing replaying and deleting of messages.</p> <p>There are numerous usage of TLS in different protocols: HTTPS, POS3S, SMTPS, FTPS (not SFTP which is over SSH), IMAPS, ...</p> <p>TLS operates in three phases:</p> <ol> <li>Handshake    Both party authenticate and exchange cryptographic algorithms and key material</li> <li>Data Exchange</li> <li>Connection Tear Down</li> </ol> <p>TLS implements its own fragmentation. This can also be seen in the diagram above.</p>"},{"location":"23FS/ITS/Secure%20Communication/TLS.html#tls-record","title":"TLS Record","text":"<p>TLS defines multiple \"protocols\" for different purposes. Each of those protocols send a TLS message in the following format:</p> <p></p> <p>The payload can be a handshake package, an alert package or a change cipher spec. TLS 1.3 says it is actually TLS 1.2 to prevent old firewalls to block it. The version field is ignored when using TLS 1.3</p>"},{"location":"23FS/ITS/Secure%20Communication/TLS.html#tls-handshake","title":"TLS Handshake","text":"<p>When the server and client first communicate, neither have a previous association or shared secret. Only the root certificate is known to the client.</p> <p>To bootstrap the connection, the following steps are executed:</p> <ol> <li>Negotiate the algorithms used</li> <li>Client and server perform a Diffie-Hellman</li> <li>Client and Server generate handshake keys</li> <li>Server authenticates to client</li> <li>Client and server proof to each other that the previous messages weren't tampered with</li> <li>Client and server generate data keys</li> </ol> <p>The following messages can be transmitted with only 3 IP datagrams by sending the following:</p> <ol> <li>Client-&gt;Server: <code>ClientHello</code></li> <li>Server-&gt;Client: <code>ServerHello, authentication messages, Finished</code></li> <li>Client-&gt;Server: <code>Finished</code></li> </ol> <p></p> <p>First the used algorithms are negotiated. To do this, the client sends a <code>ClientHello</code> message with the supported TLS versions, encryption algorithms (e.g. AES, 128bit keys, with CGM, and SHA-256 for HKDF), the groups for the Diffie-Hellman key exchange (e.g. X25519, P256, ...). If X25519 or P-256 is supported, the public key of the client are sent as well.</p> <p>Notable is, that all lists are sorted by the preference of the client, meaning that the server should choose the first algorithm which it also supports.</p> <p></p> <p>The server response with a <code>ServerHello</code> which contains the chosen algorithms. For example: TLS 1.3 with \"AES 128-bit keys, GCM, SHA-256 for HKDF\", X25519 with the following server public key.</p> <p>Similar, if X25519 or P-256 is used, the public key of the server is sent back.</p> <p></p> <p>From this point on all traffic is encrypted. </p> <p></p> <p>The server sents back the certificate chain in <code>Certificate</code>, which gets validated by the client. </p> <p>In <code>CertificateVerify</code> is a signature over the previous handshake messages with the private key of the server certificate. This allows the client to verify that the previously received messages are legit.</p> <p>By this point, the server is authenticated.</p> <p></p> <p>In <code>Finished</code>, the sever sends a hash over all handshake messages. The client does the same and compares. If the hashes match, both have received what the other has sent.</p> <p>The client sends a hash over all handshake messages which gets checked by the server.</p> <p>If this passes, both the server and client have proven that the handshakes weren't tampered with.</p> <p>Afterwards, use the HKDF (hashed based key derivation function) algorithm to derive a data key from the exchanged handshake keys.</p>"},{"location":"23FS/ITS/Secure%20Communication/TLS.html#tls-client-authentication","title":"TLS Client Authentication","text":"<p>The server can request that the client has to authenticate them self by sending a <code>CertificateRequest</code> during the handshake.</p> <p></p> <p>The client response with a <code>Certificate</code> and a <code>CertificateVery</code> message of its own (similar to what the server sends to the client to authenticate itself).</p>"},{"location":"23FS/ITS/Secure%20Communication/TLS.html#tls-session-resumption","title":"TLS Session Resumption","text":"<p>To  reduce the load on a server, a TLS session can be resumed.</p> <p></p> <p>After the <code>Finished</code> message, the server may send a <code>NewSessionTicket</code> message, encrypted by the handshake keys. The contents are a preshared key-identifier with which the client can find the preshared key from the last session. Only one session can be opend per <code>NewSessionTicket</code>. However, the server can send multiple <code>NewSessionTickets</code>.</p> <p>When the client tries to reconnect the next time, the client sends a \"Hi, I'd like to talk to you and I have already a pre-shared key with the following id\". From the <code>Finished</code> message (sent after <code>ClientHello</code>) on, all messages are encrypted.</p> <p></p> <p>The client response with a preshared key identifier itself.</p> <p></p> <p>Everything is fine... connection established</p>"},{"location":"23FS/ITS/Secure%20Communication/TLS.html#application-data","title":"Application Data","text":"<p>The tag functions as a signature which ensures that no body tampered with the data (by e.g. removing some bytes blindly). Both the server and client count each fragment and the counter (or a sequence number) is an input for the calculation of the tag. The counter itself is not sent. However, the counter is not needed to reorder packages since TCP guarantees that. This mitigates replay attacks.</p> <p>The fragmentation on TLS level is needed as the client needs the tag to ensure the body is actually valid. This ensures that the client gets the data in a timely fashioned.</p>"},{"location":"23FS/ITS/Secure%20Communication/TLS.html#tls-tear-down","title":"TLS Tear Down","text":"<p>To tear down a TLS connection a participant first has to send a <code>close_notification</code> alert which prompts the other side to shutdown the connection. If a participant recievecs a TCP <code>FIN</code> package before the <code>close_notification</code>, the TLS connection was ended uncleanly. </p> <p></p> <p>This is done to prevent truncation attacks, where the attacker injects a TCP <code>FIN</code> package to prevent the server or client to send all information. For example a footer on a web page.</p>"},{"location":"23FS/ITS/Secure%20Communication/TLS.html#security-analysis","title":"Security Analysis","text":"<p>An attacker can only read until the <code>ServerHello</code> package after which all communication is encrypted. However, these packets don't contain anything interesting for the attacker.</p> <p>However, an attacker can spoof the initial <code>ClientHello</code> to advertise a lower TLS version or insecure ciphers. The server, if missconfigured, might accept an connection with insecure ciphers or an insecure TLS version. This is prevented by the server sending the hash over all handshake messages in the <code>Finish</code> package. The client does the same and compares. If an attacker tampered with messages during transit the client would notice and abort the connection.</p> <p>A further attack is for an attacker to insert, reorder or delete messages. This is prevented by an counter both the server and client maintain. This counter is included int he calculation of the tag sent with every data TLS record. </p>"},{"location":"23FS/ITS/Secure%20Communication/TLS.html#dtls","title":"DTLS","text":"<p>With DTLS one can use TLS over UDP. Using \"normal\" TLS over UDP doesn't work as TLS assumes that if packets are duplicated, reordered or don't make it, then this is an attack.</p> <p>DTLS re-implements TCP's reliability for the handshake (things like re-transmissions and reordering).</p> <p>For the actual data frames, sequence numbers are in the message itself.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Basics.html","title":"Basics","text":"<p>Machine Learning (ML) is a branch of artificial intelligence (AI) devoted to developing and understanding methods that \u201clearn\u201d, that is, leverage data to make predictions or decisions (act like humans) without being explicitly programmed to do so (Wikipedia, Arthur Samuel).</p>"},{"location":"23FS/MLDM/Machine%20Learning/Basics.html#unsupervised-machine-learning-clustering","title":"Unsupervised Machine Learning: Clustering","text":"<p>Clustering describes the process of grouping objects in sets where grouped objects are more similar (in some sense) then objects in other groups. Importantly, an unsupervised machine learning algorithm doesn't get the expected result, just the inputs, like with clustering or dimensonality reduction.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Basics.html#supervised-machine-learning","title":"Supervised Machine Learning","text":"<p>When using supervised machine learning, there are labels (or output) along with the data. The machine is then trained to output a label when an input is processed. During the training, the machine is adjusted to output the correct data.</p> <p>After the training the machine can process never-before seen data and result a mostly correct result.</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Basics.html#reinforcement-learning","title":"Reinforcement Learning","text":"<p>Instead of the machine being told at every step if it was successful, the agent solves the whole exercises and afterwards it is rewarded accordingly.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Basics.html#binning","title":"Binning","text":"<p>Data can either be binned by equal-width-bins (all bins have the same width \\(w = \\frac{min - max} N\\)) or equal-depth-bins (all bins have the same number of samples)</p> <p>The values of a bin can be either replaced by the mean/average value of the bin. Another approach is to replace a value by the closest boundary value of the bin.</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Basics.html#similarities","title":"Similarities","text":""},{"location":"23FS/MLDM/Machine%20Learning/Basics.html#cosine-similarity","title":"Cosine Similarity","text":"<p>The cosine similarity only considers the angle between two vectors by using the following formula. $$ cos(\\theta)=\\frac{\\vec A \\cdot \\vec B}{||\\vec A|| \\cdot ||\\vec B||} $$</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Basics.html#distance","title":"Distance","text":"\\[ ||x||_p=(|x_1|^p+|x_2|^p+...+|x_n|^p)^{\\frac 1 p} \\] <p>In the following diagram, the unit circle (the circle where all points have the distance \\(1\\)) is drawn for different \\(p\\).</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Data.html","title":"Data","text":"<ul> <li>Structured Data   Structured data has a fixed data model</li> <li>Categorical     Discretete data like labels<ul> <li>Nominal   Discrete data which cannot be ordered (e.g. labels)</li> <li>Oridnal   Discrete data which can be ordered</li> </ul> </li> <li>Numerical     Numerical data<ul> <li>Continuous   There are no discrete steps (e.g. floating-points)</li> <li>Discrete   There are discrete steps (e.g. whole integers)</li> </ul> </li> <li>Unstructured/Semi-structured Data   Unstructured and semi-structured data does not have a fixed data model.   XML and JSON are often classified as semi-structured data</li> </ul> <p>The actual encoding does not effect how the data can be analysed. Even if some data, which physically is continuous, is stored discrete, it can still be analysed as if it was continuous.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Data.html#encoding-categorical-data","title":"Encoding Categorical Data","text":"<p>With encoding categorical data can be encoded with a numeric representation</p> <ul> <li>One-Hot Encoding   For every category a new boolean variable is being created. If true then the category is present, if false the category is absent   </li> <li>Label Encoding   Every category is associated with an integer value   </li> <li>Ordinal Encoding   Associate every category an integer based on its order. This only works for ordinal data   </li> </ul>"},{"location":"23FS/MLDM/Machine%20Learning/Data.html#design-matrix-daten-matrix","title":"Design Matrix (Daten Matrix)","text":"<p>The data can be expressed by a \\(N\\times D\\) matrix with numerical values, where \\(N\\) is the amount of samples and \\(D\\) the amount of variables/features.</p> \\[ X_{N\\times D}= \\begin{pmatrix} x_1^{(1)} &amp; x_2^{(1)} &amp; ... &amp; x_D^{(1)} \\\\ x_1^{(2)} &amp; x_2^{(2)} &amp; ... &amp; x_D^{(2)} \\\\ ... &amp; ... &amp; ... &amp; ... \\\\ x_1^{(N)} &amp; x_2^{(N)} &amp; ... &amp; x_D^{(N)} \\\\ \\end{pmatrix} $$ The following vector $x^{(n)}$ expresses all variables of the $n$-th sample and is equivalent to a row of the design matrix $$ x^{(n)}= \\begin{pmatrix} x_1^{(n)} \\\\ x_2^{(n)} \\\\ ... \\\\ x_D^{(n)} \\\\ \\end{pmatrix} \\]"},{"location":"23FS/MLDM/Machine%20Learning/Data.html#typical-data-processing","title":"Typical Data Processing","text":"<p>As data will rarely be in the correct format and quality needed for analysis, the following tasks often will be performed to bring the data up to the required standard.</p> <ul> <li>Data integration/consolidation   Collect and merge the data from multiple sources</li> <li>Data cleaning   Remove and modifying incorrect data </li> <li>Data transformations   Normalize, descretize and aggregate data</li> <li>Data reduction   Reduce data by removing samples and/or attributes</li> </ul>"},{"location":"23FS/MLDM/Machine%20Learning/Data.html#data-cleaning","title":"Data Cleaning","text":"<ul> <li>Detect (near) duplicates   Duplicate numeric values can be detected with the distance/similarity of the feature vectors.  Text duplicates can be detected with the Levinstein-Distance.</li> <li>Missing values   Missing values can be replaced by measures of central tendency, like the average or median, replace the value with a fixed value (like <code>-1</code>), fix manually or simply remove the row entirely.</li> <li>Detect outliers   Outliers should be removed as they are usually a result of an error</li> <li>Smoothing   Smoothing eliminates noise and can make patterns more noticeable. There are different methods</li> <li>Equal-width Binning     The range of the data is divided in \\(N\\) bins of equal size. Outliers can dominate the result when only few data points are in a bin. Each bin is replaced by the mean or the closest boundary value.</li> <li>Equal-depth Binning     There are still \\(N\\) bins but each bin has the same number of samples. Each bin is replaced by the mean or the closest boundary value.</li> <li>Smoothing by bin boundaries     replace each value by closest boundary value     [24, 28, 29, 35], [41, 41, 44, 45], [46, 48, 49, 54] \\(\\to\\) [24, 24, 24, 35], [41, 41, 45, 45], [46, 46, 46, 54]</li> </ul>"},{"location":"23FS/MLDM/Machine%20Learning/Data.html#feature-scaling","title":"Feature Scaling","text":"<p>Feature scaling is used to get all data in the same number range since many algorithm perform poorly with different number ranges (e.g. person height between 1.5 and 2.2m, and wheight between 65kg and 80kg)</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Data.html#min-max-normalisation","title":"Min-Max Normalisation","text":"<p>This will transform all data points between <code>0</code> and <code>1</code> $$ x'=\\frac{x - \\min(x)}{\\max(x) - \\min(x)} $$</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Data.html#standardisation","title":"Standardisation","text":"<p>This will transform the data to be distributed around <code>0</code>  $$ x'=\\frac{x-\\mu(X)}{\\sigma} $$ \\(\\sigma\\)=Standard Diviation (\\(\\sigma^2\\)=Varianz)</p> <p>\\(\\mu\\)=Average</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Data.html#logarithm","title":"Logarithm","text":"<p>Apply the natural logarithm to the data</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Decision%20Tree.html","title":"Decision Tree","text":"<p>Pure nodes predict the label perfectly, like \"False\" in the following example. Impure nodes have some false positives/negatives, like \"True\" in the example.</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Decision%20Tree.html#building-a-decision-tree","title":"Building a Decision Tree","text":"<p>To build a decision tree, the gini impurity score works quite well and is calculated with \\(I_G=1-\\sum^c_{j=1}p_j^2\\) (or in words, 1 minus the squared sum of the probability of all classes). </p> <p>For a yes-no-decision, the formula would look like \\(1 - p_{yes}^2 - p_{no}^2\\).</p> <p>To calculate the gini impurity for a decision, the weighted average of its children's gini impurity scores is calculated:  $$ I=\\frac{n_{yes}}{n_{yes}+n_{no}}\\cdot p_{yes} + \\frac{n_{no}}{n_{yes}+n_{no}}\\cdot p_{no} $$ </p> <p>For numeric data, the gini impurity is calculated by doing the following steps:</p> <ol> <li>Sort the data from lowest to highest</li> <li>Calculate the average between every node (given they are not equal). These are the numbers in the box next to the age column in the example</li> <li>For each average, compute the gini impurity score for the decision <code>Age &lt; $avg</code>. Below is an example for the decision <code>Age &lt; 9.5</code>. The score is calculated with a weighted average, like with yes-no-decisions.    </li> <li>The decision with the lowest gini score should be chosen</li> </ol> <p>The following shows how to find the first decision. In this case \"Loves Soda\" as it has the lowest gini impurity score and was chosen as the \"root decision\" in the decision tree.</p> <p> </p> <p>Only impure leaves can further grow. In this example <code>Loves Soda=No</code> is already pure and as such won't be further divided. <code>Loves Soda=Yes</code>, on the other hand, isn't pure. To find the next decision, only the data which fit the leaf node above is used. In this example, only rows with <code>Loves Soda=Yes</code> are used.</p> <p>The next decision can be one of the remaining, not yet in this branch used, columns. This uses the same processes as finding the \"root decision\". Importantly, the decision boundary for numeric data needs to be recalculated as the data set changed.</p> <p></p> <p>Because the gimi impurity of <code>Loves Popcorn</code> is <code>0.25</code> and the gimi impurity of <code>Age &lt; 15</code>  is <code>0</code>, the former is chosen. The following tree is the result:</p> <p></p> <p>The building of the tree is done, even though not all columns were used, because all leaf nodes are pure. </p> <p>It can be advantageous to stop the tree building before all leaf nodes are pure to reduce overfitting.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Decision%20Tree.html#regression-trees","title":"Regression Trees","text":"<p>Decision trees can also be used as an alternative for regressions. As seen in the following example, using a linear regression is not especially useful.</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Decision%20Tree.html#pruning","title":"Pruning","text":"<p>Pruning is a tool to prevent overfitting of decision trees. One of the issues of regression tree is that with each split the data is also split, leaving less and less data to use as training data. </p> <p></p> <p>By just adding one miss-classified data point, the decision trees goes from the above tree to the tree below.</p> <p></p> <p>Pre-pruning is pruning which is used while building the tree:</p> <ul> <li>Min-Sample Pruning: Only split nodes with at least \\(k\\) nodes</li> <li>Max-Depth Pruning: Restrict the max. depth of the tree</li> </ul> <p>An alternative is post-pruning, which is done after the tree was built. To to this, for each decision, the errors with the validation set is calculated with the decision and without the decision. If the error is higher without the decision then the decision is cut.</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Decision%20Tree.html#random-forest","title":"Random Forest","text":"<p>While training, multiple trees are trained with a random subset of the data. Individual samples might be used in multiple subsets or in no subset at all. Each decision tree has different features. This will result in a large number of different decision trees. </p> <p>When classifying data, each tree votes and the majority is used for the final answer.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Decision%20Tree.html#out-of-bag-error","title":"Out-of-Bag Error","text":""},{"location":"23FS/MLDM/Machine%20Learning/Dimensionality%20Reduction.html","title":"Dimensionality Reduction","text":"<p>Some primitive methods of reducing the dimensions are:</p> <ul> <li>Remove features with too many missing values</li> <li>Remove features with a low or zero variance</li> <li>Remove features with high correlations</li> <li>Backward Feature Elimination</li> <li>Apply principle component analysis or tSNE</li> </ul>"},{"location":"23FS/MLDM/Machine%20Learning/Dimensionality%20Reduction.html#principle-component-analysis-pca","title":"Principle Component Analysis (PCA)","text":"<p>As an input for PCA, the data is used in a matrix \\(X \\in R^{m\\times n}\\), where \\(m\\) is the number of samples, and \\(n\\) the number of features. The goal of PCA is to reduce the number of features that explains \"as much as possible\" of the data.</p> <ol> <li>Standardise the data    Each feature should have a mean of \\(0.0\\) and a variance of \\(1.0\\). This can be done by the following formula \\(\\frac{X - mean}{variance}\\)</li> <li>Identify new coordinate axes (components) that capture the amount of information contained in the data in decreasing order</li> <li>Select a subset of components which capture the most information</li> <li>Project the original data to the new, lower dimensional, subspace</li> </ol> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Dimensionality%20Reduction.html#find-the-components","title":"Find the Components","text":"<p>To find the components, first calculate the co-variance matrix \\(C\\) with the standardised data: $$ C=\\frac 1 {m - 1} X^TX $$ Afterwards compute the \\(n\\) eigenvectors \\(\\vec w\\) and corresponding eigenvalues \\(\\lambda\\) of the co-variance matrix. This is done, since the eigenvectors are equal to the direction of the first principal component. To do this, the following characteristic equation has to be solved: $$ C\\vec w - \\lambda \\vec w = 0 $$ Finally, select the \\(k\\le n\\) eigenvectors \\(\\vec w\\) (components) with the largest eigenvalues: $$ \\lambda_1 \\ge \\lambda_2 \\ge ... \\ge .. \\lambda_k \\ge .. \\ge \\lambda_n $$ Each eigenvalue \\(\\lambda_i\\) expresses how much of the data's variance is explained by the component \\(i\\). The eigenvalue is the average of the summed squared distances (in the figure below \\(d_1^2 + d_2^2 + ... + d_6^2\\)).</p> <p></p> <p>The chosen \\(\\vec w\\) are the columns in the transformation matrix \\(W\\in R^{n\\times k}\\)</p> <p>To get the transformed data \\(T\\), the following has to be done: $$  T=XW \\in R^{m\\times k} $$ If \\(k=n\\), then \\(T\\) contains the same data as \\(X\\). Otherwise the dimensionality of the data is reduced to \\(k\\) dimensions. Because \\(W\\) has been chosen in way, to reconstruct as much information as possible by sorting after the eigenvalues descending, most information should be retained.</p> <p>The percentages of how much of the data each principal component explains can be calculated with the following formula: $$ \\begin{align} \\frac{\\lambda_i}{\\lambda_1 + \\lambda_2} &amp;&amp; \\text{where } i \\in {1, 2} \\end{align} $$</p>"},{"location":"23FS/MLDM/Machine%20Learning/Dimensionality%20Reduction.html#hyper-parameter-tuning","title":"Hyper-Parameter Tuning","text":"<p>To find the best value for \\(k\\) for PCA, the following method can be used.</p> <ul> <li> <p>Rule of Thumb   2-5 PCs is usually enough</p> </li> <li> <p>Kaiser's Rule   Choose all components whose eigenvalues are greater than 1</p> </li> <li> <p>Elbow Method</p> </li> </ul> <p>Take the component before the slope starts leveling off   </p> <ul> <li>Explained and Cumulative Variance</li> </ul> <p>The cumulative variance can be calculated with \\(\\sum^k_{i=1}\\frac {\\lambda_i}{\\sum^n_{j=1}\\lambda_j}\\)   This score can then be interpreted as, how much of the data's variance is explained by the first \\(k\\) components. \\(k\\) can be chosen to explain as much of the data as required.   </p>"},{"location":"23FS/MLDM/Machine%20Learning/Dimensionality%20Reduction.html#loading-plot","title":"Loading Plot","text":"<p>A \"loading plot\" plots the values of the \\(W\\) matrix. Each entry in the matrix shows the correlation between the variable and the component. The value is between \\(-1\\) and \\(1\\), where \\(0\\) means no correlation and \\(-1\\) and \\(1\\) means a very strong correlation (the sign can be ignored).</p> <p>In the plot, we can see that Hardness has almost no correlation with the 1st component, since it is close to \\(0\\) on the X-axis, while having more correlation on the 2nd component, as it is near \\(1\\) on the Y-axis.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Dimensionality%20Reduction.html#score-values-and-plots","title":"Score Values and Plots","text":"\\[ T: t_{ij}=x_{i1}w_{1j}+x_{i2}w_{2j}+...+x_{in}w_{nj} \\] <p>The score of the principal component \\(j\\) are the values in the column \\(j\\) of the matrix \\(T\\). This means, for each component there are \\(m\\) scores, one score for each sample. </p> <p>Effectively, this means it is the distance from the origin to where a sample projects on the component.</p> <p></p> <p>When creating a scatter plot of the score values, we can identify values which are very similar to each other. Data points which are close to each other, are similar. This might not be obvious in the original data due to its high dimensionality.</p> <p>Additionally, data points close to the centre are close to the average while data points far from the centre are outliers and contribute a lot to the variance.</p> <p></p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Dimensionality%20Reduction.html#combining-score-and-loading-plots","title":"Combining Score and Loading Plots","text":"<p>From each loading data point can a ling though the origin point be drawn. If a score data point projected on this line is close to the origin point, then it is close to the average. On the other hand, if the point is far away from the origin point then it is far from the average of the loading data point.</p> <p>For example, the data point 21 in the left upper hand corner is far away from the origin on the \"oil-loading-line\" and thus is far away from the average of oil. On the other hand, the score data point 42 is on the \"oil-loading-line\" close to the origin point and thus is close to the average.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Dimensionality%20Reduction.html#t-distributed-stochastic-neighbor-embedding","title":"t-Distributed Stochastic Neighbor Embedding","text":""},{"location":"23FS/MLDM/Machine%20Learning/Fragen.html","title":"Fragen","text":"<p>How are values sorted when binning? E.g. when binning a sinus curve, boundary binning will have 2 values which are lower then the middle value. (Introduction Data Processing/p.58)</p> <p>In the following description of DB-SCAN what does 4. do? Isn't point 3 missing a repeat or an further condition at point 2. (Clustering/p.34) https://educlust.dbvis.de/#</p> <p></p> <p>Are none of these correct? (linear regresion/p.40)</p> <p></p> <p>For linear regression: How can gradient descent with multi variant data be solved with matrices? (linear regression/p.26)</p> <p>For linear regression: Does the mini-batch gradient descent \\(n\\) random samples or always the same \\(n\\) samples?</p> <p>For logistic regresion: This can't be the derivation of the \\(J(\\theta)\\) given in the slide (Logistic Regresion/p.41). What is the difference between \\(x^{(i)}_j\\) and \\(x^{(i)}\\)?</p> <p></p> <p>What is a landmark? (SVM/p.29)</p> <p>After one vs rest or one vs one, what to do with the different hyper plane? Merge them all toghether by drawing them on the same plot? (SVM/p.37,p38)</p> <p>Do we have to produce python code?</p> <p>What is a soft-max regression (Neural Network/p.14)</p> <ul> <li>Neurales Network berechnungen</li> <li>Wieviele Nodes, Pfade, Wheights, freie Parametern</li> <li>Code verstehen</li> <li>Decision Tree: Gini</li> <li>Decision Tree bauen</li> <li>Logistic Regression</li> <li>Fragen \u00fcber Cost-Function</li> <li>Learning Curve lesen</li> <li>Overfitting und Underfitting erkennen</li> <li>F1, Precission, Recall berechnen</li> <li>Binning</li> <li>Out-of-bag error</li> </ul>"},{"location":"23FS/MLDM/Machine%20Learning/Model%20Selection.html","title":"Model Selection","text":"<p>The goal of model selection is to find good hyperparameters for a given algorithm</p>"},{"location":"23FS/MLDM/Machine%20Learning/Model%20Selection.html#hyperparameters-and-normal-parameters","title":"Hyperparameters and Normal Parameters","text":"<p>Hyperparameters are parameters which aren't minimised by the cost function (e.g. when using gradient descent).</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Model%20Selection.html#hyperparameter-tuning","title":"Hyperparameter Tuning","text":"<p>Here are some general approaches:</p> <ul> <li>Manually setting the hyperparameters</li> <li>Grid Search   Search all combinations of hyperparameters in specified ranges</li> <li>Randomised Search   Train models on random hyperparameter combinations</li> <li>Genetic Algorithms   Using an algorithm, which does the selection, crossover and mutation steps to improve the hyperparameters</li> </ul>"},{"location":"23FS/MLDM/Machine%20Learning/Model%20Selection.html#data-split","title":"Data Split","text":"<p>If we want to also tune hyperparameters of a model, we need an independent validation set. This needs to be independent, as the model shouldn't interact at all with the test set.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Model%20Selection.html#k-fold-cross-validation","title":"k-Fold Cross-Validation","text":"<p>With k-fold cross-validation, we split the training set in to multiple approximately equally sized subsets. We then go through all subsets and use it as a test set and the rest as the training set. Afterwards we have \\(n\\) subsets of metrics (and also parameters). The values of the metrics are summed up and are the k-fold cross-validation score.</p> <p></p> <p>k-fold-validation is only used for hyperparameter tuning by optimising for the best k-fold cross-validation score. With those found hyperparameter, one can train the model and determine the best parameters.</p> <p>This  is also called leave-one-out cross-validation (LOOCV) if we have \\(n\\) samples and use \\(n\\) folds. This results in \\(1\\) test sample and \\(n-1\\) training samples for each fold.</p> <p>After the k-fold-validation the entire training set can be used to train the mod</p>"},{"location":"23FS/MLDM/Machine%20Learning/Model%20Selection.html#stratified-sampling","title":"Stratified Sampling","text":"<p>When having data with rare classes, this inbalance can effect the learning. To prevent this, the data can be sorted by its class and then sample from each class independently. </p> <p>If this is done proportionally to the size of the class, it is called Proportionate Sampling, otherwise it is Disproportionate sampling.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Model%20Selection.html#oversampling","title":"Oversampling","text":"<p>When oversampling, new data samples are created in minority classes. This can be done, by copying or modifying existing samples. </p> <p>However, when copying existing samples, one has to pay attention that the model doesn't overfit. This risk can be mitigated by obtaining new data similar to existing data.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Model%20Selection.html#undersampling","title":"Undersampling","text":"<p>When undersampling, randomly, only a few samples from the original data sets are used for training. </p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Model%20Selection.html#smote","title":"SMOTE","text":"<p>For minority categories, the algorithm selects a random samples from this group and calculates their \\(k\\) nearest neighbour.</p> <p>SMOTE together with under sampling performs better then just under sampling.</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Model%20Selection.html#learning-curves","title":"Learning Curves","text":"<ul> <li> <p>If both curves are close to each other and both of them have a low score then there is a potential underfitting. This means that the model should be complexer to handle the data.</p> </li> <li> <p>If the training curve has a much better score than the testing curve then there is a potential overfitting (High Variance)</p> </li> </ul> <p>Examples:</p> <ul> <li>The model is too simple to detect the patterns of the data. The model should be made more complex   </li> <li>With this example, there is likely a high variance, overfitting is happening and the mode should be simplified. This is also called regularisation.   </li> </ul> <p>(In this example the cross-validation score can be used as a proxy for the test score)</p>"},{"location":"23FS/MLDM/Machine%20Learning/Model%20Selection.html#precision-vs-recall","title":"Precision vs Recall","text":"<p>This graph shows the trade of between precision and recall.</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Neural%20Network.html","title":"Neural Network","text":"<p> $$ NrOfWheights=layerSize^k\\ NrOfPaths=layerSize_1 \\cdot layerSize_2 + layerSize_2 \\cdot layerSize_3 + ... $$ Where \\(layerSize\\) is the number of nodes per layer and \\(k\\) the number of layers.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Neural%20Network.html#feed-forward-neural-network","title":"Feed-Forward Neural Network","text":"<p>In a feed-forward neural network, all layers all fully-connected (every node is connected to every node of the next layer), but have no connection with in the same layer. Thus the information can only flow forward.</p> <p></p> <p>A neuron calculates the wheighted-sum of all its input, subtracts a bias value and puts that result through the activation function.</p> <p></p> <p>There are different activation functions that can be used:</p> <p></p> <p>This is a more complete table:</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Neural%20Network.html#output-layer","title":"Output Layer","text":"<p>Depending on the problem a different output layer is used. </p> <p></p> <p>(Softmax ensures that the results of the output nodes are percentages)</p> <p>Instead of softmax one-vs-all can also be used. </p>"},{"location":"23FS/MLDM/Machine%20Learning/Neural%20Network.html#cost-fuction","title":"Cost-Fuction","text":""},{"location":"23FS/MLDM/Machine%20Learning/Neural%20Network.html#how-to-train-your-feedforward-neural-network","title":"How to Train your Feedforward Neural Network","text":"<p>The following is true for partial derivations if \\(f \\circ g\\) holds: $$ \\begin{align} z&amp;=f(y) &amp; y = g(x) \\ \\frac{\\part z}{\\part x}&amp;= \\frac{\\part z}{\\part y}\\frac{\\part y}{\\part x} \\end{align} $$ </p>"},{"location":"23FS/MLDM/Machine%20Learning/Neural%20Network.html#vanishing-gradient-problem","title":"Vanishing Gradient Problem","text":"<p>One problem with back progagation is that with large model and the sigmoid function is that all partial derivations are between \\(-1\\) and \\(1\\). This leads to the partial derivation getting smaller and smaller, thus the model learns very slowly. ReLu solves this to a degree, since the partial derivation can either be \\(0\\) or \\(1\\).</p>"},{"location":"23FS/MLDM/Machine%20Learning/Neural%20Network.html#optimizing","title":"Optimizing","text":"<p>The following techniques are ways to optimise a model and prevent it from overfitting.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Neural%20Network.html#dropout","title":"Dropout","text":""},{"location":"23FS/MLDM/Machine%20Learning/Neural%20Network.html#_1","title":"Neural Network","text":"<p>When doing dropout, during training (during testing all nodes are used) some nodes are not updated. This should cause other neurons to learn the same behaviour and make the model overall more stable. Typical dropout rates are between 20% and 50%. </p> <p>From experience, larger networks with dropout perform better then small networks without dropout.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Neural%20Network.html#early-stopping","title":"Early Stopping","text":"<p>At a certain point during training a model can start to be over fitted and learn noise instead of the pattern in the data. This causes the model getting worse for data other then the training data (as can be seen in the diagram above).</p> <p>To prevent this, one can introduce checkpoints, where loss and other quality measurements are taken and evaluated. If the score get worse, then revert to the previous best checkpoint.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Neural%20Network.html#data-augmentation","title":"Data Augmentation","text":"<p>To generate more training data, one can generate them artificially by:</p> <ul> <li>adding noise</li> <li>combining or extrapolate training samples</li> <li>modify existing training samples</li> </ul> <p>This should cause the model to become more roust and stable.</p> <p>This can also work for text:</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Neural%20Network.html#in-case-of-bad-performance","title":"In Case of Bad Performance","text":"<p>If a model doesn't predict to a satisfactory degree, one should analyse the learning curve when changing the following values:</p> <ul> <li>The number of training samples</li> <li>The number of hidden neurons</li> <li>The activiation functions</li> <li>Regularisation</li> <li>Learning rate / Learning rate decay</li> <li>Batch size</li> <li>Optimisation algorithms</li> <li>Number of epochs</li> <li>Early stopping</li> <li>Dropout</li> <li>Data augmentation</li> </ul>"},{"location":"23FS/MLDM/Machine%20Learning/Neural%20Network.html#architecture-of-neural-networks","title":"Architecture of Neural Networks","text":""},{"location":"23FS/MLDM/Machine%20Learning/Neural%20Network.html#universality-theorem","title":"Universality Theorem","text":"<p>A neural net with one hidden layer and arbitrary number of neurons can approximate any given continuous function.</p> <p></p> <p>The main idea is to cut a function into small pieces and use two neurons to approximate these steps. The left diagram shows two neurons approximating a step function.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Neural%20Network.html#keras","title":"Keras","text":"<pre><code>model = Sequential()\nmodel.add(Dense(5, input_shape=(72,)))\nmodel.add(Activation('relu'))\nmodel.add(Dense(7, activation=\"relu\"))\n# Dropout disables random nodes\nmodel.add(Dropout(rate=.2)) \nmodel.add(Dense(2))\n\n# for numerical models\nmodel.compile(optimizer='sgd', loss='mse')\n# for categorical models\nmodel.compile(loss=\"categorical_crossentropy\", optimizer=\"sgd\")\n\n# Data:\nX = np.random.random((100, 72))\ny = np.random.random((100, 2))\n\n# Train:\nmodel.fit(X, y, epochs=1, batch_size=10)\n</code></pre>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Classification.html","title":"Classification","text":""},{"location":"23FS/MLDM/Machine%20Learning/Classification/Classification.html#metrics","title":"Metrics","text":"<p>The are multiple metrics to test how well a classification algorithm works:</p> <p></p> <ul> <li> <p>\\(Accuracy=\\frac{TP+TN}{TP+FN+FP+TN}\\)</p> </li> <li> <p>\\(Error=1-Accuracy\\)</p> </li> <li> <p>True Positive Rate/Recall: \\(TPR=\\frac{TP}{TP+FN}\\) Answers how many relevant samples were correctly classified.</p> </li> <li> <p>True Negative Rate/Specificity: \\(TNR = \\frac{TN}{TN + FP}\\)</p> </li> <li> <p>False Positive Rate: \\(FPR = 1 - TNR = \\frac{FP}{TN + FP}\\)</p> </li> <li> <p>\\(Precision = \\frac{TP}{TP + FP}\\)</p> </li> </ul> <p>Answers how many detected samples are relevant.</p> <ul> <li>F-Score: \\(FScore_\\beta=(1+\\beta^2)\\cdot\\frac{Precision\\cdot Recall}{(\\beta^2 \\cdot Precision)+Recall}\\) Answers if both the precision and recall value are high, or one of them (or both) are low. A smaller \\(\\beta\\) (like 0.5) parameter gives more weight to the precision and less to the recall. For a higher \\(\\beta\\) value (like 2), the f-score will give less weight to the precision and more the recall.</li> </ul> <p>An example table would look like </p> <p></p> <p>One cannot optimise for all metrics, the true positive rate and true negative rate cannot both be high.</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Classification.html#receiver-operating-curve-roc-cuve","title":"Receiver Operating Curve (ROC-Cuve)","text":"<p>A ROC Curve has the recall on the y-axis and the false positive rate on the x-axis. A random classifier would be a linear plot.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Classification.html#precision-recall-curve-pr-curve","title":"Precision-Recall Curve (PR-Curve)","text":""},{"location":"23FS/MLDM/Machine%20Learning/Classification/Classification.html#multi-class-confusion-matrix","title":"Multi-Class Confusion Matrix","text":"<p>In a multi-class confusion matrix, the diagonal contains all true positives. </p> <p>To deal with multi-class confusion matrix, we need additional metrics:</p> <p></p> <p>The formula for \\(F1_{macro}\\) is wrong above:  </p> <ul> <li>\\(F1_{macro}=\\frac 1 {class_{num}}\\sum_{class} F1_{class}\\)</li> <li>\\(F1_{micro=}\\frac{2}{1/Recall_{micro}+1/Precision_{micro}}\\)   But this corresponds to the accuracy and, because of this, it is rarely used</li> </ul> <p>The micro variants are used to see if there are general problems that affect all classes. The macro variants can be used to check if there are problems with individual classes, as this score is more affected by outliers.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Classification.html#logistic-regression","title":"Logistic Regression","text":"<p>The logistic regression can be used for discrete data. </p> <p>The logistic function is defined as: $$ g(z)=\\frac 1 {1+e^{-z}} $$</p> <pre><code>def logistic(g): return 1/(1+exp(-g))\n</code></pre> <p>In this formula, \\(h(\\theta)\\) can be plugged in (\\(g(h(\\theta))\\)) and used as a new theses. The cost function needs to be adjusted to: $$ Cost(h_\\theta(x), y)= \\begin{cases} -\\log(h_\\theta(x)) &amp; \\text{if } y=1 \\ -\\log(1- h_\\theta(x)) &amp; \\text{if } y=0 \\ \\end{cases}\\ J(\\theta)=\\frac 1 m \\sum ^m_{i=1} Cost(h_\\theta(x_i), y_i) $$ This can reformulated to: $$ Cost(h_\\theta(x), y) = -y_i\\log (h_\\theta(x_i))-(1-y_i)\\cdot \\log(1-y_i)\\log(1-h_\\theta(x_i)) $$</p> <p>This formula is also called log-likelihood.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Classification.html#gradient-descent-with-logistic-regression","title":"Gradient Descent with Logistic Regression","text":""},{"location":"23FS/MLDM/Machine%20Learning/Classification/Classification.html#multi-class-classification","title":"Multi-class Classification","text":"<p>One approach is to do one-vs-all, where </p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Linear%20Regression.html","title":"Linear Regression","text":"<p>A linear function, adjusted to a set of results, can be used to predict the result of other input values. The function takes the following form:</p> \\[ h_\\theta(x)=\\theta_0+\\theta_1\\cdot x_1+\\theta_2\\cdot x_2+...+\\theta_n \\cdot x_n \\] <p>Logistic regression can be found at Classification in the chapter Logistic Regression.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Linear%20Regression.html#assumption-of-linear-regression","title":"Assumption of Linear Regression","text":"<p>The following assumptions are made for the input and output of a linear regression:</p> <ul> <li>Linearity: the input and output correlat linearly</li> <li>Independence: the outcome of one sample does not affect the outcome of a different sample</li> <li>Normality: Errors should be normally distributed (large deviations from the mean should be more unlikely)</li> <li>Equality of Variance: Error distribution should be the same for all input values</li> </ul>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Linear%20Regression.html#cost-function","title":"Cost Function","text":"<p>To find a fitting function \\(h_\\theta\\), we want to minimise \\(\\frac{1}{2m}\\sum^m_{i=0}(h_\\theta(x_i)-y_i)^2\\) (halve of the average of the summed error squared). More formally, this is named a cost function:  $$ J(\\theta_0, \\theta_1)=\\frac 1 {2m}\\sum^m_{i=0}(h_\\theta(x_i)-y_i)^2 $$ This cost function is also called the squared error function.</p> <p>Cost functions can be plotted as a contour graph. In the example below, the marked spot on the contour plot corresponds with the plot of \\(h_\\theta(x)\\).</p> <p>The cost function is always convex.</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Linear%20Regression.html#gradient-descent","title":"Gradient Descent","text":"<p>Gradient decent is a general algorithm to find a local minimum of a function. </p> <p>The algorithm starts at a guess and then, as long as possible, moves the current position to a location where the function is lower. This is repeated, as long as there is a lower position. $$ \\begin{flalign} &amp;\\text{repeate} \\text{ until convergence {} &amp;&amp;  \\ &amp; \\hspace{2em} temp_0 := \\theta_0-\\alpha \\frac{\\partial}{\\partial \\theta_0}J(\\theta_0, \\theta_1)\\ &amp; \\hspace{2em} temp_1 := \\theta_1-\\alpha \\frac{\\partial}{\\partial \\theta_1}J(\\theta_0, \\theta_1)\\ &amp; \\hspace{2em}\\theta_0 := temp_0\\ &amp; \\hspace{2em}\\theta_1 := temp_1\\ &amp;\\text{}} \\ \\end{flalign} $$ Importantly, the code above updates \\(\\theta_0\\) and \\(\\theta_1\\) simultaneously. \\(\\alpha\\) is the learning rate. It dictates the step size. However, even when \\(\\alpha\\) is fixed, gradient descent can still converge to a local minimum as the derivation will get smaller and smaller when the algorithm gets closer to a local minimum.</p> <p>The code above can easily be extended to support as many variables as needed.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Linear%20Regression.html#cost-function-and-gradient-descent","title":"Cost Function and Gradient Descent","text":"<p>To use the gradient descent algorithm to find the local minimum of the cost function \\(J\\), the partial derivation of \\(J\\) for \\(\\theta_0\\) and \\(\\theta_1\\) is needed. Luckily, these are straight forward:  $$ \\begin{align} \\frac{\\partial}{\\partial \\theta_0}J(\\theta_0, \\theta_1 &amp;= \\frac{\\partial}{\\partial \\theta_0} \\left(\\frac{1}{2m}\\sum^m_{i=1}(h_\\theta(x_i)-y_i)^2\\right) =\\frac{1}{m}\\sum^m_{i=1}(h_\\theta(x_i)-y_i)\\</p> <p>\\frac{\\partial}{\\partial \\theta_1}J(\\theta_0, \\theta_1 &amp;= \\frac{\\partial}{\\partial \\theta_1} \\left(\\frac{1}{2m}\\sum^m_{i=1}(h_\\theta(x_i)-y_i)^2\\right) =\\frac{1}{m}\\sum^m_{i=1}(h_\\theta(x_i)-y_i)\\cdot x_i \\end{align} $$</p> <p>These partial derivations can be plugged in the algorithm of gradient descent.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Linear%20Regression.html#gradient-descent-mode","title":"Gradient Descent Mode","text":"<p>There are multiple \"modes\" how the gradient descent can function:</p> <ul> <li> <p>Batch Gradient Descent   Every sample is used to calculate the incline</p> </li> <li> <p>Mini-Batch Gradient Descent</p> </li> </ul> <p>\\(n\\) random samples are used to calculate the incline</p> <ul> <li>Stochastic Gradient Descent</li> </ul> <p>One random sample is used to calculate the incline</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Linear%20Regression.html#multivariate-linear-regression","title":"Multivariate Linear Regression","text":"<p>If there are more than one feature, the hypotheses has to be adjusted to reflect this:  $$ h_\\theta(\\vec x)=\\theta_0x_0 + \\theta_1x_1 + \\theta_2x_2 + ... + \\theta_nx_n $$ \\(x_0\\) is always defined as \\(1\\). This simplifies \\(h_\\theta(\\vec x)\\) as all terms are the \"same\".</p> <p>This can also be written with vectors:  $$ \\vec x = \\begin{pmatrix} x_0 \\ x_1 \\ x_2 \\ ... \\ x_n \\end{pmatrix} \\ \\vec \\theta = \\begin{pmatrix} \\theta_0 \\ \\theta_1 \\ \\theta_2 \\ ... \\ \\theta_n \\end{pmatrix} \\ h_\\theta(\\vec x)=\\theta_0x_0 + \\theta_1x_1 + \\theta_2x_2 + ... + \\theta_nx_n  = \\vec\\theta^T \\cdot \\vec x $$ The vectors \\(\\vec x\\) and \\(\\vec \\theta\\) have the size \\(n+1\\), where \\(n\\) is the number of features.  $$ \\begin{flalign} &amp;\\text{repeate} \\text{ until convergence {} &amp;&amp;  \\ &amp; \\hspace{2em} \\theta_j := \\theta_j-\\alpha \\frac{\\partial}{\\partial \\theta_0}J(\\theta_0, \\theta_1) =\\theta_j-\\alpha \\frac{1}{m}(h_\\theta(x^{(i)}) - y^{(i)})\\cdot x_j^{(i)}\\ &amp;\\hspace{2em}\\text{for } j \\in {0, 1, ..., n+1}\\ &amp;\\hspace{2em} \\text{(simultaneously update } \\theta_j \\text{)}\\</p> <p>&amp;\\text{}} \\ \\end{flalign} $$</p>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Linear%20Regression.html#gradient-descent-with-matrices","title":"Gradient Descent with Matrices","text":"<p>Gradient descent can also be implemented with matrices. For this, the derivation can be calculated with the following:  $$ \\frac{\\part J(\\vec \\theta)}{\\part \\vec \\theta}=-2X^T\\vec y + 2X^TX\\vec \\theta $$ Then \\(\\vec \\theta\\) can be updated with the following:  $$ \\vec \\theta_{i+1} = \\vec \\theta_{i} - \\alpha\\frac{\\part J(\\vec \\theta_i)}{\\part \\vec \\theta_i} $$</p>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Linear%20Regression.html#learning-rate","title":"Learning Rate","text":"<p>\\(\\alpha\\) is the learning rate. If it is too low, the steps are very small. If they are high, gradient descent jumps around.</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Linear%20Regression.html#evaluation-metrics-for-linear-regression","title":"Evaluation Metrics for Linear Regression","text":"<p>\\(R^2\\) is the percentage of samples which can be explained by the regression.</p> <p></p> <p></p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Multi-Class%20Classification%20-%20Softmax.html","title":"Multi-Class Classification: Softmax Regression","text":"<p>Softmax is an extension to linear regression to not only do binary classification but rather classify an input in multiple classes.</p> <p></p> <p>For this, there is a linear combination of the input \\(x\\) and weights for each class. Afterwards the \\(softmax(...)\\) function is applied to all \\(z\\). The \\(softmax\\)-function uses all \\(z\\) to calculate a weight for one class. The softmax function normalises the sums in such a way that all outputs summed together equals \\(1\\), meaning that the individual outputs represent a percentage.</p> <p>One drawback of softmax is, that is still can only create linear decision bounderies.</p> <p></p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Polynomial%20Regression.html","title":"Polynomial Regression","text":"<p>For polynomial regression, we have to alter the \\(h_\\theta\\) function. $$ h_\\theta(x_i)=\\theta_0\\cdot 1 + \\theta_1\\cdot x_1 + \\theta_1\\cdot x_1^2 + \\theta_1\\cdot x_1^3  + ... + \\theta_1\\cdot x_1^n $$ To solve this with a matrix for \\(\\theta\\), the following matrix has to be used: $$ \\begin{pmatrix} 1 &amp; x_1 &amp; x_1^2 &amp; x_1^3 &amp; ... &amp; x_1^n \\ 1 &amp; x_1 &amp; x_1^2 &amp; x_1^3 &amp; ... &amp; x_1^n\\ ...\\ 1 &amp; x_1 &amp; x_1^2 &amp; x_1^3 &amp; ... &amp; x_1^n \\end{pmatrix} $$ Note: Each column contains the values of the vector of \\(\\vec x_1\\)</p> <p>If we have multiple samples (like the cost of an apartment depends on the size, location , ...), we may have to include combinations in \\(h_\\theta\\), like \\(h_\\theta(x)=\\theta_0 + \\theta_1x_1 + \\theta_2x_2^3 + \\theta_3x_2^3x_3x_4\\)</p>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Polynomial%20Regression.html#evaluation-metrics","title":"Evaluation Metrics","text":"<p>Regressions can be meassured </p>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Polynomial%20Regression.html#underfit-and-overfit","title":"Underfit and Overfit","text":"<p>If the degree of the polynomial is not height enough then the polynomial is not flexible enough do adjust to the data. However, if the degree is too large, then polynomial becomes too flexible and gets inaccurate again. </p>"},{"location":"23FS/MLDM/Machine%20Learning/Classification/Polynomial%20Regression.html#regularisation","title":"Regularisation","text":"<p>The cost function is adjusted to: $$ J(\\theta)=\\frac 1 {2m}\\left(\\sum^m_{i=1}(h_0(x_i)-y_i)^2 + \\lambda \\sum^n_{j=0}\\theta_j^2 \\right) $$ The \\(\\sum^n_{j=0}\\theta_j^2\\) part puntions a lot of \\(\\theta\\) with high values. When minimizing \\(J(\\theta)\\), this leads to minimize as many \\(\\theta\\) as possibles. \\(\\lambda\\) dictates how much high \\(\\theta\\) are punished. </p> <p></p> <p>When \\(\\lambda\\) is low, then a lot of \\(\\theta\\) have higher values and a curve like <code>a)</code> will be the result. However, if \\(\\lambda\\) is a high value, then a lot of \\(\\theta\\) have lower values resulting in a curve like <code>c)</code>. </p> <p>If \\(\\lambda\\) is extremely high, then the incline will become \\(0\\), as every \\(\\theta\\), except \\(\\theta_0\\) (with is \\(1\\)), will trend towards \\(0\\). This leads to a straight line with no incline.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Clustering/Clustering.html","title":"Clustering","text":"<p>The following table compares different algorithms:</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Clustering/Clustering.html#silhouette-coefficient","title":"Silhouette Coefficient","text":"<p>In the following definition \\(i\\) and \\(j\\) are data points and \\(C_I\\) and \\(C_J\\) are the respective clusters of the data points \\(i\\) and \\(j\\). \\(d(i, j)\\) is the distance between \\(i\\) and \\(j\\). $$ \\begin{align} a(i)&amp;=\\frac 1 {|C_I|-1} \\sum_{j\\in C_J,i\\neq j} d(i,j)\\ b(i)&amp;=\\min_{J\\neq I} \\frac 1 {|C_J|} \\sum_{j\\in C_J} d(i, j)\\ s(i)&amp;=\\frac{b(i) - a(i)}{\\max(a(i), b(i))} &amp;\\text{if } |C_I| &gt; 1\\ s(i)&amp;=0 &amp; \\text{if } |C_I| = 1 \\end{align} $$ \\(a(i)\\) is the average distance to all points in the same clusters as \\(i\\), while \\(b(i)\\) is the average distance to all points of the closest neighbouring cluster.</p> <p>The silhouette coefficient can be plotted into a following diagram. The red line is the overall silhouette coefficient average.</p> <p></p> <p>If the silhouette coefficient is less then zero then this point might be wrongly classified.</p> <p></p> <p>In the following graphs \\(k=3\\) or \\(k=4\\) is best, since they have a height average silhouette coefficient. \\(k=4\\) has more equally sized clusters which can be a benefit.</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Clustering/DB-SCAN.html","title":"DB SCAN","text":""},{"location":"23FS/MLDM/Machine%20Learning/Clustering/DB-SCAN.html#db-scan","title":"DB-SCAN","text":"<p>DB-SCAN categorizes each point as:</p> <ul> <li> <p>Core Point   A point with at least \\(minPts\\) within the distance \\(\\varepsilon\\) from itself</p> </li> <li> <p>Border Point   A point with at least one core point within the distance \\(\\varepsilon\\) of itself</p> </li> <li> <p>Noise Point   A point which is neither a core point or border point</p> </li> </ul> <p>The algorithm does the following steps:</p> <ol> <li>Select an unprocessed data point \\(P\\) and retrieve all points within \\(\\varepsilon\\)</li> <li>Mark \\(P\\) as processed</li> <li>If the amount of points found is greater or equal to \\(minPts\\), then</li> <li>then mark as core point</li> <li>Mark all non-core points within \\(\\varepsilon\\) as border points (and may override noise) and assign them to the cluster of \\(P\\)</li> <li> <p>Else, if there are no core point or not \\(minPts\\) within \\(\\varepsilon\\) mark it as noise</p> </li> <li> <p>A smaller \\(\\varepsilon\\) leads to more points marked as noise</p> </li> <li>A smaller \\(minPts\\) leads to more clusters </li> </ol> <p></p> <p>The runtime complexity is \\(O(m \\cdot \\log m)\\approx O(m^2)\\).</p> <ul> <li>Advantages</li> <li>No need to specify the number of cluster in advance</li> <li>Able to find arbitrarily shaped cluster</li> <li>Is able to detect noise</li> <li>Disadvantages</li> <li>Cannot cluster data sets well large differences in densities as the \\(\\varepsilon\\) and \\(minPts\\) would have to change for each densitiy reagion. (An improved version, which addresses this issue, is named OPTICS)</li> </ul> <p>An visualisation can be viewed at https://educlust.dbvis.de/#</p>"},{"location":"23FS/MLDM/Machine%20Learning/Clustering/K-Mean%20Clustering.html","title":"K-Mean Clustering","text":"<p>The K-Mean algorithm can be used to create clusters from a set of data points.</p> <p>A assumption that the k-mean algorithm makes is that the clusters are roughly spherical (not for example not donut-shaped)</p> <p>The following pseudo-code implements the k-mean algorithm:</p> <pre><code>List&lt;DataPoint&gt; data = ...;\n// the initial centroids can be chosen randomly\nList&lt;Centroid&gt; centroids = getInitialCentroids();\n\ndo {\n    // each data point is assigned to the closest centroid\n    assignDataToClosestCentroid(data, centroid);\n\n    for(Centroid centroid : centroids) {\n        List&lt;DataPoint&gt; dataPointsOfCentroid = centroid.getDataPoints();\n        DataPoint mean = calculateMean(dataPointsOfCentroid);\n        centroid.setPosition(mean);\n    }\n} while(isStopCriterionIsMet());\n</code></pre> <p>To calculate the distance, the Pythagorean theorem can be used.</p> <p>As the stop criteria, multiple implementation can be used:</p> <ul> <li>Stop when the coordinates of the centroids change very little (converges)</li> <li>Stop when only a small amount of data points are reassigned (converges) </li> <li>Stop after a fixed number of iteration (doesn't necessary converges)</li> <li>Stop after a certain time for the entire computation (doesn't necessary converges)</li> <li>Stop after a low sum of squared error (This doesn't necessarily mean that the centroids converged)</li> </ul> <p>Given enough iteration, k-means always converges to a result. However, this result may not be the optimum.</p> <p>Because the k-mean algorithm uses chance, the result can very depending on the initial position of the centroids. To elevate this, the algorithm is run multiple times and the best result is used. To calculate the best, the quadratic distance to the closest centroid can be calculated for each data point and then summed up. </p> <p>The function \\(\\Phi(C, X)\\), where \\(C\\) is a set of centroids and \\(X\\) is a set of data points, calculates the squared distance of a clustering.  $$ \\Phi(C, X) = \\sum^m_{i=1} \\min_{c\\in C} d(x_i, c)^2\\ $$ The runtime complexity of the k-mean algorithm is \\(O(Lknm)\\), where </p> <ul> <li>\\(L\\) is the number of iteration</li> <li>\\(k\\) is the amount of clusters</li> <li>\\(m\\) is the amount of data points with \\(n\\) features</li> </ul>"},{"location":"23FS/MLDM/Machine%20Learning/Clustering/K-Mean%20Clustering.html#elbow-method","title":"Elbow Method","text":"<p>To choose the appropriate number of clusters, the elbow method can be used. For this, the k-mean algorithm is run with different \\(k\\)s and \\(\\Phi(C, X)\\) is calculated for each clustering. The appropriate number of clusters is where the plot flattens, where the elbow of an imaginary arm would be. </p> <p>In the example below \\(4\\).</p> <p> </p>"},{"location":"23FS/MLDM/Machine%20Learning/Clustering/Support%20Vector%20Machine.html","title":"Support Vector Machine (SVM)","text":"<p>A side node: the negative label is usually \\(-1\\), and the positive label is usually \\(1\\) for mathematical reasons.</p> <p>A SVM categorises data points by drawing a hyperplane.  A hyperplane is a line in 2d or a plane in 3d.</p> <p></p> <p>The goal of the SVM is to maximise for the margin between points:</p> <p></p> <p>The following explains all the variables associated with SVM:</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Clustering/Support%20Vector%20Machine.html#width-of-margin","title":"Width of Margin","text":"<p>With the following formula, one can calculate the distance between two hyperplanes.</p> <p></p> <p></p> <p>(Correction: \\(b_1=b_2\\); The subscript is incorrect)</p> <p>Additionally, every sample needs to be on correct side of the hyperplane. This condition is encoded in the following inequations:</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Clustering/Support%20Vector%20Machine.html#optimisation-problem","title":"Optimisation Problem","text":"<p>SVM optimise for the widest margin \\(D=\\frac{2}{||w||}\\). This is equivalent to minimising \\(||w||\\) or \\(\\frac 1 2 ||w||^2\\).</p>"},{"location":"23FS/MLDM/Machine%20Learning/Clustering/Support%20Vector%20Machine.html#soft-margin-svms","title":"Soft-Margin SVMs","text":"<p>Training samples can be mislabelled or noise. To deal with this, we can allow some samples to be on the \"wrong\" side, with a penalty, to archive a wider margin.</p> <p></p> <p>The parameter \\(C\\) controls what the penalty of miss-classification is. A large \\(C\\) would result in almost no miss-classified points and a small \\(C\\) would result in a large amount of miss-classified points.</p> <p></p> <p>The following explains all the variables associated with SVM:</p> <p></p> <p></p> <p>In the cost function every miss-classified sample is summed: $$ \\frac 1 2 ||w||^2 + C \\sum^m_{i=1}\\xi_i\\ y_i(w^Tx_i+b)\\ge 1 - \\xi_i $$ \\(\\xi\\) expresses how much a sample is missclassified. If \\(\\xi \\in ]1;\\infty[\\), then the sample is on the wrong side and missclassified. If \\(\\xi \\in ]0; 1]\\), then the sample is in the margin and is a margin  If \\(\\xi = 0\\), then the sample is on the correct side.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Clustering/Support%20Vector%20Machine.html#kernel-trick","title":"Kernel Trick","text":"<p>Sometimes data can't be separated by a hyperplane. In those cases an additional dimension can be added with a mapping function (e.g. \\(z = x^2 + y^2\\)).</p> <p></p> <p>The following functions are common kernel functions:</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Clustering/Support%20Vector%20Machine.html#rbf-kernel","title":"RBF-Kernel","text":"\\[ \\gamma=\\frac 1 {2\\sigma^2} \\] <p>If \\(\\gamma\\) is small, then the variance \\(\\sigma\\) gets large and support vectors \"see\" far. If \\(\\gamma\\) is big, then the variance \\(\\sigma\\) becomes small and the support vectors \"see\" only a short distance. \\(\\gamma\\) can also be seen to influence how flexible the model is. The bigger it is, the more flexible the model is.</p> <p></p>"},{"location":"23FS/MLDM/Machine%20Learning/Clustering/Support%20Vector%20Machine.html#multi-class","title":"Multi-Class","text":""},{"location":"23FS/MLDM/Machine%20Learning/Clustering/Support%20Vector%20Machine.html#one-vs-rest","title":"One vs Rest","text":"<p>For every class, the margin for the class against all other classes is calculated.</p>"},{"location":"23FS/MLDM/Machine%20Learning/Clustering/Support%20Vector%20Machine.html#one-vs-one","title":"One vs One","text":"<p>A margin is created for every combination of two classes.</p>"},{"location":"23FS/PE/Dynamik.html","title":"Dynamik","text":"<p>Es gibt vier grundlegende Gesetzte:</p> <ol> <li>Tr\u00e4gheitsgesetz (Ohne \u00e4ussere Kr\u00e4fte bleibt der Impuls erhalten)</li> <li>Bewegungsgesetz (\\(F=a\\cdot m\\))</li> <li>Wechselwirkungsgesetz (Aktion = Reaktion)</li> <li>Kr\u00e4fte sind Vektoren</li> </ol>"},{"location":"23FS/PE/Dynamik.html#bewegungsgesetz","title":"Bewegungsgesetz","text":"<p>Das Bewegungsgesetz betrifft nur die Beschleunigung. Als Beispiel: Ein Lift, von einem Seil gezogen, f\u00e4hrt mit konstanter Geschwindigkeit hoch. Die Schwerkraft und die Seilkraft sind in diesem Fall gleichgross. Dies liegt daran, dass wenn die wirkende Kraft nicht \\(0\\) ist, dann w\u00fcrde der Lift beschleunigen oder verlangsamen.</p>"},{"location":"23FS/PE/Dynamik.html#wechselwirkungsgesetz","title":"Wechselwirkungsgesetz","text":"<p>Aktion = Reaktion bedeutet, dass wenn ein Objekt angestossen wird, dr\u00fcckt es mit der selben Kraft zur\u00fcck.</p> <p>Als Beispiel: Das Auto, beim Bremsen, st\u00f6sst die Strasse gleich stark nach vorn, wie die Strasse das Auto nach hinten stossen. Das Auto bremst also nicht weil die Bremsen nach hinten stossen, sondern weil die Strasse zur\u00fcck stosst.</p> <p></p> <p>Wenn z.B. ein Auto (1) ein Lastwagen (2) st\u00f6sst, dann st\u00f6sst der Lastenwagen mit der selben Kraft zur\u00fcck, wie das Auto auf den Lastwagen dr\u00fcckt. Das Auto dr\u00fcckt auf die Strasse, welche zur\u00fcck dr\u00fcckt. Die effektive Kraft, kommt nun von \\(\\vec F_{Boden - Auto1}-(\\vec F_{2 \\to 1}- \\vec F_{1\\to 2})\\)</p>"},{"location":"23FS/PE/Dynamik.html#freier-fall","title":"Freier Fall","text":"<p>Auf ein K\u00f6rper wirkt die Gewichtskraft \\(\\vec F_G=-mg\\). Aus dem ergeben sich die folgenden Formeln:</p> <ul> <li>\\(\\vec v = \\int \\vec a \\mathrm dt = -gt+\\vec v_0\\)</li> <li>\\(\\vec r = \\int \\vec v \\mathrm dt = -\\frac 1 2 g t^2+\\vec v_0t+\\vec r_0\\)</li> </ul>"},{"location":"23FS/PE/Dynamik.html#schiefer-wurf","title":"Schiefer Wurf","text":"\\[ \\vec r(t)=\\frac 1 2 (0, - g)t^2+|\\vec v_0|(\\cos (\\alpha_0), \\sin (\\alpha_0)t + (x_0, y_0)\\\\ \\vec r_y(r_x)=-\\frac 1 2 g\\left ( \\frac{r_x}{v_{0x}} \\right)^2+v_{0y}\\frac{r_x}{v_{0x}} \\]"},{"location":"23FS/PE/Dynamik.html#geschwindigkgeit","title":"Geschwindigkgeit","text":"<p>Um eine Geschwindigkeit in einen Vektor um zurechnen, kann die folgende Formeln verwendet werden: \\((|\\vec v|\\cdot \\sin(\\alpha), |\\vec v|\\cdot \\cos(\\alpha))\\)</p>"},{"location":"23FS/PE/Kinematik.html","title":"Kinematik","text":""},{"location":"23FS/PE/Kinematik.html#bezugssystem","title":"Bezugssystem","text":"<p>Ein Bezugssystem besteht aus Ortskoordinate und einer Zeit.</p>"},{"location":"23FS/PE/Kinematik.html#grossen","title":"Gr\u00f6ssen","text":"<p>In der Kinematik wird der Ort \\(\\vec r\\), die Geschwindigkeit \\(\\vec v\\) und die Beschleunigung \\(\\vec a\\) verwendet. $$ \\vec v = \\frac{d \\vec r}{dt}\\ \\vec a = \\frac{d \\vec v}{dt}\\ \\ \\vec r = \\int {\\vec v} \\mathrm dt\\ \\vec v = \\int {\\vec a} \\mathrm dt\\ $$ </p>"},{"location":"23FS/PE/Kinematik.html#unabhangigkeit-der-kooridnaten","title":"Unabh\u00e4ngigkeit der Kooridnaten","text":"<p>Die <code>x</code>, <code>y</code> und <code>z</code> Koordinaten sind unabh\u00e4ngig von einander. Dies bedeutet auch, dass ein Problem auf ein 1D-Problem herunterbrechen</p>"},{"location":"23FS/PE/Kinematik.html#_1","title":"Kinematik","text":"<p>\\(F_t(t)=qE_{x0}\\sin(\\omega t)\\) </p> <p>Dabei ist \\(q\\) die Ladung in Coulam und \\(E_0\\) ein elektrisches Feld in \\(\\frac V m\\) (volt pro meter)</p>"},{"location":"23FS/PE/Kinematik.html#schwerpunkt","title":"Schwerpunkt","text":"<p>Der Schwerpunkt ist der gewichtete Mittelpunkt aller Massepunkte \\(m_i\\). $$ \\vec R_S = \\frac 1 {\\sum_i m_i}\\sum_i m_i \\vec R_i $$</p> <p></p> <p>Der Schwerpunkt kann sich nur durch eine externe Kraft verschieben.  Im Beispiel der Sonne und Planeten: Wenn alle Planeten in einer Reihe sind, dann ist der Schwerpunkt am selben Ort, wie wenn die Planten gleichm\u00e4ssig um die Sonne verteilt sind. Nur die Sonne \u00e4ndert ihre Position relativ zum Schwerpunkt. Dies ist auch ersichtlich bei den Engl\u00e4nder im Bild oben.</p> <p></p> <p>Im Bild oben sind drei Red Bull Dosen mit verschiedenem F\u00fcllgrad dargestellt. Der rote Punkt ist der Schwerpunkt der Dosen. Wenn die Dosen gekippt wird, f\u00e4llt die Dose um, wenn die Gewichtskraft, ausgehend vom Schwerpunkt, im K\u00f6rper selbst bleibt (wie bei der 1/3 gef\u00fcllten Dose zu sehen ist). Falls die Schwerkraft ausserhalb zu liegen kommt, f\u00e4llt die Dose. </p>"},{"location":"23FS/PE/Kinematik.html#translation","title":"Translation","text":"<p>Ein K\u00f6rper bewegt sich translatorisch so, als ob die gesamte Masse im Schwerpunkt konzentriert w\u00e4re und alle Kr\u00e4fte dort angreifen w\u00fcrden.</p> <p>Aus diesem Satz geht, wenn ein Kraft ein K\u00f6rper nicht im Schwerpunkt angreift, dann bewegt sich der K\u00f6rper trotzdem so, als ob die Kraft auf den Schwerpunkt liegt.</p>"},{"location":"23FS/PE/Kinematik.html#rotation","title":"Rotation","text":"<p>Greifen dieselben Kr\u00e4fte ausserhalb des Schwerpunkts an, erzeugen sie zus\u00e4tzlich Drehmomente, die den K\u00f6rper rotieren lassen. Die translatorische Bewegung bleibt aber gleich, wie wenn sie im Schwerpunkt angreifen.</p> <p></p> <p>Damit ein K\u00f6rper sich drehen kann, muss er mindestens durch zwei Massepunkte beschrieben werden.</p> <p>In der folgenden Tabelle ist ersichtlich, wie die Gr\u00f6ssen aus der Translation direkt zu der Rotation \u00fcbersetzt werden k\u00f6nnen:</p> <p></p> <p>Wie bei der Translation h\u00e4ngen die Gr\u00f6ssen mit Ableiten zusammen.</p> <p>Beim Drehimpuls gilt das selbe, wie beim Impuls. Der Drehimpuls bleibt erhalten, wenn keine externe </p> <p>Um eine Drehseite zu beschreiben, wird die Rechtehand mit den Finger in die Richtung des Rades auf das Rad gelegt. Der Vektor dieser Drehbewegung zeigt in die Richtung des Daumens, im rechten Winkel des Rades.</p> <p></p>"},{"location":"23FS/PE/Kr%C3%A4fte.html","title":"Kr\u00e4fte","text":"<p>Es gibt vier Kr\u00e4fte:</p> <ul> <li>Gravitation</li> <li>Elektromagnetische Kr\u00e4fte</li> <li>Starke Kernkraft (h\u00e4lt Atomkerne zusammen)</li> <li>Schwache Kraft (radioaktiver Zerfall)</li> </ul>"},{"location":"23FS/PE/Kr%C3%A4fte.html#schwere-und-tragemasse","title":"Schwere- und Tr\u00e4gemasse","text":"<p>Ein Objekt hat zwei Massen: eine schwere Masse und tr\u00e4ge Masse. Die schwere Masse unterliegt der Gravitation und besagt, wie fest ein Objekt von (unter anderem) der Erde angezogen wird. Die tr\u00e4ge Masse sagt aus, wie viel Kraft ben\u00f6tigt wird, um das Objekt zu beschleunigen und abzubremsen. </p> <p>Albert Einstein, in der allgemeinen Relativit\u00e4t Theorie, hat bewiesen, dass diese Masse gleich sind.</p>"},{"location":"23FS/PE/Kr%C3%A4fte.html#lineare-federkraft","title":"Lineare Federkraft","text":"\\[ \\vec F = -k \\vec x\\\\ \\vec a = \\frac{\\vec F}{m}=-\\frac{k}{m}x \\] <p>Die Kraft einer linearen Feder h\u00e4ngt nur von der Federkonstante \\(k\\) (\\([k]=\\frac N m\\)) und der Auslenkung \\(\\vec x\\) ab.</p> <p></p>"},{"location":"23FS/PE/Kr%C3%A4fte.html#differenzialgleichung","title":"Differenzialgleichung","text":"\\[ -\\frac k m x(t)=\\frac{d^2x(t)}{dt^2}\\\\  \\text{Wenn } x(t)=x_0\\cos(\\omega t) \\\\  -\\frac k m x_0 \\cos(\\omega t)=-x_0\\omega^2\\cos(\\omega t)\\\\  \\frac k m = \\omega^2\\\\  \\omega = \\sqrt{\\frac k m} \\]"},{"location":"23FS/PE/Kr%C3%A4fte.html#kraft-formel","title":"Kraft Formel","text":"<ul> <li>Gravitationskraft: \\(F=G \\frac{m_1m_2}{R^2}\\) </li> <li>Kraft zwischen zwei Ladungen (Coulombgesetzt): \\(F_c=\\frac 1 {4\\pi\\epsilon_0}\\frac{q_1q_2}{R^2}\\) </li> </ul>"},{"location":"23FS/PE/Dynamik/Energie%20und%20Arbeit.html","title":"Energie und Arbeit","text":"<p>Energie und Arbeit werden in Joule gemessen, was \u00e4quivalent zu \\(\\frac{kg\\cdot m^2}{s^2}\\).</p> <p>Die generelle Formel f\u00fcr Arbeit und Energie ist  $$ W_{A\\to B}=\\int_A^B \\vec F \\circ \\mathrm d \\vec x $$ Diese Formel kann in die folgenden spezifische Formel umgeformt werden: $$ E_{pot}=...\\ E_{kin,trans}=\\frac 1 2 m v^2 \\ E_{kin,rot}=\\frac 1 2 J \\omega^2 \\ E_{kin,total}=E_{pot} + E_{kin,trans} + E_{kin,rot} $$ Die potentielle Energie in die H\u00f6he kann folgendermassen berechnet werden: $$ E_{pot,h}=m\\cdot g \\cdot h $$</p>"},{"location":"23FS/PE/Dynamik/Energie%20und%20Arbeit.html#hubarbeit","title":"Hubarbeit","text":"<p>Im folgenden Bild bewegt sich der Block nach rechts und es wirkt eine Kraft nach links. Daher nimmt die potentielle Energie ab.</p> <p></p> <p>Im n\u00e4chsten Bild bewegt sich der Block nach links und die Kraft zieht nach links. In diesem Fall nimmt die potentielle Energie zu.</p> <p></p> <p>Dies funktioniert auch auf der horizontaler Ebene:</p> <p></p>"},{"location":"23FS/PE/Dynamik/Energie%20und%20Arbeit.html#wirkungsgrad","title":"Wirkungsgrad","text":"<p> $$ \\eta=\\frac{\\text{Nutzenergie}}{\\text{zugef\u00fchrte Enerie}} $$ \\(\\eta\\) ist der Wirkungsgrad, welcher aussagt, wie viel der hineingesteckte Energie wirklich genutzt wird.</p>"},{"location":"23FS/PE/Dynamik/Energie%20und%20Arbeit.html#energieerhaltung-im-looping","title":"Energieerhaltung im Looping","text":""},{"location":"23FS/PE/Dynamik/Energie%20und%20Arbeit.html#leistung","title":"Leistung","text":"<p>Leistung ist Arbeit pro Zeit, bzw. Arbeit ist die Leistung integriert \u00fcber die Zeit. $$ P=\\frac{\\partial W}{\\partial t}\\ W=\\int P \\mathrm d t $$ Die Einheit ist daher:  $$ W=\\frac J s=\\frac{kg \\cdot m^2}{s^3} $$</p>"},{"location":"23FS/PE/Dynamik/Impuls.html","title":"Impuls","text":"<p>Der Impuls ist definiert als: $$ \\vec p = m \\vec v $$ (Dabei ist \\(m\\) eine Masse in kg und \\(\\vec v\\) eine Geschwindigkeit)</p> <p>Der Gesamtimpuls eines Systems bleibt immer erhalten, insofern keine \u00e4usseren Kr\u00e4fte einwirken.</p>"},{"location":"23FS/PE/Dynamik/Impuls.html#stossexperiment","title":"Stossexperiment","text":"\\(m_1\\) \\(\\Delta v_1\\) \\(m_2\\) \\(\\Delta v_2\\) \\(\\frac{m_1}{m_2}\\) \\(\\frac{\\Delta v_2}{\\Delta v_1}\\) \\(0.5\\) \\(-1\\) \\(0.5\\) \\(+1\\) \\(1\\) \\(-1\\) \\(0.25\\) \\(-11.5\\) \\(0.5\\) \\(+5.5\\) \\(0.5\\) \\(-0.5\\) <p>Aus diesem Experimentt geht, dass folgendes gilt: $$ \\begin{align} \\frac{m_1}{m_2}&amp;=-\\frac{\\Delta v_2}{\\Delta v_1}\\ m_1 \\cdot \\Delta V_1 &amp;= -m_2 \\cdot \\Delta v_2 \\end{align} $$ Oder in Worten: den Impuls bleibt erhalten. K\u00f6rper 1 gibt den Impuls weiter an den K\u00f6rper 2.</p>"},{"location":"23FS/PE/Dynamik/Impuls.html#elastischer-stossversuch","title":"Elastischer Stossversuch","text":"<p>Der Gesamtimpuls des gesamten Systems ist \\(V_{Spt}=\\frac{m_1 \\vec v_2 + m_2 + }{}\\)</p> <p>Aus diem geht er TODO $$ \\vec p_{vor}=\\vec p_1+\\vec p_2=m_1 \\cdot \\vec v_1 + m_2 \\cdot \\vec v_2 = 6 \\frac{kg\\cdot m}{s} = \\vec p_{nach} \\ $$</p> <p></p>"},{"location":"23FS/PE/Dynamik/Impuls.html#unelastischer-stossversuch","title":"Unelastischer Stossversuch","text":"<p>Der Gesamtimpuls ist </p> <p>$$ \\begin{align} \\vec p_{vor}&amp;=m_1\\vec v_1 + m_2 \\vec v_2 = \\vec p_{nach} = (m_1 + m_2) \\cdot \\vec u\\ \\vec u &amp;=\\frac{m_1\\vec v_1 + m_2 \\vec v_2}{m_1 + m_2} \\end{align} $$ In einem Zeit-Geschwindigkeits-Diagramm sieht das folgendermassen aus:</p> <p></p>"},{"location":"23FS/PE/Dynamik/Impuls.html#ballistisches-pendel","title":"Ballistisches Pendel","text":"<p>https://www.leifiphysik.de/mechanik/impulserhaltung-und-stoesse/versuche/ballistisches-pendel-simulation</p> <p></p> <p></p>"},{"location":"23FS/PE/Dynamik/Impuls.html#schwerpunkt-geschwindigkeit","title":"Schwerpunkt Geschwindigkeit","text":"<p>\\(V_{Spt}\\) ist die Schwerpunkt Geschwindigkeit und stellt die Spiegelachse dar, an dem sich die Geschwindigkeitsidifferenzen spiegeln. $$ V_{Spt}=\\frac{\\vec p}{m_1+m_2}=\\frac{m_1\\cdot \\vec v_1 + m_2 \\cdot \\vec v_2}{m_1+m_2} $$ Im Falle der Elastischen Stosses, wird das \\(u_1\\) und \\(u_2\\) nach dem Zusammenstoss an \\(V_{Spt}\\) gespiegelt.</p> <p></p> <p>Im Falle des unelastischen Stosses gilt nach dem Stoss \\(u_1=u_2=v_{Spt}\\)</p> <p></p> <p>Wenn gillt \\(m_2 \\gg m_1\\), dann gelten folgende vereinfachten Formeln:</p>"},{"location":"23FS/PE/Dynamik/Impuls.html#kraftstoss","title":"Kraftstoss","text":"<p>Die Impuls\u00e4nderung durch einen Kraftstoss ist die Fl\u00e4che einer \\(F(t)\\) Funktion.</p> <p>Im folgenden Diagramm ist grafisch dargestellt, wie der Impuls erhalten bleibt.</p> <p></p>"},{"location":"23FS/PE/Dynamik/Impuls.html#racketen","title":"Racketen","text":"\\[ v_{final}=v_{Gasse}\\ln\\left(\\frac{m_{init}}{m_{final}}\\right) \\] <p>\\(v_{final}\\) ist die finale Geschwindigkeit, \\(v_{Gasse}\\) ist die Austrittsgeschwindigkeit der Gasse, \\(m_{init}\\) ist die initiale Masse und \\(m_{final}\\) ist die finale Masse (ohne Treibstoff).</p>"},{"location":"23FS/PE/Dynamik/Reibung.html","title":"Reibung","text":""},{"location":"23FS/PE/Dynamik/Reibung.html#trockene-reibung","title":"Trockene Reibung","text":"<p> $$ F_R=\\mu F_N \\ F_N=m\\cdot g $$ Die Reibungskraft \\(F_R\\) ist proportional zur Normalkraft \\(F_N\\) mit dem Faktor des Gleitreibungskoeffizient \\(\\mu\\).</p> <p></p> <p>Wenn eine Masse sich nicht bewegt, wirkt die Haftreibungskraft \\(\\vec F_{Haft}\\). Sobald sich die Masse sich bewegt gilt die Gleitreibungskraft \\(\\vec F_{Gleit}\\). \\(\\vec F_{Haft}\\) und \\(\\vec F_{Gleit}\\) unterscheiden sich nur durch den Gleitreibungskoeffizient \\(\\mu\\).</p> <p>Das Vorzeichen ist wichtig zu beachten. Es zeigt immer in die entgegengesetzte Richtung, in welche sich eine Masse bewegt.</p> <p></p>"},{"location":"23FS/PE/Dynamik/Reibung.html#beispiel-bei-welchem-winkel","title":"Beispiel: Bei welchem Winkel?","text":"<p>Um den Winkel zu finden, bei dem eine Masse anf\u00e4ngt sich zu bewegen, kann \\(F_{Haft}=F_g\\) gleich geseetzt werden: $$ \\begin{align} F_{Haft}&amp;=\\mu\\cdot m \\cdot g \\cdot \\cos(\\alpha)\\ F_g&amp;=m\\cdot g \\cdot \\sin(\\alpha)\\ F_{Haft}&amp;=F_g \\ \\mu \\cdot m \\cdot g \\cos(\\alpha)&amp;=m \\cdot g \\cdot \\sin(\\alpha)\\ \\mu \\cdot \\cos(\\alpha) &amp;= \\sin(\\alpha)\\ \\alpha &amp;= \\frac{\\sin(\\alpha)}{\\cos(\\alpha)}\\        &amp;= \\tan^{-1}(\\mu) \\end{align} $$</p>"},{"location":"23FS/PE/Dynamik/Reibung.html#viskose-reibung","title":"Viskose Reibung","text":"<p>Es gibt zwei Arten von viskosen Reibung: Die laminare Str\u00f6mung ist linear-proportional mit \\(v\\). Wenn die Str\u00f6mung turbulent ist, wie fast immer in der Realit\u00e4t, nimmt die Reibung quadratisch mit \\(v\\) zu.</p> <p></p> <p>Die Reibungskraft bei turbulenten Str\u00f6men sieht folgendermassen aus: $$ \\vec F_R = - \\frac 1 2 \\rho A c_w |\\vec v|^2 \\cdot \\vec e_v $$ Dabei ist in dieser Formel die Dichte des Mediums \\(\\rho\\), die Stirnfl\u00e4che der Masse \\(A\\), ein Wiederstandsbeiwert \\(c_w\\) und die Geschwindigkeit \\(\\vec v\\).</p> <p></p>"},{"location":"23FS/PM4/End%20Presentation.html","title":"End Presentation","text":"<ul> <li>absolutes max: 15 min, eher weniger</li> <li>Sicher nicht Kollegen langweilen</li> <li>Ein wenig formal</li> <li>Slide mit Projektname + Mitglieder</li> <li>Demo</li> <li>Unterhaltungs Show mit wenig Formalen</li> <li>Fl\u00fcssiger Ablauf</li> <li>Nicht jeder muss etwas sagen oder auf der B\u00fchne sein</li> <li>Fragen</li> <li>Wer?</li> <li>Was? - Godot game</li> <li>Was ist neu?</li> </ul> <p>Code muss am 21.06.2023 fertig sein</p> <p>Die Dozenten pullen das Projekt an diesem Tag und versuchen es laufen zu lasen.</p> <p>Die Note h\u00e4ngt davon ab, wie gut daran weiter gearbeitet werden k\u00f6nnte.</p>"},{"location":"23FS/PM4/Godot/Learnings.html","title":"Learnings","text":"<p>In the following paragraphs, learnings from examining other games are documented.</p>"},{"location":"23FS/PM4/Godot/Learnings.html#autoload-nodes","title":"Autoload Nodes","text":"<p>*Doc Reference</p> <p>For global states, like which levels are completed, autoloaded nodes can be used.  In <code>Project &gt; Project Settings &gt; AutoLoad</code> scripts which inherit from <code>Node</code> can be chosen. </p> <p></p> <p>These scripts are loaded by Godot when starting the game and are available during while the game is running.</p> <p>In C# the autoloaded node can be accessed with <code>GetNode&lt;Type&gt;(\"/root/&lt;name&gt;\")</code>, like every other node in the root of the scene tree.</p> <p>An autoloaded node can dispatch signals and function as a global dispatcher. This can get quickly unwieldy when the application and the amount of signal grows. However, for actual global signals, this can be a clean solution</p>"},{"location":"23FS/PM4/Godot/Learnings.html#custom-resource-types","title":"Custom Resource Types","text":"<p>A custom resource type can be created by inheriting from <code>Resource</code>. The resulting class can be set and edited in the Godot inspector.  However, there is currently a C# limitation that a resource class can't be registered. As a workaround, a new <code>*.tres</code> file (Right-Click in FileSystem &gt; New Resource...) of the type <code>Resource</code> can be created. </p> <p>  Then the custom resource script can be attached to the newly created <code>*.tres</code> file.</p> <p></p> <p>The resource file can be edited in the inspector and set to exported properties. The object of the <code>*.tres</code> file is global. If a script references a <code>*.tres</code> file and updates a property, other script will see this change. This makes it an alternative to autoload nodes.</p>"},{"location":"23FS/PM4/Godot/Learnings.html#dependency-injection","title":"Dependency Injection","text":"<p>When developing UIs, the controller is often split up into multiple \u201csub-controller\u201d which control part of the UI. The sub-controllers still need access to the model instance.</p> <p>This can be archived with the built into Godot's dependency injection. Firstly, create a new custom resource type and store it in a <code>*.tres</code> file. Secondly, export a model property in the sub-controller scripts and, finally, set the model property to the created <code>*.tres</code> file. For more details, see Custom Resource Types.</p>"},{"location":"23FS/PM4/Godot/Learnings.html#tween","title":"<code>Tween</code>","text":"<p>Doc Reference</p> <p>A <code>Tween</code> instance can interpolate a property of an object between two values.</p>"},{"location":"23FS/PM4/Godot/Learnings.html#create-new-node-instance","title":"Create new Node Instance","text":"<p>If programmatically new node instances are created, then it can be helpful to provide a static method. This method functions similarly to a constructor, adding the node to the scene tree and initializing variables if necessary.</p> <pre><code>public static Chest CreateChest(Vector2 pos, itemSpawner: ItemSpawner) {\n    var chest = GD.Load&lt;PackedScene&gt;(\"res://scenes/chest.tscn\").Instance();\n    chest.Teleport(x, y);\n    chest.ItemSpawner = itemSpawner;\n    chest.AddToGroup(\"characters\");\n    GD.Print(\"Spawned chest\");\n    return chest;\n}\n</code></pre>"},{"location":"23FS/PM4/Godot/PM4.html","title":"PM4","text":"<p>Michael Schlaubitz: scbu@zhaw.ch</p>"},{"location":"23FS/SWEN2/C4.html","title":"C4","text":""},{"location":"23FS/SWEN2/C4.html#context","title":"Context","text":"<p>Ein Systemkontextdiagramm hilft, folgende Fragen zu beantworten:</p> <ol> <li>Was ist das Software-System, das gebaut wird?</li> <li>Von wem wird es verwendet?</li> <li>Wie passt es in die bestehende Umgebung?</li> </ol> <p></p>"},{"location":"23FS/SWEN2/C4.html#containers","title":"Containers","text":"<p>Ein Containerdiagramm hilft, folgende Fragen zu beantworten:</p> <ol> <li>Wie ist die Gesamtform des Softwaresystems?</li> <li>Was sind die High-Level-Technologieentscheidungen?</li> <li>Wie sind die erantwortlichkeiten im System verteilt?</li> <li>Wie kommunizieren die Container miteinander?</li> <li>Wo muss der Entwickler Code schreiben, um Funktionen zu implementieren?</li> </ol> <p></p>"},{"location":"23FS/SWEN2/C4.html#component","title":"Component","text":"<p>Ein Komponentendiagramm hilft, die folgenden Fragen zu beantworten. 1. Aus welchen Komponenten setzt sich jeder Container zusammen? 2. Haben alle Komponenten ein Zuhause (d. h. sie befinden sich in einem Container)? 3. Ist es klar, wie die Software auf hoher Ebene funktioniert?</p> <p></p> <p></p>"},{"location":"23FS/SWEN2/CI.html","title":"CI","text":"<ul> <li>On-Demand   run a script or press a button</li> <li>Scheduled   at certain times \u2192 nightly builds</li> <li>Triggered   on certain events \u2192 commit/push to VCS</li> </ul>"},{"location":"23FS/SWEN2/CI.html#types-of-automation","title":"Types of Automation","text":"<ul> <li>Build Automation   Thinks like building, packaging or creating documenation</li> <li>Test Automation   Automated execution of unit-, integration- and acceptance-test</li> <li>Deployment Automation   Automatically deploy to production or testing</li> <li>Operation Automation   Automatically provision infrastructure, monitoring, ...</li> </ul> <p>Automation has a lot of benefits like:</p> <ul> <li>developers can't reliable built software locally</li> <li>unit testing consistent</li> <li>transparent deployment</li> <li>documentation from Jenkinsfile or similar</li> <li>manual work is error-prone</li> <li>...</li> </ul>"},{"location":"23FS/SWEN2/CI.html#best-practices","title":"Best Practices","text":"<ul> <li>Maintain a single source repository</li> <li>Automate the build</li> <li>Make your build self-testing</li> <li>Every commit should build on an integration machine</li> <li>Keep the build fast</li> <li>Test in a clone of the production environment</li> <li>Make it easy for anyone to get the latest executable</li> <li>Everyone can see what\u2019s happening</li> <li>Automate deployment</li> </ul>"},{"location":"23FS/SWEN2/Cynefin.html","title":"Cynefin","text":"<p>Cynefin is not a model (represents reality), but a sense making tool (a way to look at reality).</p> <p></p> <ul> <li>Simple/Clear: There can exist a step-by-step instructions</li> <li>Complicated: In a complicated system, one needs to consult an expert, but there is still an ordered system</li> <li>Complex: A complex system can only be understand by probing it and interacting with it</li> <li>Chaotic: A transistion state in which a system has no rules. The brain strugles dealing with this. In an chaotic system, you do something and see what happens, then you do it again and something else happens.</li> <li>Disorder:  A transition state where you don't know in which state you actually are and just use the model which is most familiar.</li> <li>Collapse from  complacency: When a system is overconstraint and looks nice and simple, but then collapses when the reality isn't that simple.</li> </ul> <p>Between complicated, complex and chaotic isn't a strict line.</p> <p></p>"},{"location":"23FS/SWEN2/Cynefin.html#codefin","title":"Codefin","text":""},{"location":"23FS/SWEN2/Cynefin.html#exaptation","title":"Exaptation","text":"<p>Exaptation, also radical repurposing, is the taking of  an idea, concept, tool, method, framework, etc., intended to address one thing, and using it to address a different thing, often in another  domain.</p> <p>An example is the re-purposing of snorkelling mask as oxygen masks during the Covid-19 crises. Similarly, a Ukrainian web app designed for use for transport, parking and  paying utility bills has been re-purposed to warn of air raids, and  directs people to bomb shelters.</p>"},{"location":"23FS/SWEN2/Cynefin.html#constraints","title":"Constraints","text":"<p>Constraints limit the number of options one have. In the cynefin framework, different stages have different kinds of constraints:</p> <ul> <li>Simple Domain: Rigid constraints</li> <li>Complicated Domain: Governing constraints</li> <li>Complex Domain: Enabling constraints</li> <li>Chaotic Domain: Absence of constraints</li> </ul>"},{"location":"23FS/SWEN2/Cynefin.html#governingenabling-constraints","title":"Governing/Enabling Constraints","text":"<p>Laws, rules and codes create a governing constraint and give a sense of stability. However, they are sensitive to change.</p>"},{"location":"23FS/SWEN2/Cynefin.html#internalexternal-constraints","title":"Internal/External Constraints","text":"<p>(Unsure what this means...)</p> <p>Connections, like hashtags in knowledge management and links in  networks, provide a flexible and adaptive structure but at the cost of  visibility and control. Containers, like categories, spreadsheets cells, and departments, provide clear, reassuring boundary conditions.  Changing connections between people and organisational units is less  costly than trying to restructure or reorganize departments. As new  connections start to provide new ways of dealing with issues, then the  constraints can be tightened and eventually formalized into new units  and departments.</p>"},{"location":"23FS/SWEN2/Cynefin.html#connectingcontaining-constraints","title":"Connecting/Containing Constraints","text":"<p>Connections between people or between departments are flexible can be easily changed but invisible and hard to control effectively. On the other side, categories, containers and departments provide a clear structure, but changing them is costly.</p> <p>One way is to let connections form and then later tighten the constraints and formalise the connections into categories, departments and rules.</p>"},{"location":"23FS/SWEN2/Cynefin.html#rigid-flexible-and-permeable-constraints","title":"Rigid, Flexible and Permeable Constraints","text":"<p>Rigid constraints cannot be changed. If rigid structures are pressured enough, they fail catastrophically. </p> <p>Flexible constraints adjust to pressures constantly.</p> <p>Both can be enhanced with permeability, which is a special condition that allows for exceptions. This, however, comes with the danger of too many people applying for the exception.</p>"},{"location":"23FS/SWEN2/Cynefin.html#dark-constraints","title":"Dark Constraints","text":"<p>Dark constraints are not officially defined and cannot be seen, only their effects can be observed. [Apparently,] narratives are powerful antidotes against dark constraints.</p> <p>Dark constraints can somewhat be meassured by looking how much of the past can be explained with the known constraints. The more unexplainable things, the more likely are unexpected and potentially catastrophic surprises.</p>"},{"location":"23FS/SWEN2/Lean.html","title":"Lean","text":"<p>The Toyota Production System (TPS) has two pillars: Just-in-Time and Jidoka.</p> <p>TPS/Lean focuses on reducing the waste (unnecessary code, meetings, documentation, bugs, ...) in a system and produce a higher value for the final customer.</p> <p>The followings are the principles of lean:</p> <p></p> <p>There are three types of waste:</p> <ul> <li>Wasted code   Code which is either partially completed, outdated, unnecessary or defected</li> <li>Project management   Processes which aren't necessary, hand offs (there is a loss of knowledge), or extra features</li> <li>Waste in work force</li> <li>Task switching slows people down</li> <li>When people wait for instructions or information</li> </ul>"},{"location":"23FS/SWEN2/SAFe.html","title":"SAFe","text":"<p>Traditional management optimises for efficiency and stability, while agile optimises for innovation speed. SAFe tries to inject innovation speed into traditional management.</p> <p>SAFe keeps the traditional hierarchy, but adds agileness into individual blocks in the hierarchy.</p> <p></p> <p>The following is an overview of SAFe:</p> <p></p>"},{"location":"23FS/SWEN2/SAFe.html#safe-core-values","title":"SAFe Core Values","text":"<ol> <li>Alignment: Leaders communicate the mission by establishing and expressing the portfolio strategy and solution vision, determining business value during planning, and guiding the adjustment of scope to ensure that demand matches capacity.</li> <li>Built-in quality: Leaders change the system and demonstrate commitment by creating an environment where built-in quality becomes the standard.</li> <li>Transparency: Leaders foster the visualization of all relevant work and create an environment where \u201c\u2026 the facts are always friendly, every bit of evidence one can acquire, in any area, leads one that much closer to what is true.\u201d1</li> <li>Program execution: Leaders participate as Business Owners in PI planning and execution, celebrating high-quality PIs while aggressively removing impediments and demotivators.</li> </ol>"},{"location":"23FS/SWEN2/SAFe.html#safe-principles","title":"SAFe Principles","text":"<ol> <li>Take an economic view</li> <li>Apply systems thinking</li> <li>Assume variability; preserve options</li> <li>Build incrementally with fast, integrated learning cycles</li> <li>Base milestones on objective evaluation of working systems</li> <li>Visualize and limit WIP (Work-in-Process), reduce batch sizes, and manage queue lengths</li> <li>Apply cadence, synchronise with cross-domain planning</li> <li>Unlock the intrinsic motivation of knowledge workers</li> <li>Decentralise decision-making</li> <li>Organise around value</li> </ol>"},{"location":"23FS/SWEN2/SAFe.html#safe-levels","title":"SAFe Levels","text":""},{"location":"23FS/SWEN2/SAFe.html#safe-roles","title":"SAFe Roles","text":"<p>(Product Manager, System Architect, Release Train Engineer, Business Owner, Scrum Roles)</p>"},{"location":"23FS/SWEN2/SAFe.html#agile-release-train-art","title":"Agile Release Train (ART)","text":"<p>An agile release train is a long-lived team of agile teams  that incrementally develops, delivers, and often operates one or more solutions in a value stream.</p> <p></p>"},{"location":"23FS/SWEN2/SOLID.html","title":"SOLID","text":"<p>The SOLID patterns should help a mid-level software structure which can tolerate changes, is easy to understand and can be the basis for reusable components.</p>"},{"location":"23FS/SWEN2/SOLID.html#s-single-responsibility-principle","title":"S - Single Responsibility Principle","text":"<p>A module should be responsible to one, and only one, actor.</p> <p>The single responsibility principle does not state that every function/module/... needs to have one responsibility. Rather, it states, that every module should have one actor, which can demand change.</p> <p>This should be done to limit the impact different stakeholder's demands can have.</p>"},{"location":"23FS/SWEN2/SOLID.html#symptom-1-accidental-duplication","title":"Symptom 1 - Accidental Duplication","text":"<p>One symptom of SRP being violated occures when different actors use the same functionality facilitated by the same module (e.g. overtime calculations used by the COO and CFO, but in different ways). If one user demands changes, the developer then implements those, it can be easy to miss the second actor. This will lead to features changing subtly enough (maybe some altered numbers) that nobody notices until it is too late.</p>"},{"location":"23FS/SWEN2/SOLID.html#symptom-2-merges","title":"Symptom 2 - Merges","text":"<p>A second problem occurs, when two actors want a change. The changes might be implemented by two different developers, who both will change the same module (as it is shared). When completing the request, a merge conflict is practically guaranteed.</p>"},{"location":"23FS/SWEN2/SOLID.html#solutions","title":"Solutions","text":"<p>One possible solution is to split the data from the functions. To reduce the amount of classes a developer has to deal with, one can introduce a facade, which in turn uses the different logic classes. The classes, that actually implement the logic, mustn't know each other to avoid accidental duplication.</p> <p></p> <p>If one prefers to keep the logic closer to the data, one can implement the most important method in the original class and then use a facade for the other functions.</p> <p></p> <p>One possible downside of this \"pattern\" is that it promotes duplication to some part as some shared logic might be needed in multiple implementations.</p> <ul> <li>Cons:</li> <li>If we have an application where 90% of logic is shared between two actors, should we duplicate those 90%? Probably not, but how much should be duplicated?<ul> <li>This even applies to the example: What if  a field is added to <code>EmplyeeData</code>. Then we have the two symptoms again, so should we duplicate this class as well? Where do we stop? What if the facade needs two change? If this is thought to the end, should we duplicate even the login screen? Probably not...</li> <li>This leads to this principal only being applicable if its already set in stone, what will change in the future (which is almost never the case) </li> </ul> </li> <li> <p>One of the scrum principals is, that we should forget about the future. Adding unneeded complexity kills your project. This seems to be a primary case of adding complexity when its not clear if it is needed in the future.</p> </li> <li> <p>Mention that this pattern exists on the functions and class level, the component level (Common Closure Principle) and the architectural level (Axis of Change)</p> </li> </ul>"},{"location":"23FS/SWEN2/SOLID.html#o-open-close-principle","title":"O - Open Close Principle","text":"<p>Software entities should be open for extension but closed for modification</p> <p>This means, functions should be easily be added to existing code, but existing code shouldn't be altered. To do this, while writing code, ask your self, can more functionality be added to this code.</p> <p>Advantages:</p> <ul> <li>Maintainability   Easier to add code </li> <li>Flexibility</li> <li>Scaleability</li> </ul> <p>One way to archive the open close principle is by designing the architecture in a way that arrows between \"modules\" only go in one direction. This can be seen on the diagram below. All arrows point towards <code>Interactor</code>. This results in <code>Interactor</code> being protected from changes from <code>Controller</code> and <code>Database</code> since it doesn't even know about these modules. This also means, that not all modules are equally protected from changes and there is a hierarchy of protected-ness (namely <code>ScreenPresenter</code> = <code>PrintPresenter</code> &lt; <code>Controller</code> &lt; <code>Interactor</code>)</p> <p></p>"},{"location":"23FS/SWEN2/SOLID.html#l-liskov-substitution-principle","title":"L - Liskov Substitution Principle","text":"<p>What is wanted here is something like the following substitution property: If for each object <code>o1</code> of type <code>S</code> there is an object <code>o2</code> of type <code>T</code> such that for all programs <code>P</code> defined in terms of <code>T</code>, the behavior of <code>P</code> is unchanged when <code>o1</code> is substituted for <code>o2</code> then <code>S</code> is a subtype of <code>T</code>.</p> <p></p> <p>The following square-rectangle example is the canonical violation of this principle. While <code>Square</code> inherits from <code>Rectangle</code>, it behaves different from a rectangle. This can be exemplified with the following code:</p> <pre><code>Rectangle r = ...\nr.setW(5);\nr.setH(2);\nassert(r.area() == 10);\n</code></pre> <p>If <code>r</code> were to be a <code>Square</code> this method will likely fail. The only way for a calee to deal with this, is to add an if statement to differentiate between <code>Rectangle</code> and <code>Square</code>.</p> <p>The following is an example, where the Liskov Subsitution Principle was up held. Both <code>BuisnessLicense</code> and <code>PersonalLicense</code> behave the same and <code>Billing</code> doesn't have to know which implementation it uses.</p> <p></p>"},{"location":"23FS/SWEN2/SOLID.html#i-interface-segregation-principle","title":"I - Interface Segregation Principle","text":"<p>An object should only import what is uses</p> <p></p> <p>In the diagram above <code>User1</code> might only use <code>+op1</code>, yet they still have to import the whole <code>OPS</code> structure. If there were changes to <code>+op2</code> and <code>+op3</code>, <code>User1</code> probably still has to be redeployed.</p> <p>This can be avoided by reworking the architecture in the following way: </p> <p></p>"},{"location":"23FS/SWEN2/SOLID.html#d-dependency-inversion-principle","title":"D - Dependency Inversion Principle","text":"<p>Avoid dependencies on volatile concrete classes</p> <p>Depending on concrete implementation can be dangerous, since changes to those concrete implementation force changes to dependencies. This can be fixed by using abstract types, like abstract classes and interfaces, instead of their concrete implementation.</p> <p>With that being said, there are always concrete dependencies (e.g. the <code>String</code> class in Java). Non-volatile concrete implementation, especially when defined by the platform, can be used without building needless abstractions. </p> <p>However, references volatile concrete implementations should be avoided.</p> <p>These following coding practices emerge from this:</p> <ul> <li>Don't refer to volatile concrete classes</li> <li>Don't derive from volatile concrete classes</li> <li>Don't override concrete functions</li> <li>Never mention the name of anything concrete and volatile</li> </ul> <p>When creating a new object, in most programming languages, this requires a concrete implementation. This can be solved by employing abstract factories. </p> <p>Most systems have dependencies to concrete implementation, which can't be architectured away. This is fine.</p>"},{"location":"23FS/SWEN2/Software%20Architecture.html","title":"Software Architecture","text":"<p>Big design up front is dumb. Doing no design up front is even dumber.</p> <p>Or do just enough...</p> <p>Software architecture can be defined as: </p> <p>The software architecture of a program or computing system is the structure or structures of the system, which comprise software elements, the externally visible properties of those elements, and the relations among them by Simon Brown    </p>"},{"location":"23FS/SWEN2/Software%20Architecture.html#application-architecture","title":"Application Architecture","text":"<p>The main concern is the organisation of code. It matters how the code is split into modules, components, layers, ...</p> <p>Usual questions in the application architectures are:</p> <ul> <li>Cross-cutting concerns: Issues which span multiple layers/components, like exception handling, logging, authorisation &amp; authentication, ...</li> <li>Security</li> <li>Performance, scalability</li> <li>Auditing, regulatory requirements</li> <li>Real-word constraints</li> <li>Interoperability and integration into other software</li> <li>Operational, support and maintenance requirement</li> <li>Structural consistency and integrity. Things, like classes, modules, etc, should be where people expect them</li> </ul>"},{"location":"23FS/SWEN2/Software%20Architecture.html#non-functional-behaviour","title":"Non-Functional Behaviour","text":"<p>Non-functional behaviour are the properties of a software. Some of these can be measured while run-time, and some can't.</p> <p></p> <ul> <li>Performance (response time / throughput): A system must guarantee the required response times. Not least because system response times have a significant influence on work productivity.</li> <li>Security: A system must be secure against unauthorized access and wanton destruction.</li> <li>Availability: A system must be available and meet defined minimum requirements.</li> <li>Usability: A system must be usable for its intended purpose.</li> <li> <p>Robustness: A system must run stably and must not partially or completely stop its service under load.</p> </li> <li> <p>Scalability: A system must be able to be scaled (out or   up).</p> </li> <li>Integrability: A system must fit seamlessly into an existing   environment.</li> <li>Portability: A system must support different platforms.</li> <li>Maintainability: A system must have defined maintenance interfaces and a clear and concise structure.</li> <li>Testability: A system must be testable as a whole and in  its individual components. The testing of the system must  be supported by the system itself through tools (automated  tests, logs, traces).</li> <li>Reusability: System components must be reusable for   other systems.</li> </ul> <p>The divide between measurable and immeasurable isn't as binary is it is made up to be in the slides.</p>"},{"location":"23FS/SWEN2/Software%20Architecture.html#principle-of-software-design","title":"Principle of Software Design","text":"<p>Software should be modular, portable, changable.</p> <ul> <li>Modularity: Components of a design should consist of easily exchangeable, understandable and self-contained parts (e.g. ACL, DB Access, Validator, Rule Engine).</li> <li>Portability: Portability is given when software or parts of it are designed to run in other environments,</li> <li>Changeability: The more malleable a system is, the easier it is to make changes (e.g. by separating domain specifics from cross-cutting concerns).</li> <li>Conceptual Integrity: Those parts of a system that contain similar functions should also be   designed similarly (industry standards, reference architecture). Or, if you don't build a rocket, the architecture doesn't need to be rocket science. </li> <li>Intellectual Control: A software design should be understood in detail by those responsible in terms of form, content and complexity (interface, scope). If the people working on the software don't understand its architecture then the architecture won't be implemented</li> <li>Buildability: A software design must specify a target system in such a way that it can be realized by a given team in a given time (know-how, technology).</li> </ul>"},{"location":"23FS/SWEN2/Software%20Architecture.html#coupling-and-cohesion","title":"Coupling and Cohesion","text":"<p>There are different kind of coupling and cohesion. The basic rules, that higher cohesion will generally result in lower coupling.</p> <ul> <li>Data Coupling: data is exchanged between modules of a system</li> <li>Stamp Coupling: Data structures are exchanged between modules of a system</li> <li>Control Coupling: The exchange of data between modules controls the control flow</li> <li>Common Coupling: Different modules access the same data (Shared Data)</li> <li> <p>Content Coupling: One module modifies the internal data of another module</p> </li> <li> <p>Coincidental Cohesion: The grouping of the functionality of a module is done by chance.</p> </li> <li>Logical Cohesion: The functionality is grouped in a module, but they do not refer to each other.</li> <li>Temporal Cohesion: The time of the use determines the grouping of the functions.</li> <li>Procedural Cohesion: The call sequence of the functions determines the grouping.</li> <li>Communications Cohesion: The grouping of the functionality is determined by the common I/O.</li> <li>Sequential Cohesion: The sequence of data processing determines the grouping. Functions whose output simultaneously becomes the input for other functions are grouped together in a module.</li> <li>Functional Cohesion: The aim of this grouping is that a module can keep logic and data locally (information hiding).</li> </ul> <p>To actually implement high cohesion, low coupling, the following can be done in code:</p> <ul> <li>Independence of Design: Each module can be designed independently of other modules and later changes take place only and exclusively in one module. The prerequisite is a constant definition of the interfaces and a \"freezing\" of the module specification.</li> <li>Small Interfaces: The number of messages exchanged between modules via interfaces is small.</li> <li>Low Interface Traffic: The frequency of information exchange between different modules is low.</li> <li>Unity: Similar problems and requirements are implemented similarly and classified and grouped accordingly.</li> <li>Encapsulation: Dependent modules are combined into larger units.</li> </ul>"},{"location":"23FS/SWEN2/Software%20Architecture.html#example","title":"Example","text":"<p>A system is to be created that will allow easy checking of banknotes based on their security features and simplify the reporting of potential counterfeits.</p> <ul> <li>The system is to be made available to banks, bureaux de change and other cash acceptance offices.</li> <li>The system must be web-enabled and capable of simultaneously exchanging data with the central bank's laboratory system.</li> <li>The system must be multilingual and multi-client capable.</li> </ul> <p>The following layers were designed:</p> <p></p> <p>These three layers contain the following seven logical layers:</p> <p></p> <p>These layers are then deployed on the following architecture:</p> <p></p>"},{"location":"23FS/SWEN2/Software%20Architecture.html#silver-bullet","title":"Silver Bullet","text":"<p>This comes from the paper \"No Silver Bullet\u2014Essence and Accident in Software Engineering\".</p> <p>Building software is so difficult because of its complexity, conformity, changeability and invisibility. </p> <p>Complexity can be split in inherit complexity and accidental complexity. Inherit complexity is complexity which comes from the fact that the project itself is complexity. Accidental complexity comes from spaghetti code. </p> <p>Because a software needs to conform to interfaces of its environment, the interface is as complex as its environment. Put differently, the more software is interconnected, the more complicate it gets.</p> <p>Because software is easily changed, many changes are made. </p> <p>Software is invisible in itself. There is no geometric representation of software. To still be able to visualise it, one creates views into it, with diagrams and text.</p>"},{"location":"23FS/SWEN2/Software%20Architecture.html#layering","title":"Layering","text":"<p>Importantly, tiers are not layers. Tiers are where software is running (e.g. a DB-Server, application server, client, ...). These are not layers. Multiple layers can run on one tier and one layer can run on multiple tiers.</p>"},{"location":"23FS/SWEN2/Software%20Architecture.html#distribution-of-work","title":"Distribution of Work","text":"<ul> <li>Distributed Presentation: Distributed presentation hides the locality of each client, while the server presents all clients centrally (for example, on one screen)</li> <li>Remote Presentation: Remote presentation means that one client handles all presentation tasks, while the application and data are managed by the server</li> <li>Distributed Function: Distributed Function implements a division of labor at the functional level between client and server (Cooperative Processing)</li> <li>Remote Data: The server keeps all data in one place, no data is stored on the clients</li> <li>Distributed Data: The data is distributed on different servers, the client accesses different servers at the same time</li> </ul>"},{"location":"23FS/SWEN2/Software%20Architecture.html#architectural-style","title":"Architectural Style","text":"<ul> <li>Independent Components: Independently executing elements that interact with each other via messages</li> <li>Call-and-Return: Defined by a fixed communication mechanism between calling and called element</li> <li>Virtual Machine: Allows the realization of portable and interpretable systems</li> <li>Data Flow: How data flows</li> <li>Data Centered: Central task is access and update of data of a repository</li> </ul>"},{"location":"23FS/SWEN2/Software%20Architecture.html#the-three-patterns","title":"The three Patterns","text":"<ul> <li>The Transaction Script Pattern organizes and divides the business logic into individual procedures so that each procedure covers a single request from the Presentation Layer.</li> <li>The Domain Model Pattern describes an object model of the problem domain that includes behavior and data.</li> <li>The Table Module Pattern describes a single instance (singleton) that encapsulates the business logic for all rows in a database table or view.</li> </ul>"},{"location":"23FS/SWEN2/Software%20Architecture.html#properties-of-modules","title":"Properties of Modules","text":"<p>Modules should be integrated that they compile, pass tests, run and deploy. Modularization in general enables team development and makes complex system manageable.</p>"},{"location":"23FS/SWEN2/Software%20Craftsmanship.html","title":"Software Craftsmanship","text":""},{"location":"23FS/SWEN2/Software%20Craftsmanship.html#manifesto","title":"Manifesto","text":"<ul> <li>We will not make messes in order to meet a schedule.</li> <li>We will not accept the stupid old lie about cleaning things up later.</li> <li>We will not believe the claim that quick means dirty.</li> <li>We will not accept the option to do it wrong.</li> <li>We will not allow anyone to force us to behave unprofessionally.</li> </ul> <p>These points produced the following manifesto</p> <p></p> <p></p>"},{"location":"23FS/SWEN2/Software%20Craftsmanship.html#coding-kata-and-dojos","title":"Coding Kata and Dojos","text":"<p>Programmers solve small problems in a not-job-related code base, repeatedly.</p> <p>In a dojo, these coding katas are solved in a group. One is programming, one is assisting and the rest is criticising. Who does what is cycling through the group.</p>"},{"location":"23FS/SWEN2/Agile/Agile%20Development.html","title":"Agile Development","text":""},{"location":"23FS/SWEN2/Agile/Agile%20Development.html#the-agile-manifesto","title":"The Agile Manifesto","text":"<p>We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value:</p> <p>Individuals and interactions over processes and tools Working software over comprehensive documentation Customer collaboration over contract negotiation Responding to change over following a plan</p> <p>That is, while there is value in the items on the right, we value the items on the left more.</p> <ul> <li>Individuals and Interactions   A fool with a tool is still a fool. It is important to have a team of good engineers. The team should form bonds.   A team is self organising (aka. individual).</li> <li>Working Software   The developing software should work continuously. This also means that the software is continuously integrated.</li> <li>Customer Collaboration   It is important to talk to the customer instead of ripping them of.</li> <li>Responding to Change   Its important to respond to change</li> </ul> <p>The last sentence is also key: The items on the right still hold values. Developing in an agile way doesn't mean there is no planning, just that responding to change is more important.</p>"},{"location":"23FS/SWEN2/Agile/Agile%20Development.html#12-principle","title":"12 Principle","text":"<ol> <li>Customer Satisfaction First    The customer should be satisfied by early and continuous  delivery</li> <li>Welcome Changing Requirements    The customers environment changes continuously. The software should adjust in lock-step.</li> <li>Frequent Delivery    Frequent delivery helps reduce the load of integrating. Additionally, the customer has a chance to give feedback which informs the developers actions for the next release.</li> <li>Business and Development Working Together    This is difficult to archive in practice as meeting with the business team every day is usually not possible.</li> <li>Motivated Individuals at the Heart of the Project    A manager micro-managing developers is not necessary. However, a coach, who supports the team and helps the team to archive their best, is vital. A coach does not play themselves, they only coach.</li> <li>Face-to-Face is the prime Communication Method    Instead of writing mail after mail, a talk, face-to-face, is usually a lot more efficient.</li> <li>Working Software is the primary Measure of Progress</li> <li>Aim for Sustainable Progress    A project should be able to be maintained at a constant pace indefinitely.</li> <li>Continuous Attention to what Matters    The quality and design of the software (the technical excellence) needs to be maintained </li> <li>Keep it Simple</li> <li>Create Self-Organising Teams     The best architectures, requirements and designs emerge from self-organising teams</li> <li>Make Time for Reflection     The team needs to reflect on how to become more effective at regular intervals and then tune and adjust their behaviour accordingly.</li> </ol>"},{"location":"23FS/SWEN2/Agile/Agile%20Development.html#pyramid-of-agile-development","title":"Pyramid of Agile Development","text":"<p>(Collaboration Practices = Management Practices; Technical Practices = Engineering Practices)</p> <p></p>"},{"location":"23FS/SWEN2/Agile/Agile%20Development.html#collaboration-practices","title":"Collaboration Practices","text":""},{"location":"23FS/SWEN2/Agile/Agile%20Development.html#agile-champion","title":"Agile Champion","text":"<p>An agile champion promotes the agile values to induce the following:</p> <ul> <li>to lead and inspire agility</li> <li>to help decide necessary changes to switch to agile development and then implement those</li> <li>to convince others of the necessity of a change to agile development</li> <li>to prevent wild-west agile (cowboy agile) and then later back sliding to the former approach</li> <li>remove impediments preventing the change to agile development</li> </ul>"},{"location":"23FS/SWEN2/Agile/Agile%20Development.html#collaboration-and-communication","title":"Collaboration and Communication","text":"<p>Intense and open communication is seen as one of the keys to successful agile projects.</p> <p>The team should communicate well with:</p> <ul> <li>them self</li> <li>the customer/end-user</li> <li>management</li> </ul> <p>This is similar to the agile value \"transparency and openness\".</p>"},{"location":"23FS/SWEN2/Agile/Agile%20Development.html#agile-value","title":"Agile Value","text":""},{"location":"23FS/SWEN2/Agile/Agile%20Development.html#organizational-culture","title":"Organizational Culture","text":"<p>An agile team can work within a componey which has:</p> <ul> <li>an agile organization and company</li> <li>only an agile company</li> <li>neither an agile organization, nor company</li> </ul>"},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html","title":"Extreme Programming","text":"<p>Extreme programming (XP) is a software development methodology intended to improve software quality and responsiveness to changing customer requirements.</p>"},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#four-variables-iron-triangle","title":"Four Variables (Iron Triangle)","text":"<p>There are four variables, time, resources, quality and scope, to develop software.</p> <p>In a traditional waterfall model, the resources, scope and time are fixed by a contract and the quality is implicitly set.</p> <p></p> <p>In agile development, the quality, time and resources are fixed, but the scope can be managed. Scrum does this by letting the customer choose the next features.</p> <p></p>"},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#cost-of-change","title":"Cost of Change","text":"<p>In a traditional waterfall model, change at a late stage is viewed as expensive. However, this doesn't necessarily hold true. Tools like, unit tests, refactoring and clean code (high cohesion, low coupling),  help to keep the curve flat.</p>"},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#values-of-xp","title":"Values of XP","text":"<ul> <li>Communication   Everyone is part of the team and everything from requirements to code is worked on together.</li> <li>Simplicity   Only do what is needed and asked for, but no more. Small simple steps should be taken (continuous integration) instead of big leaps to mitigate failure.</li> <li>Feedback   Because releases are delivered regularly, the team can ask and listen to feedback and adjust accordingly.    Another important take away, is to adjust the process to the project, not the other way around.</li> <li>Courage   It's important to tell the truth about the progress and estimates. </li> <li>Respect   Every member is given and feels respected. Importantly, also management respects the right of the team to the authority over the project.</li> </ul>"},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#xp-practices","title":"XP Practices","text":""},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#the-planning-game","title":"The Planning Game","text":""},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#small-releases","title":"Small releases","text":""},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#metaphor","title":"Metaphor","text":"<p>At the beginning of the project a project vision is written so everybody has the same understanding of the project and its scope. This applies to technical and non-technical people.</p> <p>(A metaphor translates to bildliche Beschreibung)</p>"},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#simple-design","title":"Simple Design","text":"<p>The right design for a software system is one that:</p> <ul> <li>Runs all tests</li> <li>Has no duplicated logic</li> <li>Has the fewest possible classes and methods</li> <li>Put in what is needed when it is needed</li> <li>Emergent, growing design (no big design upfront)</li> </ul>"},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#testing","title":"Testing","text":"<p>Any program feature without an automated test simply does not exist.</p> <p>A development cycle exists of:</p> <ul> <li>Listen (requirements)</li> <li>Write the test</li> <li>Implement the changes</li> <li>Refactor</li> </ul>"},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#refactoring","title":"Refactoring","text":"<p>When implementing a feature, one should always ask themself if the code and architecture can be improved. Tests provide a safety-net which allows changes to be done without fearing bugs and crashes.</p>"},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#pair-programming","title":"Pair Programming","text":"<p>XP dictates that all production code is written by two people looking at one screen. However, this is rarely being done in practice. It can be a useful technique to write the tricky parts of a software. </p> <p>The pairs should change frequently.</p>"},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#collective-ownership","title":"Collective Ownership","text":"<p>Everybody takes responsible for the whole system. While not everybody can be an export in every system, everybody should know the basics.</p>"},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#continuous-integration","title":"Continuous Integration","text":""},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#40-hours-week","title":"40 hours week","text":"<p>Developing the software needs to be sustainable. This also means, that extended periods of overtime cannot exist.</p>"},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#on-site-customer","title":"On-site customer","text":"<p>This hasn't materialised in practice, as the customer also has a job to do.</p>"},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#coding-standards","title":"Coding Standards","text":"<p>Collective ownership + constant refactoring means that coding practices must be unified in the team.</p>"},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#primary-practicies","title":"Primary Practicies","text":""},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#corollary-logischefolgende-practices","title":"Corollary (=logische/folgende) Practices","text":""},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#slack","title":"Slack","text":"<p>Include some minor tasks, which can be dropped if the development team gets behind. This has the goal for establishing trust in the team's ability to deliver on time.</p>"},{"location":"23FS/SWEN2/Agile/Extreme%20Programming.html#incremental-design","title":"Incremental Design","text":"<p>Break a problem in small, compact problems instead of solving a big task and reducing waste.</p>"},{"location":"23FS/SWEN2/Agile/Kanban.html","title":"Kanban","text":"<p>In kanban the work is pieced into items on a card, which then flow throw the kanban board. Each column has a Work in Progress (WIP) limit, which limits how many cards are allowed in the given column. If there is space in a column, a card from the previous column can be pulled in.</p> <p>The lead time (cycle time) is the average time to complete one item. This gives predictability to the process since one can estimate when a task will be done. Furthermore, one can introspect the process and see where there are bottlenecks.</p> <p>Kanban doesn't have sprints, rather tasks are continuously pulled from the backlog or the customer.</p> <p>Kanban needs some slack in the system. There is a danger that there is a bottleneck where tasks start to pill up. This leads to the system overall being slower. </p> <p>Compared to scrum, kanban has a lower usage of the team but has more predictability through the lead time.</p> <p>Kaizen means to make small changes for the better. Translated to the kanban world, this means changes should be done  by the person doing the work.</p> <p>The following is a good representation of a kanban board: </p> <p>In compared to scrum and xp, kanban has less rules to follow and sits between scrum and nothing.</p> <p></p>"},{"location":"23FS/SWEN2/Agile/Kanban.html#cumulative-flow-diagram-cfd","title":"Cumulative Flow Diagram (CFD)","text":"<p>In the CFD the number of tasks in each columns are entered in the diagram each day.</p> <p></p>"},{"location":"23FS/SWEN2/Agile/Kanban.html#kanban-vs-scrum","title":"Kanban vs Scrum","text":""},{"location":"23FS/SWEN2/Agile/Kanban.html#kanban-values","title":"Kanban Values","text":""},{"location":"23FS/SWEN2/Agile/Kanban.html#kanban-foundational-principles","title":"Kanban Foundational Principles","text":""},{"location":"23FS/SWEN2/Agile/Kanban.html#kanban-practices","title":"Kanban Practices","text":""},{"location":"23FS/SWEN2/Agile/Planing.html","title":"Planning","text":""},{"location":"23FS/SWEN2/Agile/Planing.html#planning-onion-level-of-planing","title":"Planning Onion (Level of Planing)","text":"<p>In agile development, there are multiple planing cycles, each being longer than the previous one. Agile teams plan at the  innermost three levels</p> <p></p>"},{"location":"23FS/SWEN2/Agile/Planing.html#choosing-a-user-story","title":"Choosing a User Story","text":"<p>To choose a user story multiple factors should be looked:</p> <ul> <li>value for the end user</li> <li>financial value the feature provide</li> <li>Internal Rate of Return (IRR)</li> <li>Net Present value</li> <li>the cost of developing the feature</li> <li>the knowledge gained by developing the feature</li> <li>the risk associated with the feature</li> <li>scheduling risk (the feature might not be done until April)</li> <li>cost risk (the feature might cost a lot more)</li> <li>functionality risk (the feature might be unfeasable)</li> </ul>"},{"location":"23FS/SWEN2/Agile/Planing.html#story-points","title":"Story Points","text":"<p>Story points doesn't have a unit. One story point is the amount of work for a reference user story. </p>"},{"location":"23FS/SWEN2/Agile/Planing.html#estimating","title":"Estimating","text":"<p>When estimating, as the amount of effort increases the accuracy doesn't necessarily increases. An agile team should stay on the left side of the curve.</p> <p></p> <p>Also, an estimate is a range (eg. between 2 and 5 days), not an exact number and not a commitment.</p> <p>The user stories should be estimated by the team without the product owner. The teams should be aware of that the estimates are crude.</p> <p></p> <p>A team should re-estimate a user story when its relative size has changed.</p>"},{"location":"23FS/SWEN2/Agile/Planing.html#planning-poker-techniques-for-estimating","title":"Planning Poker (Techniques for Estimating)","text":"<p>In planing poker, everybody gets cards with the possible story points. The available cards can either be the Fibonacci numbers or \\(2^n\\) (1, 2, 4, 8, ...), but not continuous numbers (1, 2, 3, 4). Additionally, 0 should not be a valid number, as ten tasks with 0 will probably take longer then \\(10\\cdot 0=0\\).</p> <p>For user story, the range of available cards should be in the range of \\(1-10\\). For epics and themes 13, 20, 40 and 100 should be added to the list of available cards.</p> <ol> <li>Each estimator is given a deck of cards, each card has a valid estimate written on it</li> <li>Customer/Prodct owner reads a story and it's discussed briefly</li> <li>Each estimator selects a card that is their estimate</li> <li>At the same time, all estimator reveal their card</li> <li>The differences should be discussed, especially outliers</li> <li>Re-estimate until the score converge</li> </ol>"},{"location":"23FS/SWEN2/Agile/Planing.html#iteration-planing","title":"Iteration Planing","text":"<p>The chart above shows how user stories are added to a sprint. Importantly, the team has to commit to implementing the feature in that sprint.</p>"},{"location":"23FS/SWEN2/Agile/Planing.html#burndown-chart","title":"Burndown Chart","text":"<p>The burndown chart represents the story points left in the current sprint.</p> <p></p>"},{"location":"23FS/SWEN2/Agile/Planing.html#prioritising","title":"Prioritising","text":"<p>When prioritising user stories, different metrics can be used:</p> <ul> <li>The financial value of having a feature</li> <li>The cost of developing and supporting a new feature   This is more or less equal to the story points</li> <li>The amount of knowledge gained by developing the feature</li> <li>The amount of risk removed by developing a feature</li> </ul> <p></p>"},{"location":"23FS/SWEN2/Agile/Planing.html#kano-model-of-customer-satisfaction","title":"Kano Model of Customer Satisfaction","text":"<ul> <li>Threshold/basic attributes are must-have features (the mvp of a product)</li> <li>Performance/linear are features for which \"the more-the better\" holds (more levels in a game)</li> <li>Exciters and delighters: are features which provide a great customer experience, but come at a price premium (Example: Great graphics in a game)</li> </ul>"},{"location":"23FS/SWEN2/Agile/Scrum.html","title":"Scrum","text":"<p>Scrum is efficient between 5-9 people. Less then there is no communication problem, more, then the people organize them in subgroups.</p> <p>Scrum teams should be cross-functional, meaning that people with different jobs should work together (developers, UX designers, testers, ...).</p>"},{"location":"23FS/SWEN2/Agile/Scrum.html#scrum-values","title":"Scrum Values","text":"<ul> <li>Commitment</li> <li>Focus</li> <li>Openness</li> <li>Respect</li> <li>Courage</li> </ul>"},{"location":"23FS/SWEN2/Agile/Scrum.html#scrum-sprint-goalscm-ingredients","title":"Scrum sprint goalscm Ingredients","text":""},{"location":"23FS/SWEN2/Agile/Scrum.html#artifacts","title":"Artifacts","text":"<p>An increment is an amount of work that at the end of the sprint is done. The team commits to the work in an increment.</p>"},{"location":"23FS/SWEN2/Agile/Scrum.html#definition-of-done-dod","title":"Definition of Done (DoD)","text":"<p>The definition of done is written by the whole team. It can be adjusted (making it more or less rigreous) in the sprint retrospective.</p> <p>The problems when no definition of done is that thechinical debt accumulates exponentially. This can make progress an illusion and shipping date can get unpredictable. Since the velocity isn't acccurate anymore, teams will over-commit the amount of work.</p> <p>A typicall definition of done looks like this:</p> <ol> <li>Unit tests pass and coverage met standard (85% or above)</li> <li>Sufficient negative unit tests were written (more negative than positive)</li> <li>Code is reviewed (or Pair programmed)</li> <li>Coding standards are met</li> <li>Continuous integration implemented (automated build, deployment and testing)</li> <li>Code is refactored (to support the new functionality)</li> <li>User acceptance tests pass (test case requirements)</li> <li>Non-functional tests pass (scalability, reliability, security, etc.)</li> <li>Necessary documentation is completed</li> </ol>"},{"location":"23FS/SWEN2/Agile/Scrum.html#definition-of-ready-for-a-user-story","title":"Definition of Ready for a User Story","text":"<p>The definition of ready for a user story gives a checklist for a user story.</p> <p>A typical definition of ready for a user story looks like this: 1. User Story defined 2. User Story Acceptance Criteria defined 3. User Story dependencies identified 4. User Story sized by Delivery Team 5. Scrum Team accepts User Experience artefacts 6. Performance criteria identified, where appropriate 7. Person who will accept the User Story is identified 8. Team has a good idea what it will mean to Demo the User Story</p>"},{"location":"23FS/SWEN2/Agile/Scrum.html#roles","title":"Roles","text":""},{"location":"23FS/SWEN2/Agile/Scrum.html#developer","title":"Developer","text":"<p>The developers develop the software...</p> <p>They are responseable for the commiting to a sprint and upholding this commitment, as well sticking to the definition of done.</p>"},{"location":"23FS/SWEN2/Agile/Scrum.html#product-owner","title":"Product Owner","text":"<p>The product owner  defines the features of the product and priotize them. Additionally, the product owner defines when a release with what content will be released.</p> <p>A product owner also accepts and rejects work done by the developers.</p>"},{"location":"23FS/SWEN2/Agile/Scrum.html#scrum-master","title":"Scrum Master","text":"<p>The scrum master ensures that the values of scrum are upheld.</p> <p>A scrum master does the following:</p> <ul> <li>Keeps Scrum process running</li> <li>Ensures a proper power balance between PO, Team, Management</li> <li>Protects the Team</li> <li>Moderates in the Team</li> <li>Helps to organize (e.g., Meetings)</li> <li>Helps to keep the Team focused on the current Sprint</li> <li>Helps to achieve Sprint goals</li> <li>Works with PO</li> <li>Educates PO, Team, Management and Organization</li> <li>Solves impediments</li> <li>Encourages and helps to achieve transparency</li> <li>Strives to develop a Team into a High Performance Team</li> <li>Encourages and protects self-organization</li> <li>Educates and focuses a Team toward business-driven development</li> <li>Supports Team building and Team development by utilizing the abilities and skills of individuals, and fostering a Feedback culture</li> <li>Helps to self-help</li> <li>Ensures and supports Empowerment of the Team</li> <li>Addresses needs efficiently and effectively</li> <li>Detects hidden problems and strives to solve them</li> <li>Helps Team to learn from its experiences</li> </ul>"},{"location":"23FS/SWEN2/Agile/Scrum.html#chickens-and-pigs","title":"Chickens and Pigs","text":"<p>In scrum, there are chickens and pigs. Pigs are commited, while chickens are not. Chickens are allowed to attend the daily meetings, but are disallowed to interfeere.</p>"},{"location":"23FS/SWEN2/Agile/Scrum.html#scrum-events-ceremonies","title":"Scrum Events (Ceremonies)","text":"<p>In the following table, the maximum time each event can take.</p> <p></p> <p>(Sprint Planning, Daily Scrum, Sprint Review, Sprint Retrospective)</p>"},{"location":"23FS/SWEN2/Agile/Scrum.html#sprint-planning","title":"Sprint Planning","text":"<p>In the sprint planning a sprint is planned.</p> <p>At the end of the sprint planning a Sprint Goal should be formalized. The sprint goal is a short statement of what work the sprint will focuse on.</p>"},{"location":"23FS/SWEN2/Agile/Scrum.html#sprint-review","title":"Sprint Review","text":"<p>In the sprint review the full scrum team is present in addition to the stakeholders. The team can show the work they did in the previous sprint by usually showing a demo.</p> <p>Informally, there is a max of 2 hours of prep-time, no slides are allowed and every stakeholder is allowed.</p> <p></p>"},{"location":"23FS/SWEN2/Agile/Scrum.html#checkliste","title":"Checkliste","text":"<p>TODO add checklist</p>"},{"location":"23FS/SWEN2/Agile/Scrum.html#sprint-retrospective","title":"Sprint Retrospective","text":"<p>In the retrospective, the team reflects what was working and what not. It typically takes 15-30 minutes and should be done after evvery sprint with the whole team. It is an opertunity to reflect on the internal processes.</p> <p>In comparison to the sprint reviews, where the focus is technical, the focus in the sprint retrospective is on the process (e.g. are the necessary skills their, how is the relationship to the customer, ...).</p> <p></p>"},{"location":"23FS/SWEN2/Agile/Scrum.html#daily-scrum","title":"Daily Scrum","text":"<p>The team should meet daily for a maximum of 15 minutes. Each member talks about what they did yesterday, what they will do today and what they will do tomorrow.</p> <p>This should improve the communication and render all other status meetings redundent. Importantly, technicial questions are not discussed in this meeting.</p>"},{"location":"23FS/SWEN2/Agile/Scrum.html#task-board","title":"Task Board","text":"<p>The not checked-out column is sorted by priority and contains all user stories which are not worked on today. User stories wander from left to right. </p>"},{"location":"23FS/SWEN2/Agile/Scrum.html#burndown-chart","title":"Burndown Chart","text":"<p>The burdown chart shows many backlog item (tasks and user stories) are left in the sprint. The dotted line shows the plan, while the blue line shows the actual tasks which are done.</p>"},{"location":"23FS/SWEN2/Agile/User%20Story.html","title":"User Story","text":"<p>A user story is a concise description of a functionality which brings value to the user. It can follow the following template:</p> <p>As a <code>[user role]</code>, I want to <code>[goal]</code> so that <code>[benefit]</code>.</p> <p>User stories are written during the sprint planing when all members of the teams are present.</p> <p>User stories are not:</p> <ul> <li>Written contracts</li> <li>Requirements the software has to fulfill. Not every story gets implemented</li> <li>They do not need to include all details</li> <li>Too many details give the false impression of completeness. It is still necessary to talk to the customer</li> </ul> <p>Additional information can be supplemented in small sub-stories.</p>"},{"location":"23FS/SWEN2/Agile/User%20Story.html#the-three-cs","title":"The three Cs","text":"<ul> <li>Card   User stories are traditionally written on note cards which may be annotated with estimates, notes, etc</li> <li>Conversation   The actual details behind the user story come out during the conversations with the product owner</li> <li>Confirmation   Often acceptance tests are written on the back</li> </ul>"},{"location":"23FS/SWEN2/Agile/User%20Story.html#non-functional-requirements","title":"Non Functional Requirements","text":"<p>Non functional requirements can be formulated as special user stories if they can be worked on and then are done. If this isn't possible, then it can be written to the definition of done.</p> <p>\"The server needs to answer in 10ms\" would be written in the definition of done as it is a never-ending story. On the other hand, \"The webpage needs to be ported to a different server\" could be formulated as a user story.</p>"},{"location":"23FS/SWEN2/Agile/User%20Story.html#spike","title":"Spike","text":"<p>A spike or a knowledge-acquisition stories is a user story with the goal of generating knowledge for the developers. It is usually limited to a max time (timeboxed)</p> <p>As a developer I want to prototype two alternatives for the new filtering engine so that I know which is a better long-term choice.</p>"},{"location":"23FS/SWEN2/Agile/User%20Story.html#condition-of-satisfaction","title":"Condition of Satisfaction","text":"<p>These are criteria which need to be fulfilled for the customer to be satisfied. The customer will likely test these conditions.</p> <p>The acceptance tests are the subset of the condition of satisfactions which can be technically checked. As an example, \"the app needs to be able to refund a booking\" can be objectively tested, while \"The app needs to be beautiful\" can't.</p> <p></p>"},{"location":"23FS/SWEN2/Agile/User%20Story.html#termology","title":"Termology","text":"<ul> <li>User Story</li> <li>Theme   A collection of user story, like \"Multiplier\". These can be initially used to create user stories by first listing themes and then generating the user stories.</li> <li>Epic   A large user story</li> </ul>"},{"location":"23FS/SWEN2/Agile/User%20Story.html#user-rolespersonas","title":"User Roles/Personas","text":"<p>While developing the team shouldn't think of \"the user\", but rather of multiple user roles.</p>"},{"location":"23FS/SWEN2/Agile/User%20Story.html#how-to-find-user-stories","title":"How to find User Stories","text":"<p>Importantly, all members of the team, the customer, user and other affected people are present. First, the goal is just to generate as many user stories as possible without priorizing them.</p> <p>Large user stories should be sub-divided into smaller user stories.</p> <p></p>"},{"location":"23FS/SWEN2/Agile/User%20Story.html#estimation","title":"Estimation","text":""},{"location":"23FS/WING/Basics.html","title":"Basics","text":""},{"location":"23FS/WING/Basics.html#gutereinteilung","title":"G\u00fctereinteilung","text":""},{"location":"23FS/WING/Basics.html#bedurfnis-bedarf-nachfrage","title":"Bed\u00fcrfnis \u2013 Bedarf \u2013 Nachfrage","text":""},{"location":"23FS/WING/Basics.html#st-galler-managementmodell","title":"St. Galler Managementmodell","text":"<p>Eine Firma ist eingebettet in ihre Umgebung.</p>"},{"location":"23FS/WING/Basics.html#strategie","title":"Strategie","text":"<p>Um eine Strategie zu entwickeln, kann folgenden Prozess eingesetzt werden.</p> <p></p> <p>Folgende Analysen fliessen in eine Unternehmensstrategie ein.</p> <p></p>"},{"location":"23FS/WING/Basics.html#analyse","title":"Analyse","text":""},{"location":"23FS/WING/Basics.html#unternehmensanalyse-und-umweltanalyse","title":"Unternehmensanalyse und Umweltanalyse","text":"<p>F\u00fcr das Analysieren gibt es mehrere M\u00f6glichkeiten, wie dies gewerkstellt werden kann: SWAT-Analyse, PESTLE-Analyse und das F\u00fcnf Kr\u00e4fte Modell von Porter.</p>"},{"location":"23FS/WING/Basics.html#kernkompetenzen","title":"Kernkompetenzen","text":"<p>Kern-Kompetenzen sind dauerhafte Wettbewerbsvorteile sind </p> <ul> <li>wertvoll</li> <li>selten</li> <li>nicht oder nur schwer imitierbar</li> <li>nicht substituierbar</li> </ul>"},{"location":"23FS/WING/Basics.html#swot-analayse","title":"SWOT Analayse","text":"<p>In der SWOT-Analyse wird zwischen der Innen- und Aussenwelt unterschieden.</p> <p></p> <p>Um St\u00e4rke und Schw\u00e4chen zu finden, m\u00fcssen die Kernkompetenzen gefunden werden. Kern-Kompetenzen sind dauerhafte Wettbewerbsvorteile sind wertvoll, selten, nicht oder nur schwer imitierbar und nicht substituierbar.</p> <p>Die SWOT Akronyme k\u00f6nnen gekreuzt werden. Was daraus folgt sind aber noch keine Strategien, sondern nur Strategieans\u00e4tze, bzw. strategische Stossrichtungen.</p> <p></p> <p>Nach dem St\u00e4rken, Schw\u00e4chen Chancen und Gefahren gefunden wurde, werden diese, wie in der Matrix oben beschrieben, gemischt (z.B. Preisg\u00fcnstig und Wetter/steigender Wohlstand =&gt; Potenzielle Strategie: Marketing).</p> <p>Als Beispiel f\u00fcr dies f\u00fcr Easy-Jet:</p> <ul> <li>St\u00e4rken:</li> <li>Direkt Fl\u00fcge</li> <li>Preisg\u00fcnstig</li> <li>Schw\u00e4chen</li> <li>Nicht Interkontinental</li> <li>Nur zu gewissen Zeiten an bestimmten Flughafen</li> <li>Chancen</li> <li>Durch die Skallierbarkeit ist EasyJet flexibel bei hochem Passagier aufkommen</li> <li>Wetter an anderen Orten (aus der Sicht der Schweiz) besser</li> <li>Trend zu Wochenend-St\u00e4dtereise</li> <li>Steigender Wohlstand</li> <li>Gefahren</li> <li>Verteuerung der Treibstoffkosten</li> <li>Restriktionen von Klima</li> <li>H\u00f6here Flughafentaxen</li> <li>Neue Billig-Airlines</li> </ul>"},{"location":"23FS/WING/Basics.html#pestel-analyse","title":"PESTEL-Analyse","text":"<p>Mit der PESTEL-Analyse wird der Einfluss von sechs externen Umwelt-Faktoren eines Unternehmen untersucht:</p> <ul> <li>Political</li> <li>Economical</li> <li>Social   Alters-Pyramide/Trends, wie Vegan, ...</li> <li>Technological   ChatGPT</li> <li>Environment/\u00d6kologisch</li> <li>Legal   Neue Gesetze</li> </ul> <p>Das folgende ist ein Beispiel f\u00fcr die PESTEL-Analyse f\u00fcr eine One Wheel Firma.</p> <p></p>"},{"location":"23FS/WING/Basics.html#funf-krafte-modell-von-porter","title":"F\u00fcnf Kr\u00e4fte Modell von Porter","text":"<p>Das F\u00fcnf Kr\u00e4fte Modell ist eine Alternative zur PESTLE-Analyse.</p> <p></p> <p>Das f\u00fcnf Kr\u00e4fte Modell gibt Auskunft dar\u00fcber, wie attraktiv ein Markt zum einsteigen ist, bzw. ob den Markt verlassen werden soll.</p> <ul> <li>Potenzielle Konkurenten   Wie gross ist die Bedrohung von neuen Konkurenten? M\u00f6gliche \u00dcberlegungen w\u00e4ren: Wie gross ist die Eintrittsh\u00fcrde?</li> <li>Kunden   Wie verhandlungsstark ist der Kunde? Wie stark kann der Kunde das Produkt selbst, wie auch den Preis beeinflussen? </li> <li>Lieferanten   Wie verhandlungsstark sind die Lieferanten? Gibt es alternative Lieferanten?</li> <li>Ersatzprodukt   Gibt es Ersatzprodukte, welche ein Produkt/Dienstleistung ersetzten k\u00f6nnen?</li> <li>Branchen Wettbewerb   Wie umk\u00e4mpft ist die Branche bereits? </li> </ul> <p>Beispiel f\u00fcr Easyjet:</p> <ul> <li>Rivalit\u00e4t mit bestehenden Konkurrenten: Ryanair, Aer Lingus, ... sind alles auch billig Fluggesellschaft</li> <li>Verhandlungsmacht der Kunden: Der Kund verf\u00fcgt \u00fcber eine kleine Macht, da sie nicht viel des Umsatz von EasyJet ausmachen</li> <li>Verhandlungsmacht der Lieferant: Es gibt zwei Flugzeughersteller</li> <li>Potenzielle neue Konkurrenten: Keine neue Flugzeuggesellschaften sind zurzeit in Sicht</li> <li>Ersatzprodukte: Schnellz\u00fcge, Langstrecken-B\u00fcsse</li> </ul>"},{"location":"23FS/WING/Basics.html#unternehmensbild","title":"Unternehmensbild","text":"<p>Beispiel von EasyJet:</p> <p>Unser wichtigstes Ziel ist, unsere Kunden sicher von ihrem Abflugs- zu ihrem Bestimmungsort zu bringen und unsere Flugdienste mit einem ausgezeichneten Preis-Leistungs-Verh\u00e4ltnis anzubieten. Wir konzentrieren uns auf konsequente und zuverl\u00e4ssige Produkte und Preise f\u00fcr zahlreiche Routen in Europa und sprechen dabei sowohl die M\u00e4rkte f\u00fcr Ferien- als auch f\u00fcr Gesch\u00e4ftsreisende an. In diesem Sinne m\u00f6chten wir unsere Mitarbeiter f\u00f6rdern und mit unseren Lieferanten nachhaltige Beziehungen aufbauen. An vier Kernprinzipien erkennen Sie unsere Werte:</p> <ul> <li>Sicherheit \u2013 Unsere h\u00f6chste Priorit\u00e4t, keine Kompromisse</li> <li>Teamarbeit \u2013 Gemeinsam erreichen wir unser Ziel schneller</li> <li>Pionierarbeit \u2013 Neue Wege und Chancen finden</li> <li>Leidenschaft \u2013 Wir streben danach, die Besten zu werden</li> </ul>"},{"location":"23FS/WING/Basics.html#unternehmensstrategie","title":"Unternehmensstrategie","text":"<p>Die Unternehmensstrategie formt sich aus der Unternehmensanalyse, dem Leitbild und der Umweltanalyse.</p> <p>Beispiel f\u00fcr EasyJet:</p> <p></p>"},{"location":"23FS/WING/Basics.html#planung","title":"Planung","text":""},{"location":"23FS/WING/Basics.html#4-branchenwettbewerbsstrategien-nach-porter","title":"4-Branchenwettbewerbsstrategien nach Porter","text":"<p>(SEP: Strategische Erfolgs Position)</p> <p>Eine Firma kann m\u00f6chte in einem Punkt f\u00fchrend sein.</p> <p>In der folgenden Abbildung sind Beispiele von Firmen:</p> <p></p>"},{"location":"23FS/WING/Basics.html#die-vier-produkt-markt-strategien-nach-ansoff","title":"Die vier Produkt-Markt-Strategien nach Ansoff","text":"<p>Im folgenden Beispiel wird die vier Produkt-Markt-Strategie nach Ansoff f\u00fcr eine Bungalow-Vermietungs Firma entwickelt:</p> <p>Beschreiben Sie 3 m\u00f6gliche Wachstumsstrategien basierend auf Ansoff (Wachstumsstrategien) f\u00fcr die Firma Chill Out Time:</p> <ul> <li>Produktentwicklung:   Bungalow weiterentwickeln. Bspw. Familienbungalows oder Themenbungalows einf\u00fchren, bspw. Karibikbungalow, Orientalbungalow. Oder neben den Bungalows auch kleine Boote oder Baumh\u00e4user zum \u00dcbernachten vermieten.</li> <li>Diversifikation:    Neben den Bungalows k\u00f6nnte die Chill Out Time AG auch noch weitere Produkte oder Services Anbieten, bspw. Tauch oder Surfkurse, oder gef\u00fchrte Exkursionen auf Costa Rica. Oder eigene Produkte produzieren, bspw. Kokosnusswasser. </li> <li>Marktentwicklung:    Vermarktung der Bungalows in neuen M\u00e4rkten, bspw. Fokus auf asiatisch L\u00e4nder (Japan oder S\u00fcdkorea, ev. auch China). So werden neue Kundengruppen aus neuen M\u00e4rkten gewonnen.</li> </ul>"},{"location":"23FS/WING/Investitionsrechnung.html","title":"Investitionsrechnung","text":"<p>Eine Investitions ist einne Zahlungsreihe, die in der Regel mit einner (sicheren) Auszahlung beginnt, auf die zu sp\u00e4teren Zeitpunkten (unsichere) Einnahmen folgen.</p> <p></p> <p>Ein Ertrag kann, muss aber keinen Geldzufluss darstellen. Beispiel eines Ertrages, der keinen Geldzufluss darstellt: Die Wertzunahme einer Wertschrift wird als Ertrag gebucht. Eine Auszahlung stellt immer einen Geldabfluss dar.</p> <p>Ein Aufwand kann, muss aber keinen Geldabfluss darstellen. Beispiel eines Aufwandes, der keinen Geldabfluss darstellt: Die Bildung einer R\u00fcckstellung wird als Aufwand gebucht. Eine Einzahlung stellt immer einen Geldzufluss dar.</p> <p>Es gibt drei Kategorien von Investitionen: Sachverm\u00f6gen, Finanzanlagen und immaterielles Verm\u00f6gen.</p> <p></p>"},{"location":"23FS/WING/Investitionsrechnung.html#investitionsrechnungs-methoden","title":"Investitionsrechnungs-Methoden","text":"<p>Bei den statischen Methoden wird ein durchschnittliches Jahr berechnet, mit welchem den Entscheid der Investition gef\u00e4llt wird. </p> <p>Bei der dynamischen Methode wird geschaut, wann auf dem Zeitstrahl ein Geldfluss existiert. Es gilt das Moto: Heute verf\u00fcgbares Geld ist mehr wert als k\u00fcnftiges. Dies kommt nicht von der Inflation, sondern dass wenn man das Geld hat, kann damit gearbeitet werden.</p>"},{"location":"23FS/WING/Investitionsrechnung.html#kostenvergleichsmethode","title":"Kostenvergleichsmethode","text":"<p>Variable Kosten sind Abh\u00e4ngig von wie viel produziert/gearbeitet wird (z.B. Lohnkosten). Fixkosten sind nicht abh\u00e4ngig von wie viel produziert wird (z.B. Mietkosten).</p> <p>\u200b   Kalkulatorische Abschreibungen sind die \\(\\frac{Anschaffungskosten-Liquidationserloes}{Nutzungsdauer}\\). Der kalkulatorischen Zins scheint \\(\\frac{(Anschafungskosten + Liquidationserloes) \\cdot ZinsSatz}{2}\\) zu sein.</p>"},{"location":"23FS/WING/Investitionsrechnung.html#gewinnvergleichsmethode","title":"Gewinnvergleichsmethode","text":"<p>Bei der Gewinnvergleichsmethode wird zus\u00e4tzlich zu den Kosten auch den Erl\u00f6s ben\u00f6tigt, welcher durch die Maschine generiert wurde. </p> <p></p> <p>In der Gewinnverlgeichsmethode ist der Anschaffungspreis der Anlagen nicht enthalten.</p>"},{"location":"23FS/WING/Investitionsrechnung.html#rentabilitatsvergleich-roi","title":"Rentabilit\u00e4tsvergleich (ROI)","text":"\\[ ROI = \\frac{Gewinn + kalk. Zinsen}{avgEingesetztes Kapital}\\cdot 100 \\] <p>Das eingesetzte Kapital wird halbiert, da zu Beginn das volle Kapital da ist und am Ende nichts mehr: \\(avgEingesetztesKapital = \\frac{wirliklichEingesetztesKapital + 0}{2}\\)</p> <p></p> <p>Die Rentabilit\u00e4t sagt aus, wie viel des eingesetzten Kapital pro Jahr wieder eingenommen wird.</p>"},{"location":"23FS/WING/Investitionsrechnung.html#amortisationsrechung","title":"Amortisationsrechung","text":"<p>Beide Cashflows m\u00fcssen dasselbe ergeben. Daher kann gew\u00e4hlt werden, welcher Cashflow ben\u00fctzt wird.</p> <p>Bei dieser Rechnung ist der Kapitaleinsatz nicht durch \\(2\\) geteilt.</p>"},{"location":"23FS/WING/Investitionsrechnung.html#durchschnittliche-jahrliche-gesamtkosten","title":"Durchschnittliche J\u00e4hrliche Gesamtkosten","text":"<p>Die folgende Formel steht f\u00fcr die durchschnittlichen Kosten, welche pro Jahr anfallen. $$ avgGesamtkosten = FixKosten + VariableKosten + Abschreibung + KalkulatorischerZins\\ Abschreibung = \\frac{Anschaffungskosten-Liquidationserloes}{Nutzungsdauer}\\ KalkulatorischerZins=\\frac{(Anschafungskosten + Liquidationserloes) \\cdot ZinsSatz}{2} $$</p>"},{"location":"23FS/WING/Investitionsrechnung.html#kapitalwertmethode","title":"Kapitalwertmethode","text":"<p>Rohgewinn ist ein anderes Wort f\u00fcr Cashflow.</p> <p></p> <p>Der Liquidationserl\u00f6s ist der Erl\u00f6s, welcher beim Verkaufen der Maschine generiert wird.</p> <p></p> <p>Da der Liquidationserl\u00f6s erst in \\(x\\) Jahren ist, muss der Liquidationserl\u00f6s mit dem Zinses-Zins aus der Tabelle nach 5 Jahren gerechnet werden (aus der nicht-summierten Tabelle).</p> <p>Es gibt zwei Hilfstabellen, welche miteinander verbunden sind. </p> <p></p> <p>Das folgende ist ein zweites Beispiel:</p> <p></p> <p>Wenn der Cash Flow (CF) wiederkehrent gleich bleibt, kann die Rentenbarwertfaktor-Tabelle verwendet werden.</p> <p></p> <p>Es wird auf den Kapitaleinsatz 5x den summierten Zins aus der Rentenbarwertfaktor-Tabelle mit dem Cash Flow gerechent.</p>"},{"location":"23FS/WING/Investitionsrechnung.html#auf-und-abzinsung","title":"Auf- und Abzinsung","text":""},{"location":"23FS/WING/Leistungserstellung.html","title":"Leistungserstellung","text":""},{"location":"23FS/WING/Leistungserstellung.html#strategisches-prozessmanagement","title":"Strategisches Prozessmanagement","text":"<p>Viele Unternehmen decken nicht alle Prozesse in der Wertsch\u00f6pfungskette ab.</p> <p></p> <p>Es gibt verschiedene g\u00e4ngige Modelle, wie die Wertsch\u00f6pfung abgedeckt wird:</p> <p></p>"},{"location":"23FS/WING/Leistungserstellung.html#produktionslogistik","title":"Produktionslogistik","text":"<p>Produktion ist, wenn Sachg\u00fcter und Dienstleistungen in andere Sachg\u00fcter und Dienstleistungen umgewandelt wird.</p> <p>Das Ziel der Produktionslogistik ist den Produktionsprozess art- und mengenm\u00e4ssig, r\u00e4umlich und zeitlich abgestimmt mit den ben\u00f6tigten Produktionsfaktoren zu versorgen.</p> <p></p> <p>Produktionsprogramm: Bestimmt Art, Menge und Zeitpunkt der zu produzierenden Produkte in einem Unternehmen. Produktionsprogrammbreite: Anzahl der von einem Unternehmen hergestellten Produktarten. Programmtiefe: Anzahl der Artikel und Typen, die innerhalb einer Produktart vom Unternehmen angeboten werden. Idealfall: Die Ressourcen sind optimal ausgelastet, d.h. Mensch und Maschinen sind weder unterbesch\u00e4ftigt noch \u00fcberbeansprucht. Fertigungstiefe: Wie viel von den ben\u00f6tigten Teile selbst hergestellt werden und wie viel eingekauft wird.</p> <p>Im folgenden Beispiel ist die Produktionsprogrammbreite und Programmtiefe aufgezeigt:</p> <p></p> <p>Folgende Grafik zeigt die Fertigungstiefe:</p> <p></p> <p>Folgende Punkte gilt es zu beachten, wenn es um die Frage geht, ob etwas eingekauft oder selbst hergestellt werden soll.</p> <p></p> <p>Um zu \u00fcberlegen, ob gekauft werden soll oder nicht k\u00f6nnen auch die folgenden Formeln gleich gesetzt werden:  $$ VariableKostenProSt\u00fcck_{make} \\cdot x + Fixkosten = VariableKosten_{buy}\\cdot x $$ Sobald die variable Kosten pro St\u00fcck f\u00fcr das Einkaufen kleiner sind, als was es kosten w\u00fcrde das Produkt herzustellen plus die Fixkosten, lohnt es sich.</p> <p></p>"},{"location":"23FS/WING/Leistungserstellung.html#durchlaufszeit","title":"Durchlaufszeit","text":"<p>Die Durchlaufszeit ist die totale Zeit ben\u00f6tigt f\u00fcr das Herstellen eines Produktes.</p>"},{"location":"23FS/WING/Leistungserstellung.html#vorwarts-und-ruckwartsterminierung","title":"Vorw\u00e4rts- und R\u00fcckw\u00e4rtsterminierung","text":"<p>Vorw\u00e4rtsterminierung ist, wenn beim Planen vom Auftragseingang direkt beginnt zu arbeiten. Bei der R\u00fcckw\u00e4rtsterminierung wird vom Endtermin geplant. In der Praxis wird meisten die R\u00fcckw\u00e4rtsterminierung mit mit Pufffer gew\u00e4hlt.</p> <p></p> <p>Vorteile und Nachteile f\u00fcr Vorw\u00e4rtsterminierung:</p> <p></p> <p>Vorteile und Nachteile f\u00fcr R\u00fcckw\u00e4rtsterminierung:</p> <p></p>"},{"location":"23FS/WING/Leistungserstellung.html#fertigungstypen","title":"Fertigungstypen","text":""},{"location":"23FS/WING/Leistungserstellung.html#kennzahlen","title":"Kennzahlen","text":"\\[ Rentabilit\u00e4t=\\frac{Ertrag-Aufwand}{Kapitaleinsatz}=\\frac{Gewinn}{Kapitaleinsatz}\\\\ Produktivit\u00e4t=\\frac{Ausbringungsmenge}{Faktoreinsatzmenge}\\\\ Wirtschaftlichkeit = \\frac{Ertrag}{Aufwand}\\\\ Fehlerquote = \\frac{FehlerhafteProdukte}{TotalHergestellteProdukte} \\] <p>Die Ausbringungsmenge ist die w\u00e4hrend der Produktion produzierten Produkte, w\u00e4hrend die Faktoreinsatzmenge eingesetzte und verbrauchte Materialien sind (ev. auch Stunden).</p>"},{"location":"23FS/WING/Materialwirtschaft.html","title":"Materialwirtschaft","text":"<p>Wie in der oberen Grafik zu sehen ist, l\u00e4uft dies durch diese Prozesse durch. Im Beispiel von BMW 320i gibt es nur zwei Produktionsstufen (dies ist in der Realit\u00e4t nat\u00fcrlich mehr).</p>"},{"location":"23FS/WING/Materialwirtschaft.html#beschaffungsobjekte","title":"Beschaffungsobjekte","text":"<ul> <li>Rohstoffe: Hauptbestandteil des Produkts</li> <li>Hilfsstoffe: Nebenbestandteile des Produkts (z.B. N\u00e4gel bei der T\u00fcrenherstellung bei einem Schreiner)</li> <li>Betriebsstoffe: Werden bei der Herstellung verbraucht</li> <li>Montageteile: Vorproduzierte Komponente</li> <li>Handelswaren: Nicht f\u00fcr den Produktionsprozess bestimmt; Werden unver\u00e4ndert weiterverkauft.</li> </ul>"},{"location":"23FS/WING/Materialwirtschaft.html#beschaffungskonzepte","title":"Beschaffungskonzepte","text":"<p>Zus\u00e4tzlich gibt es auch noch Just in Sequence, was eine Weiterentwicklung ist von Just-in-Time. Dabei wird das Material nicht nur zur rechten Zeit in der rechten Menge geliefert, sonder auch noch am richtigen Ort in der Herstellungs-F\u00f6rderband.</p>"},{"location":"23FS/WING/Materialwirtschaft.html#lagerbestand","title":"Lagerbestand","text":"<p>Wenn der Meldebestand erreicht wird, gibt es eine Meldung des ERPs, dass in \\(j\\) Tage das Lager leer ist und daher nach bestellt werden muss. </p>"},{"location":"23FS/WING/Materialwirtschaft.html#insourcing","title":"Insourcing","text":"<p>Insourcing bezeichnet man, wenn zuvor im Markt bezogenen Leistungen,  in die eigene Wertsch\u00f6pfung verlagert werden. Dies hat den Vorteil dass</p> <ul> <li>die Lieferzeiten reduziert werden</li> <li>die Unabh\u00e4nigkeit gegen\u00fcber der Lieferanten bez\u00fcgles des Preis und Absatzmengen</li> <li>Aufrechterhaltung Qualit\u00e4tsstandards</li> <li>Auslastung Fertigungskapazit\u00e4ten</li> </ul>"},{"location":"23FS/WING/Materialwirtschaft.html#outsourcing","title":"Outsourcing","text":"<p>Das Outsourcing ist das Gegenteil des Insourcing.</p> <p>Vorteile sind:</p> <ul> <li>Minimieren der Fixkosten</li> <li>Beschaffungsmenge und Zeitspanne sind flexible planbar</li> <li>Minimierung der Lagerkosten</li> <li>Ausweichm\u00f6glichkeit bei Kapazit\u00e4tsengp\u00e4sse</li> </ul>"},{"location":"23FS/WING/Materialwirtschaft.html#outsourcing-oder-insourcing","title":"Outsourcing oder Insourcing","text":"<p>Um etwas zu erstellen, gibt es variable Kosten pro St\u00fcck und zus\u00e4tzlich Fixkosten. Hingegen beim Outsourcing gibt es nur variable Kosten pro St\u00fcck. </p> <p>Wenn nun die \\(VariableKosten\\cdot x + Fixkosten = VariableKosten \\cdot x\\) gilt, dann sollte hergestellt werden.</p>"},{"location":"23FS/WING/Materialwirtschaft.html#kostenanfall-in-der-materialwirtschaft","title":"Kostenanfall in der Materialwirtschaft","text":""},{"location":"23FS/WING/Materialwirtschaft.html#magische-dreieck-der-materialwirtschaft","title":"Magische Dreieck der Materialwirtschaft","text":"<p>Am besten sollte die Lieferbereitschaft hoch sein, w\u00e4hrend die Beschaffungskosten und Kapitalbindung und Lagerunterhalt m\u00f6glichst tief sein sollte. Dies ist ein Konflikt, da nur zwei dieser drei m\u00f6glich sind.</p>"},{"location":"23FS/WING/Materialwirtschaft.html#abc-analyse","title":"ABC-Analyse","text":"<p>In diesem ist die Menge gegen\u00fcber dem gebunden Kapital der gelagerten Artikel. Die Logik sagt, dass in Kategorie A optimiert werden soll, da diese f\u00fcr 80% der Lagerkosten verantwortlich sind.</p> <p></p> <p>Um diese Klassen zu bilden, wird das Inventar nach dem relativen Lagerwert (in Prozent) sortiert, und es werden Artikel, der sortierten Reihenfolge nach, in die Klasse eingeordnet, bis die Prozentwerte von oben erreicht werden.</p>"},{"location":"23FS/WING/Materialwirtschaft.html#beispiel","title":"Beispiel","text":"<p>Das Inventar sieht folgendermassen aus:</p> <p></p> <p>Einstandspreis sind die Kosten, damit ein Produkt in der Firma steht (Produktpreis + Zollkosten + Transportationskosten + ...)</p> <p></p>"},{"location":"23FS/WING/Materialwirtschaft.html#xyz-analyse","title":"XYZ-Analyse","text":"<p>Bei X-G\u00fcter ist ein kontinuierlicher Materialfluss m\u00f6glich. Bei den Y- und Z-G\u00fcter gibt es Bedarfsschwankungen, welche durch Lagerbest\u00e4nde aufgefangen werden m\u00fcssen.</p> <p></p>"},{"location":"23FS/WING/Materialwirtschaft.html#lagerfunktionen","title":"Lagerfunktionen","text":""},{"location":"23FS/WING/Materialwirtschaft.html#lagerung-kennzahlen","title":"Lagerung Kennzahlen","text":"\\[ avg. Lagerbestand=\\frac{Anfangsbestand + Endbestand}2\\\\ Lagerumschlagsh\u00e4uffigkeit=\\frac{Jahresverbrauch}{avg. Lagerbestand}\\\\ avg. Lagerdauer=\\frac{360d}{Lagerumschlagsh\u00e4uffigkeit} \\]"},{"location":"23FS/WING/Math.html","title":"Math for Clowns","text":""},{"location":"23FS/WING/Math.html#kennzahlen","title":"Kennzahlen","text":"\\[ \\text{Rentabilit\u00e4t:}\\\\ Intensit\u00e4tAnlageverm\u00f6gen=\\frac{Anlageverm\u00f6gen}{TotaleAktiven}\\\\ FremdfinanzierungsGrad = \\frac{Fremdkaptial}{TotalPassiven}\\\\ Rentabilit\u00e4t=\\frac{Ertrag-Aufwand}{Kapitaleinsatz}=\\frac{Gewinn}{Kapitaleinsatz}\\\\ GesammtKapitalRendite=\\frac{Gewinn+FremdkapitalZinsen}{FremdKapital + EigenKapital}\\\\ \\\\ \\text{Liquidit\u00e4t:}\\\\ CashFlow = Geldzufluss - Geldabfluss\\\\ QuickRatio = \\frac{Zahlungsmittel + Debitoren}{Kurzfristiges Femdkapital}\\\\ \\\\ \\text{Sicherheit: }\\\\ Eigenfinanzierungsgrad = \\frac{Eigenkapital}{Gesamtkapital}\\\\ Anlatendeckungsgrad2 = \\frac{Eigenkapital + langfristiges Fremdkapital}{Anlageverm\u00f6gen} \\\\ Produktivit\u00e4t=\\frac{Ausbringungsmenge}{Faktoreinsatzmenge}\\\\ Wirtschaftlichkeit = \\frac{Ertrag}{Aufwand}\\\\ Fehlerquote = \\frac{FehlerhafteProdukte}{TotalHergestellteProdukte}\\\\ \\]"},{"location":"23FS/WING/Personalmanagement.html","title":"Personalmanagement","text":""},{"location":"23FS/WING/Personalmanagement.html#stellenbeschreibung","title":"Stellenbeschreibung","text":"<p>In einer Stellenbeschreibung soll die Aufgaben, Verantwortung und Kompetenzen schriftlich festgehalten werden. Falls dies nicht der Fall ist, kann ein Mitarbeiter seine/ihre Ziele nicht wahrnehmen, da sie entweder nicht die Verantwortung oder Kompetenzen daf\u00fcr besitzen.</p>"},{"location":"23FS/WING/Personalmanagement.html#personalgewinnung","title":"Personalgewinnung","text":"<p>Folgende Kriterien sind \u00fcblich f\u00fcr die Personalwahl einer Firma:</p> <p></p>"},{"location":"23FS/WING/Personalmanagement.html#bewerbungsunterlagen","title":"Bewerbungsunterlagen","text":""},{"location":"23FS/WING/Personalmanagement.html#beurteilung-von-bewerbern","title":"Beurteilung von Bewerbern","text":""},{"location":"23FS/WING/Personalmanagement.html#kompetenzorientierung","title":"Kompetenzorientierung","text":""},{"location":"23FS/WING/Personalmanagement.html#360-beurteilung","title":"360\u00b0-Beurteilung","text":""},{"location":"23FS/WING/Personalmanagement.html#personalentwicklung","title":"Personalentwicklung","text":""},{"location":"23FS/WING/Personalmanagement.html#humankapitaltheorie","title":"Humankapitaltheorie","text":"<p>Zielkonflikt Mitarbeiterentwicklung: Ausbildungs-Investition vs. Mitarbeiterabgang</p> <ul> <li>Personalausbildung: Firmenspezifisch oder allgemein (auch extern anwendbar)</li> <li>Humankapital: Allgemein (ersetzbar) und spezifisch (nicht ersetzbar)</li> <li>Firmenspezifisch: macht MA von Firma abh\u00e4ngig, bringt Firma weiter, gezieltes Aufbauen von Kompetenzen  (Wettbewerbsvorteile)</li> <li>Allgemein: Handelbar, Macht MA f\u00fcr andere Firmen attraktiv, Bringt MA weiter</li> <li>Wer bezahlt die Weiterbildung? Firma (eher bei spezifisch) oder Arbeitnehmer (eher wenn allgemein)? Investition in spezifisches oder allgemeines Humankapital? Attraktivit\u00e4t Arbeitgeber? Image Arbeitgeber?</li> <li>Was bedeutet die Weiterbildung f\u00fcr den Lohn und die Karriereentwicklung (Bef\u00f6rderungen, Stellenwechsel)?</li> </ul>"},{"location":"23FS/WING/Personalmanagement.html#personalhonorierung","title":"Personalhonorierung","text":""},{"location":"23FS/WING/Personalmanagement.html#personalfreistellung","title":"Personalfreistellung","text":"<p>Die meisten Massnahmen lassen sich auf eine oder mehrere der folgenden Hauptursachen zur\u00fcckf\u00fchren:</p> <ul> <li>Absatz- und Produktionsr\u00fcckgang als Folge der gesamtwirtschaftlichen Entwicklung</li> <li>Strukturelle Ver\u00e4nderungen</li> <li>Saisonal bedingte Besch\u00e4ftigungsschwankungen</li> <li>Betriebsstillegungen, Betriebsvernichtung, nat\u00fcrliches Betriebsende</li> <li>Standortverlegung</li> <li>Reorganisation</li> <li>Mechanisierung und Automation</li> </ul>"},{"location":"23FS/WING/Personalmanagement.html#arbeitszeugnisse","title":"Arbeitszeugnisse","text":"<p>Im Arbeitszeugnis sollten die wichtigsten T\u00e4tigkeiten enthalten, wie auch das Verhalten. Wichtig kann auch sein, was nicht im Zeugnis</p> <p>Ein Zwischenzeugnis kann verlangt werden bei Vorgesetzter wechsel oder nach einiger Zeit (z.B. nach 5 Jahren).</p>"},{"location":"23FS/WING/Finanzen/Basics.html","title":"Basics","text":""},{"location":"23FS/WING/Finanzen/Basics.html#einfache-und-doppelte-buchhaltung","title":"Einfache und Doppelte Buchhaltung","text":"<p>In der einfachen Buchhaltung werden alle Einnahmen und Ausgaben nach Datum sortiert festgehalten. </p> <p>Hingegen bei der doppelten Buchhaltung wird festgehalten auf welchem Konto die Bewegung statt gefunden hat und zus\u00e4tzlich f\u00fcr was das Geld verwendet wurde.</p>"},{"location":"23FS/WING/Finanzen/Basics.html#rechnungswesen","title":"Rechnungswesen","text":"<p>Die Finanzbuchhaltung analysiert ein Betrieb als ganzes, w\u00e4hrend die Betriebsbuchhaltung die internen Finanzen betrachtet.</p>"},{"location":"23FS/WING/Finanzen/Basics.html#bilanz","title":"Bilanz","text":"<p>Die Bilanz ist eine Bestandsaufnahme eines Unternehmen und stellt das vorhandene Verm\u00f6gen und die Schulden an einem Stichtag dar. Die Bilanz wird als Steuerdokument verwendet.</p> <p></p> <p>\\((a)\\) sind aktive Best\u00e4nde ist Verm\u00f6gen und Mittel, w\u00e4hrend \\((p)\\) passive Best\u00e4nde sind, was Schulden sind.</p> <p></p> <p>Umlaufverm\u00f6gen ist kurzfristiges Verm\u00f6gen . Anlageverm\u00f6gen ist langfristiges Verm\u00f6gen, welche ben\u00f6tigt werden f\u00fcr den normalen Betrieb und man nicht willig ist, diese in den n\u00e4chsten 12 Monate zu verkaufen (zum Zeitpunkt die Bilanz aufgestellt wurde).</p> <p>KMU Kontorahmen, siehe https://www.kmu.admin.ch/dam/kmu/de/dokumente/savoir-pratique/Finances/kmu-kontenplan-franzoesisch.pdf.download.pdf/KMU-Kontenplan-Deutsch.PDF.pdf</p> <p>Wie bei der aktiven Seite, kurzfristiges Fremdkapital muss innerhalb von 12 Monate zur\u00fcck gezahlt werden, w\u00e4hrend langfristiges Fremdkapital l\u00e4nger bestehen k\u00f6nnen. </p> <p>Eigenkapital ist auf der passiven Seite, da \\((a)=(p)\\) gelten muss. Demnach ist Eigenkapital das Geld, welche den Eigent\u00fcmer/Aktion\u00e4re geh\u00f6ren und sind Kapital, Reserven (zur\u00fcckgehaltener Gewinn, welcher nicht an die Aktion\u00e4re ausgezahlt wird) und Gewinne).</p> <p>Ebenfalls geht daraus hervor: \\(Eigenkapital = (a) - Fremdkapital\\) .</p> <p>Das folgende ist ein einfaches Beispiel: </p>"},{"location":"23FS/WING/Finanzen/Basics.html#erfolgsrechnung","title":"Erfolgsrechnung","text":"<p>\\((E)\\) ist die Ertragspositionen, also der Umsatz (wenn eine Rechnung verschickt wurde). \\((A)\\) sind Aufw\u00e4nde. Es gilt \\(Gewinn=(E)-(A)\\). Es muss gelten \\((A) + Gewinn = (E)\\)</p> <p>Die Erfolgsrechung kann auch folgendermassen dargestellt werden:</p> <p></p> <p>(Hint: EAT: Earning After Taxes; EBT: Earnings Before Taxes; EBIT: Earnings before Intrests and Taxes, EBITDA: Earnings before Intrests, Taxes, Depreciations and Amortisation)</p> <p>Wie auch bei der Bilanz gibt es bei der Erfolgsrechnung ebenfalls Kontoposition.</p> <p>Folgendes ist ein Beispiel f\u00fcr eine Erfolgsrechnung:</p> <p></p>"},{"location":"23FS/WING/Finanzen/Basics.html#geldflussrechnung-cashflow","title":"Geldflussrechnung (Cashflow)","text":"<p><code>./.</code> ist das Kaufm\u00e4nnische Minus </p> <p>Geldfluss aus Betriebst\u00e4tigkeit kommt von der Erfolgsrechnung. Geldfluss aus Investitionst\u00e4tigkeit kommt von den Anlagen. Geldfluss aus Finanzierungst\u00e4tigkeit von der passiven Seite der Bilanzrechnung.</p> <p></p>"},{"location":"23FS/WING/Finanzen/Basics.html#wichtige-kennzahlen","title":"Wichtige Kennzahlen","text":""},{"location":"23FS/WING/Finanzen/Basics.html#leverage-effect","title":"Leverage Effect","text":"<p>Fremdkaptial k\u00f6nnen Kredite sein, welche Zins kosten</p>"},{"location":"23FS/WING/Finanzen/Kalkulation.html","title":"Kalkulation","text":"<p>Die Kalkulation ist Teil der innerbetrieblichen Finanzen und sind daher nicht \u00f6ffentlich.</p> <p>Die Aufgaben einer Kalkulation sind die Ermittlung der Selbstkosten, die Preisfindung, die Preisbeurteilung und die Offertenstellung.</p> <p></p> <p>(Endstellenkosten = Lager-Kosten)</p>"},{"location":"23FS/WING/Finanzen/Kalkulation.html#schema-einer-kalkulation-im-industriebetrieb","title":"Schema einer Kalkulation im Industriebetrieb","text":"<p>(Verkaufssonderkosten=Provision/Kosten f\u00fcr Produktplatzierung im Laden, Skonto=Falls Kunde schneller zahlt, bekommt der Kunde Rabatt)</p> <p>Achtung: Skonto wird auf den Nettobarverkaufspreis gerechnet (nicht den Nettoverkaufspreis).!</p> <p>Falls MwSt. gefordert ist, ist der Bruttokreditverkaufspreis 100% und der MwSt-Prozentsatz wird darauf gerechnet.</p>"},{"location":"23FS/WING/Finanzen/Kalkulation.html#schema-einer-kalkulation-im-handelsbetrieb","title":"Schema einer Kalkulation im Handelsbetrieb","text":"<p>Der Kalkulation im Handelsbetrieb wird in drei Teile unterteilt: Einkaufskalkulation, Betriebskalkulation und Verkaufskalkulation</p> <p></p> <p>Die folgende Rechnung ist die Einkaufskalkulation:</p> <p></p> <p>(Bezugskosten = Lieferkosten, Logistik, Zoll, ...) </p> <p>Achtung: Skonto wird auf den Nettokreditankaufspreis gerechnet.</p> <p>Auf den Einstandswert/Einstandspreis sind die innerbetriebliche Kosten, wie L\u00f6hne, noch nicht verrechnet. Daher wird in der Betriebskalkulation die Selbstkosten mit gerechnet.</p> <p></p> <p>Nun kann denn Profit pro Produkt in einer Verkaufskalkulation ausgerechnet werden:</p> <p></p>"},{"location":"23FS/WING/Finanzen/Kalkulation.html#beispiel","title":"Beispiel","text":"<p>Einkaufskalkulation:</p> <p></p> <p>Betriebskalkulation:</p> <p></p> <p></p> <p>(Achtung: Beim Abrunden kann es sein, dass am Ende \"wir\" Geld pro Produkt verlieren)</p> <p>Verkaufskalkulation:</p> <p></p> <p></p> <p>(Achtung: der Nettobarverkaufspreis ist 98% (nicht 100%) von den 2% des Skonto, da von 10.55 man 2% Skonto Rabatt gibt)</p>"},{"location":"23FS/WING/Finanzen/Teilkostenrechnung.html","title":"Teilkostenrechnung","text":""},{"location":"23FS/WING/Finanzen/Teilkostenrechnung.html#begriffe","title":"Begriffe","text":"<p>(Variable Kosten starten immer bei 0/0. Dies stimmt im Diagramm oben nicht)</p>"},{"location":"23FS/WING/Finanzen/Teilkostenrechnung.html#deckungsbetragrechnung","title":"Deckungsbetragrechnung","text":"<p>(<code>./.</code> ist das kaufm\u00e4nnische Minus)</p>"},{"location":"23FS/WING/Finanzen/Teilkostenrechnung.html#break-even-analyse","title":"Break-Even-Analyse","text":"<p>(DB = Deckungs Betrag, Marge=%-Betrag des Nettoerl\u00f6ses)</p> <p></p> <p></p> <p>Da dies nicht geht, soll nun ausgerechnet werden, wie teuer der Kurs sein muss, um mit 10 Teilnehmer Break-Even zu sein:</p> <p></p> <p></p>"},{"location":"23FS/WING/Finanzen/Teilkostenrechnung.html#_1","title":"Teilkostenrechnung","text":""},{"location":"23FS/WING/Finanzen/Vollkostenrechnung.html","title":"Vollkostenrechnung","text":"<p>(<code>./.</code> ist das Kaufm\u00e4nnische <code>-</code>, <code>EBIT</code> = Earning before interests and taxes)</p> <p>Bei der Kostenrechnung m\u00fcssen die gesamt Kosten auf die einzelnen Kostentr\u00e4ger verteilt. Einzelkosten/Direktkosten sind Materialien, welche eingekauft wurden (z.B. f\u00fcr ein Baumunternehmen w\u00e4ren T\u00fcre). </p> <p>Es gibt allerdings auch Gemeinkosten/Indirektekosten, welche geteilt zwischen Produkten sind. Diese werden zuerst Kostenstellen zugewiesen. Diese Kostenstellen k\u00f6nnen weiter unterteilt werden in Hilfskosten/Vorkostenstelle und Hauptkostenstellen. </p> <p>Hilfskostenstellen werden verteilt auf Hauptkostenstellen, welche wiederum auf die Kostentr\u00e4ger verteilt werden.</p> <p></p>"},{"location":"23FS/WING/Finanzen/Vollkostenrechnung.html#betriebsabrechnungsbogen-bab","title":"Betriebsabrechnungsbogen (BAB)","text":"<p>(FiBu Finanz Buchhaltung, BeBu: Betriebsbuchhaltung)</p> <p>Beispiel 2:</p> <p></p> <p>Vorkostenstelle = Hilfskostenstelle; V&amp;V = Verkauf &amp; Vertrieb</p> <p>Der Zuschlagssatz ist <code>1</code> \"Einheit\" des Ver\u00e4hltniss (in diesem Beispiel <code>4</code> und <code>16</code>).</p> <p>Formeln:</p> <p></p>"},{"location":"23FS/WING/Finanzen/Vollkostenrechnung.html#sachliche-abgrenzung","title":"Sachliche Abgrenzung","text":"<p>In der Finanz-Buchhaltung k\u00f6nnen Werte \u00fcber oder unterbewertet werden. In der Betriebsbuchhaltung m\u00f6chte man mit m\u00f6glichst genauen Zahlen rechnen. Daher gibt es eine Abgrenzungs-Spalte, welche als Korrektur dient.</p> <p></p>"},{"location":"23FS/WING/Finanzen/Vollkostenrechnung.html#vollkostenrechnung_1","title":"Vollkostenrechnung","text":"<p>Das folgende ist ein rudiment\u00e4res Beispiel (BAB macht kein Sinn, wenn es nur ein Kostentr\u00e4ger Sinn macht):</p> <p></p>"},{"location":"23FS/WING/Finanzen/Vollkostenrechnung.html#beispiel-verteilen-auf-kostenstellen","title":"Beispiel - Verteilen auf Kostenstellen","text":"<p>Im folgenden Beispiel werden Mietkosten verteilt mit einem Verteilschl\u00fcssel der Quadratmeter-Anzahl.</p> <p></p>"},{"location":"23FS/WING/Finanzen/Vollkostenrechnung.html#beispiel-verteilen-von-kostenstellen-auf-kostentrager","title":"Beispiel - Verteilen von Kostenstellen auf Kostentr\u00e4ger","text":"<p>In diesem Beipsiel werden die Kostenstelle auf die Kostentr\u00e4ger verteilt auf Basis des Verteilungsschl\u00fcssel <code>h/Stk.</code></p> <p></p>"},{"location":"23FS/WING/Marketing/4-P-Mix.html","title":"94-P-Mix","text":"<p>Diese vier Elemente m\u00fcssen aufeinander abgestimmt werden: Z.B. ein teureres Produkt, muss die hochwertig sein (Produkteigentschaft), muss in den richtigen Laden verkauft werden und bei den richtigen Personen beworben werden.</p>"},{"location":"23FS/WING/Marketing/4-P-Mix.html#produkte-4-p-mix","title":"Produkte  (4-P-Mix)","text":""},{"location":"23FS/WING/Marketing/4-P-Mix.html#produktgestalltung","title":"Produktgestalltung","text":""},{"location":"23FS/WING/Marketing/4-P-Mix.html#verpackung","title":"Verpackung","text":""},{"location":"23FS/WING/Marketing/4-P-Mix.html#preis-politik-4-p-mix","title":"Preis Politik  (4-P-Mix)","text":""},{"location":"23FS/WING/Marketing/4-P-Mix.html#preisstrategie","title":"Preisstrategie","text":"<ul> <li>Nachfrageorientierung: Es wird analysiert, wie viel der Kunde bereit ist zu zahlen</li> <li>Kostenorientierung: Es wird berechnet, wie viel die Produktion des Produktes kostet, und wie viel daran verdient werden soll. An Hand von dem wird der Preis festgelegt</li> <li>Wettbewerbsorientierung: Der Preis wird anhand der Preise der Konkurrenten bestimmt.</li> </ul> <p>Die mindeste Absatzmenge muss so bestimmt werden, das der Break-event-Point erreicht wird.</p> <p>Es gibt ebenfalls verschiedene Strategien, wie die Strategie auf verschiedene Kunden-Sektionen, mit unterschiedlichen Zahlungswilligkeit, angepasst werden kann.</p> <p></p> <p></p> <p>Bei der Penetrationsstrategie wird der Preis langsam erh\u00f6ht, w\u00e4hrend bei der Skimmingstrategie der Preis \u00fcber die Zeit sinkt (z.B. bei Medikamente, nach dem das Generika heraus gekommen ist, Samsung Smartphones).</p> <p></p>"},{"location":"23FS/WING/Marketing/4-P-Mix.html#preis-elastizitat","title":"Preis Elastizit\u00e4t","text":"<p>Wenn eine Nachfrage:</p> <ul> <li>Preiselastisch ist, sinkt die Nachfrage mit steigendem Preis</li> <li>Preisunelastish ist,  sinkt die Nachfrage kaum bei steigendem Preis</li> <li>Inverse Nachfrage</li> </ul>"},{"location":"23FS/WING/Marketing/4-P-Mix.html#distributionsorgan","title":"Distributionsorgan","text":"<p>Es wird zwischen internen und externen Distributionsorgane unterschieden.</p> <p></p> <p>Die folgenden Beispiele sind f\u00fcr externe Distributionsorgane.</p> <p></p> <p>Ein Produkt kann entweder via direkten Absatzmarkt direkt zum Konsument vertrieben werden. Ebenfalls ist es auch m\u00f6glich, dass Produkte indirekt \u00fcber Einzelh\u00e4ndler vertrieben.</p> <p></p> <p>F\u00fcr folgende Produkte eignet sich, tendenziell, ein direkter Absatzweg: </p> <p>Hingegen folgende Produkte werden oft mit einem indirekten Absatzweg vertrieben:</p> <p></p>"},{"location":"23FS/WING/Marketing/4-P-Mix.html#kommunikationpolitik-4-p-mix","title":"Kommunikationpolitik  (4-P-Mix)","text":"<p>Um Kommunikationspolitik zu betreiben, ben\u00f6tigt ein Unternehmen Instrumente um zu Kommunizieren.</p> <p></p>"},{"location":"23FS/WING/Marketing/4-P-Mix.html#marketing-promotion-public-relations","title":"Marketing \u2260 Promotion \u2260 Public Relations","text":"<p>Diese Begriffe sind nicht gleich.</p> <p></p>"},{"location":"23FS/WING/Marketing/4-P-Mix.html#public-relations-pr","title":"Public Relations (PR)","text":"<p>PR hat mehrere Funktionen. Es wird (grunds\u00e4tzlich) von PR gesprochen, wenn es kein Preis gibt, anders als beim Marketing.</p> <p></p>"},{"location":"23FS/WING/Marketing/4-P-Mix.html#werbung","title":"Werbung","text":"<p>Werbung muss individualisiert werden f\u00fcr das Produkt und Kategorie der Firma.</p> <p></p> <p>Um eine Werbung erfolgreich zu gestalten, kann die AIDA-Formel angewendet werden. Diese sagt aus, welche Bausteine eine Werbung enthalten soll. </p> <p></p> <p>Action kann auch gezeigt werden. Z.B. Coca Cola Werbung zeigen am Ende der Werbung immer jemand das Getr\u00e4nk trinken.</p> <p>Diese AIDA-Formel reicht aber im Alltag h\u00e4ufig nicht. Es reicht nicht nur eine Ausstrahlung, sondern ein Kunde muss die Werbung immer und immer wieder sehen.</p> <p></p> <p>Die Ziele einer Werbung m\u00fcssen nicht immer die Umsatzsteigerung sein. Es kann z.B. auch sein die generelle Bekanntheit zu steigern.</p> <p></p> <p>Um ein Werbekonzept zu erarbeiten, sollten folgende Fragen beantwortet werden:</p> <ul> <li>Werbeobjekt: Wof\u00fcr (Produkt, Marke etc.) soll die Werbung konzipiert sein?</li> <li>Werbesubjekt: Welche Zielgruppe soll angesprochen sein?</li> <li>Wirkungsziele: Welche Werbeziele sollen besonders verfolgt werden?</li> <li>Werbebotschaft: Welches ist die Werbebotschaft?   </li> <li>Werbemittel: Welches Werbemittel soll eingesetzt werden?</li> <li>Werbeperiode: Wie lange soll geworben werden?</li> <li>Werbebudget: Wie hoch soll das Werbebudget sein?</li> </ul> <p>Influencers k\u00f6nnen viele Menschen in einem bestimmten Segment erreichen.</p> <p></p>"},{"location":"23FS/WING/Marketing/4-P-Mix.html#beispiel-fur-4-p-mix","title":"Beispiel f\u00fcr 4-P-Mix","text":"<p>Diese Uhr wird nur in Uhrengesch\u00e4ften vertrieben, was f\u00fcr eine Uhr ohne Marke am falschen Ort ist. Der Preis ist relative hoch, da vermutlich die Uhr nicht stabil ist. </p> <p></p> <p>Rolex ist ein Beispiel eines besseren Marketing-Mix.</p>"},{"location":"23FS/WING/Marketing/Markenf%C3%BChrung.html","title":"Markenf\u00fchrung","text":"<p>Es gibt mehrere Aspekte einer Markenf\u00fchrung</p> <p></p>"},{"location":"23FS/WING/Marketing/Marketing.html","title":"Marketing","text":""},{"location":"23FS/WING/Marketing/Marketing.html#marktforschung","title":"Marktforschung","text":"<p>Die Daten k\u00f6nnen von Prim\u00e4rmarktforschung stammen, wo bei das Unternehmen selbst Daten erhebt. Eine zweite M\u00f6glichkeit ist die Sekund\u00e4rmarktforschung, wobei existierende Ressourcen verwendet werden.</p> <p>Es kann sich um qualitative Daten handeln, wobei das Ziel  meistens ist, mehr \u00fcber die Motive von Nutzer heraus zu finden. Wenn es quantitative Daten sind, ist das Ziel Marktdaten und Marktvolumen zu ermitteln.</p>"},{"location":"23FS/WING/Marketing/Marketing.html#marktgrosse","title":"Marktgr\u00f6sse","text":"<p>Die Marktkapazit\u00e4t ist die h\u00f6chst m\u00f6gliche Menge, welche verkauft werden k\u00f6nnte. Diese Zahl wird nie erreicht. Das Machtpotenzial betrifft alle Kunden, welche kaufbereit w\u00e4re, das Produkt zu kaufen. Das Marktvolumen ist der totale Absatz des Markt. Der Marktanteil ist die Menge der abgesetzten Produkte des Unternehmens.</p> <p>Diese Zahlen sind pro Zeit.</p>"},{"location":"23FS/WING/Marketing/Marketing.html#marktsegmentierung","title":"Marktsegmentierung","text":"<p>Die folgenden Illustrationen zeigen, wie diese Merkmale auf einen Diagramm eingezeichnet werden. </p> <p></p>"},{"location":"23FS/WING/Marketing/Marketing.html#customer-relationship-management","title":"Customer Relationship Management","text":""},{"location":"23FS/WING/pdf/all.html","title":"Basics","text":""},{"location":"23FS/WING/pdf/all.html#gutereinteilung","title":"G\u00fctereinteilung","text":""},{"location":"23FS/WING/pdf/all.html#bedurfnis-bedarf-nachfrage","title":"Bed\u00fcrfnis \u2013 Bedarf \u2013 Nachfrage","text":""},{"location":"23FS/WING/pdf/all.html#st-galler-managementmodell","title":"St. Galler Managementmodell","text":"<p>Eine Firma ist eingebettet in ihre Umgebung.</p>"},{"location":"23FS/WING/pdf/all.html#strategie","title":"Strategie","text":"<p>Um eine Strategie zu entwickeln, kann folgenden Prozess eingesetzt werden.</p> <p></p> <p>Folgende Analysen fliessen in eine Unternehmensstrategie ein.</p> <p></p>"},{"location":"23FS/WING/pdf/all.html#analyse","title":"Analyse","text":""},{"location":"23FS/WING/pdf/all.html#unternehmensanalyse-und-umweltanalyse","title":"Unternehmensanalyse und Umweltanalyse","text":"<p>F\u00fcr das Analysieren gibt es mehrere M\u00f6glichkeiten, wie dies gewerkstellt werden kann: SWAT-Analyse, PESTLE-Analyse und das F\u00fcnf Kr\u00e4fte Modell von Porter.</p>"},{"location":"23FS/WING/pdf/all.html#kernkompetenzen","title":"Kernkompetenzen","text":"<p>Kern-Kompetenzen sind dauerhafte Wettbewerbsvorteile sind </p> <ul> <li>wertvoll</li> <li>selten</li> <li>nicht oder nur schwer imitierbar</li> <li>nicht substituierbar</li> </ul>"},{"location":"23FS/WING/pdf/all.html#swot-analayse","title":"SWOT Analayse","text":"<p>In der SWOT-Analyse wird zwischen der Innen- und Aussenwelt unterschieden.</p> <p></p> <p>Um St\u00e4rke und Schw\u00e4chen zu finden, m\u00fcssen die Kernkompetenzen gefunden werden. Kern-Kompetenzen sind dauerhafte Wettbewerbsvorteile sind wertvoll, selten, nicht oder nur schwer imitierbar und nicht substituierbar.</p> <p>Die SWOT Akronyme k\u00f6nnen gekreuzt werden. Was daraus folgt sind aber noch keine Strategien, sondern nur Strategieans\u00e4tze, bzw. strategische Stossrichtungen.</p> <p></p> <p>Nach dem St\u00e4rken, Schw\u00e4chen Chancen und Gefahren gefunden wurde, werden diese, wie in der Matrix oben beschrieben, gemischt (z.B. Preisg\u00fcnstig und Wetter/steigender Wohlstand =&gt; Potenzielle Strategie: Marketing).</p> <p>Als Beispiel f\u00fcr dies f\u00fcr Easy-Jet:</p> <ul> <li>St\u00e4rken:</li> <li>Direkt Fl\u00fcge</li> <li>Preisg\u00fcnstig</li> <li>Schw\u00e4chen</li> <li>Nicht Interkontinental</li> <li>Nur zu gewissen Zeiten an bestimmten Flughafen</li> <li>Chancen</li> <li>Durch die Skallierbarkeit ist EasyJet flexibel bei hochem Passagier aufkommen</li> <li>Wetter an anderen Orten (aus der Sicht der Schweiz) besser</li> <li>Trend zu Wochenend-St\u00e4dtereise</li> <li>Steigender Wohlstand</li> <li>Gefahren</li> <li>Verteuerung der Treibstoffkosten</li> <li>Restriktionen von Klima</li> <li>H\u00f6here Flughafentaxen</li> <li>Neue Billig-Airlines</li> </ul>"},{"location":"23FS/WING/pdf/all.html#pestel-analyse","title":"PESTEL-Analyse","text":"<p>Mit der PESTEL-Analyse wird der Einfluss von sechs externen Umwelt-Faktoren eines Unternehmen untersucht:</p> <ul> <li>Political</li> <li>Economical</li> <li>Social   Alters-Pyramide/Trends, wie Vegan, ...</li> <li>Technological   ChatGPT</li> <li>Environment/\u00d6kologisch</li> <li>Legal   Neue Gesetze</li> </ul> <p>Das folgende ist ein Beispiel f\u00fcr die PESTEL-Analyse f\u00fcr eine One Wheel Firma.</p> <p></p>"},{"location":"23FS/WING/pdf/all.html#funf-krafte-modell-von-porter","title":"F\u00fcnf Kr\u00e4fte Modell von Porter","text":"<p>Das F\u00fcnf Kr\u00e4fte Modell ist eine Alternative zur PESTLE-Analyse.</p> <p></p> <p>Das f\u00fcnf Kr\u00e4fte Modell gibt Auskunft dar\u00fcber, wie attraktiv ein Markt zum einsteigen ist, bzw. ob den Markt verlassen werden soll.</p> <ul> <li>Potenzielle Konkurenten   Wie gross ist die Bedrohung von neuen Konkurenten? M\u00f6gliche \u00dcberlegungen w\u00e4ren: Wie gross ist die Eintrittsh\u00fcrde?</li> <li>Kunden   Wie verhandlungsstark ist der Kunde? Wie stark kann der Kunde das Produkt selbst, wie auch den Preis beeinflussen? </li> <li>Lieferanten   Wie verhandlungsstark sind die Lieferanten? Gibt es alternative Lieferanten?</li> <li>Ersatzprodukt   Gibt es Ersatzprodukte, welche ein Produkt/Dienstleistung ersetzten k\u00f6nnen?</li> <li>Branchen Wettbewerb   Wie umk\u00e4mpft ist die Branche bereits? </li> </ul> <p>Beispiel f\u00fcr Easyjet:</p> <ul> <li>Rivalit\u00e4t mit bestehenden Konkurrenten: Ryanair, Aer Lingus, ... sind alles auch billig Fluggesellschaft</li> <li>Verhandlungsmacht der Kunden: Der Kund verf\u00fcgt \u00fcber eine kleine Macht, da sie nicht viel des Umsatz von EasyJet ausmachen</li> <li>Verhandlungsmacht der Lieferant: Es gibt zwei Flugzeughersteller</li> <li>Potenzielle neue Konkurrenten: Keine neue Flugzeuggesellschaften sind zurzeit in Sicht</li> <li>Ersatzprodukte: Schnellz\u00fcge, Langstrecken-B\u00fcsse</li> </ul>"},{"location":"23FS/WING/pdf/all.html#unternehmensbild","title":"Unternehmensbild","text":"<p>Beispiel von EasyJet:</p> <p>Unser wichtigstes Ziel ist, unsere Kunden sicher von ihrem Abflugs- zu ihrem Bestimmungsort zu bringen und unsere Flugdienste mit einem ausgezeichneten Preis-Leistungs-Verh\u00e4ltnis anzubieten. Wir konzentrieren uns auf konsequente und zuverl\u00e4ssige Produkte und Preise f\u00fcr zahlreiche Routen in Europa und sprechen dabei sowohl die M\u00e4rkte f\u00fcr Ferien- als auch f\u00fcr Gesch\u00e4ftsreisende an. In diesem Sinne m\u00f6chten wir unsere Mitarbeiter f\u00f6rdern und mit unseren Lieferanten nachhaltige Beziehungen aufbauen. An vier Kernprinzipien erkennen Sie unsere Werte:</p> <ul> <li>Sicherheit \u2013 Unsere h\u00f6chste Priorit\u00e4t, keine Kompromisse</li> <li>Teamarbeit \u2013 Gemeinsam erreichen wir unser Ziel schneller</li> <li>Pionierarbeit \u2013 Neue Wege und Chancen finden</li> <li>Leidenschaft \u2013 Wir streben danach, die Besten zu werden</li> </ul>"},{"location":"23FS/WING/pdf/all.html#unternehmensstrategie","title":"Unternehmensstrategie","text":"<p>Die Unternehmensstrategie formt sich aus der Unternehmensanalyse, dem Leitbild und der Umweltanalyse.</p> <p>Beispiel f\u00fcr EasyJet:</p> <p></p>"},{"location":"23FS/WING/pdf/all.html#planung","title":"Planung","text":""},{"location":"23FS/WING/pdf/all.html#4-branchenwettbewerbsstrategien-nach-porter","title":"4-Branchenwettbewerbsstrategien nach Porter","text":"<p>(SEP: Strategische Erfolgs Position)</p> <p>Eine Firma kann m\u00f6chte in einem Punkt f\u00fchrend sein.</p> <p>In der folgenden Abbildung sind Beispiele von Firmen:</p> <p></p>"},{"location":"23FS/WING/pdf/all.html#die-vier-produkt-markt-strategien-nach-ansoff","title":"Die vier Produkt-Markt-Strategien nach Ansoff","text":"<p>Im folgenden Beispiel wird die vier Produkt-Markt-Strategie nach Ansoff f\u00fcr eine Bungalow-Vermietungs Firma entwickelt:</p> <p>Beschreiben Sie 3 m\u00f6gliche Wachstumsstrategien basierend auf Ansoff (Wachstumsstrategien) f\u00fcr die Firma Chill Out Time:</p> <ul> <li>Produktentwicklung:   Bungalow weiterentwickeln. Bspw. Familienbungalows oder Themenbungalows einf\u00fchren, bspw. Karibikbungalow, Orientalbungalow. Oder neben den Bungalows auch kleine Boote oder Baumh\u00e4user zum \u00dcbernachten vermieten.</li> <li>Diversifikation:    Neben den Bungalows k\u00f6nnte die Chill Out Time AG auch noch weitere Produkte oder Services Anbieten, bspw. Tauch oder Surfkurse, oder gef\u00fchrte Exkursionen auf Costa Rica. Oder eigene Produkte produzieren, bspw. Kokosnusswasser. </li> <li>Marktentwicklung:    Vermarktung der Bungalows in neuen M\u00e4rkten, bspw. Fokus auf asiatisch L\u00e4nder (Japan oder S\u00fcdkorea, ev. auch China). So werden neue Kundengruppen aus neuen M\u00e4rkten gewonnen.# Investitionsrechnung</li> </ul> <p>Eine Investitions ist einne Zahlungsreihe, die in der Regel mit einner (sicheren) Auszahlung beginnt, auf die zu sp\u00e4teren Zeitpunkten (unsichere) Einnahmen folgen.</p> <p></p> <p>Ein Ertrag kann, muss aber keinen Geldzufluss darstellen. Beispiel eines Ertrages, der keinen Geldzufluss darstellt: Die Wertzunahme einer Wertschrift wird als Ertrag gebucht. Eine Auszahlung stellt immer einen Geldabfluss dar.</p> <p>Ein Aufwand kann, muss aber keinen Geldabfluss darstellen. Beispiel eines Aufwandes, der keinen Geldabfluss darstellt: Die Bildung einer R\u00fcckstellung wird als Aufwand gebucht. Eine Einzahlung stellt immer einen Geldzufluss dar.</p> <p>Es gibt drei Kategorien von Investitionen: Sachverm\u00f6gen, Finanzanlagen und immaterielles Verm\u00f6gen.</p> <p></p>"},{"location":"23FS/WING/pdf/all.html#investitionsrechnungs-methoden","title":"Investitionsrechnungs-Methoden","text":"<p>Bei den statischen Methoden wird ein durchschnittliches Jahr berechnet, mit welchem den Entscheid der Investition gef\u00e4llt wird. </p> <p>Bei der dynamischen Methode wird geschaut, wann auf dem Zeitstrahl ein Geldfluss existiert. Es gilt das Moto: Heute verf\u00fcgbares Geld ist mehr wert als k\u00fcnftiges. Dies kommt nicht von der Inflation, sondern dass wenn man das Geld hat, kann damit gearbeitet werden.</p>"},{"location":"23FS/WING/pdf/all.html#kostenvergleichsmethode","title":"Kostenvergleichsmethode","text":"<p>Variable Kosten sind Abh\u00e4ngig von wie viel produziert/gearbeitet wird (z.B. Lohnkosten). Fixkosten sind nicht abh\u00e4ngig von wie viel produziert wird (z.B. Mietkosten).</p> <p>\u200b   Kalkulatorische Abschreibungen sind die \\(\\frac{Anschaffungskosten-Liquidationserloes}{Nutzungsdauer}\\). Der kalkulatorischen Zins scheint \\(\\frac{(Anschafungskosten + Liquidationserloes) \\cdot ZinsSatz}{2}\\) zu sein.</p>"},{"location":"23FS/WING/pdf/all.html#gewinnvergleichsmethode","title":"Gewinnvergleichsmethode","text":"<p>Bei der Gewinnvergleichsmethode wird zus\u00e4tzlich zu den Kosten auch den Erl\u00f6s ben\u00f6tigt, welcher durch die Maschine generiert wurde. </p> <p></p> <p>In der Gewinnverlgeichsmethode ist der Anschaffungspreis der Anlagen nicht enthalten.</p>"},{"location":"23FS/WING/pdf/all.html#rentabilitatsvergleich-roi","title":"Rentabilit\u00e4tsvergleich (ROI)","text":"\\[ ROI = \\frac{Gewinn + kalk. Zinsen}{avgEingesetztes Kapital}\\cdot 100 \\] <p>Das eingesetzte Kapital wird halbiert, da zu Beginn das volle Kapital da ist und am Ende nichts mehr: \\(avgEingesetztesKapital = \\frac{wirliklichEingesetztesKapital + 0}{2}\\)</p> <p></p> <p>Die Rentabilit\u00e4t sagt aus, wie viel des eingesetzten Kapital pro Jahr wieder eingenommen wird.</p>"},{"location":"23FS/WING/pdf/all.html#amortisationsrechung","title":"Amortisationsrechung","text":"<p>Beide Cashflows m\u00fcssen dasselbe ergeben. Daher kann gew\u00e4hlt werden, welcher Cashflow ben\u00fctzt wird.</p> <p>Bei dieser Rechnung ist der Kapitaleinsatz nicht durch \\(2\\) geteilt.</p>"},{"location":"23FS/WING/pdf/all.html#durchschnittliche-jahrliche-gesamtkosten","title":"Durchschnittliche J\u00e4hrliche Gesamtkosten","text":"<p>Die folgende Formel steht f\u00fcr die durchschnittlichen Kosten, welche pro Jahr anfallen. $$ avgGesamtkosten = FixKosten + VariableKosten + Abschreibung + KalkulatorischerZins\\ Abschreibung = \\frac{Anschaffungskosten-Liquidationserloes}{Nutzungsdauer}\\ KalkulatorischerZins=\\frac{(Anschafungskosten + Liquidationserloes) \\cdot ZinsSatz}{2} $$</p>"},{"location":"23FS/WING/pdf/all.html#kapitalwertmethode","title":"Kapitalwertmethode","text":"<p>Rohgewinn ist ein anderes Wort f\u00fcr Cashflow.</p> <p></p> <p>Der Liquidationserl\u00f6s ist der Erl\u00f6s, welcher beim Verkaufen der Maschine generiert wird.</p> <p></p> <p>Da der Liquidationserl\u00f6s erst in \\(x\\) Jahren ist, muss der Liquidationserl\u00f6s mit dem Zinses-Zins aus der Tabelle nach 5 Jahren gerechnet werden (aus der nicht-summierten Tabelle).</p> <p>Es gibt zwei Hilfstabellen, welche miteinander verbunden sind. </p> <p></p> <p>Das folgende ist ein zweites Beispiel:</p> <p></p> <p>Wenn der Cash Flow (CF) wiederkehrent gleich bleibt, kann die Rentenbarwertfaktor-Tabelle verwendet werden.</p> <p></p> <p>Es wird auf den Kapitaleinsatz 5x den summierten Zins aus der Rentenbarwertfaktor-Tabelle mit dem Cash Flow gerechent.</p>"},{"location":"23FS/WING/pdf/all.html#auf-und-abzinsung","title":"Auf- und Abzinsung","text":""},{"location":"23FS/WING/pdf/all.html#leistungserstellung","title":"Leistungserstellung","text":""},{"location":"23FS/WING/pdf/all.html#strategisches-prozessmanagement","title":"Strategisches Prozessmanagement","text":"<p>Viele Unternehmen decken nicht alle Prozesse in der Wertsch\u00f6pfungskette ab.</p> <p></p> <p>Es gibt verschiedene g\u00e4ngige Modelle, wie die Wertsch\u00f6pfung abgedeckt wird:</p> <p></p>"},{"location":"23FS/WING/pdf/all.html#produktionslogistik","title":"Produktionslogistik","text":"<p>Produktion ist, wenn Sachg\u00fcter und Dienstleistungen in andere Sachg\u00fcter und Dienstleistungen umgewandelt wird.</p> <p>Das Ziel der Produktionslogistik ist den Produktionsprozess art- und mengenm\u00e4ssig, r\u00e4umlich und zeitlich abgestimmt mit den ben\u00f6tigten Produktionsfaktoren zu versorgen.</p> <p></p> <p>Produktionsprogramm: Bestimmt Art, Menge und Zeitpunkt der zu produzierenden Produkte in einem Unternehmen. Produktionsprogrammbreite: Anzahl der von einem Unternehmen hergestellten Produktarten. Programmtiefe: Anzahl der Artikel und Typen, die innerhalb einer Produktart vom Unternehmen angeboten werden. Idealfall: Die Ressourcen sind optimal ausgelastet, d.h. Mensch und Maschinen sind weder unterbesch\u00e4ftigt noch \u00fcberbeansprucht. Fertigungstiefe: Wie viel von den ben\u00f6tigten Teile selbst hergestellt werden und wie viel eingekauft wird.</p> <p>Im folgenden Beispiel ist die Produktionsprogrammbreite und Programmtiefe aufgezeigt:</p> <p></p> <p>Folgende Grafik zeigt die Fertigungstiefe:</p> <p></p> <p>Folgende Punkte gilt es zu beachten, wenn es um die Frage geht, ob etwas eingekauft oder selbst hergestellt werden soll.</p> <p></p> <p>Um zu \u00fcberlegen, ob gekauft werden soll oder nicht k\u00f6nnen auch die folgenden Formeln gleich gesetzt werden:  $$ VariableKostenProSt\u00fcck_{make} \\cdot x + Fixkosten = VariableKosten_{buy}\\cdot x $$ Sobald die variable Kosten pro St\u00fcck f\u00fcr das Einkaufen kleiner sind, als was es kosten w\u00fcrde das Produkt herzustellen plus die Fixkosten, lohnt es sich.</p> <p></p>"},{"location":"23FS/WING/pdf/all.html#durchlaufszeit","title":"Durchlaufszeit","text":"<p>Die Durchlaufszeit ist die totale Zeit ben\u00f6tigt f\u00fcr das Herstellen eines Produktes.</p>"},{"location":"23FS/WING/pdf/all.html#vorwarts-und-ruckwartsterminierung","title":"Vorw\u00e4rts- und R\u00fcckw\u00e4rtsterminierung","text":"<p>Vorw\u00e4rtsterminierung ist, wenn beim Planen vom Auftragseingang direkt beginnt zu arbeiten. Bei der R\u00fcckw\u00e4rtsterminierung wird vom Endtermin geplant. In der Praxis wird meisten die R\u00fcckw\u00e4rtsterminierung mit mit Pufffer gew\u00e4hlt.</p> <p></p> <p>Vorteile und Nachteile f\u00fcr Vorw\u00e4rtsterminierung:</p> <p></p> <p>Vorteile und Nachteile f\u00fcr R\u00fcckw\u00e4rtsterminierung:</p> <p></p>"},{"location":"23FS/WING/pdf/all.html#fertigungstypen","title":"Fertigungstypen","text":""},{"location":"23FS/WING/pdf/all.html#kennzahlen","title":"Kennzahlen","text":"\\[ Rentabilit\u00e4t=\\frac{Ertrag-Aufwand}{Kapitaleinsatz}=\\frac{Gewinn}{Kapitaleinsatz}\\\\ Produktivit\u00e4t=\\frac{Ausbringungsmenge}{Faktoreinsatzmenge}\\\\ Wirtschaftlichkeit = \\frac{Ertrag}{Aufwand}\\\\ Fehlerquote = \\frac{FehlerhafteProdukte}{TotalHergestellteProdukte} \\] <p>Die Ausbringungsmenge ist die w\u00e4hrend der Produktion produzierten Produkte, w\u00e4hrend die Faktoreinsatzmenge eingesetzte und verbrauchte Materialien sind (ev. auch Stunden).</p>"},{"location":"23FS/WING/pdf/all.html#materialwirtschaft","title":"Materialwirtschaft","text":"<p>Wie in der oberen Grafik zu sehen ist, l\u00e4uft dies durch diese Prozesse durch. Im Beispiel von BMW 320i gibt es nur zwei Produktionsstufen (dies ist in der Realit\u00e4t nat\u00fcrlich mehr).</p>"},{"location":"23FS/WING/pdf/all.html#beschaffungsobjekte","title":"Beschaffungsobjekte","text":"<ul> <li>Rohstoffe: Hauptbestandteil des Produkts</li> <li>Hilfsstoffe: Nebenbestandteile des Produkts (z.B. N\u00e4gel bei der T\u00fcrenherstellung bei einem Schreiner)</li> <li>Betriebsstoffe: Werden bei der Herstellung verbraucht</li> <li>Montageteile: Vorproduzierte Komponente</li> <li>Handelswaren: Nicht f\u00fcr den Produktionsprozess bestimmt; Werden unver\u00e4ndert weiterverkauft.</li> </ul>"},{"location":"23FS/WING/pdf/all.html#beschaffungskonzepte","title":"Beschaffungskonzepte","text":"<p>Zus\u00e4tzlich gibt es auch noch Just in Sequence, was eine Weiterentwicklung ist von Just-in-Time. Dabei wird das Material nicht nur zur rechten Zeit in der rechten Menge geliefert, sonder auch noch am richtigen Ort in der Herstellungs-F\u00f6rderband.</p>"},{"location":"23FS/WING/pdf/all.html#lagerbestand","title":"Lagerbestand","text":"<p>Wenn der Meldebestand erreicht wird, gibt es eine Meldung des ERPs, dass in \\(j\\) Tage das Lager leer ist und daher nach bestellt werden muss. </p>"},{"location":"23FS/WING/pdf/all.html#insourcing","title":"Insourcing","text":"<p>Insourcing bezeichnet man, wenn zuvor im Markt bezogenen Leistungen,  in die eigene Wertsch\u00f6pfung verlagert werden. Dies hat den Vorteil dass</p> <ul> <li>die Lieferzeiten reduziert werden</li> <li>die Unabh\u00e4nigkeit gegen\u00fcber der Lieferanten bez\u00fcgles des Preis und Absatzmengen</li> <li>Aufrechterhaltung Qualit\u00e4tsstandards</li> <li>Auslastung Fertigungskapazit\u00e4ten</li> </ul>"},{"location":"23FS/WING/pdf/all.html#outsourcing","title":"Outsourcing","text":"<p>Das Outsourcing ist das Gegenteil des Insourcing.</p> <p>Vorteile sind:</p> <ul> <li>Minimieren der Fixkosten</li> <li>Beschaffungsmenge und Zeitspanne sind flexible planbar</li> <li>Minimierung der Lagerkosten</li> <li>Ausweichm\u00f6glichkeit bei Kapazit\u00e4tsengp\u00e4sse</li> </ul>"},{"location":"23FS/WING/pdf/all.html#outsourcing-oder-insourcing","title":"Outsourcing oder Insourcing","text":"<p>Um etwas zu erstellen, gibt es variable Kosten pro St\u00fcck und zus\u00e4tzlich Fixkosten. Hingegen beim Outsourcing gibt es nur variable Kosten pro St\u00fcck. </p> <p>Wenn nun die \\(VariableKosten\\cdot x + Fixkosten = VariableKosten \\cdot x\\) gilt, dann sollte hergestellt werden.</p>"},{"location":"23FS/WING/pdf/all.html#kostenanfall-in-der-materialwirtschaft","title":"Kostenanfall in der Materialwirtschaft","text":""},{"location":"23FS/WING/pdf/all.html#magische-dreieck-der-materialwirtschaft","title":"Magische Dreieck der Materialwirtschaft","text":"<p>Am besten sollte die Lieferbereitschaft hoch sein, w\u00e4hrend die Beschaffungskosten und Kapitalbindung und Lagerunterhalt m\u00f6glichst tief sein sollte. Dies ist ein Konflikt, da nur zwei dieser drei m\u00f6glich sind.</p>"},{"location":"23FS/WING/pdf/all.html#abc-analyse","title":"ABC-Analyse","text":"<p>In diesem ist die Menge gegen\u00fcber dem gebunden Kapital der gelagerten Artikel. Die Logik sagt, dass in Kategorie A optimiert werden soll, da diese f\u00fcr 80% der Lagerkosten verantwortlich sind.</p> <p></p> <p>Um diese Klassen zu bilden, wird das Inventar nach dem relativen Lagerwert (in Prozent) sortiert, und es werden Artikel, der sortierten Reihenfolge nach, in die Klasse eingeordnet, bis die Prozentwerte von oben erreicht werden.</p>"},{"location":"23FS/WING/pdf/all.html#beispiel","title":"Beispiel","text":"<p>Das Inventar sieht folgendermassen aus:</p> <p></p> <p>Einstandspreis sind die Kosten, damit ein Produkt in der Firma steht (Produktpreis + Zollkosten + Transportationskosten + ...)</p> <p></p>"},{"location":"23FS/WING/pdf/all.html#xyz-analyse","title":"XYZ-Analyse","text":"<p>Bei X-G\u00fcter ist ein kontinuierlicher Materialfluss m\u00f6glich. Bei den Y- und Z-G\u00fcter gibt es Bedarfsschwankungen, welche durch Lagerbest\u00e4nde aufgefangen werden m\u00fcssen.</p> <p></p>"},{"location":"23FS/WING/pdf/all.html#lagerfunktionen","title":"Lagerfunktionen","text":""},{"location":"23FS/WING/pdf/all.html#lagerung-kennzahlen","title":"Lagerung Kennzahlen","text":"\\[ avg. Lagerbestand=\\frac{Anfangsbestand + Endbestand}2\\\\ Lagerumschlagsh\u00e4uffigkeit=\\frac{Jahresverbrauch}{avg. Lagerbestand}\\\\ avg. Lagerdauer=\\frac{360d}{Lagerumschlagsh\u00e4uffigkeit} \\] <p># Math for Clowns</p>"},{"location":"23FS/WING/pdf/all.html#kennzahlen_1","title":"Kennzahlen","text":"\\[ \\text{Rentabilit\u00e4t:}\\\\ Intensit\u00e4tAnlageverm\u00f6gen=\\frac{Anlageverm\u00f6gen}{TotaleAktiven}\\\\ FremdfinanzierungsGrad = \\frac{Fremdkaptial}{TotalPassiven}\\\\ Rentabilit\u00e4t=\\frac{Ertrag-Aufwand}{Kapitaleinsatz}=\\frac{Gewinn}{Kapitaleinsatz}\\\\ GesammtKapitalRendite=\\frac{Gewinn+FremdkapitalZinsen}{FremdKapital + EigenKapital}\\\\ \\\\ \\text{Liquidit\u00e4t:}\\\\ CashFlow = Geldzufluss - Geldabfluss\\\\ QuickRatio = \\frac{Zahlungsmittel + Debitoren}{Kurzfristiges Femdkapital}\\\\ \\\\ \\text{Sicherheit: }\\\\ Eigenfinanzierungsgrad = \\frac{Eigenkapital}{Gesamtkapital}\\\\ Anlatendeckungsgrad2 = \\frac{Eigenkapital + langfristiges Fremdkapital}{Anlageverm\u00f6gen} \\\\ Produktivit\u00e4t=\\frac{Ausbringungsmenge}{Faktoreinsatzmenge}\\\\ Wirtschaftlichkeit = \\frac{Ertrag}{Aufwand}\\\\ Fehlerquote = \\frac{FehlerhafteProdukte}{TotalHergestellteProdukte}\\\\ \\]"},{"location":"23FS/WING/pdf/all.html#personalmanagement","title":"Personalmanagement","text":""},{"location":"23FS/WING/pdf/all.html#stellenbeschreibung","title":"Stellenbeschreibung","text":"<p>In einer Stellenbeschreibung soll die Aufgaben, Verantwortung und Kompetenzen schriftlich festgehalten werden. Falls dies nicht der Fall ist, kann ein Mitarbeiter seine/ihre Ziele nicht wahrnehmen, da sie entweder nicht die Verantwortung oder Kompetenzen daf\u00fcr besitzen.</p>"},{"location":"23FS/WING/pdf/all.html#personalgewinnung","title":"Personalgewinnung","text":"<p>Folgende Kriterien sind \u00fcblich f\u00fcr die Personalwahl einer Firma:</p> <p></p>"},{"location":"23FS/WING/pdf/all.html#bewerbungsunterlagen","title":"Bewerbungsunterlagen","text":""},{"location":"23FS/WING/pdf/all.html#beurteilung-von-bewerbern","title":"Beurteilung von Bewerbern","text":""},{"location":"23FS/WING/pdf/all.html#kompetenzorientierung","title":"Kompetenzorientierung","text":""},{"location":"23FS/WING/pdf/all.html#360-beurteilung","title":"360\u00b0-Beurteilung","text":""},{"location":"23FS/WING/pdf/all.html#personalentwicklung","title":"Personalentwicklung","text":""},{"location":"23FS/WING/pdf/all.html#humankapitaltheorie","title":"Humankapitaltheorie","text":"<p>Zielkonflikt Mitarbeiterentwicklung: Ausbildungs-Investition vs. Mitarbeiterabgang</p> <ul> <li>Personalausbildung: Firmenspezifisch oder allgemein (auch extern anwendbar)</li> <li>Humankapital: Allgemein (ersetzbar) und spezifisch (nicht ersetzbar)</li> <li>Firmenspezifisch: macht MA von Firma abh\u00e4ngig, bringt Firma weiter, gezieltes Aufbauen von Kompetenzen  (Wettbewerbsvorteile)</li> <li>Allgemein: Handelbar, Macht MA f\u00fcr andere Firmen attraktiv, Bringt MA weiter</li> <li>Wer bezahlt die Weiterbildung? Firma (eher bei spezifisch) oder Arbeitnehmer (eher wenn allgemein)? Investition in spezifisches oder allgemeines Humankapital? Attraktivit\u00e4t Arbeitgeber? Image Arbeitgeber?</li> <li>Was bedeutet die Weiterbildung f\u00fcr den Lohn und die Karriereentwicklung (Bef\u00f6rderungen, Stellenwechsel)?</li> </ul>"},{"location":"23FS/WING/pdf/all.html#personalhonorierung","title":"Personalhonorierung","text":""},{"location":"23FS/WING/pdf/all.html#personalfreistellung","title":"Personalfreistellung","text":"<p>Die meisten Massnahmen lassen sich auf eine oder mehrere der folgenden Hauptursachen zur\u00fcckf\u00fchren:</p> <ul> <li>Absatz- und Produktionsr\u00fcckgang als Folge der gesamtwirtschaftlichen Entwicklung</li> <li>Strukturelle Ver\u00e4nderungen</li> <li>Saisonal bedingte Besch\u00e4ftigungsschwankungen</li> <li>Betriebsstillegungen, Betriebsvernichtung, nat\u00fcrliches Betriebsende</li> <li>Standortverlegung</li> <li>Reorganisation</li> <li>Mechanisierung und Automation</li> </ul>"},{"location":"23FS/WING/pdf/all.html#arbeitszeugnisse","title":"Arbeitszeugnisse","text":"<p>Im Arbeitszeugnis sollten die wichtigsten T\u00e4tigkeiten enthalten, wie auch das Verhalten. Wichtig kann auch sein, was nicht im Zeugnis</p> <p>Ein Zwischenzeugnis kann verlangt werden bei Vorgesetzter wechsel oder nach einiger Zeit (z.B. nach 5 Jahren).</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/10_Register%20Allocation.html","title":"Register Allocation","text":""},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/10_Register%20Allocation.html#terms-and-definitions","title":"Terms and definitions","text":"<ul> <li>spilled: Writing a register into memory to free the register</li> <li>Liveness: A value is live between its definition and the uses of that value</li> <li>Live Range: The live range of a value is from its definition to its last use</li> <li><code>MAXLIVE</code> is the maximal number of values live at a point. If the number of live values is larger than <code>MAXLIVE</code> then the some values have to be spilled</li> <li>Two values interfere with each other, if they are live simultaneously</li> </ul>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/10_Register%20Allocation.html#interference-graph","title":"Interference Graph","text":"<p>In an interference graph \\(G_I\\),</p> <ul> <li>Nodes represent values</li> <li>Edges represent two values interfering with each other</li> </ul> <p></p> <p>A interference graph \\(G_I\\) is said to be \\(k\\)-colourable iff (if an if only) the nodes can be labeld with integers \\(1...k\\), so that no edge in G connects two nodes with the same label. Each colour can be mapped to a register.</p> <p>If an interference graph is not easily \\(k\\)-colourable, change the graph by breaking one live range into some ranges through spilling and splitting.</p> <p></p> <p></p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/10_Register%20Allocation.html#splitting-and-spilling","title":"Splitting and Spilling","text":"<p>Splitting is when  a live value is broken up into pieces larger than a single reference.</p> <p>On the other hand, spilling is when a store instruction is inserted after every definition of the live value and a load instruction before each use. This can incur a higher runtime cost, but it breaks up the live value into more pieces. We hope that the spill stays in the cache, meaning that, paradoxically, a spilled value should be accessed frequently enough to keep it in the cache.</p> <p>To decide if splitting or spilling is used, the compiler tries to estimate the cost of each:</p> <ul> <li>Spilling can be calculated with: \\((addressComputationCost + memoryOperationCost)\\cdot estimatedExecutionFrequency\\)</li> <li></li> </ul>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/10_Register%20Allocation.html#chaitins-algorithm","title":"Chaitin's Algorithm","text":"<ol> <li>While existing vertices with \\(&lt; k\\) neighbours in \\(G_I\\)</li> <li>Pick any vertex \\(n\\) whose degree is less than \\(k\\) and put it on the stack</li> <li>Remove that vertex and all edges incident to it from \\(G_I\\) (This will lower the degree of \\(n\\)'s neighbours')</li> <li>If \\(G_I\\) is still non-empty (all vertices have \\(k\\) or more neighbours), then:</li> <li>Pick a vertex \\(n\\) (using some heuristic) and spill the live range associated with \\(n\\)</li> <li>Remove vertex \\(n\\) from \\(G_I\\), along with all edges incident to it and put it on the stack</li> <li>If this causes some vertex in \\(G_I\\) to have fewer than \\(k\\) neighbours, then go to step 1; otherwise repeat step 2</li> <li>Successively pop vertices of the stack and colour them in the lowest colour not used by some neighbour (since the colours are ordered, the lowest colour is the \"smallest\" free color)</li> <li>Spill or split uncoloured nodes and build the new \\(G_I\\) and start over</li> </ol> <p>TODO: Insert both example</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/11_Instruction%20Scheduling.html","title":"Instructions Scheduling","text":"<p>Different instructions take different amount of cycles to complete.</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/11_Instruction%20Scheduling.html#the-task-of-instructions-scheduling","title":"The Task of Instructions Scheduling","text":"<p>The goal is to reorder instruction to maximise:</p> <ul> <li>The amount of spill</li> <li>...TODO</li> </ul> <p>Importantly, this mustn't change the behaviour of the code.</p> <p>To do this, a dependency graph of the instructions is built. Additionally, it is important to consider anti-dependence. This occures when \\(n_1\\) appears before \\(n_2\\) and \\(n_2\\) outputs result to a register that \\(n_1\\) uses for its operands (in the following example <code>d</code> and <code>e</code>). An anti-dependence cannot be reordered. However, anti-dependency can be resolved by renaming registers to remove the anti-dependence.</p> <p>TODO: Insert example</p> <p>A correct schedule \\(S\\) maps each \\(n \\in \\mathbb N\\) into a non-negative integer representing its cycle number, and:</p> <ol> <li>if \\((n_1, n_2)\\) is one depdence edge, \\(S(n_1) + delay(n_1) \\le S(n_2)\\)</li> <li>for each type \\(t\\), there are no more operations of type \\(t\\) in any cycle that the target machine can issue</li> </ol> <p>The length of a schedule \\(S\\), denoted \\(L(S)\\), is $$ L(S) = \\max_{n\\in \\N}(S(n) + delay(n)) $$ A schedule \\(S\\) is time-optimal, if \\(L(S) \\le L(S_1)\\) for any other schedule $S_1\u00a3</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/11_Instruction%20Scheduling.html#big-picture-algorithm","title":"Big Picture Algorithm","text":"<ol> <li>Build a dependence graph \\(P\\)    Walk the def-use dependencies of a basic block from the back</li> <li>Compute a priority function over the nodes in \\(P\\)</li> <li>Use list scheduling to construct a schedule, one cycle at a time</li> <li>Use a queue o operations that are ready</li> <li>At each cycle<ol> <li>Choose a ready operation and schedule it</li> <li>Update the ready queue</li> </ol> </li> </ol> <p>A priority function might be the weight of the longest latency-weighted path from a root node to this node</p> <p>The last step can be computed with the following argument.</p> <p>The following variables are defined in the following way:</p> <ul> <li>\\(cycle\\) is a counter</li> <li>\\(ready\\) is a set of instructions which are ready to be schedule</li> <li>\\(active\\) is a priority queue sorted by the priority of step 2</li> </ul> <p>The following describes the algorithm:</p> <ol> <li>\\(cycle \\leftarrow 1\\)</li> <li>\\(ready \\leftarrow \\text{leaves of } P\\)</li> <li>\\(active \\leftarrow \\emptyset\\)</li> <li>while(\\(ready \\cup active \\neq \\emptyset\\)) </li> <li>if(\\(ready \\neq \\emptyset\\))<ol> <li>remove an op from \\(ready\\)</li> <li>\\(S(op) \\leftarrow cycle\\)</li> <li>\\(active \\leftarrow active \\cup op\\)</li> </ol> </li> <li>\\(cycle \\leftarrow cycle + 1\\)</li> <li>for each \\(op \\in active\\)<ol> <li>if \\(S(op) + delay(op) \\le cycle\\)<ol> <li>remove \\(op\\) from \\(active\\)</li> <li>for each successor \\(s\\) of \\(op\\) in \\(P\\)<ol> <li>if \\(s\\) is ready then \\(ready \\leftarrow ready \\cup s\\)</li> </ol> </li> </ol> </li> </ol> </li> </ol>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/1_Introduction.html","title":"Introduction","text":"<p>What is a compiler?</p> <p>A fundamental tool for analysing and transforming programs often with a goal to enhance the quality of a program.</p> <p>This leaves, what is quality? Examples can include speed, energy, power, code size, memory footprint, reliability, security, resilience, readability, extensible, ...</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/1_Introduction.html#three-pass-compiler","title":"Three-pass Compiler","text":"<p>A three-pass compiler has roughly three components. </p> <p>The front end maps legal source code into intermediate representation (IR). It should be \\(O(n)\\) or \\(O(n \\log n)\\).</p> <p>The back end maps IR into the target machine code. The back end is usually equivalent to a NP complete hard problem.</p> <p>Because of this structure, there can be multiple front end to support multiple source languages and multiple back ends to support multiple target machine code.</p> <p>The middle end optimises the IR. </p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/1_Introduction.html#the-front-end","title":"The Front End","text":"<p>The front end consists of the scanner and the parser, both report errors.</p> <p>The scanner maps a character stream into tokens. For example <code>x = x + 2;</code> becomes <code>&lt;id,x&gt; = &lt;id,x&gt; + &lt;number,2&gt; ;</code>. </p> <p>The parser takes the token stream from the scanner and creates an parse tree or syntax tree. The parser recognises a context-free syntax. </p> <p>For example the following grammar could be translated by a parser:</p> <pre><code>goal -&gt; expr\nexpr -&gt; expr op term \n        | term\nterm -&gt; NUMBER | ID\nop -&gt; \"+\" | \"-\"\n</code></pre> <p>(all upper case words are terminal tokens from the scanner)</p> <p>This will be transformed in the following parse tree:</p> <p></p> <p>The parse tree is too big and contains too many details to be used efficiently. Because of this a parse tree is transformed into an abstract syntax tree (AST), which summarises grammatical structure, without including details about the derivation. An AST is one IR form. </p> <p></p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/1_Introduction.html#the-middle-end","title":"The Middle End","text":"<p>The middle end's primary goal is to improve the running time of the compiled code, but might also improve other properties. One important property of a middle end is that is must preserve the meaning of the code (however, the definition of meaning varies).</p> <p></p> <p>The middle end is structured in a series of passes. Each pass has one goal</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/1_Introduction.html#the-back-end","title":"The Back End","text":"<p>The back end translates the IR into the target's machine code.</p> <p></p> <p>The back end needs to decide which instructions to use for each IR operation, which values to keep in the registers and ensure the conformance with system interfaces (e.g. calling convention, ...).</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/2_Scanner.html","title":"Scanner","text":""},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/2_Scanner.html#fine-automaton-fa","title":"Fine Automaton (FA)","text":"<p>An FA is defined by the file-tuple \\((S, A, T, s_0, S_F)\\), where</p> <ul> <li>\\(S\\) is the set of states</li> <li>\\(A\\) is the alphabet</li> <li>\\(T\\) is a function that takes the current state and the current input character as an argument and returns another state </li> <li>\\(s_0\\in S\\) is the start state</li> <li>\\(S_F \\in S\\) the final state</li> </ul> <p></p> <p>There is always an implicit error state, which the machine transitions to if there is no other valid state to transition into.</p> <p>A DFA and NFA are equivalent. However, when converting a NFA into a DFA the state space can blow up exponentially.</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/2_Scanner.html#regex","title":"Regex","text":"<ul> <li>\\(\\varepsilon\\) is a RE denoting the empty set</li> <li>\\(x \\mid y = L(x) \\cup L(y)\\) is an alternation and means \\(x\\) or \\(y\\)</li> <li>\\(xy = L(x)L(y)\\) is a concatenation</li> <li>\\(x^*=L(x)^*\\) is a closure and means zero or more \\(x\\) </li> </ul> <p>The kleene closure is defined as \\(L^* = \\cup_{0\\le i \\le \\infty}L^i\\), while the positive closure is defined as \\(L^+ = \\cup_{1\\le i \\le \\infty}L^i\\)</p> <p>The precedence is: closure, concatenation and then alteration.</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/2_Scanner.html#simple-scanner-from-a-dfa","title":"Simple Scanner from a DFA","text":"<pre><code>char &lt;- NextChar()\nstate &lt;- s0\nwhile (char != eof)\n    state &lt;- TransiationTable(state, char)\n    char &lt;- NextChar()\n\nif (state in finshStates)\n    ReportAcceptance()\nelse\n    ReportFailure()\n</code></pre> <p>Instead of this, scanners can also use labels and goto-statements to implement the scanner logic. While this is complex and difficult to debug, it is more permanent and good for automatically generated scanners.</p> <p>Both a scanner based on a DFA or a RE  need to continue consuming characters until the DFA reaches a final or error state or until the RE can't continue matching. Essentially, the longest possible match has to be found.</p> <p>If the DFA stops at a non-final state, the DFA should report the last encountered final state or report an error.</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/2_Scanner.html#cycle-of-construction","title":"Cycle of  Construction","text":""},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/2_Scanner.html#thompsons-construction","title":"Thompson's Construction","text":"<p>To get from RE to a NFA, Thompson's construction can be used. It is based on the idea that two NFA's can be joined with \\(\\varepsilon\\). For each operator and symbol, there is an NFA pattern, which are then joined.</p> <p></p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/2_Scanner.html#subset-construction","title":"Subset Construction","text":"<p>With the subset construction, one can convert an NFA into a DFA.</p> <p>There are two key functions:</p> <ol> <li>\\(Move(s_i, a)\\) is the set of states reachable from \\(s_i\\) by consuming the character <code>a</code></li> <li>\\(\\varepsilon-closure(s_i)\\) is the set of states reachable from \\(s_i\\) by one or more \\(\\varepsilon\\). \\(s_i\\) will always be part of the set.</li> </ol> <p></p> <p>The algorithm does the following:</p> <ol> <li>Take the \\(\\varepsilon-closure(s_0)\\) and add it to the DFA as the start state</li> <li>Take the \\(\\varepsilon cloure(Move(s_0, \\alpha))\\) for each \\(\\alpha \\in \\Sigma\\) and add it to the DFA.    Importantly, first only \\(Move(s_i, \\alpha)\\) is considered (so only states directly reachable from \\(s_i\\)), and afterwards the \\(\\varepsilon closure(...)\\) is calculated.</li> <li>Repeat 2. with the new states until no new states are added</li> <li>Mark all states which contain a final state of the NFA as final states of the DFA</li> </ol> <p></p> <pre><code>s0 = \u03b5-closure(q0);\nS.add(s0);\nWorklist.add(s0);\n\nwhile (!worklist.empty()) do\n    remove s from Wordlist;\n\n    foreach c in \u03a3 do\n        t = \u03b5-closure(move(s,c));\n        T[s,c] = t;\n        if (t \u2209 S) then\n            S.add(t);\n            worklist.add(t);\n        end;\n    end;\nend;\n</code></pre>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/2_Scanner.html#fixed-point-computation","title":"Fixed-Point Computation","text":"<ul> <li>A monotone construction of some finite set (only add to the set, never remove)</li> <li>Halts when its stops adding to the set</li> </ul>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/2_Scanner.html#hopcrofts-algorithm","title":"Hopcroft's Algorithm","text":"<p>The Hopcroft's algorithm reduces the number of states and produces a minimised DFA.</p> <p>There are two sets: \\(Q\\) with all the \"old\" states, and \\(P\\) with all the new states.</p> <ol> <li>Put all finish states in a state and add it to \\(P\\) and put all non-finish states and add it to \\(P\\)</li> <li>Take each \\(S \\in P\\) and repeat until \\(P\\) doesn't change</li> <li>Check if \\(\\alpha \\in \\Sigma\\) splits \\(S\\) into \\(S_1\\) and \\(S_2\\). If yes, replace \\(S\\) with \\(S_1\\) and \\(S_2\\) in \\(P\\)</li> </ol> <p>The  following pseudo code represents the algorithm.</p> <pre><code>P = { F, {Q without F} }\nwhile ( P is still changing)\n    T = {}\n    for each set S \u2208 P\n        remove S from P\n        T = T \u222a Split(S)\n    P = T\n\nSplit(S)\n    for each \u03b1 \u2208 \u03a3\n        if \u03b1 splits S into S1 and S2\n            then return {S1 , S2}\n    return S\n</code></pre> <p>The following diagram shows when a set of states is split:</p> <p></p> <p>The following shows an example:</p> <p></p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html","title":"Parser","text":""},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#context-free-grammar","title":"Context Free Grammar","text":"<pre><code>SheepNoise -&gt; SheepNoise baa \n            | baa\n</code></pre> <p>Formally a context-free grammar is a four tuple \\(G = (S, N, T, P)\\), where</p> <ul> <li>\\(S\\) is the start symbol</li> <li>\\(N\\) is a set of non-terminal symbol</li> <li>\\(T\\) is a set of terminal symbols</li> <li>\\(P: N \\to (N \\cup T)^+\\) is a set of productions/rewrite rules</li> </ul> <p></p> <p>A sequence of rewrites is called a derivation, while the process of discovering a derivation is called parsing.</p> <p>There are two kind of derivations:</p> <ul> <li>Leftmost derivation: replace the left most non-terminal symbol</li> <li>Rightmost derivation: replace the right most non-terminal symbol</li> </ul> <p>A derivation can also be represented in a parse tree. A natural way to compute such a tree, is to walk it in post-order (visit children before the parent).</p> <p></p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#precedence-in-derivation","title":"Precedence in Derivation","text":"<p>To add the precedence of operators to a grammar, there has to exist a non-terminal for each level of precedence. The parser then should recognise high precedence sub-expressions first.</p> <p>A grammar for mathematical expression with precedence would look like the following:</p> <pre><code>Goal    -&gt; Term\nExpr    -&gt; Expr + Term\n        |  Expr - Term\n        |  Term\nTerm    -&gt; Term * Factor\n        |  Term / Factor\n        |  Factor\nFactor  -&gt; &lt;number&gt;\n        |  &lt;id&gt;\n</code></pre> <p>The following is the leftmost derivation of the above rules of <code>x - 2 * y</code>: <pre><code>- Goal\n1 Expr\n3 Expr - Term\n4 Term - Term\n7 Factor - Term\n9 &lt;id&gt; - Term\n5 &lt;id&gt; - Term * Factor\n7 &lt;id&gt; - Factor * Factor\n8 &lt;id&gt; - &lt;number&gt; * Factor\n9 &lt;id&gt; - &lt;number&gt; * &lt;id&gt;\n</code></pre></p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#ambiguous-grammar","title":"Ambiguous Grammar","text":"<pre><code>Stmt    -&gt; \"if\" Expr \"then\" Stmt\n         | \"if\" Expr \"then\" Stmt \"else\" Stmt\n</code></pre> <p>With the above grammar, both example 1 and example 2 would be valid derivations <pre><code>// example 1\nif Expr1\n    then if Expr2\n        then Assignment1\n        else Asignment2\n\n// example 2\nif Expr1\n    then if Expr2\n        then Assignment1\n    else Asignment2\n</code></pre></p> <p>A way to disambiguate this, is the following grammar:</p> <pre><code>Stmt    -&gt; \"if\" Expr \"then\" Stmt\n         | \"if\" Expr \"then\" WithElse \"else\" Stmt\n         | OtherStmt\nWithElse -&gt; \"if\" Expr \"then\" WithElse \"else\" Stmt\n          | OtherStmt\n</code></pre>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#deeper-ambiguity","title":"Deeper Ambiguity","text":"<p>A deeper ambiguity like in Matlab <code>a = f(17)</code> <code>f</code> could be a function or an array. However, this kind of deeper context-sensitive ambiguity cannot be solved in a grammar and need to be solved at a later pass in the compiler.  </p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#parser-implementation","title":"Parser Implementation","text":"<ul> <li>LL = Left-to-right scanning, Leftmost derivation</li> <li>LR = Left-to-right scanning, Rightmost derivation</li> <li>LL(1) is a grammar with one look-adhead token</li> <li>\\(LL(1) \\subset LR(1)\\) (LL(1) is the superset of LR(1))</li> </ul>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#top-down-parser","title":"Top-Down Parser","text":"<ol> <li>Construct the root node of the parse tree</li> <li>Repeat the following steps</li> <li>At a node \\(A\\), select a production with \\(A\\) on its left-hand side and, for each symbol on its right-hand side, construct the appropriate child</li> <li>When a terminal symbol is added to the fringe and it doesn't match the fringe of input, backtrack</li> <li>Find the next node to be expanded</li> </ol> <p>Another possibility to derive the grammar can lead to an infinite loop.</p> <p></p> <p>A top-down parser cannot parse a left-recursion since it uses the leftmost derivation. However, a top down parser can handle right recursive grammars.</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#convert-left-recursion-to-right-recursion","title":"Convert Left Recursion to Right Recursion","text":"<p>The following rule can be rewritten:</p> <pre><code>Fee -&gt; Fee \"+\"\n     | \"-\"\n</code></pre> <p>The rule above can be rewritten into the following:</p> <pre><code>Fee -&gt; \"-\" Fie\nFie -&gt; \"+\" Fie\n     | \"\"       // empty string\n</code></pre> <p>Both of these grammar accept the same input, but the latter one is right recursive and can be parsed by a top down parser.</p> <p></p> <p>An algorithm to eliminate left recursion is:</p> <ol> <li>arrange the non-terminals into some order \\(A_1, A_2, ..., A_n\\)</li> <li>for \\(i \\leftarrow 1\\) to \\(n\\)</li> <li>for \\(s \\leftarrow 1\\) to \\(i - 1\\)<ol> <li>replace each production \\(A_i \\to A_s\\gamma\\) with \\(A_i \\to \\delta_1 \\gamma \\mid \\delta_2\\gamma \\mid ... \\mid \\delta_k\\gamma\\), where \\(A_s \\to \\delta_1 \\mid \\delta_2 \\mid ... \\mid \\delta_k\\) are all the current productions for \\(A_s\\)</li> </ol> </li> <li>rewrite the productions to eliminate any direct left recursion</li> </ol> <p>(This assumes that the initial grammar has no cycles and no epsilon productions)</p> <p>The following example has an indirect left recursion (E -&gt; T -&gt; E ~ T -&gt; T ~ T -&gt; E ~ T ~ T ...):</p> <pre><code>G -&gt; E\nE -&gt; E + T\nE -&gt; T\nT -&gt; E ~ T\nT -&gt; \"id\"\n</code></pre> <p>Running the algorithm yields the following:</p> <ol> <li>The order of the non-terminal symbols is: \\(G, E, T\\)</li> <li>\\(G\\) isn't rewritten since they are no symbols before \\(G\\) and it isn't directly left recursive</li> <li>\\(E\\) is rewritten to \\(E \\to T E'; E' \\to T E' \\mid \\varepsilon\\) </li> <li>\\(T\\) follows \\(A_i \\to A_s\\gamma\\) it is subsituded by \\(T \\to T E' ~T\\)</li> <li>Additionally \\(T\\) has a direct recursion: \\(T \\to id T'; T' \\to E' \\sim T T'; T' \\to \\varepsilon\\)</li> </ol> <p>All of these rewrites and substitutions yield the following result:</p> <pre><code>G   -&gt; E\nE   -&gt; T E'\nE'  -&gt; + T E'\nE'  -&gt; \"\"           // empty string\nT   -&gt; \"id\" T'\nT'  -&gt; E' ~ T T'\nT'  -&gt; \"\"           // empty string\n</code></pre> <p>To eliminiate \\(\\varepsilon\\)-productions, one can replace the \\(\\varepsilon\\)-production where it occures.</p> <pre><code>A -&gt; Bb\nB -&gt; C\nB -&gt; a\nB -&gt; \"\"\n// this can be written as\nA -&gt; Cb\nA -&gt; ab\nA -&gt; b\n</code></pre>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#another-example","title":"Another Example","text":"<pre><code>A   -&gt; B x\nB   -&gt; C y\nC   -&gt; A z | z\n</code></pre> <ol> <li>Order \\(A, B, C\\)</li> <li></li> </ol>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#ll1-grammar","title":"LL(1) Grammar","text":"<p>The set \\(FIRST(\\alpha)\\) contains all the tokens which appear as the first symbol in some string that derives from \\(\\alpha\\). This also includes \\(\\varepsilon\\).</p> <p></p> <p>If \\(A \\to \\alpha\\) and \\(A \\to \\beta\\) both appear in the grammar, we would like \\(FIRST(\\alpha) \\cup FIRST(\\beta) = \\{\\}\\). This allows the parser to make a correct choice with a look-ahead symbol of exactly one symbol, if there are no \\(\\varepsilon\\)-productions.</p> <p>If \\(A \\to \\alpha\\), \\(A \\to \\beta\\)  and $\\varepsilon \\in FIRST(\\alpha) $, then \\(FIRST(\\beta)\\) needs to be disjointed from \\(FOLLOW(\\alpha)\\) as well. \\(FIRST^+(\\alpha)\\) is defined as \\(FIRST(\\alpha) \\cup FOLLOW(\\alpha)\\) if \\(\\varepsilon \\in FIRST(\\alpha)\\). Otherwise it is just \\(FIRST(\\alpha)\\).</p> <p>More formally, a grammar is \\(LL(1)\\) if \\(FIRST^+(\\alpha) \\cup FIRST^+(\\beta) = \\{\\}\\) needs to hold.</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#left-factoring","title":"Left Factoring","text":"<p>A grammar can be transformed into a LL(1) grammar with the left factoring algorithm.</p> <p>In the output of this algorithm, \\(\\varepsilon\\)-productions are allowed.</p> <ol> <li>\\(\\forall A \\in NT\\)</li> <li>find the longest prefix \\(\\alpha\\) that occurs in two or more right-hand sides of \\(A\\)</li> <li>if \\(\\alpha \\neq \\varepsilon\\) then replace all of the \\(A\\) productions \\(A \\to \\alpha \\beta_1 \\mid \\alpha \\beta_2 \\mid .. \\mid \\alpha \\beta_n \\mid \\gamma\\) with \\(A \\to \\alpha Z \\mid \\gamma\\) and \\(Z \\to \\beta_1 \\mid \\beta_2 \\mid ... \\mid \\beta_n\\)</li> <li>repeat until no common prefixes remain</li> </ol> <p>A context free grammar which has the possibility to have an unbounded number of characters before the parser can decide to use \\(A\\) or \\(B\\), then the context free grammar cannot be an LL(1) grammar.</p> <p></p> <p></p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#recursive-decent-parsing","title":"Recursive Decent Parsing","text":"<ol> <li>Build \\(FIRST\\) AND \\(FOLLOW\\) SETS</li> <li>Massage grammar to have LL(1) condition</li> <li>Remove left revursion</li> <li>Left factor it</li> <li>Define a procedure for each non-terminal</li> <li>Implement a case for each right-hand side</li> <li>Call procedures as needed for non-terminals</li> <li>Add extra code, as needed</li> <li>Perform context-sensitive checking</li> <li>Build an IR to record the code</li> </ol> <p>For a grammar like below, the parser would look like the following:</p> <p></p> <pre><code>def Expr():\n    if Term() == False: return False\n    else: return EPrim()\n\ndef TPrime():\n    if word == \"*\" or word == \"/\":\n        word = NextWord()\n        if Factor() == False:\n            return False\n        else: \n            return TPrime()\n\ndef Factor():\n    if word == \"(\":\n        word = NextWord()\n        if Expr() == False:\n            return False\n        else:\n            ...\n</code></pre>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#table-driven-top-down-parser","title":"Table-Driven Top-Down Parser","text":"<p>There is a table with a row for ever non-terminal and a column for every terminal.</p> <p>To fill the table \\(TABLE[X, y], X \\in NT, y \\in T\\).</p> <ol> <li>entry is the rule \\(X \\to \\beta\\), if \\(y \\in FIRST(\\beta)\\)</li> <li>entry is the rule \\(X\\to \\beta\\), if \\(y \\in FOLLOW(X)\\) and \\(X\\to\\varepsilon \\in G\\)</li> <li>otherwise, the entry is an error</li> </ol> <p></p> <p>The following pseudo-code shows how the table is used:</p> <pre><code>token &lt;- next_token()\npush EOF onto stack\npush the start symbol, S, onto the stack\nTOS &lt;- top of stack\n\nloop forever {\n    if(TOS == EOF &amp;&amp; token == EOF) {\n        report success\n        break\n    } else if(TOS is terminal) {\n        if(TOS matches token) {\n            pop stack\n            token &lt;- next_token()\n        } else {\n            report error looking for TOS\n        }\n    } else {\n        if(TABLE[TOS, token] is (A -&gt; B\u00b9B\u00b2...B^k)) {\n            pop stack\n            push (B^k, ..., B\u00b2,B\u00b9) # in that order\n        } else {\n            report error expanding TOS\n        }\n    }\n        TOS &lt;- top of stack\n}\n</code></pre>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#lr1-grammar","title":"LR(1) Grammar","text":""},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#bottom-up-lr1-parser","title":"Bottom-Up LR(1) Parser","text":"<p>Bottom-up parsers use handles to decide which rule to use. A handle is a substring \\(\\beta\\) in the right-hand side of some production \\(A \\to \\beta\\). A grammar \\(G\\) is unambiguous, if every sentential form in the rightmost derivation has a unique handle.</p> <p>An LR(1) parsers are table-driven, shift-reduce parsers which look ahead one token to disambiguate reduce and shift actions. An LR(1) parser recognises languages that have an LR(1) grammar.</p> <pre><code>push INVALID\npush start state;\ntoken \u2190 next_token( )\nwhile (true) do;\n    state \u2190 top of stack;\n    if Action[state, token] = \u201creduce A\u2192\u03b2\u201d then begin;\n        pop 2x|\u03b2| symbols;\n        state \u2190 top of stack;\n        push A;\n        push Goto[state, A];\n    end;\n    else if Action[state,token] = \u201cshift si\u201d then begin;\n        push token ;\n        push si;\n        token \u2190 next_token( );\n    end;\n    else if Action[state, token] = \u201caccept\u201d\n        then break;\n    else Fail();\nend;\nreport success;\n</code></pre> <p>(The reason why the token is pushed, is for book-keeping reason. Otherwise no parse tree could be generated. However, they are always pushed and popped in pairs and could also be represented as a tuple)</p> <p></p> <p></p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#build-an-ast-during-parsing","title":"Build an AST during Parsing","text":""},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#estimate-cycle-counts","title":"Estimate Cycle Counts","text":"<pre><code>Goal    -&gt; Expr                 $$ = $1\nExpr    -&gt; Expr + Term          $$ = MakeAddNode($1, $3)\n        |  Expr - Term          $$ = MakeSubNode($1, $3)\n        |  Term                 $$ = $1\n\nTerm    -&gt; Term * Factor        $$ = MakeMulNode($1, $3)\n        |  Term / Factor        $$ = MakeDivNode($1, $3)\n        |  Factor               $$ = $1      \n\nFactor -&gt; ( Expr )              $$ = MakeParNode($2)\n        | number                $$ = MakeNumNode($1)      \n        | id                    $$ = MakeIdNode($1)  \n</code></pre>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#build-lr1-tables","title":"Build LR(1) Tables","text":"<p>There are two steps:</p> <ol> <li>Determine the states from a given grammar</li> <li>Fill the actions for each state into the ACTION-table, and fill the GOTO-table with the state-transitions following reductions</li> </ol> <p>An LR(1) item \\([A \\to \\beta \\textbullet\\gamma, a]\\) represents that the parser is currently matching \\(A\\), has just parsed \\(\\Beta\\) and expects to see \\(\\gamma\\) next. The \\(\\textbullet\\) represents where the parser currently is. \\(a\\) is what is expected after \\(A\\) has been matched. Each state is composed of multiple LR(1) items.</p> <p>A master item is the initial state LR(1) item or an item directly derived from other states.</p> <p>Help items are from the expasion of existing items and are used for deriving itmes of other states</p> <p>The canonical collection is the set of all states </p> <ol> <li>Begin with the initial state master item \\([S' \\to \\textbullet S, EOF]\\) and get its help items with the \\(closure\\)-function. The master item and its help item for the first state \\(s_0\\)</li> <li>For each symbol in the grammar, compute the master items of the next state with the \\(goto\\)-function and get the help items with the \\(closure\\)-function. This forms the next state \\(s_{next}\\)</li> </ol> <p>The \\(closure(s)\\) function:</p> <ol> <li>while (\\(s\\) is still changing)</li> <li>for each item \\([A \\to \\beta \\textbullet C\\delta, a]\\in s\\)<ol> <li>for each production \\(C \\to \\gamma \\in P\\)<ol> <li>for each \\(b \\in FIRST(\\delta a)\\)<ol> <li>\\(s \\to s \\cup \\{[C \\to \\textbullet\\gamma, b]\\}\\)</li> </ol> </li> </ol> </li> </ol> </li> <li>returns \\(s\\)</li> </ol> <p></p> <p>with the following grammar: </p> <p>The \\(goto(s, x)\\) function:</p> <ol> <li>\\(moved \\leftarrow \\emptyset\\)</li> <li>for each item \\(i \\in s\\)</li> <li>if the form of \\(i\\) is \\([\\alpha \\to \\beta \\textbullet x\\delta, a]\\) then<ol> <li>\\(moved \\leftarrow moved \\cup \\{[\\alpha \\to \\beta x \\textbullet \\delta, a]\\}\\)</li> </ol> </li> <li>return \\(closure(moved)\\)</li> </ol> <p></p> <p>To create all of the different states, the following algorithm can be used:</p> <ol> <li>\\(cc_0 \\leftarrow \\emptyset\\)</li> <li>for each production of the form \\(Goal \\to \\alpha\\) do</li> <li>\\(cc_0 \\leftarrow cc_0 \\cup \\{Goal \\to \\textbullet \\alpha, eof\\}\\)</li> <li>\\(cc_0 \\leftarrow closure(cc_0)\\)</li> <li>\\(CC \\leftarrow \\{cc_0\\}\\)</li> <li>while (new sets are still being added to \\(CC\\)) do</li> <li>for each unmarked set \\(cc_i \\in CC\\) do<ol> <li>mark \\(cc_i\\) as processed</li> <li>for each \\(x\\) following a \\(\\textbullet\\) in an item in \\(cc_i\\) do<ol> <li>\\(temp \\leftarrow goto(cc_i, x)\\)</li> <li>if \\(temp \\notin CC then\\)<ol> <li>\\(CC \\leftarrow CC \\cup \\{temp\\}\\)</li> </ol> </li> <li>record transition from \\(cc_i\\) to \\(temp\\) on \\(x\\)</li> </ol> </li> </ol> </li> </ol> <p>To fill the action table, the following algorithm can be used:</p> <ol> <li>for each state \\(cc_i \\in CC\\)</li> <li>for each item \\(i \\in cc_i\\)<ol> <li>if \\(i\\) is \\([A \\to \\beta \\textbullet c \\gamma, a]\\) and \\(goto(cc_i, c) = cc_j\\) then<ol> <li>\\(Action[i, c] \\leftarrow \\text{\"shift }j\\text{\"}\\)</li> </ol> </li> <li>else if \\(i\\) is \\([A \\to \\beta \\textbullet, a]\\) then<ol> <li>\\(Action[i, a] \\leftarrow \\text{\"reduce } A \\to B\\text{\"}\\)</li> </ol> </li> <li>else if \\(i\\) is \\([Goal \\to \\beta \\textbullet, eof]\\) then<ol> <li>\\(Action[i, eof] \\leftarrow \\text{\"accept\"}\\)</li> </ol> </li> </ol> </li> <li>for each \\(n \\in NT\\) do<ol> <li>if \\(goto(cc_i, n) = cc_j\\) then<ol> <li>$Goto[i, n] \\leftarrow $j</li> </ol> </li> </ol> </li> </ol>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#ad-hock-translation","title":"Ad-Hock Translation","text":"<p>TODO</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#attribute-grammar","title":"Attribute Grammar","text":"<p>(Note: The attribution rules for a production doesn't necessarily being run in sequence)</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/3_Parser.html#circularity","title":"Circularity","text":"<p>A strongly non-circular grammar (SNC) is a grammar which can only generate instances with asyclic dependency graphs. This property can be tested in polynomial time. However, failing the test just means that it was inconclusive (not that the graph is not an SNC).</p> <p>TODO: Insert of cyclic grammar</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/4_IR.html","title":"IR","text":"<p>Between all the stages and passes, there is an IR. </p> <p>Commonly used IRs:</p> <ul> <li>AST</li> <li>DAG</li> <li>Stack machine code</li> <li>Three address code</li> <li>Control-flow graph (CFG)</li> <li>Static single assignment (SSA)</li> </ul> <p>There are some common properties:</p> <ul> <li>Level of Abstraction:   How much above assembly is it (e.g. AST vs linear code)</li> <li>Structural (Graphically vs Linear vs Hybrid)</li> <li>TODO</li> </ul> <p>In general, IRs don't have loops and use <code>GOTO</code> statements to replicate the control-flow.</p> <p>Usually, over the process of compilation, the abstraction level of the IR lowers.</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/4_IR.html#abstract-syntax-tree","title":"Abstract Syntax Tree","text":"<p>TODO: Include example of parse tree and AST</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/4_IR.html#directed-acyclic-graph-dag","title":"Directed Acyclic Graph (DAG)","text":"<p>A DAG is an AST, where expressions can be shared between two trees. It makes sharing explicit and encodes that redundency.</p> <p>TODO Insert example of AST and DAG</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/4_IR.html#stack-machine-code","title":"Stack Machine Code","text":"<p>For example, <code>x - 2 * y</code> becomes:</p> <pre><code>push x\npush 2\npush y\nmultiply\nsubtract\n</code></pre>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/4_IR.html#three-address-code","title":"Three Address Code","text":"<p>Every statement has the form <code>x &lt;- y op z</code> and has one operator (<code>op</code>) and, at most, three names (<code>x</code>, <code>y</code>, <code>z</code>).</p> <p>Example: <code>z &lt;- x - 2 * y</code></p> <pre><code>t &lt;- 2 * y\nz &lt;- x - t\n</code></pre> <p>This introduces new names, which can serve as a jumping of point for further optimisations.</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/4_IR.html#control-flow-graph","title":"Control-flow Graph","text":"<p>A control-flow graph models how the control flows through the program. It is a graph, where each node is a sequence of straight-line code (with no jumps).</p> <p>TODO: Insert control-flow graph example</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/4_IR.html#static-single-assignment-ssa","title":"Static Single Assignment (SSA)","text":"<p>The main idea is that each name is defined. To deal with the ambiguity, the \\(\\phi\\)-function is introduce. It marks where a reference can come from multiple variables. </p> <p>This simplifies the analysis, where a value comes from, since each variable is defined exactly once.</p> <p>TODO: Add original and SSA-form example</p> <p>Importantly, the \\(\\phi\\) function is never implemented. Instead the compiler will remove the \\(\\phi\\) function entirely by undoing the translation to SSA.</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/5_LLVM.html","title":"LLVM","text":""},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/5_LLVM.html#llvm-ir","title":"LLVM IR","text":"<p>It is similar to assembly, but at a higher abstractions.</p> <ul> <li>There are unlimited register (e.g. <code>%2</code>, <code>%3</code>, ...)</li> <li>LLVM IR has a fully type system for describing data</li> <li>Register names must follow the SSA form</li> <li></li> </ul>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/5_LLVM.html#types","title":"Types","text":"<p>There are various different types:</p> <ul> <li>Integers: <code>i8</code>, ...</li> <li>Floats: </li> <li>Vectors</li> <li>Structs</li> <li>Pointers</li> </ul>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/5_LLVM.html#examples-1","title":"Examples #1","text":"<ul> <li><code>align x</code>: the address has to be a multiple of <code>x</code></li> <li>As a convention: <code>%id</code> are usually used for types and registers, <code>@id</code> are used for global variables</li> </ul>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/5_LLVM.html#example-2","title":"Example #2","text":"<ul> <li>there is no explicit stack. LLVM will take care of this when generating the code</li> </ul>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/5_LLVM.html#example-3-pointers","title":"Example #3 - Pointers","text":"<pre><code>int *ptr;\nptr = ptr + 1;\n</code></pre> <pre><code>%ptr = alloca i32*\n%1 = load i32** %ptr\n%2 = getelementptr i32* %1, i64 1\nstore i32* %2, i32** %ptr\n</code></pre> <ul> <li>To do any pointer arithmentic, one has to use the <code>getelementptr</code> instruction</li> <li><code>load i32**</code> needs two <code>*</code>, since it loads the value of the pointer.</li> </ul>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/6_Procedure%20Abstraction.html","title":"Procedure Abstraction","text":"<ul> <li> <p>External interface   Allow codue reuse and development of library</p> </li> <li> <p>Control abstraction, including   Well defined entries and exits</p> </li> <li> <p>Clean name spaces</p> </li> </ul> <p>Clean slate for writing locally visible names</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/6_Procedure%20Abstraction.html#calling-conventions","title":"Calling Conventions","text":"<ul> <li>Call-by-value</li> <li>Call-by-reference (e.g. FORTRAN77)   Instead of coping a parameter, an address is actually passed to the callee. Modifications to the parameters will be reflected in the original variable.</li> <li>Call-by-name (Algo60, Scala)   In the body of the procedure, the parameter names will be replaced by the actual parameters given to the procedure. It works similar to a function-macro in C.   One interesting consequence, if <code>a[i]</code> is passed in, and <code>i</code> is change during the execution of the procedure, then the element accessed by <code>a[i]</code> will change as well.</li> </ul> <p>Hardware doesn't support the full procedure abstractions (like entries &amp; exits, interfaces, call &amp; return mechanism, name space, nested scope). Instead the abstraction needs to be supported by the assembly code generated by the compiler.</p> <ul> <li>The original state needs before the jump needs to be stored </li> <li>The arguments need to be passed in</li> <li>Local variables need to be allocated</li> <li>After the procedure, the original state needs to be restored</li> </ul>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/6_Procedure%20Abstraction.html#procedure-activation-record","title":"Procedure Activation Record","text":"<p>The procedure activatioon record is refered to by <code>AR</code>. The <code>ARP</code> refers to either the address of the <code>AR</code> or a special register, in which the address of the <code>AR</code> is stored.</p> <p>These records are created, used and destroyed during run-time and store the necessary information for procedure calls.</p> <p></p> <p>(Note: the caller's AR is used to access information (like variables) of the caller and to restore the AR of the caller. For this the pointer is required, since the AR has a variable size due to the local variables)</p> <p>To allocate variable length data, the compiler creates a special place in the heap for variable-length data. Then the compiler will create a pointer variable from the local variables to the variable-length data.</p> <p>TODO: Insert Variable-length Data Placement diagram</p> <p><code>Addressability</code> is used to access the immediately lexical scope. This can be used for a function to access variables from its immediately enclosing function. However, this doesn't wouldn't support full closures, like JS would.</p> <p>TODO: Insert Addressability example</p> <p>The <code>return address</code> contains the address of the instruction to which will be jumped after the function finished.</p> <p>When <code>f()</code> calls <code>g()</code>, then <code>f</code> allocates space for the return value somewhere, and stores the address in the <code>returned value</code> of the AR. The callee, <code>g</code> in this case, would access this address via the <code>caller's AR</code> field in its AR.</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/6_Procedure%20Abstraction.html#procedure-linkages","title":"Procedure Linkages","text":"<p>TODO: Insert standard procedure linkage diagram</p> <p>The prolog is at the start of each procedure, while the epilog is at the end of a procedure. The pre-call and post-call are invoked right before jumping to a function, and right after the function returned. </p> <p>TODO: check if ARP are not AR and reverse</p> <p>The pre-call helps preserve its own environment.</p> <ul> <li>Sets up the callee's basic ARP. However, the local variables are is left to the callee (since the caller might not even see the code of the callee). </li> <li>Each parameter is evaluated and the value or address is stored</li> <li>The return address and TODO</li> </ul> <p>The <code>prolog</code> does the following:</p> <ul> <li>Finish setting up the callee`s environment (like setting up the local variables)</li> <li>Preserve any callee-saved registers</li> </ul> <p>The <code>epilog</code> does wind up the business of the callee and start restoring the caller's environment:</p> <ul> <li>(Store the modified variables in registers to their respective addresses)</li> <li>Store the return value</li> <li>Restore the callee-saved registers</li> <li>Free space for local data, if necessary (on the heap)</li> <li>Load the return address from the AR</li> <li>Restore the caller's ARP register to its AR</li> <li>Jump to the return address</li> </ul> <p>The <code>post-return</code> sequence finishs restoring the caller's environment and places any value back where it belongs:</p> <ul> <li>Free the callee's AR </li> <li>Restore TODO</li> </ul> <p>TODO: add example for call-by-refernce</p> <p>Callee-saved registers are good for long-lived values, while caller-saved registers are good for short-lived values.</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/7_Optimisations.html","title":"Optimisations","text":"<p>TODO: Add picture of all machine independend transformations</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/7_Optimisations.html#source-of-inefficiencies","title":"Source of Inefficiencies","text":"<p>A big source is the programmer itself.</p> <p>However, the compiler also contributes a fair number of inefficiencies:</p> <ul> <li>Source-language abstraction (e.g. array  references)</li> <li>Context-insensitive processing</li> <li>Side effects of optimisation passes</li> </ul>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/7_Optimisations.html#function-inlining","title":"Function Inlining","text":"<p>One downside of inlining a lot function, is that code size is a lot larger as for every call side the function code is duplicated.</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/7_Optimisations.html#instrumentation","title":"Instrumentation","text":"<p>If one wants to observe a program, it needs to instrument it. This will add code to the program, which will help to observe the program.</p> <p>TODO: Insert instrumentation example</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/7_Optimisations.html#loop-unrolling","title":"Loop Unrolling","text":"<pre><code>for(j = 0; j &lt; n2; j++) {\n    for(i = 0; i &lt; n1; i++) {\n        y(i) = y(i) + x(j) * m(i, j);\n    }\n}\n</code></pre> <p>TODO: ...</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/8_Code%20Shape.html","title":"Code Shape","text":"<p>To generate IR, a compiler can do a tree walk and emit the necessary instructions for each node. This is mostly a bottom-up tree walk. An alternative strategy is to do ad-hoc translation and define rules for each context-free grammar rule.</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/8_Code%20Shape.html#parameters","title":"Parameters","text":"<p>TODO</p> <p>To reduce register usage, the compiler should generate the instructions with a lot of parameters first.</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/8_Code%20Shape.html#mixed-type-operators","title":"Mixed Type Operators","text":"<p>If there is an operation which can deal with mixed typed parameters, a conversion table can be constructed. </p> + Integer Real Integer Integer Real Real Real Real <p>Most languages have symmetrical conversion tables.</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/8_Code%20Shape.html#register-or-storage","title":"Register or Storage","text":"<p>A value can be loaded into a register and kept there for multiple calculation. However, there are situations where this causes errors. A compiler is only allowed to keep a value in a register, if there is only one name for that variable. As soon as there are pointers involved, the correctness can be in jeopardy. </p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/8_Code%20Shape.html#assignment","title":"Assignment","text":"<p>When generating code for an assignment statement of the form <code>lhs = rhs</code>, if </p> <ul> <li><code>lhs</code> is a register, move <code>rhs</code> into <code>lhs</code></li> <li><code>lhs</code> is an address, store <code>rhs</code> at the memory address of <code>rhs</code></li> </ul> <p>If <code>rhs</code> is a scalar value (like an int), then it can be stored in a register. If, however, <code>rhs</code> is some aggregate data type (like a <code>struct</code>, <code>class</code> or similar), then it needs to be stored in memory. </p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/8_Code%20Shape.html#arrays","title":"Arrays","text":"<p>TODO: insert arrays data layout graphics</p> <p>For <code>a[i]</code>, the following calculations needs to be made: \\(base(A) + (i - low) \\cdot sizeof(A[1])\\)</p> <p>For two multi dimensional array, it depends how the rows are accessed:</p> <ul> <li>Row-major order:   \\(base(A) + ((i_1 - low_1) \\cdot (hight_1 - ))\\)</li> </ul> <p>However, this can be optimised by factoring out part of the calculation:</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/8_Code%20Shape.html#control-flow","title":"Control Flow","text":""},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/8_Code%20Shape.html#if","title":"If","text":"<p>Most instruction sets compare against zero (e.g. <code>cmp_LT rx, ry</code>) and then set specific flags based on the comparison. </p> <p>Sometimes an instruction set also contains instructions for conditional move, where depending on a comparison, one value is assigned over another.</p> <p>A third control flow related instruction is that a instruction is only executed in certain comparisons.</p> <p>A disadvantage of jumps is that they can cause bubbles in the the pre-fetch pipeline. Conditional moves and predicated execution avoids this by not jumping.</p> <p>These instructions can be used for example:</p> <p><code>if (x &lt; y) then stmt1 else stmt2</code> could be translated into the following:</p> <pre><code>cmp_LT  rx, ry -&gt; r1\ncbr     r1 -&gt; _stmt1, _stmt2\n</code></pre> <p>A more complex example:</p> <pre><code>if(x &lt; y) {\n    a = c + d;\n} else {\n    a = e + f\n}\n</code></pre> <pre><code>    cmp_LT  rx, ry -&gt; r1\n    cbr     r1, L1, L2 ; cbr = conditional branch\nL1: add rc, rd -&gt; ra\n    br L0\nL2:\n    add re, rf -&gt; ra\n    br L0\nL0: NOP\n</code></pre> <p>Another way is to use conditional moves:</p> <pre><code>cmp     rx, ry -&gt; cc1\nadd     rc, rd -&gt; r1\nadd     re, rf -&gt; r2\ni2i_LT  cc1, r1, r2 -&gt; ra # conditional move. only moves if cc is lt\n</code></pre> <p>Or it could be translated with predicate execution instructions:</p> <pre><code>        cmp_LT  rx, ry -&gt; r1\n(r1)?   add     rc, rd -&gt; ra\n(!r1)?  add     re, rf -&gt; ra\n</code></pre> <p>(predicate execution is usually implemented by still computing the instruction, but not committing the value)</p> <p>In the example of <code>x = a &lt; b &amp;&amp; c &lt; d</code>, boolean compare produces much better code. The following code uses jump instructions:</p> <pre><code>    cmp ra, rb \n    ...\n</code></pre> <p>While the following code uses </p> <pre><code>cmp_LT  ra, rb -&gt; r1\ncmp_LT  rc, rd -&gt; r2\nand     r1, r2 -&gt; rx\n</code></pre> <p>If the instructions are independent, jumps might be better, since multiple processing unit can process instructions independently. </p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/8_Code%20Shape.html#loops","title":"Loops","text":"<p>TODO: Insert basic loop structure flow diagram</p> <p>TODO: Insert code example</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/8_Code%20Shape.html#switch-statement","title":"Switch Statement","text":"<ol> <li>One way is to just linearly search through the entire (for a small amount of cases)</li> <li>Build a table where the value is the jump address. The program can then do a binary search over the keys, which represent the case expression (for a lot of cases which are not dense)</li> <li>Build a jump table; compute the memory address in the jump table and then jump there (for a lot of dense cases)</li> </ol>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/8_Code%20Shape.html#procedure","title":"Procedure","text":"<p>(See Procedure Abstraction)</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/8_Code%20Shape.html#strings","title":"Strings","text":"<p>In C, strings are null terminated. However, in other language, this isn't necessarily the case. Another approach is to store how long the string is before the character data.</p> <p>Code like <code>a[1] = b[2]</code>, is relatively easy on machines with instructions which can load and store bytes. However, if the instruction set only supports word-sized IO instructions then the compiler has to generate instructions to mask the rest of the word.</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/8_Code%20Shape.html#structs","title":"Structs","text":"<p>The address structures, the compiler will build an internally accessable table to record the offsets where to find fields.</p> <p>TODO: Insert diagram of the structure layout table and the element table</p> <pre><code>struct node {\n    int value;\n    struct node *next;\n}\nstruct node NilNode = {0, (struct node*) 0};\nstruct node p1 = {2, &amp;NilNode};\n</code></pre> <p>The generated code for <code>p1-&gt;next</code> would like something like this:</p> <pre><code>loadI   4 -&gt; r1\nloadA0  rp1, r1 -&gt; r2\n</code></pre>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/8_Code%20Shape.html#oop-languages","title":"OOP Languages","text":"<p>TODO: Insert object record</p> <p>To find the correct method to call, the compiler has to insert code to do dynamic dispatching.</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/8_Code%20Shape.html#determining-types","title":"Determining Types","text":"<p>Another way is Type Inference, where the compiler uses the available type information to inference the type of an expression.</p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/9_Instruction%20Selection.html","title":"Instruction Selection","text":""},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/9_Instruction%20Selection.html#tree-walk","title":"Tree Walk","text":"<p>By walking the AST and emitting the needed instructions for each node in the AST, wTe can generated the instructions with some simple code.</p> <p></p>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/9_Instruction%20Selection.html#rewrite-rules","title":"Rewrite Rules","text":"<p>Examples:</p> <ul> <li><code>Num 12</code> -&gt; <code>Reg</code> (8); <code>* (+(Lab, Reg))</code> (14)  </li> </ul> <pre><code>loadI 12 -&gt; r1\nloadAI @G, r1 -&gt; r2\n</code></pre> <ul> <li><code>Num 12</code> -&gt; <code>Reg</code> (8); <code>(+(Lab, Reg))</code> (19); <code>*(reg)</code> (9)</li> </ul> <pre><code>loadI 12 -&gt; r1\nadd @G, r1 -&gt; r2\nload r2 -&gt; r3\n</code></pre> <ul> <li><code>Lab @G</code> -&gt; <code>Reg (6)</code>; <code>Num 12</code> -&gt; <code>Reg</code> (8); -&gt; <code>+ (Reg, Reg)</code> (15); -&gt; <code>*(Reg)</code> (9) </li> </ul> <pre><code>loadI l1 -&gt; r1\nloadI 12 -&gt; r2\nadd r1, r2 -&gt; r3\nload r3 -&gt; r4\n</code></pre> <p>The following algorithm finds all possible reductions:</p> <p>TODO: check the tile algorithms</p> <pre><code>def tile(n):\n    label[n] = {}\n    if n is binary node:\n        tile(n.left)\n        tile(n.right)\n        for each rule r:\n            if r.op == n.op and r.let in label[n.left] and r.right in label[n.right]:\n                label[n].push(r)\n    else if n is unary node:\n        tile(n.left)\n        for each rule r:\n            if r.op == n.op and r.left in label(n.left):\n                label[n].push(r)\n    else: # n is a leaf\n        for each rule r:\n            if r.op == n.op:\n                label[n].push(r)    \n</code></pre>"},{"location":"23HS/CSC%20412%20-%20Compiler%20Construction/9_Instruction%20Selection.html#peephole-optimisation","title":"Peephole Optimisation","text":"<p>The basic idea is to have a sliding window, the peephole, which slides over the code. The re are rewrite rules, which match the instructions seen through the peephole and then rewrite them to a more efficient version. </p> <p>This kind of optimisation provides local optimisations, since it can only see a small amount of code at a time.</p> <p>The following image shows the rule, with which the example is optimised with:</p> <p></p> <p></p>"},{"location":"23HS/CSC%20414%20-%20Cryptography/1_Introduction.html","title":"Introduction","text":"<p>Kerckhoffs\u2019 Principle</p> <p>Design your system to be secure even if the attacker has complete knowledge of all its algorithms.</p>"},{"location":"23HS/CSC%20414%20-%20Cryptography/1_Introduction.html#properties-of-ciphers","title":"Properties of Ciphers","text":"<p>A private-key encryption scheme is defined by a message space \\(\\mathcal M\\) (all legal messages) and three algorithms for generating keys (\\(Gen\\)), encrypting (\\(Enc\\)) and decrypting (\\(Dec\\)). valid </p> <p>The set of all possible keys is the key space denoted by \\(\\mathcal K\\).</p> <p>A cipher should have the following properties:</p> <ul> <li>Correctness: \\(Dec(k, Enc(k, m)) = m\\)</li> <li></li> </ul>"},{"location":"23HS/CSC%20414%20-%20Cryptography/1_Introduction.html#one-time-pad","title":"One-Time Pad","text":"<p>One-time pad is essentially \"just\" xor-ing the message \\(m\\) with the key \\(k\\). </p> <ul> <li>Correctness: The following claim \\(\\forall k, m \\in \\{0, 1\\}^\\lambda (Dec(k, Enc(k, m)) = m)\\) can be proven by applying properties of xor:    $$   \\begin{align}   Dec(k, Enc(k, m)) &amp; = Dec(k, k \\oplus m)\\   &amp; = k \\oplus k \\oplus m \\   &amp; = (k \\oplus k) \\oplus m \\   &amp; = 0^\\lambda \\oplus m \\   &amp;= m   \\end{align}   $$</li> </ul>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/0_Concepts.html","title":"Concepts","text":"<ul> <li>static vs dynamic   If something is static, it can be determine at compile time, while something dynamic can only be determine, in all cases, while running.   (Bash, for example, has dynamic syntax. It will only detect a syntax error on line 5 after it ran until line 4)</li> <li>values (\\(\\approx\\) types)</li> <li>scope,  identifier, binding</li> </ul>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/1_Introduction.html","title":"Introduction","text":"<p>Why should you care about this course?</p> <p>For one it makes learning a new language easier in addition to improve our ability to write code with language we already know.</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/2_Properties%20of%20Programming%20Languages.html","title":"Properties of Programming Languages","text":"<p>While there are categories (e.g. functional programming, object-oriented programming, imperative programming), languages tend to add different features from different categories. Therefore it makes more sense to assign different properties (i.e. has lambdas, or has classes) to different languages.</p> <p>A language can be described at a high level with the following properties:</p> <ul> <li>purpose</li> <li>prominent features</li> <li>objeccts, classes, functions, regexes, ....</li> <li>memory management</li> <li>syntax    The UI of a programming language, like the grammar, key words, ...</li> <li>type system</li> <li>any notable semantic features, outside of the type system</li> <li>implementation (native code compiler, vm, jit, ...)</li> <li>adaptation</li> <li>tooling, platform (OS and hardware) support (if notable)</li> </ul>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/2_Properties%20of%20Programming%20Languages.html#garbage-collector","title":"Garbage Collector","text":"<p>A program which runs in the back ground and cleans the heap memory of unused objects. </p> <p>The heap is split into multiple \"sub-heaps\" or called generation. Over time, objects are moved to older generations.</p> <p>The gc doesn't completly eliminate memory leak (e.g. non-weak reference listeners).</p> <p>A minor gc happens once the young generation is full. A major gc happens once the old generation is full and will operate on the whole heap.</p> <p>a gc helps to programmer since the programmer doesn't have to \"care\" about memory managemente. but it also abstracts it </p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/2_Properties%20of%20Programming%20Languages.html#does-java-has-static-or-dynamic-type-checking","title":"Does Java has static or dynamic type checking?","text":"<p>Jave has mostly static type checking. </p> <p>Pros of staticly typed language: </p> <ul> <li>errors can be cought earlier</li> <li>code can be optimized for a specific type</li> <li>it can take longer to compile</li> </ul>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/2_Properties%20of%20Programming%20Languages.html#describe-the-jit-compiler","title":"Describe the JIT compiler","text":"<p>JIT runs at run-time and compiles byte code into machine code. Since JIT has access to run time information, it can do optimisations at run time that couldn't be done ahead of time.</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/2_Properties%20of%20Programming%20Languages.html#what-is-parametic-polymorphism","title":"What is Parametic Polymorphism?","text":"<p>A method with argument of multiple type is parametic polymoriphic. Basically, every method which has a generic type variable.</p> <pre><code>&lt;T&gt; int size(List&lt;T&gt; x) {...} // this is parametic polymorphic\nint size(List x) {...} // this is not\n</code></pre>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/2_Properties%20of%20Programming%20Languages.html#uniformity-of-languages","title":"Uniformity of Languages","text":"<p>Languages which don't have uniform properties (like python), it makes the language less fit for larger projects. This comes from the fact, that weird oddities arise which are a nightmare to debug in large code bases.</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/2_Properties%20of%20Programming%20Languages.html#expression-types","title":"Expression Types","text":"<ul> <li>Infix-Expression: <code>4 + x</code></li> <li>Prefix-Expression: <code>+ 4 x</code></li> <li>Postfix-Expression: <code>5 x +</code></li> </ul>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/2_Properties%20of%20Programming%20Languages.html#literal-types","title":"Literal Types","text":"<ol> <li>Pass a value as an argument (<code>hi(0.5)</code>)</li> <li>Assign a value to a variable (<code>x = 0.5</code>)</li> <li>Having a literal representation (<code>0.5</code>)</li> <li>create a new value dynamically</li> </ol> <p>Not all types in every language pass all of this questions. In a lot of language, functions don't pass all of the questions. A value which passes those questions, is called a first-class value/type.</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/2_Properties%20of%20Programming%20Languages.html#eagerness-and-laziness","title":"Eagerness and Laziness","text":"<p>An eager programming language evaluates the arguments before calling a function. So when evaluating <code>f(x, 1 + y)</code>, <code>x</code> and <code>1 + y</code> is evaluated before calling <code>f</code>.</p> <p>An lazy language on the other hand, <code>x</code> and <code>1 + y</code> will only be called once their value is actually needed.</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/2_Properties%20of%20Programming%20Languages.html#call-by-","title":"Call-By-<code>*</code>","text":"<ul> <li> <p>Call-by-value   A parameter is copied when calling the function. In this case all parameters are eagerly evaluated and then passed in</p> </li> <li> <p>Call-by-ref</p> </li> <li> <p>Call-by-name   Call-by-name just passes the name of a variable in. When the function actually needs the value of the parameter, it is evaluated. This is one way to implement laziness. However, code like</p> </li> </ul> <pre><code>def f(n, m):\n    m = n + 1\n    p = m * n\n</code></pre> <p>In this example above, with call-by-name, <code>n</code> is evaluated twice! This behaviour can be simulated by passing in a function as a parameter.</p> <ul> <li>Call-by-need   This is semantically the same to call-by-name, but the result of an expression is cached. It is what Haskell calls a thunk.</li> </ul>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/3_Notes_06_09_2023.html","title":"Notes 06. September 2023","text":"<p>Topics that were alluded to:</p> <ul> <li>Closure</li> <li>Memory representation &amp; GC</li> <li>Safety</li> </ul> <p>Syntax is the UX of a programming language, and there are multiple design issues:</p> <ul> <li>Consistency</li> <li>Familiarity:   JS is arguably popular because it looks like C/Java even though it works vastly differently</li> <li>Things that are related should look alike   If things work similar, they should look similar. Otherwise, people could confuse the concepts</li> </ul> <p>An Abstract Syntax Tree (AST) is a \"cleaned-up\" version of a parse tree. A parse tree is an exact representation of the source code (for example, a comment might be in the parse tree). </p> <p>The following is a parse tree:</p> <p></p> <p>The expression <code>a * b + c</code> would be turned into the following AST</p> <pre><code>flowchart\nadd(+) --&gt; mul\nadd --&gt; c\nmul(*) --&gt; a\nmul --&gt; b</code></pre> <p>An interpreter might evaluate this tree by walking the tree in a post-order.</p> <p>As a side note, this parse tree assumes that the grammar knows the precedence of the operators. There is an algorithm from Dijkstra called shunting yard, which takes a straight parse tree (without respect to the precedence) and the precedence of the algorithm and produces a parse tree which respects the precedence.</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/3_Notes_06_09_2023.html#about-the-essay-of-syntax-design","title":"About the Essay of Syntax Design","text":"<p>A programming language gives us a way to structure our thoughts.</p> <p>When we start to program a solution for a problem, at some point often notice that we weren't thinking precise enough and missed edge cases. A way to think about programming is, that it is a way of thinking in a way that the computer can understand the thought.</p> <p>Most current popular programming languages are text-based. Every so often, there is a push towards visual programming languages. An example would be scratch. Another example would be showing an AI what to do, which then will \"program\" the source code.</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/3_Notes_06_09_2023.html#s-expression","title":"S-Expression","text":"<pre><code>(function :f (params :x :y)\n    (block\n        (var :b 3)\n        (if (&lt; x (* a (+ b 7)))\n            (while found\n                (block\n                    (for :i (range 2 5) (print i))\n                    (if (== a 2) (break))))\n            (= p (cos 5)))\n        (return (/ a 5))))\n</code></pre> <p>One quirk of s-expression is that the operator always comes first (like <code>(+ 3 2)</code>). However, this makes math look weird. For example, \\((a \\cdot b) + c\\) would be <code>(+ (* a b) c)</code>. One benefit of this, is that the work for the parser is straightforward since there are no precedence rules. This syntax is also called \"prefix\" syntax.</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/3_Notes_06_09_2023.html#postfix-syntax","title":"Postfix Syntax","text":"<p>There are also languages which use a postfix syntax.</p> <pre><code>a b * c + \n</code></pre> <p>The code above is equivalent to \\((a \\cdot b) + c\\). First the <code>a</code> and the <code>b</code> are pushed onto the stack, ...</p> <p>The compiler/interpreter for forth (or similar languages) can be minuscule, since they don't have to build the syntax tree, since the programmer already puts in the correct order.</p> <pre><code>[ :x param :y param ]\n[\n    3 :b var\n    x a b 7 + * &lt;\n    [\n        found\n        [\n            :i 2 5 [i print] for\n            2 a == [break] [] if\n        ]\n    while]\n    [5 cos p assign]\n    if\n    a 5 / return\n] :f function\n</code></pre>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/3_Notes_06_09_2023.html#indentation-and-curly-brackets","title":"Indentation and Curly Brackets","text":"<p>Most programming languages use curly brackets. However, there are quite a few languages which use indentation (like Python or Haskell)</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/3_Notes_06_09_2023.html#semantics","title":"Semantics","text":"<p>Semantics is what a program-construct (e.g. <code>a+b</code> or <code>x = a + b</code>, <code>{...}</code>) means/what it does.</p> <p>The code <code>4 + \"1\"</code> could be interpreted differently. The following semantics are possible ways how the semantics of <code>4 + \"1\"</code> could look like:</p> <ul> <li>It could produce <code>\"41\"</code></li> <li>It could produce <code>5</code></li> <li>It could throw an error</li> <li>Many other possibilities</li> </ul> <p>(On the note of weird JS quirks: https://jsfuck.com/)</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/4_Scheme.html","title":"Scheme","text":"<p>In scheme everything is a procedure (<code>+</code> is one, constructors are one, ...)</p> <pre><code>1/3  ; 1/3 primitive\n1+3i ; this is a complex number\n\n#t ; is true\n#f ; is false\n\n(* 5 (+ 1 3)) ; 5 * (1 + 3)\n\n(display (+ 4 3)) ; prints 4 + 3\n(newline) ; prints a new line\n(rational? 1/3) ; will return #t\n; predicate functions usually have a ? at the end\n\n; DATA STRUCTURES\n'(1 2 3)\n(list 1 2 3)\n\n(car (list 1 2 \"hello\")) ; returns the first element (1 in this case)\n(cdr (list 1 2 \"hello\")) ; returns the rest of the list ((2 \"hello\") in this case)\n\n(caddr (list 1 2 \"hello\")) ; is equivalent to\n(car (cdr (cdr (list 1 2 \"hello\")))) ; and returns \"hello\"\n\n'() ; creates an empty sit\n; the quote tells scheme that the following is data and not a program\n\n(cons \"hello\" '()) ; this will return (\"hello\")\n(cons 2 (cons \"hello\" '())) ; this will reutrn (2, \"hello\")\n\n; to create a lambda\n(lambda (n) (* n n))\n\n; run lambda directly\n((lambda (n) (* n n)) 6) ; will return 36\n\n; map\n; takes a function and maps the function over the given list\n(map (lambda (i) (- i 2)) (list 4 5 6)) ; will return '(3 4 5)\n\n; map also supports multiple arguments by supplying multiple list\n(define avg (lambda (a b) (/ (+ a b) 2.0)))\n(avg 5 10) ; return 7.5\n(map avg '(5 100) '(10 101))  ; returns (7.5 100.5)\n\n; let expression\n(let ((x 1)\n      (y 10)\n      (z 200))\n  (+ x y 100))\n\n; this can also be written as\n((lambda (x y z) (+ x y 100)) 1 10 200)\n\n; the variables x, y, z are only available in the body of let\n(define x 10)\n(let ((x x) (+ x 5))) ; this will return 15, since x is bound to 10\n\n(let ((x 5) (y x) (+ x y))) ; this will return 15, since y is bound to the global x\n\n(let* ((x 5) (y x) (+ x y))) ; this will return 10, since first x=5 and then y=x=5\n; let* is a macro which is equal to (let ((x 5)) (let ((y x)) (+ x y)))\n\n\n; TAIL RECURSION\n(define mymap\n    (lambda (fn ls)\n      (if (null? ls)\n          '()\n          (cons (fn (car ls))\n                (mymap fn (cdr ls))))))\n\n; SYMBOLS\n; symbols dont' have an identity\n'abc ; this represents the symbol abc\n(quote abc) ; 'abc is syntactic sugar for 'abc\n(quote (a b c)) ; is equal to '(a b c)\n(eq? 'ABC 'abc) ; will return #t since symbols are case-INsensitive\n\n; CURYING\n(define make-incr\n  (lambda (amt)\n    (lambda (n) (+ n amt))))\n\n(make-incr 12) ; this binds amt=12 and returns a lambda\n((make-incr 12) 1) ; this will return 13\n\n; In a sense, the following is very simmilar\n(define foo (let ((amt 12)) \n  (lambda (n) (+ n amt))))\n\n; the example above, amt cannot be change since it is buried in the function foo \n\n; COND\n(lambda (exp)\n    (cond ((number? exp) \n       exp)\n      ((list? exp)\n       #t)\n      (#t (error \"Unhandled expression type\"))))\n; this is equal to a switch statement\n</code></pre>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/5_Interpreter.html","title":"Interpreter","text":""},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/6_Lambda%20calculus.html","title":"Lambda Calculus","text":"<p>Lambda calculus is an alternative way to model turning machines.</p> <p>Definitions:</p> <ul> <li>Variables: Denoted by ordinary lower case letters: \\(x, y, f, g, ...\\)</li> <li>Abstractons: Denoted as \\(\\lambda \\langle var\\rangle.\\langle body \\rangle\\) (e.g. \\((\\lambda x.x)\\) is the identity function)</li> <li>Aplications: </li> <li>Terms: a term is constructed using the items above</li> </ul> <p>A variable is bound, if it is enclosed by a lambda and the lambda binds the term. On the other side, a free variable isn't defined by the </p> <p>A \\(\\lambda\\) term with no free variables are called combinator</p> <p>An interesting note, is that part of the reason why conditionals work, is because lambda calculus uses call-by-name semantics. In languages, like Python or Scheme, this won't work, since these languages will evaluate all parameters before calling the function.</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/6_Lambda%20calculus.html#reductions","title":"Reductions","text":"<p>There are three ways to manipulate a term:</p> <ul> <li>\\(\\alpha\\)-conversion</li> <li></li> </ul> <p>Lambda calculus uses normal-order \"calls\" functions, meaning that parameters are not evaluated before applying them to a function. Compare this with the applicative-order, where the parameters are evaluated before calling the function. This is the order \"normal\" programming languages use.</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/7_Memory%20Model.html","title":"Memory Model","text":""},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/7_Memory%20Model.html#tagged-union","title":"Tagged Union","text":"<p>A way to represent a union with a tag, is to reserve some bits of a word, and make it represent the type.  For example use the last 2 bits to store <code>00</code> for a symbol, <code>01</code> for a pointer, <code>10</code> for an integer and a <code>11</code> for a string. However, this is quite a bit of work, since to do anything with the data, first we have to remove the type data, do the operation, and then add the type data back.</p> <ul> <li>Integer/Float   First remove type data, do the operation, add type data back</li> <li>Symbol   A symbol can be represented by a pointer into a table of strings</li> </ul>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/8_Type%20System.html","title":"Type System","text":"<pre><code>(define incr \n    (let ((amt 3))\n         (lambda (msg n)\n                 (cond ((eq? msg 'incr) \n                        (+ n amt))\n                     ((eq msg 'get) \n                      amt)\n                     ((eq msg 'set) \n                      (set! amt n))\n                     (#t (error \"Unkown method ~S\" msg))))))\n\n; gets the current value\nincr 'get 'dummy ; 'dummy is needed since the function expects two arguments\n\n; calculates amt + n\nincr 'incr 3 ; returns 6\n\n; sets the amt value\nincr 'set 4 ; amt=4\n</code></pre> <p>The code snippet is a way to simulate objects, where <code>incr</code> is the object. The callee can send messages (or methods) to <code>incr</code>. However, the callee cannot access <code>amt</code> directly, only through messages.</p> <p>The snippet above can be modified with a factory which builds incrementprs:</p> <pre><code>(define make-incr \n    (lambda (amt)\n         (lambda (msg n)\n                 (cond ((eq? msg 'incr) \n                        (+ n amt))\n                     ((eq msg 'get) \n                      amt)\n                     ((eq msg 'set) \n                      (set! amt n))\n                     (#t (error \"Unkown method ~S\" msg))))))\n\n(define i (make-incr 3)) ; creates an increment with amt=3\n(define j (make-incr 5)) ; creates an incr with amt=5\n\n(i 'set 1) ; changes i.amt = 1, but doesn't touch j.amt\n(i 'get 'dummy) ; returns 1\n(j 'get 'dummy) ; returns 5\n</code></pre> <p>This, essentially, implements constructors.</p> <pre><code>(define number-object \n    (lambda (num)\n         (lambda (msg n)\n                 (cond \n                     ((eq msg 'get) \n                      num)\n                     ((eq msg 'set) \n                      (set! num n))\n                     (#t (error \"Number-Object: Unkown method ~S\" msg))))))\n\n(define make-incr \n    (lambda (amt)\n         (let ((parent (number-object amt))\n               (lambda (msg n)\n                       (cond ((eq? msg 'incr) \n                              (+ n (parent 'get))\n                             (#t (parent msg n)))))))\n</code></pre> <p>The code above shows how these \"constructors\" can be used in a composable-fashion. The incr object only knows about how to increment, everything else is handled by the parent number-object.</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/HW/Homework%201%20%28copy%29.html","title":"Homework 1","text":""},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/HW/Homework%201%20%28copy%29.html#dynamic-scope","title":"Dynamic Scope","text":"<p>Shell script is one of the few languages still in use which has dynamic scoping. According to Wikipedia, <code>sh</code> was released in 1979 as a replacement in Unix 7 for the Thompson shell<sup>1</sup>. Shell scripts are used to this day to automate common sysadmin tasks and can be run on all major desktop platforms. In addition to scripts, <code>sh</code> can also be used as a REPL and is a common way to interface with UNIX-like systems.  </p> <pre><code>#!/bin/sh\nx=3\nfunc1 () { \n    echo \"in func1: $x\"\n}\nfunc2 () { \n    local x=9\n    func1\n}\n\nfunc2\nfunc1\n</code></pre> <p>The code above produces the following output:</p> <p></p> <p>As one can see, <code>func1</code> uses the definition of <code>x</code> of the scope <code>func1</code> was invoked from. Since <code>func2</code> creates a new <code>x</code>, this is the most recent definition of <code>x</code> and <code>func1</code> proceeds to print <code>9</code>. After <code>func2</code> exits, the definition of <code>x</code> of <code>func2</code> is popped from the stack and the remaining and, now, most recent definition is <code>x=3</code>. This is confirmed by the second output of <code>func1</code> which prints <code>3</code>.</p> <p>As a side node, while she-bang specifies <code>/bin/sh</code>, this is usually symlinked to bash. Bash can also run in a -compliant mode with the <code>--posix</code> switch, which should be equivalent to the standard set for <code>sh</code> scripts.</p> <p>The example above is a slightly altered version taken from https://riptutorial.com/bash/example/8094/dynamic-scoping-in-action.</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/HW/Homework%201%20%28copy%29.html#liskov-substitution-principle","title":"Liskov Substitution Principle","text":"<p>A type defines properties and ways to access and modify those properties. In OOP languages, this often comes in the form of methods which access and modify fields.</p> <p>A subtype has to be valid in the same context the super type is valid. So, for example, passing a subtype to a function which expects the subtype's super type should still compile<sup>3</sup>. This assumes that at least all public properties and the public way to modify and access properties need to be present on a subtype. However, a subtype might choose to change the implementation detail of a method.</p> <p>Inheritance is a way to \"generate\" subtypes by creating a type which inherits all the properties and methods from its parents. Since all properties are inherited, the subclass can be used in almost every context the super class is valid. However, there are some exceptions to this rule. For example, method parameters are contravariant, meaning when overriding a method the parameter type may be substituted by its super type, but not its subtype.<sup>4</sup></p> <p>The Liskov substitution principle states that the functionality of code should be unchanged if an instance passed to that code is a subtype of the required type.</p> <p>A counter example of a structure which violates the Liskov substitution principle is how Java implements read-only lists. In Java, a read-only list can be created with the method <code>&lt;T&gt; List&lt;T&gt; Collection.unmodifiableList(List&lt;T&gt; inputList)</code>, which will return a read-only list for the given <code>inputList</code>. The returned list must be a subtype of <code>List&lt;T&gt;</code> since <code>Collection.unmodifiableList(...)</code> returns a <code>List&lt;T&gt;</code> object.</p> <pre><code>/** deletes all elements in the given list */\nvoid deleteAll(List&lt;String&gt; list) {\n    list.clear();\n}\n</code></pre> <p>The code above defines a method which takes a list of strings and deletes all elements in the list by calling the <code>List.clear()</code> method. This code works great, assuming that the given list can be modified. But if the argument is an unmodifiable list, then <code>List.clear()</code> will throw an <code>UnsupportedOperationException</code><sup>5</sup>.</p> <pre><code>List&lt;String&gt; readOnlyList = Collections.unmodifiableList(someList);\ndeleteAll(readOnlyList); // clear() will throw an UnsupportedOperationException\n</code></pre> <p>So when using the read-only subtype of <code>List&lt;T&gt;</code>, the <code>deleteAll</code> method breaks. In this case, this is because <code>List&lt;T&gt;</code> defines methods which modify the list (like <code>add(...)</code> or <code>clear()</code>). However, a read-only implementation of <code>List&lt;T&gt;</code> cannot possibly support these methods.</p> <p>An example which shows how to implement a read-only list which follows the  Liskov substitution principle can be seen in C#.</p> <pre><code>classDiagram\nclass IReadOnlyList~T~ \n\nclass IList~T~ \n\nIList --|&gt; IReadOnlyList</code></pre> <p>In the C# world, an <code>IList</code>, the base interface for lists, implements the <code>IReadOnlyList</code> interface. Meaning that  <code>IList</code> is a subtype of <code>IReadOnlyList</code>, where in the Java world, a read-only list inherits from a <code>List</code>. </p> <p>Because of this structure, the equivalent code in C# wouldn't even compile.</p> <pre><code>void DeleteAll(List&lt;string&gt; list) \n{\n    list.Clear();\n}\n\nIReadOnlyList&lt;string&gt; readOnlyList = ...\nDeleteAll(readOnlyList); // this isn't valid, since IReadOnlyList isn't a subtype of List\n</code></pre>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/HW/Homework%201%20%28copy%29.html#stack-and-heap","title":"Stack and Heap","text":"<p>During the lifetime of a program, memory is allocated in multiple location, including the stack and the heap. </p> <p>A stack is a first-in-last-out collection, meaning that the first element pushed on to the stack will be the last to be popped. Because of this property, the stack is used for local variables and the return address. </p> <p>When a function is invoked, a new stack frame is pushed on the stack. A frame contains space for local variables and the return address. When a function returns, the top most stack frame will correspond to that function. The CPU uses the return address to know where to jump back to. Additionally, since the stack frame contains local variables, these variables are automatically cleaned up when popping a stack frame.<sup>6</sup></p> <p>The frames with their return address and local data can be seen in the following image.</p> <p></p> <p>(Image is from https://commons.wikimedia.org/wiki/File:ProgramCallStack2_en.png)</p> <p>The heap is a \"place\" in memory, where data which needs to be independent of the current function being invoked. It is separate from the stack and is not affected by function invocation and function returning. Usually, long living objects and objects which are pointed to by a pointer or reference are stored on the heap, as these object should be deallocated when a function exists.</p> <p>For example, an object managing a DB connection would (probably) be stored on the heap, since it will live for most of the execution of the program and will have multiple pointers pointing to it. </p> <p>Which variables are stored on the heap and which are stored on the stack is also dependent on the language implementation. For example, Java always allocates objects on the heap, while a C or C++ programmer can choose to allocate a struct on the stack.</p> <p>If something is stored on the heap, there is typically a pointer on the stack pointing to the location on the heap.</p> <p>One important caveat with languages with manual memory management is, that if a local variable is returned or otherwise accessible after a function returned, it has to be allocated on the heap or moved to the heap. Otherwise, it would be cleaned up after the function returns and pointers to that object could point to random data.</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/HW/Homework%201%20%28copy%29.html#reference-counting","title":"Reference Counting","text":"<p>Reference counting is a technique where each time a new reference is made, a counter is incremented and each time a reference goes out of scope (or is otherwise deallocated) the counter is decremented. When the counter hits zero, the object is not reachable anymore and can be safely deallocated. <sup>7</sup></p> <p>Reference counting is often used in languages without a garbage collector in situations where an object is \"owned\" by multiple entities.</p> <p>Rust implements reference counting in the <code>Rc&lt;T&gt;</code> struct. Each time it is cloned, the internal reference counter is incremented. When an <code>Rc&lt;T&gt;</code> object is destroyed, then the reference counter is decremented. <sup>8</sup></p> <pre><code>struct Owner {\n    name: String,\n}\n\nstruct Gadget {\n    id: i32,\n    owner: Rc&lt;Owner&gt;,\n}\n\nfn main() {\n    let gadget_owner: Rc&lt;Owner&gt; = Rc::new(\n        Owner {\n            name: \"Gadget Man\".to_string(),\n        }\n    );\n\n    let gadget1 = Gadget {\n        id: 1,\n        // increments the reference count in gadget_owner\n        owner: Rc::clone(&amp;gadget_owner), \n    };\n\n    {\n        let gadget2 = Gadget {\n            id: 2,\n            // increments the reference count in gadget_owner\n            owner: Rc::clone(&amp;gadget_owner),\n        };\n        // gadet2 is dropped/deallocated since it goes \n        // out of scope. This causes the reference count\n        // in gadget_owner to be decrement\n    }\n    // explicitly dropping gadget_owner causing the reference\n    // count to be decremented\n    drop(gadget_owner); \n\n    println!(\"Gadget {} owned by {}\", gadget1.id, gadget1.owner.name);\n\n    // at the end of the function gadget1 is destroyed\n    // which causes the reference count to go to zero\n    // and the Owner instance will be destroyed\n}\n</code></pre> <p>(example modified from https://doc.rust-lang.org/std/rc/index.html#examples)</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/HW/Homework%201%20%28copy%29.html#rusts-memory-management","title":"Rust's Memory Management","text":"<p>Rust uses the concept of ownership to decide when an object needs to be deallocated.</p> <p>The following ownership rules exist<sup>9</sup> :</p> <ul> <li>Each value in Rust has an owner</li> <li>There can only be one owner at a time</li> <li>When the owner goes out of scope, the value will be dropped/deallocated</li> </ul> <p>A simple <code>let x = y</code> transfers the ownership of <code>y</code> to <code>x</code>. After that statement, <code>y</code> can no longer be used and what was originally <code>y</code> will be deallocated once <code>x</code> goes out of scope (assuming that the ownership isn't transferred further).</p> <p>Since this would be extremely limiting, Rust allows mutable and non-mutable references to objects. Rust calls this borrowing. When borrowing a value, the ownership doesn't change. One important caveat, the object must remain in scope until there are no references anymore.</p> <pre><code>fn main() {\n    let mut s = String::from(\"hello\");\n    {\n        // creates a non-mutable reference to s\n        // while not transfering the ownership\n        let s2 = &amp;s;\n        let s3 = &amp;s;\n    }\n\n    {\n        // creating a mutable reference\n        let s4 = &amp;mut s;\n    }\n\n    // transfer the ownership to s_copy\n    let mus s_copy = s;\n\n    // the following wouldn't compile since \n    // s doesn't have the ownership over the\n    // String anymore.\n    println!(\"{}\", s); \n}\n</code></pre> <p>Because of this system, Rust can generate deallocation code for most situations at compile time. For this reason, Rust has no garbage collector, yet doesn't require the programmer to meticulously free every allocated object.    </p> <p>One downside of this system is that it explicitly disallows multiple owners. However, there are situations where this is required. For these cases, rust implements reference counting with <code>Rc&lt;T&gt;</code> as an escape hatch. Importantly, <code>Rc&lt;T&gt;</code> isn't some kind of primitive engraved in Rust's type system. Rather, it is built on top of the type system, and anybody can build a replacement if they choose to do so.</p> <p>As can be seen in the <code>Rc&lt;T&gt;</code> example in the reference counting section, <code>Rc&lt;T&gt;</code> wraps the value <code>T</code>. The three ownership rules are still upheld, since each owner has their own <code>Rc&lt;T&gt;</code> object which in the background uses unsafe trickery to allow each <code>Rc&lt;T&gt;</code> access to the underlying value. <sup>8</sup></p> <ol> <li> <p>https://en.wikipedia.org/wiki/Bourne_shell  Bourne shell\u00a0\u21a9</p> </li> <li> <p>https://en.wikipedia.org/wiki/Liskov_substitution_principle Liskov substitution principle\u00a0\u21a9</p> </li> <li> <p>https://en.wikipedia.org/wiki/Subtyping Subtyping\u00a0\u21a9</p> </li> <li> <p>https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)#Contravariant_method_parameter_type Covariance and contravariance (computer science)\u00a0\u21a9</p> </li> <li> <p>https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#unmodifiableList-java.util.List- Collections.unmodifableList(...) JavaDoc\u00a0\u21a9</p> </li> <li> <p>https://en.wikipedia.org/wiki/Stack-based_memory_allocation Stack-based memory allocation\u00a0\u21a9</p> </li> <li> <p>https://en.wikipedia.org/wiki/Reference_counting#Garbage_collection\u00a0\u21a9</p> </li> <li> <p>https://doc.rust-lang.org/std/rc/index.html\u00a0\u21a9\u21a9</p> </li> <li> <p>https://doc.rust-lang.org/stable/book/ch04-01-what-is-ownership.html\u00a0\u21a9</p> </li> </ol>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/HW/Homework%201.html","title":"Homework 1","text":""},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/HW/Homework%201.html#dynamic-scope","title":"Dynamic Scope","text":"<p>Shell script is one of the few languages still in use which has dynamic scoping. According to Wikipedia, <code>sh</code> was released in 1979 as a replacement in Unix 7 for the Thompson shell [1]. Shell scripts are used to this day to automate common sysadmin tasks and can be run on all major desktop platforms. In addition to scripts, <code>sh</code> can also be used as a REPL and is a common way to interface with UNIX-like systems.  </p> <pre><code>#!/bin/sh\nx=3\nfunc1 () { \n    echo \"in func1: $x\"\n}\nfunc2 () { \n    local x=9\n    func1\n}\n\nfunc2\nfunc1\n</code></pre> <p>The code above produces the following output:</p> <p></p> <p>As one can see, <code>func1</code> uses the definition of <code>x</code> of the scope <code>func1</code> was invoked from. Since <code>func2</code> creates a new <code>x</code>, this is the most recent definition of <code>x</code> and <code>func1</code> proceeds to print <code>9</code>. After <code>func2</code> exits, the definition of <code>x</code> of <code>func2</code> is popped from the stack and the remaining and, now, most recent definition is <code>x=3</code>. This is confirmed by the second output of <code>func1</code> which prints <code>3</code>.</p> <p>As a side node, while she-bang specifies <code>/bin/sh</code>, this is usually symlinked to bash. Bash can also run in a -compliant mode with the <code>--posix</code> switch, which should be equivalent to the standard set for <code>sh</code> scripts.</p> <p>The example above is a slightly altered version taken from https://riptutorial.com/bash/example/8094/dynamic-scoping-in-action.</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/HW/Homework%201.html#liskov-substitution-principle","title":"Liskov Substitution Principle","text":"<p>A type defines properties and ways to access and modify those properties. In OOP languages, this often comes in the form of methods which access and modify fields.</p> <p>A subtype has to be valid in the same context the super type is valid. So, for example, passing a subtype to a function which expects the subtype's super type should still compile [3]. This assumes that at least all public properties and the public way to modify and access properties need to be present on a subtype. However, a subtype might choose to change the implementation detail of a method.</p> <p>Inheritance is a way to \"generate\" subtypes by creating a type which inherits all the properties and methods from its parents. Since all properties are inherited, the subclass can be used in almost every context the super class is valid. However, there are some exceptions to this rule. For example, method parameters are contravariant, meaning when overriding a method the parameter type may be substituted by its super type, but not its subtype. [4]</p> <p>The Liskov substitution principle states that the functionality of code should be unchanged if an instance passed to that code is a subtype of the required type.</p> <p>A counter example of a structure which violates the Liskov substitution principle is how Java implements read-only lists. In Java, a read-only list can be created with the method <code>&lt;T&gt; List&lt;T&gt; Collection.unmodifiableList(List&lt;T&gt; inputList)</code>, which will return a read-only list for the given <code>inputList</code>. The returned list must be a subtype of <code>List&lt;T&gt;</code> since <code>Collection.unmodifiableList(...)</code> returns a <code>List&lt;T&gt;</code> object.</p> <pre><code>/** deletes all elements in the given list */\nvoid deleteAll(List&lt;String&gt; list) {\n    list.clear();\n}\n</code></pre> <p>The code above defines a method which takes a list of strings and deletes all elements in the list by calling the <code>List.clear()</code> method. This code works great, assuming that the given list can be modified. But if the argument is an unmodifiable list, then <code>List.clear()</code> will throw an <code>UnsupportedOperationException</code> [5].</p> <pre><code>List&lt;String&gt; readOnlyList = Collections.unmodifiableList(someList);\ndeleteAll(readOnlyList); // clear() will throw an UnsupportedOperationException\n</code></pre> <p>So when using the read-only subtype of <code>List&lt;T&gt;</code>, the <code>deleteAll</code> method breaks. In this case, this is because <code>List&lt;T&gt;</code> defines methods which modify the list (like <code>add(...)</code> or <code>clear()</code>). However, a read-only implementation of <code>List&lt;T&gt;</code> cannot possibly support these methods.</p> <p>An example which shows how to implement a read-only list which follows the  Liskov substitution principle can be seen in C#.</p> <pre><code>classDiagram\nclass IReadOnlyList~T~ \n\nclass IList~T~ \n\nIList --|&gt; IReadOnlyList</code></pre> <p>In the C# world, an <code>IList</code>, the base interface for lists, implements the <code>IReadOnlyList</code> interface. Meaning that  <code>IList</code> is a subtype of <code>IReadOnlyList</code>, where in the Java world, a read-only list inherits from a <code>List</code>. </p> <p>Because of this structure, the equivalent code in C# wouldn't even compile.</p> <pre><code>void DeleteAll(List&lt;string&gt; list) \n{\n    list.Clear();\n}\n\nIReadOnlyList&lt;string&gt; readOnlyList = ...\nDeleteAll(readOnlyList); // this isn't valid, since IReadOnlyList isn't a subtype of List\n</code></pre>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/HW/Homework%201.html#stack-and-heap","title":"Stack and Heap","text":"<p>During the lifetime of a program, memory is allocated in multiple location, including the stack and the heap. </p> <p>A stack is a first-in-last-out collection, meaning that the first element pushed on to the stack will be the last to be popped. Because of this property, the stack is used for local variables and the return address. </p> <p>When a function is invoked, a new stack frame is pushed on the stack. A frame contains space for local variables and the return address. When a function returns, the top most stack frame will correspond to that function. The CPU uses the return address to know where to jump back to. Additionally, since the stack frame contains local variables, these variables are automatically cleaned up when popping a stack frame. [6]</p> <p>The frames with their return address and local data can be seen in the following image.</p> <p></p> <p>(Image is from https://commons.wikimedia.org/wiki/File:ProgramCallStack2_en.png)</p> <p>The heap is a \"place\" in memory, where data which needs to be independent of the current function being invoked. It is separate from the stack and is not affected by function invocation and function returning. Usually, long living objects and objects which are pointed to by a pointer or reference are stored on the heap, as these object should be deallocated when a function exists.</p> <p>For example, an object managing a DB connection would (probably) be stored on the heap, since it will live for most of the execution of the program and will have multiple pointers pointing to it. </p> <p>Which variables are stored on the heap and which are stored on the stack is also dependent on the language implementation. For example, Java always allocates objects on the heap, while a C or C++ programmer can choose to allocate a struct on the stack.</p> <p>If something is stored on the heap, there is typically a pointer on the stack pointing to the location on the heap.</p> <p>One important caveat with languages with manual memory management is, that if a local variable is returned or otherwise accessible after a function returned, it has to be allocated on the heap or moved to the heap. Otherwise, it would be cleaned up after the function returns and pointers to that object could point to random data.</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/HW/Homework%201.html#reference-counting","title":"Reference Counting","text":"<p>Reference counting is a technique where each time a new reference is made, a counter is incremented and each time a reference goes out of scope (or is otherwise deallocated) the counter is decremented. When the counter hits zero, the object is not reachable anymore and can be safely deallocated. [7]</p> <p>Reference counting is often used in languages without a garbage collector in situations where an object is \"owned\" by multiple entities.</p> <p>Rust implements reference counting in the <code>Rc&lt;T&gt;</code> struct. Each time it is cloned, the internal reference counter is incremented. When an <code>Rc&lt;T&gt;</code> object is destroyed, then the reference counter is decremented. [8]</p> <pre><code>struct Owner {\n    name: String,\n}\n\nstruct Gadget {\n    id: i32,\n    owner: Rc&lt;Owner&gt;,\n}\n\nfn main() {\n    let gadget_owner: Rc&lt;Owner&gt; = Rc::new(\n        Owner {\n            name: \"Gadget Man\".to_string(),\n        }\n    );\n\n    let gadget1 = Gadget {\n        id: 1,\n        // increments the reference count in gadget_owner\n        owner: Rc::clone(&amp;gadget_owner), \n    };\n\n    {\n        let gadget2 = Gadget {\n            id: 2,\n            // increments the reference count in gadget_owner\n            owner: Rc::clone(&amp;gadget_owner),\n        };\n        // gadet2 is dropped/deallocated since it goes \n        // out of scope. This causes the reference count\n        // in gadget_owner to be decrement\n    }\n    // explicitly dropping gadget_owner causing the reference\n    // count to be decremented\n    drop(gadget_owner); \n\n    println!(\"Gadget {} owned by {}\", gadget1.id, gadget1.owner.name);\n\n    // at the end of the function gadget1 is destroyed\n    // which causes the reference count to go to zero\n    // and the Owner instance will be destroyed\n}\n</code></pre> <p>(example modified from https://doc.rust-lang.org/std/rc/index.html#examples)</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/HW/Homework%201.html#rusts-memory-management","title":"Rust's Memory Management","text":"<p>Rust uses the concept of ownership to decide when an object needs to be deallocated.</p> <p>The following ownership rules exist [9]:</p> <ul> <li>Each value in Rust has an owner</li> <li>There can only be one owner at a time</li> <li>When the owner goes out of scope, the value will be dropped/deallocated</li> </ul> <p>A simple <code>let x = y</code> transfers the ownership of <code>y</code> to <code>x</code>. After that statement, <code>y</code> can no longer be used and what was originally <code>y</code> will be deallocated once <code>x</code> goes out of scope (assuming that the ownership isn't transferred further).</p> <p>Since this would be extremely limiting, Rust allows mutable and non-mutable references to objects. Rust calls this borrowing. When borrowing a value, the ownership doesn't change. One important caveat, the object must remain in scope until there are no references anymore.</p> <pre><code>fn main() {\n    let mut s = String::from(\"hello\");\n    {\n        // creates a non-mutable reference to s\n        // while not transfering the ownership\n        let s2 = &amp;s;\n        let s3 = &amp;s;\n    }\n\n    {\n        // creating a mutable reference\n        let s4 = &amp;mut s;\n    }\n\n    // transfer the ownership to s_copy\n    let mus s_copy = s;\n\n    // the following wouldn't compile since \n    // s doesn't have the ownership over the\n    // String anymore.\n    println!(\"{}\", s); \n}\n</code></pre> <p>Because of this system, Rust can generate deallocation code for most situations at compile time. For this reason, Rust has no garbage collector, yet doesn't require the programmer to meticulously free every allocated object.    </p> <p>One downside of this system is that it explicitly disallows multiple owners. However, there are situations where this is required. For these cases, rust implements reference counting with <code>Rc&lt;T&gt;</code> as an escape hatch. Importantly, <code>Rc&lt;T&gt;</code> isn't some kind of primitive engraved in Rust's type system. Rather, it is built on top of the type system, and anybody can build a replacement if they choose to do so.</p> <p>As can be seen in the <code>Rc&lt;T&gt;</code> example in the reference counting section, <code>Rc&lt;T&gt;</code> wraps the value <code>T</code>. The three ownership rules are still upheld, since each owner has their own <code>Rc&lt;T&gt;</code> object which in the background uses unsafe trickery to allow each <code>Rc&lt;T&gt;</code> access to the underlying value. [8]</p>"},{"location":"23HS/CSC%20417%20-%20Theory%20of%20Programming%20Languages/HW/Homework%201.html#references","title":"References","text":"<p>1: https://en.wikipedia.org/wiki/Bourne_shell  Bourne shell (Accessed Sept. 05, 2023) 2: https://en.wikipedia.org/wiki/Liskov_substitution_principle Liskov substitution principle  (Accessed Sept. 05, 2023) 3: https://en.wikipedia.org/wiki/Subtyping Subtyping  (Accessed Sept. 05, 2023)</p> <p>5: https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#unmodifiableList-java.util.List- Collections.unmodifableList(...) JavaDoc  (Accessed Sept. 05, 2023) 6: https://en.wikipedia.org/wiki/Stack-based_memory_allocation Stack-based memory allocation  (Accessed Sept. 05, 2023) 7: https://en.wikipedia.org/wiki/Reference_counting#Garbage_collection Reference counting - Garbage collection (Accessed Sept. 05, 2023) 8: https://doc.rust-lang.org/std/rc/index.html Rust Documentation on module std::rc (Accessed Sept. 06, 2023) 9: https://doc.rust-lang.org/stable/book/ch04-01-what-is-ownership.html The Rust Programming Language - What Is Ownership? (Accessed Sept. 06, 2023)</p>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/1_Intro.html","title":"Intro","text":"<p>Ubuntu 20.04 VM</p> <ul> <li>x11-apps</li> <li>build-essentials</li> <li>...</li> </ul> <p>While designing, think of different games. The goal is a 2D platformer.</p> <p>At least keyboard and mouse. For inputs, the real-time inputs should be used, not events</p> <p>The behaviour on collision should be dependent on the platform type (think different types of platforms in  Mario) (one direction collision)</p>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/1_Intro.html#reflection","title":"Reflection","text":"<p>1-2 page paper. At minimum one full single spaced page (This is worth 40% for each section). </p> <p>Questions that can be asked:</p> <ul> <li>What design decisions did you make?</li> <li>Why?</li> <li>What worked?</li> <li>What didn't work?</li> <li>What does a design decision offer in the future?</li> </ul>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/1_Intro.html#readme","title":"Readme","text":"<p>Should include instructions on how to compile and run the code.</p>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/2_Games.html","title":"Games","text":""},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/2_Games.html#minecraft","title":"Minecraft","text":"<ul> <li>Genre: Sandbox/Expolration</li> <li>Mechanics</li> <li>Getting Stuff:      Requires Inventory, Collision Detection, Pick up button, Items System, Destroying blocks, Gravity, </li> <li>Movement:</li> <li>Survival: Eating, Hunger, Enemy AI, Crafting</li> <li>Animation</li> <li>Combat System</li> <li>Respawn System</li> <li>Day/Night Cycle</li> <li>Render the World</li> <li>World Generation System</li> <li>Save/Load System</li> </ul>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/2_Games.html#the-witcher","title":"The Witcher","text":"<ul> <li>Genre: RPG</li> <li>Mechanics:</li> <li>Complete Quests: Dialog System, Quest System, Experience System, Combat System</li> <li>Day/Night Cycle</li> <li>Inventory System</li> <li>Potion Crafting System</li> <li>Mount System</li> <li>Physics/Collision System</li> <li>Render Pipeline</li> <li>Save/Load System</li> <li>Audio System</li> <li>Cut-Scene Manager</li> <li>Character Selector</li> <li>Story/Narrative System</li> <li>Map System</li> </ul>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/2_Games.html#skyrim","title":"Skyrim","text":"<ul> <li>Genre: RPG</li> <li>Mechnaics:</li> <li>Pick-Pocketing</li> <li>Fast-Travel</li> <li>Character Customisation</li> <li>Economy</li> <li>Loot-System</li> <li>Progression and Leveling System (Trade Assignment)</li> <li>Menus/UI</li> <li>Save/Load System</li> <li>Character Interaction (Relationships, )</li> <li>Content Generation System (for e.g. quest generation)</li> <li>Health System</li> <li>Graphics System</li> <li>Audio System</li> <li>Camera System</li> </ul>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/2_Games.html#common-systems-between-games","title":"Common Systems between Games","text":"<p>A game engine should have common systems:</p> <ul> <li>Graphics</li> <li>Input/Output</li> <li>Movement</li> <li>Low-Level IO (disk write, memory, etc)</li> <li>High-Level (Keyboard, Mouse, Controllers, ...)</li> <li>Physics</li> <li>Collision</li> <li>Gravity</li> <li>Objects</li> <li>Networking</li> <li>Persistence</li> <li>Music/Sound/Art</li> <li>Memory Management</li> </ul> <p>A game engine should be a fully featured, reusable software development kit. In addition efficiency is important! A game engine also should be able to accomplish the creative vision.</p>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/2_Games.html#pong","title":"Pong","text":"<ol> <li>User Input</li> <li>I/O System (Load System)</li> <li>Paddle and Ball </li> <li>Rendering System</li> <li>Collision Detection</li> <li>Physics</li> <li>Audio</li> <li>UI</li> <li> <p>Scoring System</p> </li> <li> <p>Reset the state of the game</p> </li> </ol>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/2_Games.html#2d-platformer","title":"2D Platformer","text":"<ul> <li>IO System</li> <li>Collision</li> <li>Physics</li> <li>Gravity</li> <li>Platform-System</li> <li>Input</li> <li>Player</li> <li>Winning/Loosing Condition</li> <li>Level-System</li> <li>UI</li> <li>Render System</li> <li>Animation</li> <li>AI (on the side)</li> </ul> <pre><code>graph \nlevel[Level System] --&gt; io[IO System]\nlevel --&gt; player\nlevel --&gt; platforms\nlevel --&gt; enemies\ncollision\nphysics --&gt; collision\ngravity --&gt; physics\nplatforms --&gt; physics\n\nrendering --&gt; level\nui --&gt; rendering\nui --&gt; win[Win Condition]\n\nlevel_generation[Level Generation] --&gt; level\n</code></pre>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/2_Games.html#engine-vs-game","title":"Engine vs Game","text":"<p>An engine is...</p> <ul> <li>... usually more data driven</li> <li>... generalised</li> <li>... extensible</li> <li>... reusable</li> </ul> <p>A game usually does not support this properties (, however, there are exceptions). </p> <p>There are properties that both the engine and games should have, like efficiency.</p>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/2_Games.html#optimisations","title":"Optimisations","text":"<p>A game engine can optimises for different things:</p> <ul> <li> <p>Hardware    A game might be optimised for a console or a PC. Since a console has a very specific set of hardware, optimising for this is easier.</p> </li> <li> <p>Style of Games</p> </li> <li> <p>Graphics   2D or 3D</p> </li> <li> <p>Multiplayer</p> </li> </ul> <p>P2P or server/client</p> <p>However, one thing to consider, with every optimisation the game engine strays further from generalisbility.</p>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/2_Games.html#deadlines","title":"Deadlines","text":"<p>A game has internal deadlines (e.g. framerate targets, asset loading, ...). Games can, and often do run without meeting these constraint. Thus, this is a soft constraint.</p>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/3_Basic%20Game%20Engine.html","title":"Basic Game Engine","text":""},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/3_Basic%20Game%20Engine.html#engine-management","title":"Engine Management","text":"<p>If there are static classes, these classes have to be created on start up dynamically. However, this means that the startup order is not defined. One solution for this, is a singleton, which creates the instance on demand. This comes with the drawback of performance spikes when a resource heavy system is loaded.</p> <pre><code>class X {\n   public:\n       static X *inst = null;\n       static X get() {\n           if (inst == null) \n              inst = new X(); \n           return inst; \n       }\n   public X() {\n      y_inst = Y.get();\n      z_inst = Z.get();\n      //other startup\n   }\n}\n</code></pre> <p>A different solution is manualy startup.</p> <pre><code>void main(int argc, char **argc) {\n   x_inst = new X(); //order doesn\u2019t matter\n   y_inst = new Y(); //order doesn\u2019t matter\n   z_inst = new Z(); //order doesn\u2019t matter\n   z_inst-&gt;initialize(); //this order matters\n   x_inst-&gt;initialize(); //this order matters\n   y_inst-&gt;initialize(); //this order matters\n   //main loop\n   //shutdown\n}\n</code></pre>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/3_Basic%20Game%20Engine.html#game-loop","title":"Game Loop","text":"<p>The game loop has multiple targets.</p> <p>One interesting note, for targets that do not run on every thread, like AI agents, each entity should have a different offset. This mitigates that issue that there is one frame, where all agents do their path finding and the game stutters because of this.</p>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/3_Basic%20Game%20Engine.html#callback-driven-framework","title":"Callback Driven Framework","text":"<p>The framework calls the <code>frameStart()</code> and <code>frameEnd()</code> method and the programmer hooks into this.</p> <pre><code>while(true) {\n    for each(frameListener f){\n        f.frameStart();\n    }\n    // use libraries here\n    for each(frameListener f){\n        f.frameEnd();\n    }\n}\n</code></pre>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/3_Basic%20Game%20Engine.html#event-based-updating","title":"Event-based updating","text":"<p>Events are fired when something occurs in the game. One downside is that this makes the game unpredictable, since there could be a sudden spike in events which the game engine needs to handle.</p>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/3_Basic%20Game%20Engine.html#time","title":"Time","text":"<p>Game engines usually implement a concept of time and measure it in tics. A tic can be set to some arbitrary time span.</p> <p>The real-time axis is usually tied to the CPU high resolution timer and will be provided by the OS.</p> <p>The frame-time is defined by the game and can evolve at the same rate as real time. However, the frame time might be paused, stretched, compressed or even reversed.</p> <p>An other property is if the time line is a global or a local timeline. Global timelines are relative to when the game started, while local timelines are relative to some event in the game (e.g. counting the player being in the air).</p> <p>This is an example timeline class</p> <pre><code>class Timeline {\n    private:\n    std::Mutex m; //if tics can change size and the game is multithreaded\n    int64_t start_time; //the time of the *anchor when created\n    int64_t elapsed_paused_time;\n    int64_t last_paused_time;\n    int64_t tic; //units of anchor timeline per step\n    bool paused;\n    Timeline *anchor; //for most general game time, system library pointer\n\n    public:\n    Timeline(Timeline *anchor, int64_t tic);\n    Timeline(); //optional, may not be included\n\n    // the method belows will need to lock the mutex\n    int64_t getTime(); //this can be game or system time implementation\n    void pause();\n    void unpause();\n    void changeTic(int tic); //optional\n    bool isPaused(); //optional\n}\n</code></pre> <p>The one interesting method, <code>getTime()</code> should calculate the following (without pausing): \\(\\frac{currentTime - startTime}{tic}\\). If the timeline supports pausing, one has to subtract the amount of time spent paused, both in units of anchor timeline before dividing by tic and in units of this timeline after dividing by tic size</p>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/3_Basic%20Game%20Engine.html#frame-spikes","title":"Frame Spikes","text":"<p>One approach to mitigate frame spikes is to use a moving average. The engine keeps track of the last few deltas and computing the average of the those. The moving average is then reported as the current delta. The bigger the delta is, the more robust it will be against spikes. However, it also makes it slower to adapt to actual low changes in the system.</p> <p>Another approach is to limit the frame rate to a fixed number. Within a small window of that targeted frame rate, the loop is allowed to continue.</p>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/4_Multithreading.html","title":"Multithreading","text":"<p>As little of the hardware is idle as possible as little of the time as possible, provided it is actually doing useful work</p>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/4_Multithreading.html#fork-and-join","title":"Fork and Join","text":"<p>When two tasks don't depend on each other, they can be multi-threaded. While this looks mostly like a single-threaded application, there is some amount of multi-threading.</p> <p>Each time a thread is needed, a new thread is created for the job and destroyed afterwards.</p>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/4_Multithreading.html#one-thread-per-subsystem","title":"One Thread per Subsystem","text":"<p>Some subsystem are running on a dedicated thread. The thread is created during the start of the game and is running for the entire game.</p> <p>For example, networking, asset management, physics, AI, ...</p>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/4_Multithreading.html#job-model","title":"Job Model","text":"<p>Code is packaged into a job data structure and is submitted to a thread pool. The thread pool schedules the job on a thread and once the job is done, it will let the original code know that the job is done.</p>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/5_Networking.html","title":"Networking","text":""},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/5_Networking.html#client-server-architecture","title":"Client-Server Architecture","text":"<p>The server has the primary</p>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/5_Networking.html#listen-server-architecture","title":"Listen-Server Architecture","text":"<p>This model is similar to the client-server architecture, but the server runs on a client.</p>"},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/6_Memory.html","title":"Memory","text":""},{"location":"23HS/CSC%20481%20-%20Game%20Engine%20Foundation/6_Memory.html#padding","title":"Padding","text":"<pre><code>struct Garbage { \n        double a;\n        int b;\n        short c;\n        void *c;\n        char e;\n        float *f;\n        char g;\n}\n</code></pre> <p>This will result in the following padding <pre><code>8 double\n4 int  \n2 short   \n2 paddding\n8 pointer\n1 char   \n7 padding\n8 pointer\n1 char   \n7 padding\n</code></pre></p> <p>Thus there is a <code>2 + 7 + 7 = 16</code> bit of padding that is wasted.</p> <ul> <li>Let \\(n=2^x\\) for some non-negative integer \\(x\\), and let \\(a\\) denote a memory address</li> <li>If <code>a % n == 0</code>, then we are done since \\(a\\) is alligned</li> <li>Otherwise, construct  a bitmask, \\(b\\), of \\(|a|\\) bits with the value \\(n - 1\\).</li> <li>TODO</li> </ul>"},{"location":"23HS/DSC%20201%20-%20Intro%20into%20R_Python/1_Data%20Science%2C%20the%20sexiest%20job.html","title":"Data Science, The Sexiest job in the 21st Century","text":"<p>There is a big emphasis that data scientist swim in data. (\"They identify rich data sources, join them with other, potentially incomplete data sources, and clean the resulting set\", p.4 Data Scientist: The Sexiest Job of the 21st Century). Additionally, the articel mentions that data scientist can be the eyes for executives. As such they need to be able to effectively communicate with non technical personals (e.g. story telling).</p> <p>Additionally, it sounds like data scientist usually have a high autonomy, but need to be curious to fill their potential.</p> <p>There is also a data scientist shortage.</p> <p>A data scientist should write reports which tell a executive what to do (that would be effectively be a consultant job). Rather they should work with teams developing customer facing products.</p> <p>A data scientist should have a deverse background, since their job is to combine multiple data sets. Additionally a data scientist has to be able to communicate their findings with non-technical people (tell a story)</p>"},{"location":"23HS/DSC%20201%20-%20Intro%20into%20R_Python/1_Data%20Science%2C%20the%20sexiest%20job.html#still-the-sexiest-job","title":"Still the sexiest job","text":"<p>A lot of companies aren't data driven and ignore the advice given by data scientist. This leads to frustration and high turn-over rates.</p> <p>Data scientist are a common job, in no small part due to the educational offers ramping up.</p> <p>Another change is that there are not only data scientst, but other related jobs (machine learning engineer, data engineer, AI specialist, analytics and AI translators)</p> <p>There continouis to be a change in the tools a data scientist uses which causes the job itself to continously change.</p>"},{"location":"23HS/DSC%20201%20-%20Intro%20into%20R_Python/1_Data%20Science%2C%20the%20sexiest%20job.html#discussion-topic-entry","title":"Discussion Topic Entry","text":"<p>What do you think were the most interesting aspects of each article?</p> <ol> <li>What do you think are the most important skills necessary to be a data scientist?</li> <li>What do you think has been the biggest change in the role of a data scientist from 2012 to 2022?$</li> </ol> <p>The first article introduces that a data scientist swims in data and turns a sea of an unstructured information into structured data. The role of an data scientist is not the one of a consultant, but rather as the eyes of a team developing consumer facing products.</p> <p>The second article mentions that data scientist are still one of the most sought people by companies, but that the job has been institutionalised and multiple related jobs have sprung up (e.g. data engineer or AI specialist).</p> <p>A side from being able to code and being strong in math, a data scientist should be able to communicate their findings effectively with their team. Additionally, since data scientist often work with a high degree of autonomy, they need to be naturally curiously and self motivated. </p> <p>One of the biggest change seems to be that there are offerings from university to study data scientists, while 10 years ago barely any university offered any courses or programs. Along with this, companies also started to figure out who data scientists are and how to hire for them.</p> <p>Importantly, companies still struggle to get and retain talent in this area.</p>"},{"location":"23HS/DSC%20412%20-%20Exploring%20Machine%20Learning/Reflection.html","title":"Reflection","text":"<p>The first model, we developed, was using a logistic regression and, in my case, the wine data set. I felt that this was a good starting point to dive back into machine learning. However, one thing that irks me about this model is that there isn't really a metric on its performance.</p> <p>The second model, around linear regression, felt like a logical progression from the logistic regression. However, the model still doesn't include a metric, and thus I'm not actually sure how well it performs.</p> <p>In third model we had a look at k-means and we also learned how to recognise how many clusters a model has via the elbow method. I think my submitted model performed decently well. However, in the admittedly arbitrary category of how exciting the model felt, its behind the later models.</p> <p>In the next assignment we started to delve into neural networks and how they can recognise images. This was the first topic that I really hadn't heard of before. This is not to say, that all the topics before were boring or that I haven't learned anything. On the scale of excitement, this definitely is more on the upper end. Sadly, the model I submitted didn't perform to well.</p> <p>The next submitted model, was about labelling different clothing items and, with the newly learned convolutional neural network, my model hit an accuracy of 91.4%, which is the highest of the neural networks that I made myself. Because of this, this is the model that I've decided to submit. It's the best performing model and simultaneously also the most interesting model, in my opinion.</p>"},{"location":"23HS/FLE%20401/Cultural%20Interview%20Question.html","title":"Cultural Interview Question","text":"<ol> <li>Where are you from?</li> <li>I think you mentioned that you don't have a sibling. How was it to grow up as an only-child?</li> <li>Do you have a big family?</li> <li>You've lived in Europe for a while. What are some differences and similarities to here? </li> <li>the structure of a town and city</li> <li>How is politics different? (since he worked with politicians both in Germany and America)</li> <li>If there is one thing you can change about America, what would it be?</li> <li>What do you like about America?</li> <li>Similarly, what do you like about Germany and England?</li> <li>Do you have a special tradition? (something around thanks giving, Christmas or completely else)</li> <li>How do you celebrate Christmas?</li> <li>How would you compare the food between Germany, America and England?</li> <li>What do you want to do after studying?</li> </ol>"},{"location":"23HS/FLE%20401/Cultural%20Interview%20Question.html#post","title":"Post","text":"<p>1.) Who did you interview? Where is she/he from?</p> <p>I interviewed Nikolai Kutsch. He's a freshman at NC state and lives and  grew up close to Raleigh. He did a political internship in Germany for a year and is, in general, is one of the most cultural open-minded person that I know. While he grew up around Raleigh, part of his extended  family lives in Pennsylvania.     </p> <p>2.) What did you learn about them that is interesting?</p> <p>We talked quite a bit about family, and Nikolai mentioned how family  reunions are a thing. This, at least for my family, doesn't exist.  Interesting enough, usually these events are organized by the older  generation. However, in case of Nikolai's family, the last family  reunion was 10 years ago.</p> <p>The conversation then shifted to how Christmas is celebrated. Since his  extended family lives both in Raleigh and Pennsylvania, finding a date  is difficult for Christmas. This sounds very familiar, as my family also every year struggles to find a date to please both sides of the family  tree. One intriguing difference is that his family, to find a date,  sometimes celebrates Christmas as late as January.</p> <p>One wonderful tradition is that they have a tree full of ornaments.  Typically, the host family contributes one ornament which is somehow  connected to something that append during the year. For example, one  might be a seashell to represent the great time they had at the beach  together. This creates a kind of photo album on the tree.</p> <p>One difference between his to family side, is that the \u201cRaleigh-side\u201d eats  proper food on proper plates, while the Pennsylvania-side doesn't mind  eating from cardboard plates. However, both sides value the time spent  together.</p> <p>When then switched gear and discussed his experience in Germany and how it  compared to America. He was able to spend Christmas with a Germany  family, and noted that their celebrations were similar to how Nikolai's  family celebrates Christmas.</p> <p>On the topic of small-talk, he went there with the expectation of Germans  not engaging in a lot of small talk. However, that didn't turn out to be true as every time he struck up a conversation, his counterpart was  willing to engage in small-talk. Furthermore, he mentioned that he finds it is easier to have a deep conversation in Germany.</p> <p>He mostly tried to blend in in Germany, there were days when he didn't  feel like it. He usually tries to speak accent-free, but would  occasionally speak with an American accent. I find it fascinating that  he can switch between speaking with a perfect German accent and speaking with an American accent.</p> <p>3.) Write 3 sentences that they said that you found interesting.</p> <ol> <li> <p>The grannies are pretty much the main ruling body in my family.</p> </li> <li> <p>I never found that people weren't willing to engage in at least a little bit of small-talk.</p> </li> </ol> <p>(On the topic of how Germans are willing to engage in small-talk)</p> <ol> <li>There were days when I just didn't feel like it. [...] So, I'm actually speaking German with an American accent.</li> </ol> <p>(On the topic of how he blended in, in Germany, and why he sometimes didn't feel like it) </p> <p>4.) Did you learn any new words or phrases? If yes, what were they?</p> <ul> <li>gift-giving (there is usually gift-giving.)</li> </ul> <p>5.) Did you have any communication breakdowns? If yes, how did you overcome them?</p> <p>When the conversation stalled, I had enough questions prepared to change the topic or steer the conversation in a new direction. Additionally,  Nikolai is an excellent conversation partner.</p>"},{"location":"23HS/FLE%20401/Interview%20Questions.html","title":"Interview Questions","text":"<p>1) What is the quality of the instructors? 2) What is the basic structure of class? 3) How big is the size? How intersperse are the buildings? 4) What is the demography of the class room? men vs women? 5) Are you living in dorms</p>"},{"location":"23HS/FLE%20401/Interview%20Questions.html#professors","title":"Professors","text":"<p>Most professors have a professor degree or a PhD (and a \"Lehrstuhl\"). Most of his classes are in German. However, he thinks that that will change, since english is the lingua franca.</p> <p>Students don't talk too often to professors. More often they talk to TAs. How formal professors are addressed depends on the different professors. </p> <p>A lot of professor cannot teach probably. They are just nerds. In America, professors are more interested in student actually learning something instead of just preaching knowledge. Some are more interested in doing research.</p> <p>Professors usually are experts in their topic, lecturer and do work in projects with the industry. Some professors actually work in their field but that is rather rare.</p>"},{"location":"23HS/FLE%20401/Interview%20Questions.html#classroom-resources","title":"Classroom Resources","text":"<p>There are TAs, office ours and sometimes labs (rarely though).</p> <p>Sometimes, there are (sometimes) midterms and almost always a final exam. It is similar to NCSU, where there are projects, exercises during the semester and sometimes a final exam. However, the material is more complex and difficult.</p> <p>Homework is often done in groups. While this isn't encouraged, the university doesn't care too much about it, as long as not everything is the same.</p>"},{"location":"23HS/FLE%20401/Interview%20Questions.html#studenent-schedule","title":"Studenent Schedule","text":"<p>Homework is done on your own or groups. There are assisted homework classes but they need to be requested.</p>"},{"location":"23HS/FLE%20401/Interview%20Questions.html#student-culture","title":"Student Culture","text":"<p>There are parties. Students go to bars and drink (drinking age is 18).</p> <p>There is a dinning hall, however you only get a meal (not all you can eat). A meal cost around 2.80 euro - 5 euro. The food is not the best, but cheap.</p> <p>There are also microwaves</p>"},{"location":"23HS/FLE%20401/Interview%20Questions.html#campus-size","title":"Campus Size","text":"<p>The campus is huge. Most lectures, for him, are in the centre. Around there are the dinning hall/cafeterias and libraries. Outside the centre area are offices and institues of the professors.</p> <p>There are two campuses (around 10km apart). A student can travel between the campuses with an s-bahn. However they need to pay for it.</p>"},{"location":"23HS/FLE%20401/Interview%20Questions.html#prevalence-of-cheating","title":"Prevalence of Cheating","text":"<p>He doesn't think they're cheating. Cheating is punished harshly (bachelor is revoked/not handed out). It is just to risky.</p>"},{"location":"23HS/FLE%20401/Interview%20Questions.html#rigor-of-courses","title":"Rigor of Courses","text":"<p>It depends.</p> <p>It is harder then NC State.</p> <p>There aren't really any resources available to you, and you need to rely on your (smarter) friends. It is partly more difficult because there is less assistant available but also the topics are more complex.</p>"},{"location":"23HS/FLE%20401/Interview%20Questions.html#expectation-of-homework","title":"Expectation of Homework","text":"<p>Rarely homework. There are exercises but ,often, they are optional.</p> <p>The final exam is where it counts.</p> <p>However, that doesn't apply to every subject and there are courses where there are homeworks.</p>"},{"location":"23HS/FLE%20401/Interview%20Questions.html#clubs","title":"Clubs","text":"<p>They are less promoted, however they exist. But are smaller, and less clubs then at NC State.</p>"},{"location":"23HS/FLE%20401/Interview%20Questions.html#diversity-of-student-body","title":"Diversity of Student Body","text":"<p>A lot of exchange students (indian, korean, chinas, russian, ...) Some of them (try) to speak german, some speak english. There is some intermingling. But the ethnicity groups usually keep to themselves.</p>"},{"location":"23HS/FLE%20401/Interview%20Questions.html#essay","title":"Essay","text":"<p>I interviewed Tomas, who studies in Germany. In the following paragraphs, the differences and similarities between Germany, Switzerland, and NC  State are shown.</p> <p>Very few classes are taught in English in both the master's and bachelor's  programs. Contrast that with Switzerland, where every course in the  master's program is in English and even quite a few in the bachelor's  program. </p> <p>Most lectures are a professor or have a PhD, while at ZHAW, my university,  PhD, and professors are still common, not nearly every lecture has this  high of a degree. In my opinion, this can create an environment where  the material though is out of touch with reality. However, Tomas  mentioned that this isn't the case at his university. </p> <p>Also interesting was the format of a class in Germany. Like at NC State, the professor lectures and to get help, one can ask the TA or professor  during office hours. At ZHAW, office hours don't exist because for  almost every class there is a corresponding lab. In the computer science department, these labs are often comparable to assisted homework  classes. The professor is present during the labs and can assist with  questions and problems. Occasionally, we also use equipment, like  oscilloscopes or special development board.</p> <p>A large difference between NC State and Germany, and Switzerland is that, while there are sometimes  midterms, most of the grade comes from the  final exam. On the other hand, at NC State, midterm and final exams seem to only count for about 20% of the final grade. The rest of the grade  comes from assignments and projects. </p> <p>When they do have homework at Tomas' university, they regularly solve them  in group. While this isn't specifically encouraged, it isn't punished,  as long as not everybody submits a carbon copy of each other. At ZHAW,  we at times also solve homework in groups at home or in the lab classes. This is often encouraged, since learning together helps everybody  improve. </p> <p>While these differences are in no way, shape or form exhaustive, they paint a good picture of the similarities and differences.</p>"},{"location":"23HS/FLE%20401/Rules.html","title":"Rules","text":""},{"location":"23HS/FLE%20401/Rules.html#noun-stress","title":"Noun Stress","text":"<p>(https://moodle-courses2324.wolfware.ncsu.edu/mod/page/view.php?id=430793)</p> <p>Most english nouns are stressed on the first syllable:</p> <ul> <li>Notebook</li> <li>COLlege</li> <li>TOtal</li> <li>many more</li> </ul> <p>However, there are exceptions, like misTAKE, shamPOO, hoTEL and many more</p> <p>If a word ends in -tion, then the stress is on the syllable before the -tion.</p> <ul> <li>creAtion</li> <li>asSUMPtion</li> <li>affiliAtion</li> </ul> <p>For three syllable nouns,  about half are stressed on the first syllable (FAculty, CENtury, ...), and the other half sre stressed on the second syllable (comPUter, anOther, ...). There are few exceptions that are stressed on the third syllable (engiNEER, magaZINE, ...)</p>"},{"location":"23HS/FLE%20401/Rules.html#schwa","title":"Schwa /\u0259/","text":"<p>It is the most common vowel sound in English, typically sounds like short \"uh\" or \"ih\" and only appears in an unstressed syllable.</p>"},{"location":"23HS/FLE%20401/Rules.html#tricky-t","title":"Tricky <code>t</code>","text":"<ul> <li>True T   Tong is touching the teethes</li> </ul> <p>Examples: top, attach, true</p> <ul> <li>Stop T   Tong is stopping before touching the teethes</li> </ul> <p>Examples: Hot, Fit</p> <ul> <li> <p>Flap T /d/   Occurs between two vowels   native, party, thirty</p> </li> <li> <p>Omitted T   The t is emitted entierly   Example: internet, winter</p> </li> </ul>"},{"location":"23HS/FLE%20401/Rules.html#th-sounds-vs","title":"Th Sounds: /\u00f0/ vs /\u019f/","text":"<p>\u00f0: rather, the, this, worthy</p> <p>\u019f: wrath, bath, thorn, worth</p>"},{"location":"23HS/FLE%20401/SMART%20Goals.html","title":"SMART Goals","text":"<ol> <li>I will improve how I pronounce /\u02a4/ and /\u0292/ by listening to examples and repeating them. I will read the same sample every week to track my progress over the next 8 weeks.</li> <li> <p>Sample: </p> </li> <li> <p>I will practice pronouncing a list of 10 phrases or words each week. I'll change words once their pronunciation is satisfactory.  I'll record the list each week to track my progress over the semester.</p> </li> </ol> <p>I will practice pronouncing a list of 10 words 5 times a week, in the morning, for a few minutes when I leave for classes in the morning</p>"},{"location":"23HS/FLE%20401/Story%20Corp%20Interview%20Presentation.html","title":"Presentation","text":"<p>Welcome to my presentation about my interview with Ray Easterin.</p> <p>Let's start with who he is: He was born in North Carolina, but ended up growing up in South Carolina. He has a wife and a son. He worked in higher education for 40 years, and for the past 8 years at NC State. He is now retired, but still does some volunteering her and there. Also, he always liked to play tennis.</p> <p>One think that I found surprising and interesting about him, his how much of his life has been defined by his work. And to understand that, I think we have to start with what he studies in collage.</p> <p>Initially, he didn't really know what to do. So, he studied sociology in South Carolina. Mostly because it sounded interesting and this was indeed the case. Towards the end of his bachelor degree, he finally figured out that he wanted to do. He wanted to work in higher education, helping students with their career, to get a job, but also to get a sense of what to do in life; Something that he lacked previously. This revelation made him a better student, since he finally had a goal and purpose to study. After completing his master in that field, he started working. </p> <p>When talking about the topic of higher education he seemed to be glowing with excitement. He clearly knows a lot about the job market, and to do a smart job search and the like. </p> <p>Some interesting facts that he mentioned:</p> <ul> <li>You're better of doing a narrow job search and focus your effort on a particular job</li> <li>about 70% of jobs are never advertised. Instead their given to internal people, like a part-time worker, intern or people in other position</li> <li>Event more interesting, people who were referred, tend to do a better job and stay longer</li> </ul> <p>He described higher education as field, where one has to move around to get better position since people tend to stick around. And so he did; Multiple times for a better position, better pay and a new challenge. </p> <p>Last year, he retired. However, even now, he still helps people with their career through the volunteering for the church. </p>"},{"location":"23HS/FLE%20401/Story%20Corp%20Interview.html","title":"Story Corp Interview","text":"<p>I interviewed Ray Easterlin in the coffee shop at the James B. Hunt Jr. Library. The interview took about 45 minutes. There weren't complete break downs in the conversations. However, there were times where I struggled to keep the conversation going. A quick look at my question sheet always brought me back on track. Still, there are small gaps in there.</p>"},{"location":"23HS/FLE%20401/Story%20Corp%20Interview.html#questions","title":"Questions","text":"<ul> <li>How would you describe yourself?   He was born in North Carolina, and grew up in South Carolina in Charlston. Later, he went to undergrad and grad school in South Carolina. He worked in higher education for 40 years, and the last 8 years at NC State. He retired last year and now does what ever seems like fun.</li> <li>What did you originally study?   Undergrad: Sociology Major; Grad: in the field of higher education.   For his undergrad studies, he wasn't sure what to study, so he chose a sociology major. To wards the end of his undergrad study, he found that he wanted to work in higher education and help others with their studies and careers.</li> <li>Jazz Club?   He volunteers at the non-profit jazz clubs, the Sharp 9/Durum Workshop. Interestingly enough, he isn't a musician. Right when he was retiring, he overheard them saying that they need more volunteers. He is usually the dorm man, taking the tickets.</li> <li>How did you grow to like Jazz?   He used to watch famous jazz musicians on TV. Later, during collage, there was a jazz bar close by where he used to go often. </li> <li>What Sports are you playing?   He always have played tennis. </li> <li>Was retiring a big change?   He cut back a year prior to retiring. He mentioned that he felt that it was the right time. He is also in the life long learning program at NC State, where he has some fun classes (e.g. about base ball talk). Additionally, he does some volunteer work for a church to help people to with their resumes and job search</li> <li>What kind of people show up for that?</li> <li>Is it different from what students needed or are there similarities?   There are a lot of similarities. The main difference is that they already have experience, but also bills to pay and worried.</li> <li>He mentioned that over 70% of the jobs are not advertised, but rather are given to internal people (like part-time, internships or people in different position). Furthermore, people who are refered do a better job and stay longer.</li> <li>How did you like school while growing up?   High school was alright. He found it frustrating that he didn't know what to do and others seem to have it figured out. However, with hindsight, this was not the case. When he eventually figured it out and went to grad school, he became a more serious student because he had a direction and a goal</li> <li>Did you see that reflected in your grades? - Yes</li> <li>Was sociology as interesting as you initially thought?</li> <li>Did that later help you with education?    Sociology helps you understand people who are different from your self?</li> <li>What is a job you'd get after studying sociology?   Social worker</li> <li>How did your life turn out differently than you thought when you were younger?   He moved more than he thought he would. Moving was his choice. (However, it seems to me that he always moved because of his job)</li> <li>How did you start to play tennis?</li> <li>How did these relationships hold up, while you was moving around?    He always stay in touch</li> <li>Was moving also a curiosity to see something new or was it \"just\" job related?   It was just job related. In the field of higher education, one has to move to climb the latter, since a lot of people stick around.  He moved to get climb the latter and get a new challenge.</li> <li>Have you always lived in the south?</li> <li>What are differences and similarities between the different regions?   On this topic, he mentioned that Austin is a very progressive city, which surprised me, since Texas as a hole is more conservative. He explains this with that a lot of people move to Austin for a job.</li> <li>Did you ever not like the people where you lived?   No. He moved on because the job changed or he was just ready to move on.</li> <li>What are the most proud of?   He is proud of having found a profession and being able to earn a living for his family. He also found something he enjoyed to do and stay challenged.</li> <li>What are some new challenges ahead of you?</li> <li>Have you travelled a lot in the States?   While working in Texas he travelled a lot for work to go to conferences. Additionally, he managed employer relationships and he would visits potential employers of students.</li> <li>What kind of people attend the live long learning program?   A lot of retired people, since it is usually offered just during the day.</li> </ul>"},{"location":"23HS/FLE%20401/Story%20Corp%20Interview.html#thoughtsnotessurprises","title":"Thoughts/Notes/Surprises","text":"<p>Something I found interesting about him and his life is how much of it has been defined by his work. He seems to be very proud of what he archived in his working life and how this allowed him to support his family. I think this is supported by the fact that he moved multiple times because of work and to be challenged at work.</p> <p>To balance the job, he always played tennis. This also allowed to him to meet new people, sometimes even international ones.</p>"},{"location":"23HS/FLE%20401/Story%20Corp%20Interview.html#speech-artefacts","title":"Speech Artefacts","text":"<ol> <li>\"You ought to meet this person\" \\(\\to\\) You oughdameet this person</li> <li>\"They prefer it\" \\(\\to\\) They preferid</li> <li>\"Talking baseball class\" \\(\\to\\) Talkin baseball class</li> </ol> <p>Unknown Words: Juvenile</p>"},{"location":"23HS/FLE%20401/Story%20Corp%20Interview.html#quote","title":"Quote","text":"<p>I did find it frustrating that I didn't know what I wanted to do, 'cause it seemed like it - but this was not the case - but it seemed like a lot of people already had it all figured out, and I didn't.</p> <p>I really like this quote, because I think a lot of people struggle with finding their purpose in life and it does seem like everybody else already know what to do.</p> <p>Additionally, he did eventually find his purpose which made him a better student, and probably explains partly why he feels so passionately about his work.</p>"},{"location":"23HS/FLE%20401/Story%20Corp%20Interview.html#reflection","title":"Reflection","text":"<p>Overall, the interview went well. I was mostly able to continue with a different related question after my interviewee has responded. When I didn't know how to continue, a quick glance to my prepared questions got my back on track. Ray Easterlin was also a good interviewee and responded with enough details to paint a picture.</p> <p>As to if I would want to do it again, I certainly enjoyed the experience. However with all the preparation and planing involved, I don't see my self changing my career planing any time soon.</p>"},{"location":"23HS/FLE%20401/stuff.html","title":"Stuff","text":""},{"location":"23HS/FLE%20401/stuff.html#question-2","title":"Question 2","text":"<ul> <li>Daisy: Resident evil</li> <li>K-dramas (A time called you), Tammle movies,</li> <li>TcheHo: Fitness videos (on youtube)</li> <li></li> <li> <p>symbolic: I've had classes where we used symbolic equation solvers in python.</p> </li> <li>capacitiy: One of my current classes was really quickly at capacity. I was lucky to get in.  The flexibility of some of my teachers amazes me.</li> <li>manipulation: Computer science is all about the manipulation of bits and bytes.</li> </ul>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html","title":"Cheat Sheet","text":""},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#kubernetes","title":"Kubernetes","text":""},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#kubectl-get","title":"<code>kubectl get</code>","text":"<p><code>kubectl [-n &lt;namespace&gt;] get &lt;obj&gt; [-o wide]</code>,</p> <p>where <code>&lt;obj&gt;</code> can be:</p> <ul> <li><code>all</code> returns all objects</li> <li><code>pods</code></li> <li><code>services</code></li> <li><code>secrets</code></li> </ul> <p><code>-o wide</code> prints more details</p>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#kubectl-describe","title":"<code>kubectl describe</code>","text":"<p>Describes the given object</p> <p><code>kubectl describe &lt;object-type&gt; &lt;name&gt;</code></p> <p>, where <code>&lt;object-type&gt;</code> is the type (e.g. <code>pod</code>, <code>service</code>, ...) and the <code>&lt;name&gt;</code> is the name</p>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#kubectl-logs-pod","title":"<code>kubectl logs &lt;pod&gt;</code>","text":"<p><code>kubectl logs [-f] [-p] &lt;pod&gt;</code></p> <p>Returns the logs of the given pod</p> <ul> <li><code>-f</code> follows the log</li> <li><code>-p</code> also returns the logs of the previous instance</li> </ul>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#kubectl-rollout-restart-deployments","title":"<code>kubectl rollout restart &lt;deployments&gt;</code>","text":"<p>Restarts the given deployments in a rolling fashion.</p>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#kubectl-create-secret","title":"<code>kubectl create secret</code>","text":"<p><code>kubectl create secret generic &lt;name&gt; [--from-literal=&lt;key&gt;=&lt;value&gt;] [-o yaml] [--dry-run]</code> </p> <p>Creates a new secret with the <code>&lt;name&gt;</code> and the given key value. <code>--from-literal=...</code>  can be supplied multiple times.</p> <p>When adding <code>-o yaml</code>, the secrete is outputted as yaml. When appending <code>--dry-run</code>, the command is only simulated and doesn't have a lasting effect. </p> <p>Secrets can be viewed by typing <code>kubectl describe secrets &lt;name&gt;</code>. The outputted values are stored in base64 and can be decoded with <code>echo &lt;base64 value&gt; | base64 --decode</code></p>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#kubectl-delete-secret-secret-name","title":"<code>kubectl delete secret &lt;secret-name&gt;</code>","text":"<p>Deletes a secret with the given name</p>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#kubectl-create-configmap-name-from-filepath","title":"<code>kubectl create configmap &lt;name&gt; [--from-file=&lt;path&gt;]</code>","text":"<p>Creates a new config map with the given name. If <code>--from-file=&lt;path&gt;</code> is appended, the value of the config map is read from the given file.</p> <p>A config map can be retrieved with <code>kubectl get configmap &lt;name&gt; -o yaml</code>.</p>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#kubectl-port-forward-servicepod-n-namespace-external-portinternal-port","title":"<code>kubectl port-forward &lt;service/pod&gt; [-n &lt;namespace&gt;] &lt;external-port&gt;:&lt;internal-port&gt;</code>","text":"<p>Forwards the <code>&lt;external-port&gt;</code> to the <code>&lt;internal-port&gt;</code> of the given pod or service</p> <p><code>kubectl port-forward svc/argocd-server -n argocd 8443:443</code></p>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#kubectl-scale-deployment-deployment-name-replicasreplica-nr","title":"<code>kubectl scale deployment &lt;deployment-name&gt; --replicas=&lt;replica nr&gt;</code>","text":"<p>Allows for modifying the number of replicas in a deployment.</p>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#kubectl-exec-pod-name-cmd","title":"<code>kubectl exec &lt;pod name&gt; -- &lt;cmd&gt;</code>","text":"<p>Executes a command in the given pod.</p>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#kubernetes-yaml-file","title":"Kubernetes YAML File","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: order-deployment\n    version: \"1.0\"\n  name: order-deployment-name\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: order-pod\n  strategy: {}\n  template:\n    metadata:\n      labels:\n        app: order-pod\n    spec:\n      containers:\n      - name: order\n        image: registry.localhost:5000/ccp2-order:1\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 8081\n        resources: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: order-service\n  name: order-service-name\nspec:\n  type: ClusterIP\n  ports:\n  - port: &lt;externalPort&gt;\n    protocol: TCP\n    targetPort: &lt;containerPort&gt;\n    name: http\n  selector:\n    app: order-pod\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: order-ingress-name\n  labels:\n    name: order-ingress\nspec:\n  rules:\n  - host: order.160.85.253.189.nip.io\n    http:\n      paths:\n      - pathType: Prefix\n        path: \"/\"\n        backend:\n          service:\n            name: order-service\n            port:\n              number: 80\n</code></pre>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#k3d","title":"K3D","text":""},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#k3d-cluster-create","title":"<code>k3d cluster create</code>","text":"<p>To create a cluster:</p> <p><code>k3d cluster create --config &lt;path-to-config.yaml&gt;</code></p> <p>With <code>kubectl cluster-info</code> one can verify, if the cluster was correctly setup.</p>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#k3d-cluster-delete","title":"<code>k3d cluster delete</code>","text":"<p>This deletes a cluster</p> <p><code>k3d cluster delete [--all]</code></p>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#buildpack","title":"buildpack","text":""},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#pack-build","title":"<code>pack build</code>","text":"<p><code>pack build &lt;image-tag&gt; --path &lt;app-folder-path&gt; --builder paketobuildpacks/builder-jammy-tiny</code></p> <p><code>pack build ccp2-order:1 --path ./microservice-order --builder paketobuildpacks/builder-jammy-tiny</code></p>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#helm","title":"Helm","text":""},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#helm-repo-add","title":"<code>helm repo add</code>","text":"<p>Adds a repository </p> <ul> <li><code>helm repo add &lt;name&gt; &lt;url&gt;</code></li> <li><code>helm repo add bitnami https://charts.bitnami.com/bitnami</code></li> </ul>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#helm-search-repohub-what","title":"<code>helm search [repo|hub] &lt;what&gt;</code>","text":"<p>Searches for a chart</p>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#helm-install-name-chart-name-generate-name-set-keyvalue","title":"<code>helm install [&lt;name&gt;] &lt;chart-name&gt; [--generate-name] [--set &lt;key&gt;=&lt;value&gt;]</code>","text":"<p>Installs the given chart. </p> <p>To install a chart, either a name has to be given explicitly or <code>--generate-name</code>  has to be set.<code>--set &lt;key&gt;=&lt;value&gt;</code> sets the value of <code>.Values.&lt;key&gt;</code> to the given value in the templates.</p> <ul> <li><code>helm install bitnami/mysql --generate-name</code></li> <li><code>helm install test-mysql bitnami/mysql</code></li> </ul>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#helm-show-chartreadmevalues-chart","title":"<code>helm show (chart|readme|values) &lt;chart&gt;</code>","text":"<p>Shows either the chart, readme file or values of the given chart.</p> <ul> <li><code>helm show chart bitnami/mysql</code></li> <li><code>helm show readme bitnami/mysql</code></li> <li><code>helm show values bitnami/mysql</code></li> </ul>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#helm-list","title":"<code>helm list</code>","text":"<p>Lists the installed charts</p> <p></p>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#helm-uinstall-chart","title":"<code>helm uinstall &lt;chart&gt;</code>","text":"<p>Uninstalls the given chart.</p>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#helm-lint-chart-dir","title":"<code>helm lint &lt;chart dir&gt;</code>","text":"<p>Lints a helm chart</p>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#helm-template-f-valuesyaml-chart-dir","title":"<code>helm template -f values.yaml &lt;chart dir&gt;</code>","text":"<p>Evaluates the templates in the given chart with the values in the values.yaml file.</p>"},{"location":"24FS/CCP2/00_Cheat%20Sheet.html#prometheus","title":"Prometheus","text":"<ul> <li><code>container_cpu_usage_seconds_total{namespace=\"default\"}</code>   Finds all <code>container_cpu_usage_seconds_total</code> object where <code>namespace</code> equals to <code>default</code>.</li> <li><code>container_cpu_usage_seconds_total{namespace=\"default\",name=\"\"}[1m]</code>   Returns a vector of results in the given time period</li> <li><code>rate(container_cpu_usage_seconds_total{namespace=\"default\",name=\"\"}[1m])</code>   Calculates the rate of change (the first derivation) in the last 1 minute</li> <li><code>sum(container_memory_usage_bytes{namespace=\"default\"}) by(pod)</code>   This sums up the memory usage and groups it by the <code>pod</code> names. Additional columns can be specified in <code>by (pod, namespace, ...)</code></li> </ul> <p>The <code>~</code> means that the following expression is a regex. Thus <code>field =~ \"regex\"</code>, filters if <code>field</code> matches the regex. On the other hand <code>field !~ \"regex\"</code>, filters if the <code>field</code> does not match the <code>regex</code>. </p>"},{"location":"24FS/CCP2/01_PAAS.html","title":"Platform as a Service","text":"<p>Definition of PaaS</p> <p>The capability provided to the consumer is to deploy onto the cloud infrastructure consumer-created or acquired applications created using programming languages, libraries, services, and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including network, servers, operating systems, or storage, but has control over the deployed applications and possibly configuration settings for the application-hosting environment</p>"},{"location":"24FS/CCP2/01_PAAS.html#costs","title":"Costs","text":"<ul> <li>Capital Expenses (CAPEX)   Investing and earning the benefits later. This is usually buying, improving, investing in infrastructure</li> <li>Operational Expenses (OPEX)   Ongoing cost for running a product, business or a system, basically, the day-to-day expenses. This are things like salaries, license fees, subscriptions, testing, downtime, outages,  ...</li> <li>Total Cost of Ownership (TCO)   This is \\(CAPEX + OPEX\\). When comparing TCO costs, one must ensure that they compare TCO costs over the same period of time.</li> </ul> <p>The following images show the used capacity of a service:</p> <p></p> <p>If the consumption model is very stable and doesn't have huge sudden spikes, it is advantageous to buy the hardware outright.</p> <p>Matching the required computing power with the actual exiting computing power is hard and over-provisioning is wasting money. Thus having infrastructure that can scale according to the currently required computing power can lead to less money having to be spent.</p> <p></p>"},{"location":"24FS/CCP2/01_PAAS.html#cloud-computing-principles","title":"Cloud Computing Principles","text":"<ul> <li>On-demand self-service   Computing capabilities can be provisioned automatically without requiring human interaction with each service provider. Basically, there needs to be an API</li> <li>Broad network access   Capabilities are available over the network</li> <li>Resource pooling (multi-tenancy)   The cloud provider pools computing resources to serve multiple consumers. The consumer has no control over the exact location of the computing power. They may be able to specify a broad area</li> <li>Rapid elasticity   Capabilities can be elastically provisioned and released, in some cases automatically, to match demand in computing power.</li> <li>Measured service (pay-as-you-go)   Consumed resources are metered and paid-as-you-go</li> </ul> <p>There are multiple models of deployment regarding cloud computing:</p> <ul> <li>Private cloud   The cloud infrastructure is exclusively used by a single organisation, comprising of multiple consumers (e.g. business unit). The actual infrastructure may be owned and managed by the organisation, a third party or a combination of them.</li> <li>Community cloud   The cloud infrastructure is provisioned for exclusive use by a specific community of consumers from organisations that have shared concerns (e.g. a government provisioning infrastructure for all government departments)</li> <li>Public cloud   The cloud infrastructure is provisioned for open use by the general public </li> <li>Hybrid cloud   This is a combination of multiple infrastructures (e.g. having the computing power for 90% of the time, but for burst, go to a public cloud)</li> </ul> <p>These are the service models:</p> <ul> <li>Software as a Service (SaaS)   The consumer can use a service, running in a cloud, but doesn't manage it. The consumer is the end-user</li> <li>Function as a Service (FaaS)   The consumer deploys a function to the cloud and invokes it when necessary. This is also sometimes called serverless computing.</li> <li>Platform as a Service (PaaS)   The cloud provider provides the capability to run an application. The consumer doesn't manage or control the underlying cloud infrastructure</li> <li>Container as a Service (CaaS)   The provider provides the capability to run containers in the cloud</li> <li>Infrastructure as a Service (IaaS)   The cloud provider provides access to processing, storage, network and other fundamental computing resources. </li> </ul> <p>In the following diagram, one can see what is managed by the customer, what is provided by the providers and what allows the scaling of computing power.</p> <p></p> <p>The following diagram shows the flexibility on the x-axis and simplicity on the y-axis:</p> <p></p> <p>The following diagram shows how the different components of IaaS match to the components of PaaS:</p> <p></p>"},{"location":"24FS/CCP2/01_PAAS.html#structure","title":"Structure","text":""},{"location":"24FS/CCP2/01_PAAS.html#staging","title":"Staging","text":"<p>In staging, an image (e.g. docker image, vm, ...) is built. This is part of the service PaaS provides. This is typically done in the following fashion:</p> <ul> <li>Spin up temporary runtime</li> <li>run build instructions in the runtime</li> <li>create runtime image</li> <li>save image to store/registry</li> <li>destroy temporary runtime</li> </ul>"},{"location":"24FS/CCP2/01_PAAS.html#networking","title":"Networking","text":"<p>Networking allows for communication between two applications in the cluster (which may be located on different nodes in the cluster). At the same time it is also responsible for the communication to the outside through a firewall. </p> <p>An important feature to debug is providing a tunnel into the cluster. This can allow a user to access information that would be off-limits from the outside.</p>"},{"location":"24FS/CCP2/01_PAAS.html#cloud-controller","title":"Cloud Controller","text":"<p>The cloud controller provides an API to the user. In addition, usually there is also a web ui and a cli tool.</p>"},{"location":"24FS/CCP2/01_PAAS.html#health-management","title":"Health-Management","text":"<p>This sub-system monitors the state of the application (e.g. IO, memory, CPU, health endpoints, number of instances, version numbers, ...) and compares the \"intended\" with the actual state. If it notices an anomaly it can take corrective actions.</p> <p>This subsystem might be part of the runtime orchestrator.</p>"},{"location":"24FS/CCP2/01_PAAS.html#messaging-systembus","title":"Messaging-System/Bus","text":"<p>This sub-system provides the communication between all the different sub-systems. This can be a a key-value store, and sub-systems can subscribe and publish events over it.</p> <p>It needs to protect itself at all cost, since if it fails, the whole cluster will stop working.</p>"},{"location":"24FS/CCP2/01_PAAS.html#backing-services","title":"Backing Services","text":"<p>This provides services that an application may need (like a database-server, mail service). This usually entails a marketplace, where a user can configure which backing-services an application needs. Additionally, the user can also setup and bind a service to an application, as well as unbinding and removing a service from the application. This should also be available over an API.</p>"},{"location":"24FS/CCP2/01_PAAS.html#log-aggregation-eventmetrics-controller","title":"Log-Aggregation, Event/Metrics-Controller","text":"<p>This aggregates all the logs from the different applications and emits events (like an application has started, crashed )</p>"},{"location":"24FS/CCP2/01_PAAS.html#operations-support-and-management-systems-access-control","title":"Operations Support and Management Systems (Access Control, ...)","text":"<p>This sub-system allows for multi-tenancy and splitting up the service of the system into different projects for different users and groups. In addition to that, it may do the rating and creation of the bill.</p>"},{"location":"24FS/CCP2/01_PAAS.html#openshift","title":"OpenShift","text":"<p>OpenShift is based on REHL and kubernetes. As such, it exposes quite a few of kubernetes' services and builds some on top of it.</p> <p>OpenShift consists of a master node, which provides the kubernetes master, API access, data store, and more. It uses the key-value store etcd to provide the messaging service of PaaS.</p> <p></p> <p>The following diagram shows how the OpenShift stack maps to the general structure of PaaS:</p>"},{"location":"24FS/CCP2/01_PAAS.html#cloud-foundry","title":"Cloud Foundry","text":"<p>Cloud Foundry is an alternative to OpenShift that is a bit more OS agnostic. Since it has been conceived before docker, it isn't built around kubernetes. Instead, they built their own container management system named Diego.</p> <p></p>"},{"location":"24FS/CCP2/01_PAAS.html#cloudfoundry-korifi","title":"CloudFoundry KORIFI","text":"<p>Korifi reimplements part of CloudFoundry to use kubernetes</p> <p></p>"},{"location":"24FS/CCP2/03_Kubernetes.html","title":"Kubernetes","text":""},{"location":"24FS/CCP2/03_Kubernetes.html#containers","title":"Containers","text":"<p>All containers running on a host share the same kernel. However, the processes of the container are isolated against the processes in other containers and against the host system itself.</p> <p>This isolation extends to other areas as well, like:</p> <ul> <li>visibility of shared resources (with linux namespaces)</li> <li>access to shared resources (with linux cgroups)</li> <li>usage of shared resources (with linux cgroups)</li> </ul> <p>Each container has its own file-system (using Root-FS).</p>"},{"location":"24FS/CCP2/03_Kubernetes.html#why-container-orchestration","title":"Why Container Orchestration","text":"<p>Container orchestration provides a number of benefits:</p> <ul> <li>Create multiple, interconnected containers</li> <li>Deploying containers on multiple hosts to improve redundancy</li> <li>Sometimes one wants to run tightly coupled containers on the same node (affinity)</li> <li>Redundant containers should not run on the same node (anti-affinity)</li> <li>Deploying a new version without service interruption</li> <li>The ability to take down a host for maintenance</li> <li>Health management, which monitors the health of the containers</li> </ul>"},{"location":"24FS/CCP2/03_Kubernetes.html#concepts","title":"Concepts","text":"<p>A basic principle of Kubernetes is, that the desired state is configured. Kuberenetes then tries to migrate the current state to the desired state. As such, the user doesn't say \"I want three more pods of this type\". Instead, the user specifies the number of required pods and Kubernetes will take care of creating and killing the right amount of pods.</p>"},{"location":"24FS/CCP2/03_Kubernetes.html#pods","title":"Pods","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\n  labels:\n     app: &lt;app-label&gt;\nspec:\n  containers:\n  - name: nginx\n    image: nginx:1.14.2\n    ports:\n    - containerPort: 80\n</code></pre> <p>The atomic unit of Kubernetes is a pod. Pods are scaled and replicated. Pods can contain one ore more containers in a single pod. </p> <p>All containers in a pod share the following resources:</p> <ul> <li>They are scheduled on the same cluster node</li> <li>They share IPC namespace, shared memory, volumes, network stack, etc</li> <li>Additionally, they share the IP address</li> <li>Containers in a pod \"live and die\" together (figuratively they are married)</li> <li>Pods are ephemeral, meaning, if a node/pod/containers fail, they are not restarted</li> </ul> <p>Because of this, if containers within a pod want to talk to each other, they can simply use <code>localhost</code>.</p> <p></p> <p>Pods allow tightly coupling containers. An example would be a web container, which is supported by a helper container that ensures the latest content is available to the web server. Supporting containers are called sidecar containers.</p> <p></p> <p>As one can see in the flow chart above, pods are deployed atomically, meaning either all containers run, or all of them are terminated. If a pod dies (e.g. a container of the pod crashes or the cluster node containing the pod crashes) Kubernetes doesn't bother to bring the pod back up. Instead, a new pod is deployed in its place (and as such, the pod has a new pod ID and a new IP address). Pods are treated as cattle in the analogy pets vs cattle.</p>"},{"location":"24FS/CCP2/03_Kubernetes.html#namespace","title":"Namespace","text":"<p>A namespace can be used to separate different applications. Furthermore, it's possible to write policies which limit the resources for the namespace.</p> <p>All namespaces can be viewed by <code>kubectl get namespaces</code></p>"},{"location":"24FS/CCP2/03_Kubernetes.html#replication","title":"Replication","text":"<p>A replication controller deploys a desired number of replicas of a pod definition. The controller monitors if all of the pods are still running and if one dies, the controller will deploy a new one. This ensures that the correct number of replicas is always running.</p> <p>Another way, which is replacing replication containers,  are replica sets, which are more flexible. Pods are assigned to replica sets by labels specified on pods. Replica Sets are used by a deployment.</p> <p></p>"},{"location":"24FS/CCP2/03_Kubernetes.html#deployments","title":"Deployments","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.14.2\n        ports:\n        - containerPort: 80\n</code></pre> <p>Deployments enable release management and allow</p> <ul> <li>deploying an initial release</li> <li>updating to a new release</li> <li>rolling back to a previous release</li> <li>deleting a release</li> </ul> <p>There are different strategies how to update and roll back:</p> <ul> <li>Recreate   Kill the existing pods and bring up the new container, but the app has a downtime</li> <li>Rolling Update   Brings up new pods and kills old pods gradually. During a rolling update, the minimum required number of pods are running. As can be seen in the diagram below, Kubernetes first starts a new <code>v.2</code> pod before killing an old <code>v.1</code> pod. In the case of a rollback, this process is done in reverse. </li> </ul>"},{"location":"24FS/CCP2/03_Kubernetes.html#daemonset","title":"DaemonSet","text":"<p>A daemon set is a special version of a replica set, which ensures that a pod is running on each working node (or on a specified set of nodes). This is useful for services which need a representation on each node. For example network management, log/metrics collection pods, cluster monitoring, ...</p> <p></p>"},{"location":"24FS/CCP2/03_Kubernetes.html#service","title":"Service","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\nspec:\n  selector:\n    app.kubernetes.io/name: MyApp\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 9376\n</code></pre> <p>Services provide a reliable networking endpoint for a set of pods. This allows for pods to be killed and deployed (thus changing their IP address) and still having a reliable IP address and DNS entry to access the pods. The service acts as a load-balancer and balances all requests to the back-end pods.</p> <p>Services are useful, if pods need to communicate with other pods.</p> <p>Importantly, services are not pods, instead they are part of the network configuration.</p> <p>Services come in many flavors:</p> <ul> <li> <p>ClusterIP (default)   Exposes the service on an internal IP address in the cluster, making it only reachable from within the cluster   </p> </li> <li> <p>NodePort</p> </li> </ul> <p>In addition to the properties of a ClusterIP, a NodePort service is accessable from the outside with a specific port (by default in a range of 30'000 - 32'767). Inside the cluster, using NAT, the traffic is forwarded to a pod.</p> <p></p> <ul> <li>LoadBalancer   This exposes the service externally using a cloud provider load balancing service (the cloud provider has to install a load balancer and make it available to Kubernetes) and assigns a fixed external IP to the service. The necessary ClusterIP and NodePort are created automatically.</li> </ul> <p></p> <ul> <li>ExternalName   Maps a DNS CNAME record to an external address. This allows pods in the cluster to access an external resource with one DNS name (e.g. an external DB server)</li> </ul>"},{"location":"24FS/CCP2/03_Kubernetes.html#label-label-selectors","title":"Label &amp; Label Selectors","text":"<p>A label is a a key-value pair attached to a Kubernetes object. Both the key and value can be freely chosen and objects can have multiple labels.</p> <p>A label selector can be used to select pods. One example is when defining a service, the label selector specifies which pods are load-balanced by the service.</p>"},{"location":"24FS/CCP2/03_Kubernetes.html#ingress","title":"Ingress","text":"<pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: minimal-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\nspec:\n  ingressClassName: nginx-example\n  rules:\n  - http:\n      paths:\n      - path: /testpath\n        pathType: Prefix\n        backend:\n          service:\n            name: test\n            port:\n              number: 80\n</code></pre> <p>(IC=Ingress Controller)</p> <p>An ingress controls is an http(s) proxy, which then forwards it to internal pods. Additionally, it can handle SSL certificates.</p>"},{"location":"24FS/CCP2/03_Kubernetes.html#volumes","title":"Volumes","text":"<p>A volume is a storage shared between containers in the same pod. They have the same lifetime as a pod (unless persistant volumes are used)</p> <p>The following types are supported:</p> <ul> <li><code>emptyDir</code>: erased at Pod deletion (non-persistent)</li> <li><code>hostPath</code>: path from the host machine (single node only). Is persistent with machine lifetime</li> <li><code>local</code>: local storage device mounted on nodes (persistent)</li> <li><code>nfs</code>,<code>iscsi</code>, <code>fc</code>: network file system (persistent) </li> <li><code>secret</code>: used to pass sensitive information, such as passwords, to pods. Secrets can be stored in the Kubernetes API and mounted as files.  Secret volumes are backed by a tmpfs which is RAM-backed.</li> </ul> <p>Persistent volumes come in two types:</p> <ul> <li>static: volumes need to be explicitly created by a cluster admin</li> <li>dynamic: a StorageClass is configured by the admin which then creates a specific volume on demand</li> </ul> <p>A persistent volume claim is used to map volumes to pods.</p>"},{"location":"24FS/CCP2/03_Kubernetes.html#config-map","title":"Config Map","text":"<p>Config map is a key-value object resource in Kubernetes, which can be deployed and then referenced from other objects (e.g. pods, deployments, ...).</p> <p>Config maps can be created via the command line with `kubectl create configmap  --from-file <p>This can be applied with <code>kubectl apply -f &lt;file&gt;</code></p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n    name: game-demo\ndata:\n    # property-like keys; each key maps to a simple value\n    player_lives: \"3\"\n    properties_file: \"ui.properties\"\n\n    # file-like keys\n    # the following properties are stored in the file game.properties\n    # the pipe (|) indicates that it is a file\n    game.properties: |\n        enemy.types=aliens,monsters\n        player.maximum-lives=5\n</code></pre> <p>Later this file can be referenced:</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n    name: configmap-demo-pod\nspec:\n    containers:\n    - name: demo\n      image: alpine\n      env: # Define the environment variable\n        - name: PLAYER_LIVES\n          valueFrom:\n            configMapKeyRef:\n                name: game-demo   # The ConfigMap name\n                key: player_lives # The key to fetch.\n    volumeMounts: # Will mount /config/game.properties\n    - name: config # this name is set in volumes with name\n      mountPath: \"/config\"\nvolumes:\n    # from game-demo config-map\n    # specifying the config map in the volume section is only required \n    # if the config is mounted\n    - name: config\n      configMap:\n        name: game-demo\n</code></pre>"},{"location":"24FS/CCP2/03_Kubernetes.html#secrets","title":"Secrets","text":"<p>A secret is similar to a config map, but the content is encoded. It is usually used for credentials or certificates.</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n    name: db-cred\ntype: Opaque\ndata:\n    db-user: ZGJ1c2VyCg==\n    db-passwd: ZGJwYXNzCg==\n</code></pre> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n    name: secret-demo-pod\nspec:\n    containers:\n    - name: demo\n    env:\n    - name: DB_USER\n      valueFrom:\n          secretKeyRef:\n            name: db-cred\n            key: db-user\n    - name: DB_PASSWD\u2026  \n</code></pre> <p>A secrete can be created with <code>kubectl create secret generic &lt;name&gt; [--from-literal=&lt;key&gt;=&lt;value&gt; ...]</code>. A secrete can be viewed by first describing it with <code>kubectl describe secrete &lt;name&gt;</code> and copy the base64 value and decode it with <code>echo &lt;base64 value&gt; | base64 --decode</code>.</p>"},{"location":"24FS/CCP2/03_Kubernetes.html#object-resource-api","title":"Object Resource API","text":"<p>The basic structure is always the same:</p> <ul> <li><code>apiVersion</code> the version of the Object Resource API used (e.g. <code>v1</code>)</li> <li><code>kind</code>: the kind of object specified</li> <li><code>metadata</code>: metadata which are similar between all object types (e.g. names, UIDs, labels, versions, ...)</li> <li><code>spec</code>: The actual specification of the object. This differs between the object types</li> </ul> <p>The following is an example of an nginx pod:</p> <p></p> <p>The following shows how to define a Deployment object:</p> <p></p> <p>With <code>kubernetes apply -f my-nginx-deployment.yaml</code> the resource can by created or updated. </p> <p>To create a service, the following spec can be used:</p> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n    name: my-nginx-service\nspec:\n    type: NodePort\n    ports:\n      - protocol: TCP\n        port: 8080 # port of the service\n        targetPort: 80 # port on pod\n        nodePort: 30007 # port on node\n    selector:\n        app: nginx # reference to deployment\n</code></pre> <p>To define an ingress server, the following can used:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n    name: my-nginx-ingress\n    annotations:\n        ingress.kubernetes.io/ssl-redirect: \"false\"\nspec:\n    rules:\n  - host: www.mywebpage.com\n        http:\n            paths:\n              - pathType: Prefix\n                path: \"/\"\n                backend:\n                    service:\n                        name: my-nginx-service\n                        port: \n                            number: 80\n</code></pre>"},{"location":"24FS/CCP2/03_Kubernetes.html#custom-resources","title":"Custom Resources","text":"<p>Kubernetes allows one to extend their yaml format by custom resources.</p> <pre><code>apiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: shirts.stable.example.com\nspec:\n  group: stable.example.com\n  scope: Namespaced\n  names:\n    plural: shirts\n    singular: shirt\n    kind: Shirt\n  versions:\n  - name: v1\n    served: true\n    storage: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n              properties:\n                color:\n                  type: string\n                size:\n                  type: string\n    selectableFields:\n    - jsonPath: .spec.color\n    - jsonPath: .spec.size\n    additionalPrinterColumns:\n    - jsonPath: .spec.color\n      name: Color\n      type: string\n    - jsonPath: .spec.size\n      name: Size\n      type: string\n---\n\napiVersion: shirts.stable.example.com\nkind: Shirt\nmetadata:\n    name: myShirt\nspec:\n    color: blue\n    size: XL\n</code></pre> <p>The custom resource is managed by a customised controller. Such a controller is a \"normal\" kubernetes service, which uses kubernetes APIs to introspect the current state of services, pods, ...  </p> <p>Such a controller uses the following loop to ensure that the current state doesn't deviate from the desired state:</p> <p></p> <p>Controllers are categorised into the following categories, depending on their capabilities.</p> <p></p>"},{"location":"24FS/CCP2/03_Kubernetes.html#anatomy-of-a-kubernetes-cluster","title":"Anatomy of a Kubernetes Cluster","text":"<p>On the master node(s) the API server is used by the worker to know what to do. etcd is used as the storage for configuration.  The scheduler selects on which node a pod runs.  The controller manager is the beating heart of kubernetes and core controllers, such as the ReplicationController or DaemonSet controller, run on it.</p> <p>On the worker node, kubelet manages the containers of the local worker. It receives its commands from the API server. <code>kube-proxy</code> manages the network of the worker.</p> <p>The load balancer is managed by the provider and external to the cluster (The ingress could be run on the cluster).</p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html","title":"Cloud Native Application","text":"<p>A cloud native application is an application optimised for running in the cloud (IaaS or PaaS). A cloud native application exploits all cloud computing principles.</p> <p>The principal goal is to exploit the economic value proposition of cloud computing, e.g. having fast life-cycles. To do this, each phase in the life-cycle of the application needs to be optimised for running in a cloud environment. Typically, cloud native apps are distributed systems.</p> <p>The following diagram shows the life-cycle of a cloud application:</p> <p></p> <p>(The difference between deployment and provisioning is that deployment deploys it on the hardware, but the service isn't yet available to the user. When provisioned, the service is actually accessible)</p> <ul> <li>Architecture: cloud native application needs to be designed for scalability and resilience (if one service goes down, another one can take over). This favours a service oriented architecture (e.g. micro-services)</li> <li>Organisation: Teams need to be (re-)organised around business capabilities (like a feature). This means the DB engineer and the front-end dev are working on the same team if they are working on the same feature</li> <li>Process: There needs to be automated software development, deployment and management pipeline</li> </ul>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#service-oriented-architecture-soa","title":"Service Oriented Architecture (SOA)","text":"<p>SAO Principles:</p> <ul> <li>standardised protocols (e.g. SOAP, REST, ...)   How the services inter-opt with each other</li> <li>abstraction   A service should hide its internal structure and only provide a defined API-surface</li> <li>Loose coupling</li> <li>Reusability</li> <li>Composability</li> <li>Stateless service   The state of an service should never be stored in the service itself. Instead, it should be stored in a DB, or other service.</li> <li>Discoverable service   A service should be discoverable via a mechanism</li> </ul>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#micro-services","title":"Micro-Services","text":"<p>The micro-service architecture is a SOA architectural style with some additional points:</p> <ul> <li>Each service is \"small\" and dedicated to one thing (small doesn't necessarily mean not a lot of code, but it should be hyper-focused on one thing)</li> <li>Each service runs in its own process and can manage itself (self-composed in its own process)</li> <li>Each service is communicating with lightweight (e.g. simple and easy) mechanisms (e.g. REST APIs)</li> <li>Each service can be deployed independently in a fully automatic way</li> <li>Minimal centralised management of the services is required</li> </ul> <p>On the left side, a monolithic application is depicted. All features are packed into one process and it scales by replicating the entire application. On the right side, a micro-service architecture is shown and each individual service can be scaled independently of each other.</p> <p></p> <p>The following shows the difference between an application implemented as a monolith and as a micro-service architecture. </p> <p></p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#conways-law","title":"Conway's Law","text":"<p>Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.</p> <p>If an organisation is split into UI specialists, middleware specialists and DB admins, the application also reflects that structure. This is burdensome, as simple changes require cross-team approval.</p> <p></p> <p>In the (micro)service approach, each team is split along features (business capabilities). A team member can belong to multiple teams. Importantly, teams are cross-functional. Additionally, a team shouldn't be larger than how many people can be fed by two pizzas.</p> <p></p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#cna-principles-12-factor","title":"CNA Principles (12 Factor)","text":"<p>The following principles where developed by Heroku in 2011. See https://12factor.net/</p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#codebase","title":"Codebase","text":"<p>One codebase tracked in revision control, many deploys. Importantly, the same code base is used for each customer.</p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#dependencies","title":"Dependencies","text":"<p>All dependencies are explicitly declared and are isolated (both are required). Thus the application cannot depend on system-wide dependencies. This simplifies the setup and avoids sudden surprises when external dependencies inevitable change.</p> <p>Dependencies can be specified with different tools:</p> <ul> <li>Java: pom.xml for dependencies and the JVM for the isolation</li> <li>C: autoconf for dependencies and static linking for isolation</li> <li>In general: Dockerfiles for dependencies and container-images for isolation</li> <li>Alternatively, build automation (ansible, ...) for dependencies and VM images for isolation</li> </ul> <p>In general, wildcard declarations should be avoided at all cost.</p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#config","title":"Config","text":"<p>Everything that's likely to change between deployments should be stored in an external configuration, and not configured in the code.</p> <p>This likely includes:</p> <ul> <li>Resources like databases and other backing services</li> <li>Credentials to external services (e.g. Amazon S3, Twitter, ...)</li> <li>Per-deploy values (e.g. canonical hostname, ...)</li> </ul> <p>These configurations are strictly separated from the code and are injected into the environment. 12-Factor recommends doing this with environment variables, since they are easy to change without changing code, and they are unlikely to be checked into a repository.</p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#backing-services","title":"Backing Services","text":"<p>Backing services should be treated as an attached resource and need to be configurable as a URL. Importantly, no distinction is made between local and third-party services. </p> <p>A backing service is any service the app consumes over the network during its normal operation (DB, monitoring, SMTP server, cache...)</p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#build-release-run","title":"Build, Release, Run","text":"<p>Building, releasing and running are separated stages. This enables building the image once, then putting it into testing. After testing, the image can be put into production.</p> <p>This is most likely an artefact of the past, when it was common to directly upload files to the production server.</p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#processes","title":"Processes","text":"<p>Services (processes) are stateless and share nothing.</p> <ul> <li>A service never assumes that anything is cached in memory or on disk. This enables that a request can go to any instance, since the instance didn't cache anything</li> <li>Any persistent data must be stored in a stateful backing service</li> </ul>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#port-binding","title":"Port Binding","text":"<p>A service is completely self-contained and does not rely on the presence of a webserver in the environment.</p> <p>A service can become the backing service for another app. Then the backing service's URL is provided to the service using the service.</p> <p></p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#concurrency","title":"Concurrency","text":"<p>Each server can scale individually and horizontally (adding more instances).</p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#disposability","title":"Disposability","text":"<p>A service needs to be able to start and stop at any time. When receving a termination signal (e.g. SIGTERM), resources should be freed, the service should unsubscribe from message channels and more.</p> <p>Additionally, the app should be robust against sudden death, in the case of a failure of the underlying hardware.</p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#devprod-parity","title":"Dev/Prod Parity","text":"<p>Development, staging and production environment should be as similar as possible. This enables effective continuous delivery and deployment and avoid gaps between development and production.</p> <ul> <li>Avoid time gap: Write code and have it deployed within hours</li> <li>Avoid personnel gap: developers who wrote code are closely involved in deploying it and watching its behaviour in production</li> <li>Avoid tool gap: Use the same tools in development and production</li> </ul>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#logs","title":"Logs","text":"<p>Logs should be treated as event streams.</p> <p>A service should never concern itself with routing or storage of its log output stream. Instead, the environment captures the logs and collated them together for viewing and for long-term archival.</p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#admin-processes","title":"Admin Processes","text":"<p>Management tasks (e.g. deployment or modifying DB structure) are executed as a one-off service and not part of the long-running services. Thus, services don't do migration themselves, since this could lead to disaster when the other replicas still require the old DB structure.</p> <p>These tasks should be tested on a copy of the environment with the same release, codebase and config.</p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#cloud-patterns","title":"Cloud Patterns","text":""},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#service-registry","title":"Service Registry","text":"<p>In a service-oriented architecture, one uses many services, runs many service instances and  it can be a challenge to keep track of all of them.</p> <p>A service registry maintains the state information of each service instance. It stores information like:</p> <ul> <li>What type of service is provided by an instance</li> <li>What is the function offered</li> <li>How to reach the instance</li> <li>How to talk to the instance (e.g. port, address)</li> <li>What is the state of the instance</li> </ul> <p>As can be seen in the diagram below, each service publishes their information to the registry. If an application (or another service) wants to interact with the service, they first look up the necessary information and then use that to communicate directly with the service.</p> <p></p> <p>There are many different service registries, like Netflix's Eureka, etcd or many more. The benefit of using a separate service registry than Kuberentes' built in registry, is that more information can be put into and read from the registry.</p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#eureka","title":"Eureka","text":"<p>An example implementation could consist of a REST API that offers a few actions to interacting with the registry:</p> <ul> <li><code>register</code>:  Instance registers its connection endpoints and data</li> <li><code>renew</code>: Maintain the registration using a heartbeat</li> <li><code>cancel</code>: Gracefully remove registration</li> <li><code>getRegistry</code>: Function for querying available instances</li> </ul>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#etcd","title":"etcd","text":"<p>etcd is a distributed key-value store. The keys are strings and can be nested and folders can be used to organise the keys. Values can be pretty much anything.</p> <p>Apart from setting and getting values, keys can also be watched. This enables using etcd as a message queue.</p> <pre><code># sets the message key to \"Hello world\"\ncurl http://$HOST:2379/v2/keys/message -XPUT -d value=\"Hello world\"\n# gets the message key\ncurl http://$HOST:2379/v2/keys/message -XGET\n\n# folder management\netcdctl mkdir /folder\netcdctl ls /folder\n\ncurl http://$HOST:2379/v2/keys/message?watch=true -XGET\n# this will execute the command after the \"--\" when the key is changing\netcdctl exec-watch /folder/key -- /bin/bash -c \"touch /tmp/test\"\n</code></pre>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#kubernetes-dns-service","title":"Kubernetes DNS Service","text":"<p>Kubernetes itself provides a service registry in the form of a DNS service. This can be enough for basic usage, but only provides very limited information about the service.</p> <p>Each service gets the A-Record <code>&lt;service name&gt;.&lt;namespace&gt;.svc.cluster.local</code>. Pods get the A-Record <code>&lt;ip-addr&gt;.&lt;namespace&gt;.pod.cluster.local</code>.</p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#circuit-breaker","title":"Circuit Breaker","text":"<p>A circuit breaker is an intermediate between consumer and producer which detects if a service is unavailable or unresponsive. This then should lead to stop sending new requests to give the producer time to catch up.  </p> <p>Since the circuit breaker will break the connection and immediately response, this gives the requesting service time to use an alternative (instead of a complicated recommendation algorithm, use a simple average).</p> <p></p> <p>If the current state of the circuit breaker is <code>closed</code>, then requests are forwarded to the producer service. </p> <p>If, when forwarding a request, a failure occurs, an internal counter is incremented. If this counter passes a threshold, the circuit breaker will change into the <code>open</code> state.</p> <p>In the <code>open</code> state, a timeout timer starts and for this time, the circuit breaker immediately returns an error message. After the timer expired, the circuit breaker changes into <code>half-open</code>.</p> <p>In the <code>half-open</code> state, only a certain percentage of requests are forwarded. If a certain number of requests succeed, then the state changes back into <code>closed</code>. However, if there are enough failures, the state can change back into <code>open</code>. </p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#load-balancer","title":"Load Balancer","text":"<p>In a service-oriented architecture scaling is done by starting multiple service instances. However, we still would like to access all of the services with one address and port. As such, a load balancer is a mechanism to distribute the aggregate load to the individual members a pool of Service Instances according to a certain distribution algorithm.</p> <p></p> <p>In server-side load balancer, there is one server, which distributes the traffic to the various instances (in Kubernetes, this is done by a distributed load balancer).</p> <p>Load-balancing can also be implemented on the client-side, giving us client-side load balancing, where each client is accessing the service registry to get a list of all the services and then decide itself which instance to access. This is usually only done for internal services. This eliminates the need of a central load balancer.</p> <p>There are multiple algorithms with different goals:</p> <ul> <li>Round-Robin (optimise fairness)   Distributes load equally by assigning requests to instances in turns</li> <li>Least-Connection (optimises performance)   A request is assigned to the instances with the least on-going request</li> <li>Source (optimises stickiness)   A request is assigned to the same instance as a former instance</li> </ul>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#api-gateway","title":"API Gateway","text":"<p>Without an API gateway:</p> <p>With an API gateway:</p> <p>A challenge of a service-oriented architecture at scale is to present a consistent API to the consumers. A way to solve this, is to use a API gateway. In away, it is an analogous to the facade pattern.</p> <p>An advantage of an API gateway, is that the internal architecture is abstracted from the external API and , thus, can be refactored or replaced.</p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#endpoint-monitoring","title":"Endpoint Monitoring","text":"<p>Endpoint monitoring checks if endpoints of a service are still up and healthy. This solves the challenge of having a lot of instances and knowing how healthy each service is.</p> <p>Usually, a service provides a <code>/health</code> endpoint, which reports information about the instance. Typical checks are:</p> <ul> <li>Verifying internal process status</li> <li>Checking the presence of an external backing service (e.g. DB)</li> <li>Measuring the response times</li> <li>Checking for SSL expiration date</li> <li>Validating the HTTP response code</li> <li>Checking the content of the response</li> </ul>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#health-manager","title":"Health Manager","text":"<p>A health manage ensures that the desired number of instances of each service are operational. For this, it monitors the instance statuses (for example by endpoint monitoring).</p> <p>A health manager has a desired state and an actual state. The health manager compares the two states and tries to restart, start or stop services to match the two states.</p> <p>Basically Kubernetes deployments and replica-sets.</p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#queue-load-leveling","title":"Queue Load-leveling","text":"<p>The  number of requests can spike. For non time-sensitive services, requests can be distributed over time. This smooths out the spikes by slowing down some requests. If the peaks are excessive, some requests might be dropped (e.g. returning a 500 status code).</p> <p>The services can be put behind a load balancer, or alternatively, each service pulls a new request as soon as its done.</p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#competing-consumer-producer","title":"Competing Consumer / Producer","text":"<p>The same mechanism of queue load-leveling can be used to enable elasticity, by scaling up or down the instances based on the amount of messages in the queue, or how quick the queue fills up.</p> <p>Instead of having a fixed amount of services available, we can also automatically scale the amount of services according to the size of the message queue.</p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#event-sourcing","title":"Event Sourcing","text":"<p>Instead of storing the current state, the database stores the individual events leading to changes.  This allows one to recreate the state of anytime and gives one an audit trail. </p> <p>In the materialised view, the current state is stored to allow for quick look-ups for the current state.</p> <p>This also allows data that is eventually consistent, which can enable heavily distributed systems to track data.</p>"},{"location":"24FS/CCP2/04_5_Cloud%20Native%20Application.html#command-query-response-segregation-cqrs","title":"Command Query Response Segregation (CQRS)","text":"<p>One challenge of a service-oriented architecture can be to optimise for read and write operations. The idea behind CQRS is to provide separate paths for write and read operations. This allows to scale the read and write part separately. This is useful for applications which have a disproportionate number of read or write requests.</p> <p></p>"},{"location":"24FS/CCP2/06_Service%20Mesh.html","title":"Service Mesh","text":"<p>The idea behind a service mesh, is to implement the cross-cutting concerns (CCC) in a proxy, while keeping the actual services free from them.</p> <p>The incoming and outgoing requests are transparently routed through the proxies. This builds the data plane. Often the proxies in the data plane intercept the traffic from the services, handle traffic between the services, execute policies from the control plane and collect service metrics and send them to the control plane.</p> <p>Additionally, a service mesh adds a control plane, which distributes configuration updates to all proxies and receives mettrics collected by the proxies for further processing (kubernetes' master is in a way a control plane). Often, one can manage policies, injects and controls the CCC proxies and collect metrics and logs.</p> <p>The diagram below shows the control plane and data plane working together.</p> <p></p> <p>Traffic between the proxies is often called \"east-west traffic\", while the traffic between the control plane and data plane is called \"north-south traffic\".</p>"},{"location":"24FS/CCP2/06_Service%20Mesh.html#pros-cons-of-a-service-mesh","title":"Pros &amp; Cons of a Service Mesh","text":"<p>Pros:</p> <ul> <li>Cross-cutting features are implemented outside microservice code, and they are reusable.</li> <li>Solves most of the problems in Microservices architecture which we used to have ad-hoc solutions: Distributed tracing, logging, security, access control etc.</li> <li>More freedom when it comes to selecting a microservice implementation language: You don\u2019t need to worry about whether a given language supports or has libraries to build network application functions.</li> </ul> <p>Cons:</p> <ul> <li>Complexity: Having a service mesh drastically increases the number of runtime instances that you have in a given microservice implementation.</li> <li>Adding extra hops: Each service call has to go through an extra hop (through service mesh sidecar proxy).</li> <li>Service Meshes address a subset of problems: Service mesh only addresses a subset of inter-service communication problems, but there are a lot of complex problems such as complex routing, transformation/type mapping, integrating with other services and systems, to be solved at your microservice\u2019s business logic.</li> <li>Immature: Service mesh technologies are relatively new to be declared as full production ready for large-scale deployments</li> </ul>"},{"location":"24FS/CCP2/06_Service%20Mesh.html#downsides-of-microservices","title":"Downsides of Microservices","text":""},{"location":"24FS/CCP2/06_Service%20Mesh.html#wrong-assumptions-when-writing-microservices","title":"Wrong Assumptions when writing Microservices","text":"<ol> <li>The network is reliable</li> <li>Latency is zero</li> <li>Bandwidth is infinite</li> <li>The network is secure</li> <li>Topology does not change</li> <li>There is one administrator</li> <li>Transport cost is zero</li> <li>The network is homogeneous (same devices; all managed in the same way; only one configuration is needed)</li> </ol>"},{"location":"24FS/CCP2/06_Service%20Mesh.html#challenges-of-microservice-architecture","title":"Challenges of Microservice Architecture","text":"<p>Network resilience / Traffic management A service might become a bottleneck. This can be managed by network policies quotes and rate limits for all services. This ensures that one rogue service doesn't make too many calls and overloads the other services or the network.</p> <p>Thus, to effectively control services, create policies that specify which service can and can't make calls</p> <p>Security Microservices need to authenticate, authorise and encrypt communication.  In comparison to microservices, in a monolith, function-to-function calls in the monolith are secure by default.</p> <p>Thus, additional auditing tools are needed to trace the service-to-service communication.</p> <p>Observability In a monolith, logs are sufficient to trace what the application is doing. </p> <p>However, in a microservice-architecture, this doesn't work nearly as well. Latency, errors and failures can happen in any service within the architecture. Following a call through the different services, isn't a simple task.</p> <p>Thus, developers need logging, network metrics and distributed tracing and topology to investigate problems and pinpoint their location.</p> <p>Exponential growth of complexity Naturally, the bigger the architecture gets and the more services there are, the more complex these problems become. </p>"},{"location":"24FS/CCP2/06_Service%20Mesh.html#cross-cutting-concerns","title":"Cross-cutting Concerns","text":"<p>The ramifications from the issues from above are all cross-cutting concerns. These cross-cutting concerns can be implemented in of the following ways:</p> <ul> <li> <p>Use libraries (e.g. Netfix's eureka service registry, frameworks, ...)   Since, there is limited interoperability between languages, often a uniform environment (only spring, or only .NET) is used </p> </li> <li> <p>A second approach is to outsource the cross-cutting concerns to a proxy. This creates a language independent \"library\", freeing you from having to have a homogeneous environment.</p> </li> </ul> <p></p>"},{"location":"24FS/CCP2/06_Service%20Mesh.html#istio","title":"Istio","text":"<p>Istio is an open-source implementation of the service mesh originally developed by IBM, Google, and Lyft</p> <p></p> <p>The diagram above shows how the Istio service mesh is implemented. Istio uses the envoy proxy on each pod as the proxy.</p> <p>Below one can see how Istio integrates with Kubernetes:</p> <p></p>"},{"location":"24FS/CCP2/06_Service%20Mesh.html#control-plane","title":"Control Plane","text":"<p>The control plane of Istio is implemented in one deamon and contains the following functionality:</p> <ul> <li>Pilot   Service discovery, managing routing and resilience rules, traffic management (routing, ingress, A/B tests, canary rollouts), Resilience (timeout, retry, circuit breaker, ...) and platform adapters (to integrate into Kubernetes, ...)</li> <li>Citadel   Handels the security between services, but also for the end-user. Furthermore credentials and certificate management was handled by citadel</li> <li>Galley   Configuration management and injection</li> </ul>"},{"location":"24FS/CCP2/06_Service%20Mesh.html#traffic-management","title":"Traffic Management","text":"<p>A large part of what a service mesh is doing is traffic routing. Thus, there are a lot of traffic management features:</p> <ul> <li>Basic load balancing</li> <li>AB-Testing (with weighted routing)</li> <li>Canary rollouts   This provides a more finer grained traffic distribution than what kubernetes provides (See  Operation)</li> <li>Failure Handling   A lot of behaviour around failure handling can be configured within the traffic management part of Istio.</li> <li>Timeouts</li> <li>Rate / Bandwidth limiting</li> <li>Circuit Breaker</li> <li>Retry</li> <li>Health Checks</li> <li>Fault injections   Istio can inject failures, such as delays (e.g. network latency) or outright failures (HTTP error codes, TCP connection failure). This simulates failures on the network and tests how resilient the service mesh is.</li> </ul> <p>Istio defines a concept called \"Virtual Service\". Rules, such as traffic rules, can then be specified on the virtual service. The following shows an example of a virtual service:</p> <pre><code>apiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: apache\nspec:\n  hosts:\n    - \"*\"\n  gateways:\n    - microservice-gateway\n  http:\n    - match:\n        - uri:\n            prefix: /\n      route:\n        - destination:\n            port:\n              number: 80\n            host: apache\n</code></pre> <p>Furthermore, Istio has a concept of a \"Gateway\", which describes, on which port and which address a service should be accessible. Then, a virtual service registers itself on a gateway to \"receive\" requests through that gateway </p> <pre><code>apiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: microservice-gateway\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n    - port:\n        number: 80\n        name: http\n        protocol: HTTP\n      hosts:\n        - \"*\"\n</code></pre> <p>The following diagram is an example of weighted routing. 50% of the traffic is routed to <code>v2</code> and 50% to <code>v3</code>. This allows a company to check if a new version is running as expected.</p> <p></p>"},{"location":"24FS/CCP2/06_Service%20Mesh.html#observability","title":"Observability","text":"<p>Istio generates detailed telemetry and can send those to information panels, such as Grafana, Jaeger, or Prometheus.</p> <p></p>"},{"location":"24FS/CCP2/06_Service%20Mesh.html#security","title":"Security","text":"<p>Istio does automatic service-to-service encryption, in addition to allowing for easy configuration for end-to-end security.</p> <p></p>"},{"location":"24FS/CCP2/06_Service%20Mesh.html#kernel-based-service-mesh-technology","title":"Kernel-based \"Service Mesh\" technology","text":"<p>A downside of sidecar-based service meshes is that an intermediate layer is inserted between the network stack and the microservices. This adds complexity and is another process on the CPU.</p> <p>An alternative is to implement this as part of the network stack. This means no extra process is needed and less resources and context switches are required.</p> <p>This can be achieved on Linux with eBPF (enhanced Berkeley Packet Filter), which provides the ability to run JIT compiled bytecode in a sandboxed environment in kernel mode.</p> <p></p> <p>eBPF can run code in various kernel modules (such as file system and the network stack).</p>"},{"location":"24FS/CCP2/06_Service%20Mesh.html#cilium","title":"Cilium","text":"<p>Cilium is an example of a eBPF-based service mesh. It connects to an eBPF component in the Linux kernel.</p> <p></p>"},{"location":"24FS/CCP2/06_Service%20Mesh.html#service-mesh-interface-smi","title":"Service Mesh Interface (SMI)","text":"<p>The goal is to provide a standard interface for service meshes on Kubernetes. This would allow configuring basic features in an agnostic way to the actual service mesh implementation.</p>"},{"location":"24FS/CCP2/08_Runtime%20Environment.html","title":"Runtime Environment","text":"<p>The runtime is the component which executes our application. The runtime environment contains all the components required to run the application.</p> <p>Using containers for the runtime environment has many benefits:</p> <ul> <li>it relieves the devs and ops teams from worrying about the specific details of the machines and OSes</li> <li>It allows for rolling out new hardware and/or upgrading the OS with minimal impact on the application</li> </ul>"},{"location":"24FS/CCP2/08_Runtime%20Environment.html#open-container-initiative-oci","title":"Open Container Initiative (OCI)","text":"<p>OCI is an industry standard to define containers. </p> <p>The OCI Image spec specifies the file format of the bundled file system (image manifest (metadata, dependencies, ...), FS layers, image configurations (env variables, arguments)).</p> <p>The OCI runtime spec details how an image can be started and run. There are multiple implementations of the OCI runtime specification.</p>"},{"location":"24FS/CCP2/08_Runtime%20Environment.html#oci-images","title":"OCI Images","text":"<p>OCI images are structured into a series of read-only layers. These are identified by a SHA-256 hash. Importantly, each layer is an image and overlays the previous layer. The final layer at the bottom is called the base image. </p> <p>When this image is being run, an ephemeral R/W layer is mounted on top. This layer is removed when the container is stopped.</p>"},{"location":"24FS/CCP2/08_Runtime%20Environment.html#multi-stage-dockerfiles","title":"Multi-Stage Dockerfiles","text":"<p>Multi-stage dockerfiles allow multiple independent parts of the dockerfile. This allows us to compile the application in a stage and then copy the application over to the final stage. This reduces the image size drastically.</p> <p>With <code>FROM maven:3.9.6-eclipse-temurin-21 as build</code>, a stage named <code>build</code> is declared. In another stage, with <code>COPY --from=build $JAR_FILE /app/runner.jar</code>, files can be copied from the referenced stage</p> <p>The following Dockerfile uses multiple stages:</p> <pre><code>FROM gradle:8.7-jdk21 AS build\nWORKDIR /home/gradle/app\nCOPY --chown=gradle:gradle ./src ./src\nCOPY --chown=gradle:gradle *.gradle ./\nRUN gradle --no-daemon assemble\n\nFROM eclipse-temurin:21-jre\nCOPY --from=build /home/gradle/app/build/libs/*.jar /app/\nCMD java -Xmx300m -Xms300m -XX:TieredStopAtLevel=1 -noverify -jar /app/runner.jar\nEXPOSE 8081\n</code></pre>"},{"location":"24FS/CCP2/08_Runtime%20Environment.html#proscons-docker-files","title":"Pros/Cons Docker Files","text":"<ul> <li>Pros</li> <li>Very flexible &amp; extensible</li> <li>A lot of base images</li> <li>Widely supported</li> <li>Cons</li> <li>Difficult to control image sources and their trustworthiness</li> <li>Time-consuming to keep images up-to-date</li> <li>Allows dangerous functions (allows for arbitrary code execution)</li> <li>Images can get big</li> </ul>"},{"location":"24FS/CCP2/08_Runtime%20Environment.html#buildpacks","title":"Buildpacks","text":"<p>Buildpack scans the application and based on this, builds an OCI image. The platform provider creates and controls the base image, meaning that they can be trusted.</p> <p>The build image is the base image to the builder image, which is used to build the source code. The builder image creates the run image, which is then run. Build images and run images come in pairs.</p> <p>Each buildpack in the builder image is a unit work which analyses the application (e.g. is this a java app, does it used maven/gradle, is it a spring boot app, ...)</p> <p>The following shows the different phases the lifecycles runs:</p> <p></p> <ul> <li><code>detect</code>   The <code>detect</code> phase tests which groups of buildpacks are applicable to the app. This is done in an order and the first group that applies will be used (this allows to deal with situations, like both yarn and npm use the <code>package.json</code> file, but yarn has an additional file)</li> <li><code>build</code>   The <code>build</code> command of each buildpack in the selected group is executed. This gets written into the <code>layer.toml</code> file to cache this</li> </ul>"},{"location":"24FS/CCP2/08_Runtime%20Environment.html#rebase-image","title":"Rebase Image","text":"<p>Rebasing allows to switch a layer in the image. If for example the base image has a vulnerability, its layer can be replaced without having to re-building every image. Furthermore, this can be done by the platform team, without having to talk to each dev team. </p>"},{"location":"24FS/CCP2/08_Runtime%20Environment.html#application-stack","title":"Application Stack","text":"<p>The following diagram shows the application stack, when run on bare-metal.</p> <p></p> <p>If the stack is run in a VM:</p> <p></p> <p>The application and services can be put into containers to create the following diagram:</p> <p></p>"},{"location":"24FS/CCP2/09_Composition.html","title":"Composition","text":"<p>Bringing the different services together to work as one is known as composition. This should be done in an automatic fashion.</p>"},{"location":"24FS/CCP2/09_Composition.html#decomposition","title":"Decomposition","text":"<p>To make microservices work, we need to reduce the application into a set of independent functional services. </p> <p>A service is defined as a unit of software that is independent, replacable and upgradable. Furthermore, each services is encapsulated in an API. A service also has to be independently deployable. All of this lends itself to continuous delivery.</p> <p>Of course, this means that complex applications are composed of small, independent services.</p>"},{"location":"24FS/CCP2/09_Composition.html#domain-driven-design","title":"Domain Driven Design","text":"<p>(The dashed circles represent subdomains; the circles within the domain are the bounded contexts)</p> <p>Mini Glossary:</p> <ul> <li>Context: The setting in which a concept appears in</li> <li>Domain: A specific area of knowledge or activity</li> <li>Model: An abstraction that describes a selected aspect of a domain</li> <li>Ubiquitous Language: The language around the domain model</li> <li>Bounded Context: The explicit defined context where a model applies</li> </ul> <p>A domain consists of multiple subdomains, each corresponds to a different part of the business. Sub-domains can be classified into the following categories:</p> <ul> <li>Core   A key differentiator and the most valuable part of an app</li> <li>Supporting   Related to what the business does but not a differentiator (either implemented in-house or outsourced)</li> <li>Generic   Not specific to the business. Ideally an off-the-shelf solution is used</li> </ul> <p>To identify subdomains, one requires knowledge about the business. A good starting point when analysing is to look at the organisation structure. Usually, each sub-domain has a key domain object.</p> <p>Furthermore, there is usually one service per sub-domain.</p>"},{"location":"24FS/CCP2/09_Composition.html#example-of-decomposition","title":"Example of Decomposition","text":"<p>The following shows a storefront, where customers can order items. The diagram below shows a monolith.</p> <p></p> <p>This can be modelled with microservices in the following way. Each service is behind the API Gateway, which unifies the different services.</p> <p>To get from the monolith to the architecture below, one could start off with the monolith, but put it behind an API Gateway. Then, piece by piece, replace parts of the monolith with a service. Since the API Gateway unifies the services, this would be transparent to the clients.</p> <p></p>"},{"location":"24FS/CCP2/09_Composition.html#centralised-application-composition","title":"Centralised Application Composition","text":"<p>The centralised approach hinges on creating a centralised global model and having a single logical controller that controls the deployment and running of the services. </p> <p>This makes managing it easier, since it gives global control and oversight. On the other hand, scalability suffers, since the internet is not centralised.</p> <p>There are numerous technologies that enable this, like TOSCA, docker-compose or HELM.</p>"},{"location":"24FS/CCP2/09_Composition.html#decentralised-application-composition","title":"Decentralised Application Composition","text":"<p>Each service (usually) has its own decentralised local model and is managed by its own controller. Additionally, there is a way to synchronise the different controllers.</p> <p>Examples are DNS, BGP or P2P. </p> <p>This helps with scalability, but it's hard to implement it correctly. </p>"},{"location":"24FS/CCP2/09_Composition.html#composition-interactions","title":"Composition Interactions","text":"<p>In the orchestrated composition, there is a centralised process/controller, that manages the services. There is a global configuration.</p> <p></p> <p>Another approach is to use choreographed composition. In this case, there is no centralised process. Instead each service checks if its dependencies are running. Once all dependencies are running, it itself starts working.</p> <p></p> <p>A good analogy, is an orchestra: A conductor is a centralised composition, while a band without a conductor is a choreographed composition</p>"},{"location":"24FS/CCP2/09_Composition.html#composition-model-specification","title":"Composition Model Specification","text":"<p>This can either be done in a declarative or imperative fashion:</p> <p>The declarative is easier to write and manage since the user just has to specify the desired state. However, debugging can be very complicated, since there are no steps explicitly written. Typical examples are docker-compose, K8S, ...</p> <p>On the other hand, in a system that uses the imperative approach, the user specifies how to get from version 1 to version 2. Since this is done by programming the step, it can be easily debugged. However, the user now needs to know how to actually achieve the desired result. Typical examples are chef or Ansible.</p> <p>There are tools that implement both concepts (e.g. Ansible).</p>"},{"location":"24FS/CCP2/09_Composition.html#tosca","title":"TOSCA","text":"<p>TOSCA stands for Topology and Orchestration Specification for Cloud Applications and is a declarative description model, written in YAML.</p> <p>The following shows the different TOSCA entities (Nodes, Relationships, Artefacts, Service Template):</p> <p></p> <p>The following is an example TOSCA template. Templates can include other templates. The inputs are parameters given to the template, which then can be used as variables in the template.</p> <pre><code>tosca_definitions_version: tosca_simple_yaml_1_0\ndescription: Monitoring Service Template\nimports:\n- custom_types/tosca_compute.yaml\n- custom_types/tosca_floating_ip.yaml\n- custom_types/tosca_security_group.yaml\n- custom_types/tosca_router.yaml\ntopology_template:\ninputs:\n    compute_image:\n        type: string\n        description: Compute instance image\n        default: cactiSnapshot2\n    compute_flavor:\n        type: string\n        description: Compute instance flavor\n        default: m1.small\n    key_name:\n        type: string\n        description: Key name\n        default: mauikey\n    public_net:\n        type: string\n        description: Name or ID of the public network\n        default: 77e659dd-f1b4-430c-ac6f-d92ec0137c85\n    private_net_name:\n        type: string\n        description: Name of private network to be created\n        default: fr-tosca-mon-net\n\nnode_templates:\n    my_server:\n    type: hot.nodes.Compute\n        properties:\n        flavor: { get_input: compute_flavor }\n        image: { get_input: compute_image }\n        key_name: { get_input: key_name }\n    private_net:\n        type: tosca.nodes.network.Network\n        properties:\n            cidr: '192.168.1.0/24'\n            network_name: { get_input: private_net_name }\n    router:\n        type: tosca.nodes.network.Router\n        properties:\n            public_network: { get_input: public_net }\n        requirements:\n            - link: private_net\n    floating_ip:\n        type: tosca.nodes.network.FloatingIP\n        properties:\n            floating_network: { get_input: public_net }\n        requirements:\n            - link: port\n    port:\n        type: tosca.nodes.network.Port\n        properties:\n            order: 0\n        requirements:\n            - link: private_net\n            - link: server_security_group\n            - binding: my_server\n\n    server_security_group:\n        type: tosca.nodes.network.SecurityGroup\n        properties:\n            description: Test group to demonstrate Neutron security group functionality with Heat.\n            name: test-security-group\n            rules:\n                - protocol: tcp\n                  port_range_min: 22\n                  port_range_max: 22\n                - protocol: tcp\n                  port_range_min: 80\n                  port_range_max: 80\noutputs:\n    it.hurtle.mon.dashboard:\n        description: Monitoring dashboard\n        value:\n            str_replace:\n                template: http://host/cacti/\n                params:\n                    host: { get_attribute: [my_server, public_address ] }\n</code></pre> <p>From this, TOSCA creates a model</p> <p></p>"},{"location":"24FS/CCP2/09_Composition.html#helm","title":"Helm","text":"<ul> <li>Chart   a package; bundle of Kubernetes resources (pods, services, ...)</li> <li>Release   a chart instance loaded into Kubernetes. The same charts can be installed several times into the same cluster; each will have its own Release</li> <li>Repository   a repository of published Charts (e.g. like docker hub but for k8s). Public repository here: https://artifacthub.io/ (Private can be hosted too)</li> <li>Template   a K8s configuration file mixed with Go/Sprig* template</li> </ul> <p>A chart contains the following files:</p> <p></p> <p>The following shows a <code>Chart.yaml</code> with all possible values and descriptions:</p> <pre><code>apiVersion: The chart API version (required)\nname: The name of the chart (required)\nversion: A SemVer 2 version (required)\nkubeVersion: A SemVer range of compatible Kubernetes versions (optional)\ndescription: A single-sentence description of this project (optional)\ntype: The type of the chart (optional)\nkeywords:\n    - A list of keywords about this project (optional)\nhome: The URL of this projects home page (optional)\nsources:\n    - A list of URLs to source code for this project (optional)\ndependencies: # A list of the chart requirements (optional)\n  - name: The name of the chart (nginx)\n    version: The version of the chart (\"1.2.3\")\n    repository: (optional) The repository URL (\"https://example.com/charts\") or alias (\"@repo-name\")\n    tags: # (optional)\n      - Tags can be used to group charts for enabling/disabling together\n    import-values: # (optional)\n      - ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.\n    alias: (optional) Alias to be used for the chart. Useful when you have to add the same chart multiple times\nmaintainers: # (optional)\n  - name:     email: The maintainers email (optional for each maintainer)\n    url: A URL for the mThe maintainers name (required for each maintainer)\n    email: The maintainers email (optional for each maintainer)\n    url: A URL for the maintainer (optional for each maintainer)\nicon: A URL to an SVG or PNG image to be used as an icon (optional).\nappVersion: The version of the app that this contains (optional). Needn't be SemVer. Quotes recommended.\ndeprecated: Whether this chart is deprecated (optional, boolean)\nannotations:\n    example: A list of annotations keyed by name (optional).\n</code></pre> <p>The following is an example <code>Chart.yaml</code></p> <p></p> <p>Each service used in the <code>Chart.yaml</code> has a deployment template in the <code>template/</code> folder. This is a Kubernetes file that has been expanded with template syntax.</p> <p></p> <p>If a value is expected to be a string, the template needs to be either in quotes (e.g. <code>\"{{ .Values.name }}\"</code>) or the <code>quote</code> function needs to be used (e.g. <code>{{ quote .Values.name }}</code>)</p> <p>The following is an example of a <code>values.yaml</code> file. These values are then used in the template files.</p> <p></p> <p>The <code>values.yaml</code> file of the overarching chart can change values of dependent charts by prefixing their config-key with the chart name. For example, the <code>values.yaml</code> below would override the value <code>secret.user</code> and <code>secret.password</code> in the <code>postgresql</code> chart. </p> <pre><code>postgresql:\n  secret:\n    user: ccpDBuser\n    password: cppDBpassword\n</code></pre> <p>Additionally, a <code>Chart.yaml</code> file can name the same chart multiple times as a dependencies to create multiple instances. An alias can be given, to still be able to override values.</p> <pre><code>apiVersion: v2\nname: helm-osi\ndescription: A Helm chart for the osi application\ntype: application\nversion: 0.1.0\nappVersion: \"1.0\"\n\ndependencies:\n  - name: postgresql\n    version: 0.1.0\n  - name: microservice\n    version: 0.1.0\n    alias: microservice-order\n  - name: microservice\n    version: 0.1.0\n    alias: microservice-shipping\n</code></pre>"},{"location":"24FS/CCP2/10_DevOps.html","title":"DevOps","text":"<p>When developing software, the current expectation is to deliver continuously. This shortens the feedback loop and the time until money is earned. Another benefit of continuous delivery is the minimisation of risk. Since the delivery process is automated, it is also at least somewhat documented.</p>"},{"location":"24FS/CCP2/10_DevOps.html#problems-with-waterfall","title":"Problems with Waterfall","text":"<p>Often times, the later stages of delivery (e.g. testing and operation) is still done with a waterfall model. The following problems can arise from this.</p> <p>There is also a conflict of interests between business/development and the operation team. </p> <p></p> <p>Another problem can be \"The Wall of Confusion\". The separation between development and operations means that sometimes code that works in development, doesn't in production. </p> <p></p> <p>This can be solved by integrating the operation teams into the development cycle.</p>"},{"location":"24FS/CCP2/10_DevOps.html#devops-steps","title":"DevOps Steps","text":"<p>At each stage, automation can be implemented. A step can continue to the next step, when all tests pass. If a test fails, the responsible people are notified, thus creating a feedback loop.</p> <ul> <li>Build automation   A process building individual components, run unit tests, package software, create documentation, ... This is typically run by the developer on their local machine. Usually, the tools used are provided by the programming language used (make for c/c++, maven/gradle for java, ...).</li> <li>Continuous Integration   Automatically build, test and integrate components and run integration tests. This is typically run on a server   </li> <li>Continuous Delivery   Automatically create releases, deploy them to the staging environment and run automatic acceptance tests (like stress test, load tests, ...). The steps before deploying to production are automated, however, the final step is still manually done</li> <li>Continuous Deployment   Adds automatically deploying and provisioning to production</li> <li>DevOps   The production system is operated automatically (config management, infrastructure provisioning, backup, monitoring, ...)</li> </ul> <p>The difference between continuous delivery and continuous deployment, is that in continuous delivery there is a human in the loop who presses a big red button when delivering a release. In continuous deployment this is automated. Continuous deployment is used by very few companies since it requires a lot of trust in their tests.</p>"},{"location":"24FS/CCP2/10_DevOps.html#multi-stage-delivery-environment","title":"Multi-Stage Delivery Environment","text":"<ul> <li>development environment (grey)   An environment for each developer/team used for development</li> <li>test environment (blue)   An environment, close to the production environment, for running integration, functional and performance tests. </li> <li>stage environment (green)   An exact copy of the production environment to run acceptance and operational tests. With this environment, the deployment process and scaling is also tested. The staging environment should ideally be about the same size of the production environment to test how the system scales properly.</li> <li>production environment (red)</li> </ul> <p>The diagram above shows how information flows through a multi-stage environment. To note is that each stage after the dev stage uses the same artefacts. </p>"},{"location":"24FS/CCP2/10_DevOps.html#best-practices","title":"Best Practices","text":"<ul> <li>Code and config changes always go to version control</li> <li>Binary artefacts are only built once and are used in all environment</li> <li>Different configs are used to support multiple environments</li> <li>The same tooling is used across all environment</li> </ul>"},{"location":"24FS/CCP2/10_DevOps.html#tools-required","title":"Tools Required","text":"<ul> <li>Version Control</li> <li>Artifact Repository (e.g. nexus)</li> <li>Build Server</li> <li>Automation Agent (Chef, Ansible, ...)</li> <li>Monitoring Infrastructure (ElasticSearch-Logstash-Kibana, Splunk, ...)</li> <li>Secure Store (HashiCorp Vault)</li> </ul>"},{"location":"24FS/CCP2/10_DevOps.html#tekton-tool","title":"Tekton Tool","text":"<p>Tekton is built on top of kubernetes. Pipelines are described with custom kubernetes resource descriptions.</p> <p>Each pipeline consist of tasks, whereas each tasks consists of steps. Each step runs in a specified container image. Once all steps are run, the task is completed and the flow continues to the next task. Of course, a task has outputs which can be forwarded to inputs of other tasks. Additionally, parameters can also be passed to pipelines.</p> <p></p> <p>To actually run a pipeline, one needs a <code>pipeline-run</code>, which is an additional resource. The <code>pipeline-run</code> specifies what the triggers of the pipeline are (or if it is a manual pipeline-run).</p> <p></p> <p>(careful, a task needs to specify after which tasks it should run with <code>runAfter</code>. Or worded differently, tasks listed in <code>runAfter</code> are prerequisites to the tasks. Therefore, in the example, first the task hello is run, after which  the task goodbye is run)</p>"},{"location":"24FS/CCP2/10_DevOps.html#argo-cd","title":"Argo CD","text":"<p>Argo CD does continuous delivery. It monitors a deployment configuration in git. If this config changes, the new config is applied to the cluster. Similarly, it might also be triggered by a CI tool (like jenkins,...) or manually.</p>"},{"location":"24FS/CCP2/10_DevOps.html#gitops","title":"GitOps","text":"<p>Principles:</p> <ul> <li>Declarative   A system must have its desired state expressed declaratively</li> <li>Versioned and Immutable   A desired state is stored immutable, versioned and retains a complete version history (e.g. git)</li> <li>Pulled automatically   The software agent automatically pulls the desired state</li> <li>Continuously Reconciled (abgeglichen)   The agent monitors the actual system and applies the new desired state (e.g. kubernetes)</li> </ul>"},{"location":"24FS/CCP2/10_DevOps.html#push-vs-pull-based-deployments","title":"Push vs Pull-based Deployments","text":"<p>In a push-based GitOps platform (e.g. Jenkins, CircleCI, Tekton, ...) a build pipeline builds and pushes a build to a registry and triggers a deployment of that build.</p> <p></p> <p>On the other hand, in a pull-based platform, the build pipeline still pushes a build to  a registry. Furthermore, the environment/config repository is updated. The operator continuously observes the registry and when noticing a change, the change is applied.</p>"},{"location":"24FS/CCP2/12_Monitoring.html","title":"Monitoring","text":"<p>Monitoring requirements:</p> <ul> <li>Infrastructure monitoring (server and networks)</li> <li>User level monitoring   Does the application deliver a good user experience (is it too complicated, are features being used, lag, ...)</li> <li>Application monitoring   Focussed on the health of the application</li> <li>Log monitoring   Are there warnings or errors</li> </ul> <p>Depending on the service, there might be individual metrics that make sense to record.</p> <p></p> <p>The frontend should also be monitored. Of course, different metrics have to be used. For this page, load times are vital.  This can impact user experience and reduce revenue. </p> <p>This can be monitored with real user monitoring (RUM), which uses JS to report back. Another approach is to use Synthetic monitoring. For this, traffic is being generated (for example by https://webpagetest.org) and see the behaviour of the application.</p>"},{"location":"24FS/CCP2/12_Monitoring.html#endpoint-monitoring","title":"Endpoint Monitoring","text":"<p>An endpoint should expose a health check page, which reports the health of the server and if the service is up and running. For critical services, authentication should be required.</p>"},{"location":"24FS/CCP2/12_Monitoring.html#kinds-of-metrics","title":"Kinds of Metrics","text":"<p>Counter is a number that counts some events (e.g. requests per minutes, page hits, ...). This is stored over time, allowing to see the change over time.</p> <p>A Gauge is the latest value in a specific range (like a speed-meter in a car). Examples include memory consumption, threads, ...</p> <p>A Timer shows metrics over a period of time (e.g. mean, max, min, sum, number of samples, ...)</p>"},{"location":"24FS/CCP2/12_Monitoring.html#prometheus-and-grafana-to-monitor-k8s","title":"Prometheus and Grafana to monitor K8S","text":""},{"location":"24FS/CCP2/12_Monitoring.html#elastic-stack-formerly-elk-stack","title":"Elastic Stack (formerly ELK Stack)","text":"<p><code>Logstash + Elasticsearch + Kibana</code></p> <p>Logstash is a pattern matching and filtering engine. It can map from arbitrary formats to a format which is compatible with elasticsearch's log format. Furthermore, filters can be setup to drop for example all DEBUG log messages.</p> <p>The following is a simple configuration for Logstash:</p> <pre><code>input {\n    file {\n        path =&gt; \"/home/user/nginxAccess.log\"\n    }\n}\nfilter {\n    grok {\n        match =&gt; {\n            # defines the message format\n            \"message\" =&gt; \"%{WORD:action} %{URIPATHPARAM:uri} %{NUMBER:bytes}\"\n        }\n    }\n}\noutput {\n    elasticsearch {\n        protocol =&gt; \"http\"\n        host =&gt; \"QBOX_ES_IP:ES_PORT\"\n        index =&gt; \"logstash-test-01\"\n    }\n}\n</code></pre> <p>Elasticsearch is an indexing tool and search engine, allowing to search logs quickly.</p> <p>Kibana is a web-based front end, which supports alerting and graphing of logs.</p> <p>All of these tools are opensource.</p>"},{"location":"24FS/CCP2/12_Monitoring.html#monitoring-assessment","title":"Monitoring Assessment","text":"<p>\"Tater.ly\u2019s mission is to help french-fry aficionados find the best french fries in all the land. Users come to Tater.ly to look up restaurants and read reviews about their french-fries, as well as post their own reviews. The french fries are also rated on a scale of one to five, with five being the best. Restaurants can create their own pages or users can create them. Restaurants can \u201cclaim\u201d their pages if the page already exists. Tater.ly makes money through advertising by placing a Featured Fry at the top of search results, with restaurants paying an advertising fee for the slot. The ad fees are based on number of impressions - that is, the number of people that see the ad (as opposed to \u201cclicks,\u201d that is, the number of people who click on the ad). Because the ad price is based on impressions, restaurant owners can choose how much to spend and whether to show their ad at peak times or non-peak times. It also allows us to run multiple ads. Currently, Tater.ly has gross revenue of $250,000 annually, and that\u2019s steadily increasing.\"</p> <p>To monitor this architecture, they chose the following metrics:</p> <p></p>"},{"location":"24FS/CCP2/12_Monitoring.html#distributed-tracing","title":"Distributed Tracing","text":"<p>If one has a distributed application and wants to get an overview of how a request flows through the system. Understanding this manually is hard, since one has to sift through the different logs of all the separate services and parse out the necessary details.</p> <p>To track a request over multiple services, a solution is to add a header to the package with an ID. This header is forwarded between services.</p> <p></p> <p>To support distributed tracing, a service has to integrate the OpenTracing/OpenTelemetry API. A tool, like Jaeger can then be used to do the distributed-part. Jaeger can then generate a view like the following:</p> <p></p>"},{"location":"24FS/CCP2/12_Monitoring.html#opentelemetry","title":"OpenTelemetry","text":"<p>OpenTelemetry is the successor of OpenTracing. It supports logging, metrics and tracing. There are SDKs for most languages and frameworks available.</p> <p>If a service integrates an SDK, any collector can be used behind the scenes to collect the logs and send them to the server.</p> <p></p>"},{"location":"24FS/CCP2/12_factors.html","title":"CNA Principles (12 Factor)","text":"<p>The following principles were developed by Heroku in 2011. See https://12factor.net/</p>"},{"location":"24FS/CCP2/12_factors.html#1-codebase","title":"1. Codebase","text":"<p>One codebase tracked in revision control, many deploys. Importantly, the same code base is used for each customer.</p>"},{"location":"24FS/CCP2/12_factors.html#2-dependencies","title":"2. Dependencies","text":"<p>All dependencies are explicitly declared and are isolated (both are required). Thus the application cannot depend on system-wide dependencies. This simplifies the setup and avoids sudden surprises when external dependencies inevitable change.</p> <p>Dependencies can be specified with different tools:</p> <ul> <li>Java: pom.xml for dependencies and the JVM for the isolation</li> <li>C: autoconf for dependencies and static linking for isolation</li> <li>In general: Dockerfiles for dependencies and container-images for isolation</li> <li>Alternatively, build automation (ansible, ...) for dependencies and VM images for isolation</li> </ul> <p>In general, wildcard declarations should be avoided at all cost.</p>"},{"location":"24FS/CCP2/12_factors.html#3-config","title":"3. Config","text":"<p>Everything that's likely to change between deployments should be stored in an external configuration, and not configured in the code.</p> <p>This likely includes:</p> <ul> <li>Resources like databases and other backing services</li> <li>Credentials to external services (e.g. Amazon S3, Twitter, ...)</li> <li>Per-deploy values (e.g. canonical hostname, ...)</li> </ul> <p>These configurations are strictly separated from the code and are injected into the environment. 12-Factor recommends doing this with environment variables, since they are easy to change without changing code, and they are unlikely to be checked into a repository.</p>"},{"location":"24FS/CCP2/12_factors.html#4-backing-services","title":"4. Backing Services","text":"<p>Backing services should be treated as an attached resource and need to be configurable as a URL. Importantly, no distinction is made between local and third-party services. </p> <p>A backing service is any service the app consumes over the network during its normal operation (DB, monitoring, SMTP server, cache...)</p>"},{"location":"24FS/CCP2/12_factors.html#5-build-release-run","title":"5. Build, Release, Run","text":"<p>Building, releasing and running are separated stages. This enables building the image once, then putting it into testing. After testing, the image can be put into production.</p> <p>This is most likely an artefact of the past, when it was common to directly upload files to the production server.</p>"},{"location":"24FS/CCP2/12_factors.html#6-processes","title":"6. Processes","text":"<p>Services (processes) are stateless and share nothing.</p> <ul> <li>A service never assumes that anything is cached in memory or on disk. This enables that a request can go to any instance, since the instance didn't cache anything</li> <li>Any persistent data must be stored in a stateful backing service</li> </ul>"},{"location":"24FS/CCP2/12_factors.html#7-port-binding","title":"7. Port Binding","text":"<p>A service is completely self-contained and does not rely on the presence of a webserver in the environment.</p> <p>A service can become the backing service for another app. Then the backing service's URL is provided to the service using the service.</p> <p></p>"},{"location":"24FS/CCP2/12_factors.html#8-concurrency","title":"8. Concurrency","text":"<p>Each server can scale individually and horizontally (adding more instances).</p>"},{"location":"24FS/CCP2/12_factors.html#9-disposability","title":"9. Disposability","text":"<p>A service needs to be able to start and stop at any time. When receving a termination signal (e.g. SIGTERM), resources should be freed, the service should unsubscribe from message channels and locks should be released.</p> <p>Additionally, the app should be robust against sudden death, in the case of a failure of the underlying hardware.</p>"},{"location":"24FS/CCP2/12_factors.html#10-devprod-parity","title":"10. Dev/Prod Parity","text":"<p>Development, staging and production environment should be as similar as possible. This enables effective continuous delivery and deployment and avoid gaps between development and production.</p> <ul> <li>Avoid time gap: Write code and have it deployed within hours</li> <li>Avoid personnel gap: developers who wrote code are closely involved in deploying it and watching its behaviour in production</li> <li>Avoid tool gap: Use the same tools in development and production</li> </ul>"},{"location":"24FS/CCP2/12_factors.html#11-logs","title":"11. Logs","text":"<p>Logs should be treated as event streams.</p> <p>A service should never concern itself with routing or storage of its log output stream. Instead, the environment captures the logs and collated them together for viewing and for long-term archival.</p>"},{"location":"24FS/CCP2/12_factors.html#12-admin-processes","title":"12. Admin Processes","text":"<p>Management tasks (e.g. deployment or modifying DB structure) are executed as a one-off service and not part of the long-running services. Thus, services don't do migration themselves, since this could lead to disaster when the other replicas still require the old DB structure.</p> <p>These tasks should be tested on a copy of the environment with the same release, codebase and config.</p>"},{"location":"24FS/CCP2/13_Operation.html","title":"Operation","text":"<p>A service fulfils the request of a client through discoverable endpoints of an encapsulated implementation described by a well-defined interface with a uniform messaging protocol plus respective information model.</p> <p>The following diagram is an example with composite services:</p> <p></p> <p>SLA: Service Level Agreement (legal terms, rights &amp; obligations); SD: Service Description; CD: Composition Description (technical binding between multiple services or application parts)</p> <p>The following is a service description:</p> <pre><code>{\n    \"services\":[\n        {\n            \"id\":\"766fa866-a950-4b12-adff-c11fa4cf8fdc\",\n            \"name\":\"cloudamqp\",\n            \"description\":\"Managed HA RabbitMQ servers\",\n            \"requires\":[],\n            \"tags\":[ \"amqp\", \"rabbitmq\", \"messaging\" ],\n            \"bindable\": true,\n            // can be bound to app\n            \"metadata\":{\n                // infos displayed in Catalog\n                \"displayName\":\"CloudAMQP\",\n                \"imageUrl\":\"https://example.com/amqp.png\",\n                \"longDescription\":\"Managed, highly available,\n                RabbitMQ clusters\",\n                \"providerDisplayName\":\"84codes AB\",\n                \"documentationUrl\":\"http://www\u2026./....html\",\n                \"supportUrl\":\"http://www.cloudamqp.com/support.html\"\n            },\n            \"plan_updateable\": true, // can up/downgrade plan\n            \"plans\":[\n                {\n                    \"id\":\"024f3452-67f8-40bc-a724-a20c4ea24b1c\",\n                    \"name\":\"bunny\",\n                    \"description\":\"A mid-sized plan\",\n                    \"free\": \"false\"\n                    \"metadata\":{\n                    \"bullets\":[\n                        \"20 GB of messages\",\n                        \"20 connections\"\n                    ],\n                    \"costs\":[{\n                        \"amount\": { \"usd\":99.0 },\n                        \"unit\":\"MONTHLY\"\n                    },{\n                        \"amount\":{ \"usd\":0.99 },\n                        \"unit\":\"1GB of messages over 20GB\"\n                    }],\n                    \"displayName\":\"Big Bunny\"\n                }\n            ]\n        },\n        ...\n    ]\n}\n</code></pre>"},{"location":"24FS/CCP2/13_Operation.html#service-registry","title":"Service Registry","text":"<p>A service publishing means that it registers itself with the registry and notifies the registry what it is. On the other side, when a consumer tries to find a server, it asks the registry. Then, once a specific service has been found, the consumer binds to the provider directly.</p> <p>However, in practice, a service registry is rarely just a registry.</p> <p></p> <p>Brokers can be implemented on a global level (globally accessible), provider level (only accessible within a platform, like azure) or tenant level (only accessible from within the company).</p>"},{"location":"24FS/CCP2/13_Operation.html#open-service-broker-api-osb","title":"Open Service Broker API (OSB)","text":"<p>This API standardises how services can be found and bound.</p> <p></p> <p>Provisioning and binding are two actions, since it is possible to bind a service to multiple other services (e.g. a database which multiple applications connect to).</p> <p>The following shows a system diagram:</p> <p></p> <ul> <li>Marketplace   Manages the services</li> <li>Service Broker   Manages the associated services (helmbroker, aws-broker, ...). A service broker can be associated with multiple marketplaces, and reversely, a marketplace supports multiple service brokers.</li> <li>Service Class   A service implementation providing a functionality (e.g. postgresql, redis, ...)</li> <li>Service Instance   A specific instance of a service class with a specific service plan</li> <li>Service Binding   The glue between an application and a service instance</li> </ul>"},{"location":"24FS/CCP2/13_Operation.html#kubernetes-operators","title":"Kubernetes Operators","text":"<p>Operators are software extension of Kubernetes that formalise and automate operational know how.</p> <p>This is done (motivation) to capture the know how of a human operator, formalise this in a configuration and build an automation around it.</p> <p>Examples of operators are:</p> <ul> <li>Operation of Infrastructure, like storage- and network-services</li> <li>Operation of Services (provisioning, scale, monitor, backup, ...), like db-clusters or message-brokers</li> <li>Operation of Applications (Provisioning, Health, Scaling, Migration, ...)</li> <li>Operation of Data Processing (collect, transform, publish, ...)</li> <li>Operation of Security (Create/Renew Credentials, certificates, ...)</li> </ul> <p>Operators come in different levels, depending on their capabilities.</p> <p></p> <p>This can be accomplished with custom resource definitions (CRD) and custom controllers, which act on the CRDs.</p> <p>The following is an example of a CRD:</p> <pre><code>apiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\nname: shirts.stable.example.com\nspec:\ngroup: stable.example.com\nscope: Namespaced\n  names:\n    plural: shirts\n    singular: shirt\n    kind: Shirt\n  versions:\n  - name: v1\n    served: true\n    storage: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n          type: object\n          properties:\n            color:\n              type: string\n            size:\n              type: string\n    selectableFields:\n    - jsonPath: .spec.color\n    - jsonPath: .spec.size\n    additionalPrinterColumns:\n    - jsonPath: .spec.color\n      name: Color\n      type: string\n    - jsonPath: .spec.size\n      name: Size\n      type: string\n---\napiVersion: shirts.stable.example.com\nkind: Shirt\nmetadata:\n  name: myShirt\nspec:\n  color: blue\n  size: XL\n</code></pre>"},{"location":"24FS/CCP2/13_Operation.html#custom-controller","title":"Custom Controller","text":"<p>A controller's job is to mitigate the difference between the current and the desired state in a control-loop.</p> <p></p>"},{"location":"24FS/CCP2/13_Operation.html#deployment","title":"Deployment","text":"<ul> <li>Feature flags / toggles</li> <li>Seamless deployment</li> <li>Blue-Green deployment</li> <li>Canary deployment (&amp; Rolling update)</li> <li>State transition / migration</li> </ul>"},{"location":"24FS/CCP2/13_Operation.html#feature-flags-toggles","title":"Feature Flags / Toggles","text":"<p>New software features are deployed to production and then enabled at runtime based on the configuration. </p> <p>Typically feature flags are dynamically configurable during runtime. Furthermore, if one feature is toggled, its hierarchy of toggles should all be enabled. This is useful for features which are dependent on each other. Finally, a feature might depend on context (e.g. user, role, environment, ...).</p> <p>A feature might be enabled based on a few strategies:</p> <ul> <li>users / roles   Maybe used for test users, A/B tests</li> <li>clients   Useful for IP based, web-/mobile-/fat-client</li> <li>instances   canary deployment</li> <li>geo-locations   coordinated roll-out</li> <li>data-scheme / API versions   seamless migrations</li> </ul> <p>A simple feature flag implementation might look like this:</p> <pre><code>// Configuration class\npublic class FeatureToggleConfig {\n    private Map&lt;String, Boolean&gt; featureConfig = new HashMap&lt;&gt;();\n    public void setFeature(String name, boolean enabled) {\n        featureConfig.set(name, enabled);\n    }\n    public boolean isFeatureEnabled(name){\n        return featureConfig.get(name);\n    }\n}\n// Usage in production code\npublic Spline[] reticulateSplines() {\n    if(toggleConfig.isFeatureEnabled(\"use-new-SR-algorithm\")) {\n        return enhancedSplineReticulation();\n    } else {\n        return oldFashionedSplineReticulation();\n    }\n}\n</code></pre>"},{"location":"24FS/CCP2/13_Operation.html#categories-of-toggles","title":"Categories of Toggles","text":"<ul> <li>Release Toggles   Deploy app with new features and then enable them eventually. These toggles are (usually) transitionary and can be removed, once all services migrated to the new feature</li> <li>Experiment Toggles   Enables experimental features and is often used in conjunction with A/B testing. Usually, these are also transitional and should be removed once the a given version is chosen.</li> <li>Ops Toggles   These are used to control operational aspects (e.g. system outage, deactivate certain functionalities, maintenance mode). Some are transitional, some are long-living.</li> <li>Permission Toggles   They are used to enable features for a certain group of people (alpha / beta testers, or internal / external users). These are often long living and dynamic.</li> </ul>"},{"location":"24FS/CCP2/13_Operation.html#configuration-server","title":"Configuration Server","text":"<p>A central server, which is contacted by the services, which serves the configuration. The config might be store in a git repository, and is versioned. This allows for great flexibility.</p>"},{"location":"24FS/CCP2/13_Operation.html#seamless-deployment","title":"Seamless Deployment","text":"<p>This usually requires multiple releases running in parallel.</p>"},{"location":"24FS/CCP2/13_Operation.html#blue-green-deployment","title":"Blue-Green Deployment","text":"<p>In this model, there are two identical environments (blue and green) running. One environment is running the current productive application. If one wants to migrate to the next release, the new release is deployed to the other environment. Once the app has been deployed, smoke tests can be done. After which, with a switch, all requests can be switched over to the new environment. If something went wrong, the switch can be flicked back. </p> <p>The two environments alternate, which is the hot one, every release.</p> <p>The  advantage is that there is ever only one release active. This leads to less inconsistencies between multiple requests. On the other hand, it requires more resource, since two duplicate production environments are required.</p> <p>Problems can arise from the db. While two separate DBs can be synced fairly easily, in this scenario, they might have different schemas. </p>"},{"location":"24FS/CCP2/13_Operation.html#canary-deployment-rolling-update","title":"Canary Deployment (&amp; Rolling Update)","text":"<p>In this model, users are switched over to the new release gradually. This allows to first monitor the new version, while potential bugs only affect a few users.</p> <p>Advantages are that early roll back is possible with only a small number of people affected. Additionally, A/B testing can be done by routing some users to the new release and some to the old release. It's also possible to check if the application meets the capacity requirements gradually. Finally, it is less resource hungry than blue-green deployment.</p> <p>The disadvantages are that it is harder to manage and imposes further constraints on compatibility between releases with regards to data model migration.</p> <p>Rolling updates (used by kubernetes) is a simplified version of the canary deployment model. Here, a fixed rollout process with limited monitoring and less control of the process.</p>"},{"location":"24FS/CCP2/13_Operation.html#zero-downtime-state-transitions","title":"Zero-downtime State Transitions","text":"<p>Transitioning from one version to the next with a stateless service is easy. </p> <p>To be able to migrate the database, without problems, the following has to be considere:</p> <ul> <li>Without maintance-window</li> <li>Without lost updates</li> <li>Without performance hit</li> </ul> <p>There are several options:</p> <ul> <li>Stop the old app, migrate data, start the new app This is not an option for a zero-downtime deployment</li> <li>Reduce app functionality (only allows for reading)   Switch the app to read only; create a copy of the db; migrate to the new schema, and switch to new version. However, this affects the customer.</li> <li>Synchronisation   Create a copy DB, migrate the schema and run a process which keeps both versions in sync, and then switch the app to the new DB.  Furthermore, for rollbacks, this synchronisation has to be bi-directional This process is error prone and can be problematic for performance</li> <li>Design the app to allow for migration   Plan migrations in several small steps, instead of one large change. Each of those steps needs back and forward compatibility. There are also well-known building blocks for migration steps (see below). This needs planning</li> </ul>"},{"location":"24FS/CCP2/13_Operation.html#state-transition-building-blocks","title":"State Transition Building Blocks","text":""},{"location":"24FS/CCP2/13_Operation.html#add-a-new-property","title":"Add a new Property","text":"<ol> <li>DB: Add the new property</li> <li>DB: Pre-set value (NULL, default value, computed)</li> <li>Code: Read from and write to the new property</li> </ol>"},{"location":"24FS/CCP2/13_Operation.html#change-a-property-name-type-format","title":"Change a Property (Name, Type, Format, ...)","text":"<ol> <li>DB: Add new property (no constraints, like not null, to avoid errors from incomplete data during migration)</li> <li>Code: read from old column, but write to both</li> <li>DB: copy data from old to new property    For large datasets, do it in multiple shards.    Then add the constraints to the new property, since the property is fully operational and should be consistent</li> <li>Code; read from new property, write to both</li> <li>DB: delete constraints from old property (for the same reason as in step 1)</li> <li>Code: read from and write to new property only</li> <li>DB: Delete the old property</li> </ol> <p>The following is an example of how to rename <code>last_name</code> to <code>surname</code>:</p> <p></p>"},{"location":"24FS/CCP2/13_Operation.html#delete-a-property","title":"Delete a Property","text":"<ol> <li>DON'T, since it is a destructive operation. Rather it should be kept for a retention period</li> <li>Code: stop reading, but keep writing the property</li> <li>(After the retention period)</li> <li>Code: Stop writing the property</li> <li>DB: Delete the property</li> </ol>"},{"location":"24FS/CCP2/13_Operation.html#more-complex-operations","title":"More complex Operations","text":"<ul> <li>Add/Change/Delete A Relation -&gt; Add/Change/Delete a Column</li> <li>Add/Split/Merge/Delete Tables -&gt; Series of Column operations</li> <li>Referential Integrity constraints (NotNull, foreign keys,...)   These don't contain business value and are (only) a safety-net to avoid corruption. Therefore, these should be removed before the transition and then be reinstated after the transition.</li> </ul>"},{"location":"24FS/CCP2/13_Operation.html#best-practice","title":"Best Practice","text":"<ul> <li>Use migration tools, like flyway or liquibase   These tools allow for forward and backwards compatibility. Furthermore, the scheme needs to be in version control.</li> <li>Decouple the database   Simpler data base model per microservice as well as having less dependencies and side effects helps as well.   </li> <li>Use migration-friendly architectures   Use Event-Sourcing and CQRS patterns (see CNA lecture (maybe?)), which store the events, instead of the actual data. This allows to (re)create the different view models from the event store</li> </ul>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html","title":"Erweiterte Konzepte","text":""},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#object-initializers","title":"Object Initializers","text":"<pre><code>class Student {\n    public string Name;\n    public int Id {get; set;} // setter muss \u00f6ffentlich sein\n\n    public Student(string Name) {\n        this.Name = Name;\n    }\n}\n\nStudent s1 = new Student(\"John\") {Id = 3};\n</code></pre>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#anonymous-types","title":"Anonymous Types","text":"<pre><code>var obj = new {\n    Name = \"John\",\n    Id = 100;\n}\n</code></pre> <p>oder sogar k\u00fcrzer:</p> <pre><code>Student s1 = ...;\nvar obj = new {\n    s1.Name,\n    s1.Id\n}\n</code></pre>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#extension-methods","title":"Extension Methods","text":"<pre><code>class Fraction {\n    public int z, n;\n    public Fraction(int z, int n) {...}\n}\n\nstatic class FractionUtils {\n    public static Fraction Inverse(this Fraction f) {\n        return new Fraction(f.n, f.z);\n    }\n}\n</code></pre> <p>Die Klasse, in welcher die die Extension Methode enth\u00e4lt muss als <code>static</code> deklariert werden. Die  Extension-Method selbst muss selbst auch <code>static</code> sein und der erste Parameter muss mit <code>this</code> annotiert werden. </p> <p>Dass FractionUtils zieht, muss die Klasse importiert werden.</p>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#lambda","title":"Lambda","text":"<pre><code>delegate int FunctionName(int x);\n\nvoid Apply(FunctionName f, int[] data) {\n    for(int x : data) {\n        f(x);\n    }\n}\n\nApply(x =&gt; x + 2, array);\n</code></pre> <p>Mit weniger oder mehr argumente ist es folgendermassen:</p> <pre><code>() =&gt; ...;\nx =&gt; ....;\n(x, y) =&gt; ...;\nx =&gt; {\n    return x;\n}\n</code></pre> <p>Lambdas in C# k\u00f6nnen auf den Scope, in welchem sie definiert wurden, zu greiffen;</p> <p>Delegates k\u00f6nnen auch generisch sein:</p> <pre><code>delegate void Del&lt;T&gt;(T item);\n</code></pre> <p>Es gibt vordefinierte Delegate-Typen:</p> <pre><code>delegate void Action ();\ndelegate void Action&lt;T1&gt; (T1 a);\ndelegate void Action&lt;T1, T2&gt; (T1 a, T2 b);\ndelegate void Action&lt;T1, T2, T3&gt; (T1 a, T2 b, T3 c);\n\ndelegate TRes Func&lt;TRes&gt; ();\ndelegate TRes Action&lt;T1, TRes&gt; (T1 a);\ndelegate TRes Action&lt;T1, T2, TRes&gt; (T1 a, T2 b);\ndelegate TRes Action&lt;T1, T2, T3, TRes&gt; (T1 a, T2 b, T3 c);\n</code></pre>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#linq","title":"LINQ","text":"<pre><code>string[] cities = {...};\n\nIEnumerable&lt;string&gt; result = \n    from c in cities \n    where c.StartsWith(\"B\")\n    orderby c\n    select c.ToUpper();\n\nIEnumerable&lt;string&gt; result2 = students\n    .Where(c =&gt; c.StartsWith(\"B\"))\n    .OrderBy(c =&gt; c)\n    .Select(s =&gt; new {s.Id, s.Name});\n</code></pre> <pre><code>QueryExpr = \n    \"from\" [Type] variable \"in\" SrcExpr QueryBody.\n\nQueryBody =\n</code></pre> <p>Mit LINQ k\u00f6nnen auch XML Elemente generiert werden, wie auch auf <code>DataSets</code>.</p>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#dynamic-typ","title":"<code>dynamic</code> Typ","text":"<p>Eine Variable vom Typ <code>dynamic</code> kann jeden Typ beinhalten und kann auch jederzeit ge\u00e4ndert werden. Bei Compilezeit wird die Typ-Sicherheit abgeschaltet. </p> <p></p>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#reflection","title":"Reflection","text":"<pre><code>Type t = d.GetType();\nif(t is a .NET type) {\n    MethodInfo m = t.GetMethod(\"Foo\", new Type[]{typeof(int)});\n    if(m == null) throw new Exception(...);\n    m.Invoke(d, new Object[]{3});\n}\n</code></pre>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#covariance","title":"Covariance","text":"<p>In diesem Fall darf den generischen Parameter <code>T</code> nur als R\u00fcckgabe-Typ verwendet werden.</p> <pre><code>interface Sequence&lt;out T&gt; {\n    T this[int i] { get; }\n}\n\nSequence&lt;String&gt; stringSeq = ...;\nSequence&lt;Object&gt; objSeq = stringSeq;\n</code></pre> <p>Die alternative ist Kontravarianz:</p> <pre><code>interface IComparer&lt;in T&gt; {\n   int Compare(T x, T y);\n}\n\nIComparer&lt;Object&gt; objectComp = ...;\nIComparer&lt;String&gt; stringComp = objectComp;\n</code></pre>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#nullable","title":"Nullable","text":"<pre><code>Nullable&lt;double&gt; = pi = 3.14;\ndouble? pi = 3.14; // shorthand for Nullable&lt;double&gt;\nif(pi.HasValue) {\n    pi.Value + 1;\n} \ndouble pi2 = pi ?? 1; // if pi is null, 1 is returned\n\n// with NullableContextOptions enabled\nstring? str = null;\nstring[]? splitted = str?.Split(\",\") //Only calls Split, if str is not null, otherwise null is returned\n</code></pre> <p>Per Default (aktuell) k\u00f6nnen primitive Typen Nullable gemacht werden mit dem Fragezeichen (e.g. <code>int?</code>).</p> <p>Wenn <code>NullableContextOptions</code> auf <code>enabled</code> gesetzt wird, dann gibt es eine Warnung, wenn ein Referenz-Typ ohne Fragezeichen (z.B. <code>string</code>) null  zuweist. Ebenfalls gibt es eine Warnung, wenn auf ein nullable Referenz-Typ zugegriffen wird, ohne das \u00fcberpr\u00fcft wird, ob es null ist. </p>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#tuple","title":"Tuple","text":"<p>Neben den normalen Tuples (z.B. <code>(3, 2)</code>) k\u00f6nnen auch named Tuples erstellt werden:</p> <pre><code>var p = (X: 3, Y: 2);\nint x = p.X;\n\nvar (x, y) = p; // deconstruction\nvar (x2, _) = p; \n</code></pre>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#deconstruction","title":"Deconstruction","text":"<p>Eine eigene Klasse kann auch dekonstruiert werden:</p> <pre><code>public struct Complex{\n    public double re;\n    public double im;\n\n    public Complex(double re, double im) {...}\n\n    public void Deconstruct(out double re, out double im) {\n        re = this.re;\n        im = this.im;\n    }\n}\n\nCopmlex c = new Complex(3, 2);\nvar (x, y) = c; // allows deconstructing of custom struct/classes\n</code></pre>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#imports","title":"Imports","text":"<p>C# hat static imports:  <pre><code>//alows using all methods in System.Console with specifying Console\nusing static System.Console; \n\nusing AliasToMyClas = NameSpace1.MyClass;\n\nWriteLine(\"Hello, Test\");\nnew MyClass();\n</code></pre></p>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#default-interface-methoden","title":"Default Interface Methoden","text":"<pre><code>interface IDefaultInterfaceMethod {\n    public void DefaultMethod() {\n        // a default implementation\n    }\n}\n</code></pre>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#records","title":"Records","text":"<pre><code>records Person{\n    public string? FirstName {get; init; }\n    public string? LastName {get; init; }\n}\n\nvar person = new Person { FirstName = \"mads\", LastName = \"Nielson\"};\nvar otherPerson = person with { LastName = \"Torgesen\" };\n\nvar name = person.FirstName;\n</code></pre> <p>C# generiert automatisch eine Equal methode.</p>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#threads","title":"Threads","text":"<pre><code>new Thread(() =&gt; some stuff).Start()\n</code></pre> <p>Threads sind teuer, zum erstellen, zum laufen und zum zerst\u00f6ren, da bei allem ein Mode-Switch vern\u00f6ten ist. Zus\u00e4tzlich, wenn der aktive Thread gewechselt wird, dann gibt es zus\u00e4tzlich noch ein Context-Switch.</p>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#coroutines","title":"Coroutines","text":"<p>Courtines geben die Kontrolle aktive selbst ab. Dies hat den Vorteil, dass es keinen Kontext und Mode-Switch ben\u00f6tigt. Dies kommt mit der Einschr\u00e4nkung, dass dies nicht Preemptive ist.</p> <pre><code>class MyClass : IEnumerable&lt;string&gt; {\n    public IEnumerator&lt;string&gt; GetEnumerator() \n    {\n        yield return first;\n        yield return second;\n        yield return third;\n        yield break; // specifies that the enumerator is finished\n    }\n}\n</code></pre>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#tasks","title":"Tasks","text":"<pre><code>Task task = new Task(() =&gt; ...);\ntask.Start();\n\nTask.Run(() =&gt; ...); // creates and runs the task\n\nTask&lt;string&gt; task2 = Task.Run(() =&gt; \"Hello\");\nConsole.WriteLine(task2.Result); // Result blocks until task2 is done\n\nTask.Delay(1000).Wait(); \n\ntask2.ContinueWith(t =&gt; Console.WriteLine(t)); // is exectued after task2 completed\n// ContinueWith calls the lambda even if task2 is already \n//done when ContinueWith is executed\n\n// alternatively it can be written with await:\nasync static void CallerWithAsync() {\n    // await starts (if not already started) and waits for the task to finish\n    String result = await Task.Run(() =&gt; \"Test\");\n    Console.WriteLine(result);\n}\n\nTask&lt;string&gt; task3 = Task.Run(() =&gt; \"test\");\n// returns a Task which completes once all the given Tasks finished\nstring[] all = await Task.WhenAll(task3, task2);\n\n// returns a Task which completes once one of the given Tasks finished\nstring first = await Task.WhenAny(task3, task2);\n</code></pre> <p>Eine Methode, welche ein Task startet, enden nach Konvention in Async (z.B. <code>GreetingAsync(...)</code>)</p> <p>Ein Task kann folgendermassen gecancled werden:</p> <p></p>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#mit-timeouts","title":"Mit Timeouts","text":"<pre><code>var task = Task.Run(() =&gt; ...);\n\nbool isCompletedSuccessfully = task.Wait(TimeSpan.FromMilliseconds(3000));\nif(completedSuccessfully) {\n    return task.Result;\n} else {\n    throw new TimeoutException(\"\");\n}\n\n// alternative\nvar result = Task.WhenAny(task, Task.Delay(3000));\nif(result == task) {\n    return task.Result;\n} else {\n    throw new TimeoutException(\"\");\n}\n</code></pre>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#control-flow","title":"Control Flow","text":"<p>Ein interesanteres Beispiel ist das folgende: Da <code>DoAsync()</code> mit <code>await task</code> blockiert wird, wird die Kontrolle \u00fcber den Thread wieder an den  \"Rufer\" zur\u00fcck gegeben. Wenn jetzt <code>task</code> fertig ist, dann wird ein \"coroutine transfer\" durchgef\u00fchrt. Dies heisst, dass asynchrone Methode k\u00f6nnen von unterschiedlichen Threads bearbeitet werden.</p> <p></p> <p>Das wird f\u00fcr folgenden Code noch extremer:</p> <pre><code>async void DoAsync() {\n    while(...) {\n        Task&lt;int&gt; task = Task.Run(...);\n        int result = await task;\n    }\n}\n</code></pre> <p></p>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#pitfalls","title":"Pitfalls","text":"<p>Tasks ben\u00fctzt Background Threads. Dies heisst, die Applikation kann schliessen, obwohl noch Tasks am laufen sind.</p> <p>Ein zweiter Pitfall ist, dass Exception verpuffen, wenn nicht auf den Task gewartet wird. </p> <pre><code>async void DoAsync() {\n    throw Exception();\n}\n\nDoAsync(); // without await, Wait(), or accesing Result. This won't throw an exception\nawait DoAsync(); // will throw an exception \n</code></pre>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#how-to-convert","title":"How to Convert","text":""},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#gui-thread","title":"GUI-Thread","text":"<p>Um nun trotzdem mehrere Thread ben\u00fctzten zu k\u00f6nnen, m\u00fcssen die Threads sich queuen im STA Thread.</p> <p></p> <p></p>"},{"location":"24FS/DNET/01_Erweiterte%20Konzepte.html#concurrent-collections","title":"Concurrent Collections","text":""},{"location":"24FS/DNET/02_GUI.html","title":"GUI","text":""},{"location":"24FS/DNET/02_GUI.html#basic-structure","title":"Basic Structure","text":"<p>The <code>App.xaml</code> and <code>App.xaml.cs</code> is the equivalent to the main. In the <code>StartupUri</code> the start window is set.</p> <pre><code>&lt;Application x:Class=\"WpfApp.App\"\n             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n             xmlns:local=\"clr-namespace:WpfApp2\"\n             StartupUri=\"MainWindow.xaml\"&gt;\n    &lt;Application.Resources&gt;\n    &lt;/Application.Resources&gt;\n&lt;/Application&gt;\n</code></pre> <p>The following is the <code>App.xaml.cs</code></p> <pre><code>namespace WpfApp {\n    public partial class App : Application {\n    }\n}\n</code></pre> <p>The following is the <code>MainWindow.xaml</code> file which defines the main window:</p> <pre><code>&lt;Window x:Class=\"MainWindow.xaml.cs\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        Title=\"TestWPF\" Height=\"300\" Width=\"300\"&gt;\n    &lt;Grid&gt;\n        &lt;Label&gt;\n            Hallo World\n        &lt;/Label&gt;\n    &lt;/Grid&gt;\n&lt;/Window&gt;\n</code></pre> <p>The following is the accompanying C# class</p> <pre><code>public partial class MainWindow : Window\n{\n    public MainWindow ()\n    {\n        InitializeComponent();\n    }\n}\n</code></pre> <p></p>"},{"location":"24FS/DNET/02_GUI.html#xaml","title":"XAML","text":"<pre><code>&lt;Window xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"&gt;\n&lt;/Window&gt;\n</code></pre> <p>The default  namespace contains the standard UI controls, where as the <code>x</code> namespace contains special XML parser types.</p>"},{"location":"24FS/DNET/02_GUI.html#content-property","title":"Content Property","text":"<pre><code>&lt;Button Content=\"OK\" /&gt;\n&lt;Button&gt;OK&lt;/Button&gt;\n</code></pre> <p>The two buttons above are equivalent to each other.</p>"},{"location":"24FS/DNET/02_GUI.html#collection-itemslogicaltreehelper","title":"Collection ItemsLogicalTreeHelper","text":""},{"location":"24FS/DNET/02_GUI.html#important-attribute","title":"Important Attribute","text":""},{"location":"24FS/DNET/02_GUI.html#clr-properties","title":"CLR Properties","text":"<pre><code>&lt;Window x:Class=\"WpfApp2.MainWindow\"\n        xmlns:datalib=\"clr-namespace:DataLib;assembly=DataLib\"\n        mc:Ignorable=\"d\"\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\"&gt;\n    &lt;StackPanel&gt;\n        &lt;Label&gt;Hello World&lt;/Label&gt;\n        &lt;ListBox&gt;\n            &lt;datalib:Person FirstName= \"Stephany\" LastName = \"Nagel\" /&gt;\n            &lt;datalib:Person FirstName= \"Matthias\" LastName = \"Nagel\" /&gt;\n        &lt;/ListBox&gt;\n    &lt;/StackPanel&gt;\n&lt;/Window&gt;\n</code></pre> <pre><code>namespace DataLib {\n    public class Person {\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public override string ToString() =&gt; $\"{FirstName} {LastName}\";\n    }\n}\n</code></pre>"},{"location":"24FS/DNET/02_GUI.html#dependency-properties","title":"Dependency Properties","text":"<pre><code>namespace myNameSpace {\n    public class MyStateControl : UserControl {\n        public MyStateControl() : base() { }\n    }\n    public String State {\n        get { return (String)this.GetValue(StateProperty); }\n        set { this.SetValue(StateProperty, value); }\n    }\n    public static readonly DependencyProperty StateProperty = DependencyProperty.Register(\n        \"State\", typeof(String), typeof(MyStateControl), new PropertyMetadata(\"\"));\n}\n</code></pre>"},{"location":"24FS/DNET/02_GUI.html#layout","title":"Layout","text":"<p>The <code>Width</code> and <code>Height</code> property control the width and height of a control. However, they shouldn't be set directly, as this can lead to layouts which cannot scale. Instead, <code>MinWidth</code> and <code>MaxWidth</code> should be used.</p> <p>There is also <code>DesiredSize</code>, which is how large the element likes to be, <code>RenderSize</code> which is the actual size, and <code>ActualWidth</code> and <code>ActualHeight</code>, which are the components of <code>RenderSize</code></p>"},{"location":"24FS/DNET/02_GUI.html#canvas","title":"<code>Canvas</code>","text":"<p>Children are arranged in a 2D grid. It's main use, is to draw graphics and it should not be used for placing controls</p>"},{"location":"24FS/DNET/02_GUI.html#stackpanel","title":"<code>StackPanel</code>","text":"<p>The stack panel arranges its controls either vertically or horizontally depending on the <code>Orientation</code> property. </p>"},{"location":"24FS/DNET/02_GUI.html#grid","title":"<code>Grid</code>","text":"<pre><code>&lt;Grid x:Name = \"FormLayoutGrid\" Background = \"LightGray\"&gt;\n    &lt;Grid.ColumnDefinitions&gt;\n        &lt;ColumnDefinition Width=\"Auto\" /&gt;\n        &lt;ColumnDefinition /&gt;\n    &lt;/Grid.ColumnDefinitions&gt;\n    &lt;Grid.RowDefinitions&gt;\n        &lt;RowDefinition Height = \"*\" /&gt; remaining\n        &lt;RowDefinition Height = \"*\" /&gt; remaining space\n        &lt;RowDefinition Height = \"*\" /&gt;\n    &lt;/Grid.RowDefinitions&gt;\n\n    &lt;TextBlock Grid.Row = \"0\" Grid.Column = \"0\"\n               Text = \"Name\" Margin = \"10\" HorizontalAlignment = \"Left\"\n               VerticalAlignment = \"Center\" Width = \"100\"/&gt;\n    &lt;TextBox Grid.Row = \"0\" Grid.Column = \"1\" Margin = \"10\"/&gt;\n    &lt;TextBlock Grid.Row=\"1\" Grid.Column=\"0\" Text=\"ID\" Margin=\"10\"\n               HorizontalAlignment = \"Left\" VerticalAlignment = \"Center\"\n               Width = \"100\"/&gt;\n    &lt;TextBox Grid.Row = \"1\" Grid.Column = \"1\" Margin = \"10\"/&gt;\n    &lt;TextBlock Grid.Row = \"2\" Grid.Column = \"0\" Text = \"Age\"\n               Margin = \"10\" HorizontalAlignment = \"Left\"\n               VerticalAlignment=\"Center\" Width = \"100\"/&gt;\n    &lt;TextBox Grid.Row = \"2\" Grid.Column = \"1\" Margin = \"10\"/&gt;\n&lt;/Grid&gt;\n</code></pre>"},{"location":"24FS/DNET/02_GUI.html#dockpanel","title":"<code>DockPanel</code>","text":"<p>Arranges children horizontally or vertically to each other towards the edges</p>"},{"location":"24FS/DNET/02_GUI.html#wrappanel","title":"<code>WrapPanel</code>","text":"<p>Arranges children continuously horizontally or vertically, flowing to the next row/column</p>"},{"location":"24FS/DNET/02_GUI.html#data-bindinng","title":"Data Bindinng","text":"<p>The following data object is used as an example in this section:</p> <pre><code>class Person {\n    public String Name {get; set; }\n    public int IdNumber { get; set; }\n}\n</code></pre> <p>There are multiple syntaxes for declaring a binding in XAML:</p> <pre><code>&lt;Button Content=\"{Binding Path=Name}\" /&gt;\n&lt;Button Content=\"{Binding Name}\" /&gt;\n&lt;Button&gt;\n    &lt;Button.Content&gt;\n        &lt;Binding Path=\"Name\" /&gt;\n    &lt;/Button.Content&gt;\n&lt;/Button&gt;\n</code></pre> <p></p> Property Meaning ElementName Specifies the name of the data soure Path The property to which the data is bound (e.g. Content, Value, Text, ...) Mode The binding direction Converter Defines a converter used to convert the data Source Reference to the source object UpdateSourceTrigger When the data should be updated <p>The following options exit for the <code>Mode</code> property:</p> <p></p> <p>The following options exits for the <code>UpdateSourceTrigger</code>:</p> <p></p> <p>If we want to bind an instance of a <code>Person</code> to a UI, the instance has to be set to the <code>DataContext</code> attribute:</p> <pre><code>public partial class MainWindow : Window \n{\n    public Person p = ...;\n\n    public MainWindow() \n    {\n        InitializeComponent();\n        DataContext = p; // set data context to the person instance\n    }\n}\n</code></pre>"},{"location":"24FS/DNET/02_GUI.html#events","title":"Events","text":""},{"location":"24FS/DNET/02_GUI.html#multi-threading","title":"Multi-Threading","text":""},{"location":"24FS/DNET/02_GUI.html#model-view-viewmodel-mvvm","title":"Model - View - ViewModel (MVVM)","text":"<p>The model contains the business logic. The model can implement some kind of notification systems.</p> <p>The View displays the user interface and has no or very little code. It does not directly interact with the model.</p> <p>The ViewModel is the glue between the Model and the ViewModel and is model specifc. It abstracts the model for the view.</p>"},{"location":"24FS/DNET/02_GUI.html#icommand","title":"<code>ICommand</code>","text":"<p>Provides a command which the UI can execute.</p> <pre><code>public interface ICommand {\n    event EventHandler CanExecuteChanged;\n    bool CanExecute(object parameter);\n    void Execute(object parameter);\n}\n</code></pre> <p>There are some pre-defined commands, like <code>Cut</code>, <code>Copy</code>, ... for <code>TextBox</code>es.</p>"},{"location":"24FS/DNET/03_SQL.html","title":"SQL","text":""},{"location":"24FS/DNET/03_SQL.html#sql-commands","title":"SQL Commands","text":"<p><code>SELECT * FROM &lt;table&gt;</code></p> <p><code>INSERT INTO &lt;table&gt; (&lt;column1&gt;, ...) VALUES (&lt;value1&gt;,...)</code></p> <p><code>UPDATE &lt;table&gt; SET &lt;column1&gt; = &lt;value1&gt;, ... WHERE ...</code></p> <p><code>DELETE FROM &lt;table&gt; WHERE ...</code></p>"},{"location":"24FS/DNET/03_SQL.html#sql-server-architektur","title":"SQL Server Architektur","text":"<p>TDS ist das Protokoll, mit welchem C# und MS-SQL Server kommuniziert. TDS auf maximale Performance optmiert. </p> <p></p> <p>Direkt vom Browser kann nicht auf den Server zugegriffen werden.</p> <p>Im unten stehenden Diagramm sieht man ein 5-Schichten-Modell, wie ein DBMS aufgebaut ist.</p> <p></p> <p>Das unten stehende Diagramm zeigt die Architektur noch auf eine andere Art:</p> <p></p> <p>Query Optimizer</p> <pre><code>SELECT * FROM person WHERE name = \"M\u00fcller\"\n</code></pre> <p>Dieses SQL Statement kann auf mehrere Arten umgesetzt werden:</p> <ul> <li>Alle Reihen lesen und sehen, ob <code>name=\"M\u00fcller\"</code> ist</li> <li><code>name</code> k\u00f6nnte sortiert sein und dann kann das DBMS ein Bin\u00e4r-Suche machen</li> <li><code>name</code> k\u00f6nnte indexiert sein. \u00dcber den Index kann direkt die entsprechenden Bl\u00f6cke gelesen werden</li> </ul> <p>Alle diese M\u00f6glichkeiten haben unterschiedliche Performance-Charakteristiken. Der Optimizer sorgt daf\u00fcr, dass die schnellste M\u00f6glichkeit gew\u00e4hlt wird.</p> <p>Wenn z.B. alle Reihen <code>\"M\u00fcller\"</code> sind, dann ist es schneller, alle Reihen zu lesen, anstelle einen Index zu verwenden.</p> <p>Es gibt zwei M\u00f6glichkeiten wie SQL ausgef\u00fchrt werden kann:</p> <ul> <li>Statisches SQL:   SQL-Anweisungen zum Zeitpunkt der Programm\u00fcbersetzung bekannt und festgelegt (z.B. Stored Procedure). Daher kann der Execution Plan wiederverwendet werden</li> <li>Dynamisches SQL   SQL-Anweisungen werden erst zum Zeitpunkt der Programmausf\u00fchrung bekannt und werden z.B. per String \u00fcbergeben. Da jedes mal der Optimizer laufen muss, ist dieser Weg ein wenig langsamer (Allerdings kann Execution-Plan Caching helfen). Ein weiterer Punkt ist, dass statisches SQL keine SQL-Injection zul\u00e4sst.</li> </ul>"},{"location":"24FS/DNET/03_SQL.html#t-sql-datentyps","title":"T-SQL Datentyps","text":"SQL C# Erkl\u00e4rung 1-1 Abbildung bit bool? True oder False x - sbyte smallint short? 16bits, -32'768 - 32'767 x int int? 32bits, -2,147,483,648 - 2,147,483,647 x bigint long? 64bits x tinyint byte? 8bits, unsigned x - ushort 16bits, unsigned - uint 32bits, unsigned ulong 64bits, unsigned float - -1.79E+308 to -2.23E-308, 0 and 2.23E-308 to 1.79E+308, depends on nn = 1-24: 32 bits, 7 digits precisionn = 25-53: 64 bits, 15 digits precisionnahe IEEE-754-Standard real - 32 bits, - 3.40E+38 to -1.18E-38, 0 and 1.18E-38 to 3.40E+38nahe IEEE-754-Standard, entspricht float(24) - float 32 bits, range from \u00b11.5E\u221245 to \u00b13.4E38, IEC-60559 format - double 64 bits, range from \u00b15.0E\u2212324 - 1.7E308, IEC-60559 format decimal(n) - - decimal 128 bits, range is at least \u20137.9E\u221228 - 7.9E28, with at least 28-digit precision decimal(28,14) decimal? ACHTUNG: die Anzahl Kommastellen ist im SQL fix 14! Im C# ist es eine Floating-Point-Number. beste, m\u00f6gliche \u00dcbereinstimmung char(n) - ASCII, n Zeichen/Bytes lang (max. 8000, abh\u00e4ngig von Encoding, ev. UTF-8 abh\u00e4ngig von Collation) varchar(n) - ASCII, n Zeichen/Bytes lang (max. 8000, abh\u00e4ngig von Encoding, ev. UTF-8 abh\u00e4ngig von Collation) nchar - UTF_16, n bytes lang nvarchar - UTF-16, n bytes lang nvarchar(max) string? max 2^31-1 bytes (2 GB), abh\u00e4ngig von Encoding (C # meist UTF-16 encoding) x char(1) char? 16 bit, abh\u00e4ngig von Encoding (SQL Server: z.B. UTF-8, C#: meist UTF-16 encoding) date - 0001-01-01 bis 9999-12-31 datetime - 1753-01-01 bis 9999-12-31, 00:00:00 bis 23:59:59.997 datetime2 DateTime? - SQL: 0001-01-01 bis 9999-12-31, 00:00:00 bis 23:59:59.997- .NET: 0001-01-01 bis 9999-12-31, Aufl\u00f6sung: 100-Nanosekunde, enth\u00e4ltDateTimeKind (UTC, local, not specified) datetimeoffset DateTimeOffset? \u2022 SQL:0001-01-01 bis 9999-12-31 (Datum), 00:00:00 bis 23:59:59.997 (Zeit) und+-14 Offset (hh:mm) \u2013 enth\u00e4lt Abweichung (Offset) zu UTC\u2022 .NET: DateTime plus Offset (TimeSpan) smalldatetime - 1900-01-01 bis 2079-06-06, 00:00:00 bis 23:59:59.997 time - 00:00:00.0000000 through 23:59:59.9999999"},{"location":"24FS/DNET/03_SQL.html#programmieren-in-sql","title":"Programmieren in SQL","text":"<ul> <li>Es reduziert die Netzwerklast, da die Daten nicht \u00fcber das Netzwerk gesendet werden m\u00fcssen</li> <li>SQL-Server k\u00f6nnen sehr schnell auf diesen Daten arbeiten und sind f\u00fcr das ausgelegt</li> <li>Sicherheit ist h\u00f6her, da kein dynamisches SQL ausgef\u00fchrt wird</li> </ul>"},{"location":"24FS/DNET/03_SQL.html#go","title":"<code>GO</code>","text":"<p>Gibt eine Meldung an den Client zur\u00fcck und signalisert das Ende eines Batches. Es gibt einige Orte, wo das <code>GO</code> vorn\u00f6ten ist. Batches haben einige Regeln:</p> <ul> <li>Lokale Variable sind nur innerhalb des Batches sichtbar</li> <li>Darf nicht innerhalb der Definition einer Stored Procedure verwendet werden</li> <li><code>CREATE PROCEDURE</code> muss am Anfang eines Batches stehen</li> </ul> <p>Es ist keine T-SQL Anweisung, daher ist kein Semikolon vorn\u00f6ten.</p>"},{"location":"24FS/DNET/03_SQL.html#variablen-declare-set","title":"Variablen (<code>DECLARE</code>, <code>SET</code>)","text":"<p>Der initial wert ist <code>NULL</code>.</p> <pre><code>DECLARE\n    @school nvarchar(50) = 'ZHAW',\n    @department nvarchar(50) = 'School of Engineering',\n    @foundingYear int = 1874,\n    @nrOfStudents int\nSET @nrOfStudents = 50 -- Zuweisung\nSELECT @nrOfStudents = 50 -- Zuweisung\n\nSelect @nrOfStudents -- wertet die variable aus\n\n-- subqueries are in (...)\nDECLARE @nrOfStudents int\nSET @nrOfStudents = (SELECT COUNT(*) FROM Studenten)\n\n-- uses a select to set the @nrOfStudents variable\nDECLARE @nrOfStudents int\nSELECT @nrOfStudents = COUNT(*) FROM Studenten\n</code></pre> <p>Es gibt Tabellenvariable, welche anstelle von primitiven Typen, eine ganze Tabelle speichern:</p> <pre><code>-- creates a table variable @tabvar, with the column col1, col2, col3 and col4 \ndeclare @tabvar table(col1 varchar(10), col2 float, col3 float, col4 float)\ninsert @tabvar values('a', 1, 1, 1)\ninsert @tabvar values('b', 2, 2, 2)\nSELECT * FROM @tabvar\n</code></pre>"},{"location":"24FS/DNET/03_SQL.html#globale-variablen","title":"Globale Variablen","text":"<p>Es gibt die folgende globalen Variablen:</p> <ul> <li><code>@@ERROR</code>: Fehlermeldung des letzten Statements, 0 bei fehlerfrei.</li> <li><code>@@ROWCOUNT</code>: Die Anzahl der Zeilen, die vom letzten Befehl betroffen sind.</li> <li><code>@@SERVERNAME</code>: Name des Servers</li> <li><code>@@TRANCOUNT</code>: Nesting-Level der Transaction   Transactions k\u00f6nnen genested werden. Innere Transaktionen habe keine Wirkung. Wenn eine innere Transaktion fehlschl\u00e4gt, schl\u00e4gt auch die \u00e4ussere fehl. Dies kann passieren, wenn z.B. ein Trigger eine Transaktion ben\u00f6tigt.</li> <li><code>@@VERSION</code>: SQL-Server-Version</li> </ul> <p>Diese k\u00f6nnen folgendermassen auch abgerufen werden:</p> <pre><code>SELECT @@VERSION AS 'SQL Server Version'\n</code></pre>"},{"location":"24FS/DNET/03_SQL.html#anweisungs-blocke-begin","title":"Anweisungs Bl\u00f6cke (<code>BEGIN</code>)","text":"<pre><code>BEGIN\n    UPDATE Personal SET alter = alter + 1\n    DELETE Personal WHERE alter &gt;= 65\nEND\n</code></pre>"},{"location":"24FS/DNET/03_SQL.html#schleife-while","title":"Schleife (<code>WHILE</code>)","text":"<pre><code>DECLARE @i int = 1\nWHILE @i &lt;= 10\nBEGIN\n    PRINT @i\n    SET @i = @i + 1\nEND \n</code></pre> <p>Ebenfalls gibt es <code>BREAK</code>, was die innerste while-Schleife abbricht und <code>CONTINUE</code>, was die Schleiffe neustartet. </p> <p>Anstelle eines Blockes, k\u00f6nnte auch einfach eine Anweisung stehen (wie z.B. beim <code>if</code> Beispiel)</p> <p>Es gibt keine weiteren Schleifen-Typen.</p>"},{"location":"24FS/DNET/03_SQL.html#if","title":"IF","text":"<pre><code>IF DATENAME(weekday, GETDATE()) IN ('Saturday', 'Sunday')\n    PRINT 'Weekend';\nELSE\n    PRINT 'Weekday';\n</code></pre>"},{"location":"24FS/DNET/03_SQL.html#case","title":"<code>CASE</code>","text":"<pre><code>SELECT ProductNumber, Category =\n    CASE ProductLine\n        WHEN 'R' THEN 'Road'\n        WHEN 'M' THEN 'Mountain'\n        WHEN 'T' THEN 'Touring'\n        WHEN 'S' THEN 'Other sale items'\n        ELSE 'Not for sale'\n    END, Name FROM Production.Product\n</code></pre>"},{"location":"24FS/DNET/03_SQL.html#goto","title":"<code>GOTO</code>","text":"<pre><code>DECLARE @Counter INT;\nSET @Counter = 1;\nWHILE @Counter &lt; 10\nBEGIN\n    SELECT @Counter\n    SET @Counter = @Counter + 1\n    IF @Counter = 4 GOTO Branch_One --Jumps to the first branch.\n    IF @Counter = 5 GOTO Branch_Two --This will NEVER execute.\nEND\n\nBranch_One:\n    SELECT 'Jumping To Branch One.'\n    GOTO Branch_Three; --This will prevent Branch_Two from executing.\nBranch_Two:\n    SELECT 'Jumping To Branch Two.'\nBranch_Three:\n    SELECT 'Jumping To Branch Three.';\n</code></pre>"},{"location":"24FS/DNET/03_SQL.html#stored-procedure-aufrufen-execute","title":"Stored Procedure Aufrufen (<code>EXECUTE</code>)","text":"<pre><code>-- invokes stored procedure named \"getSalary\" with the parameter @EmployeeID \n-- (which has value 6)\nEXEC getSalary @EmployeeID = 6;\n\n-- \nDECLARE @salary float;\nEXEC getSalary @EmployeeID = 6, @SalaryEmployee = @salary OUTPUT;\n\nDECLARE @tabvar TABLE(col1 varchar(10), col2 float, col3 float, col4 float)\nINSERT @tabvar EXEC sp -- speichert das Resultat in der Tabellenvariablen\n</code></pre>"},{"location":"24FS/DNET/03_SQL.html#fehlerbehandlung","title":"Fehlerbehandlung","text":"<p>Try-Catch f\u00e4ngt Ausf\u00fchrungsfehler mit der Severity von mehr als 10 ab und nicht mehr als 20 (, da diese die Verbindung schliesst).</p> <pre><code>BEGIN TRY\n    -- Generate divide-by-zero error.\n    SELECT 1/0;\nEND TRY\nBEGIN CATCH\n    -- Execute error retrieval routine.\n    EXECUTE usp_GetErrorInfo;\nEND CATCH;\n</code></pre>"},{"location":"24FS/DNET/03_SQL.html#dynamische-codeausfuhrung","title":"Dynamische Codeausf\u00fchrung","text":"<pre><code>EXEC ('USE AdventureWorks2012; SELECT BusinessEntityID, JobTitle FROM HumanResources.Employee;');\n</code></pre> <p>Mit <code>sp_executesql</code> k\u00f6nnen Variablen escaped werden:</p> <pre><code>EXECUTE sp_executesql\n    'SELECT * FROM Employee WHERE BusinessEntityID = @level', -- uses @level\n    '@level tinyint' -- defines the type of @level\n    @level = 109; -- set @level to 109\n</code></pre>"},{"location":"24FS/DNET/03_SQL.html#cursor","title":"Cursor","text":"<p>Die Idee von Cursors ist wie ein Pointer, welche auf eine Reihe einer Tabelle zeigt. Ein Cursor kann verschoben werden, um verschiedene Reihen sequentiell zu verschieben. Der Vorteil ist, dass anstelle 100'000 auf einmal gelesen und verarbeitet werden m\u00fcssen, k\u00f6nnen die ersten 20 gelesen und verarbeitet werden. Der Vorteil gegen\u00fcber von <code>LIMIT</code> und <code>SKIP</code>, ist das selbst wenn eine Reihe eingef\u00fchrt wurde, f\u00e4hrt der Cursor am richtigen Ort weiter.</p> <p>Der Ablauf von der Nutzung ist:</p> <ol> <li>Cursor deklarieren (<code>DECLARE</code>)</li> <li>Cursor \u00f6ffnen (<code>OPEN</code>)</li> <li>Datens\u00e4tze nacheinader lesen (<code>FETCH</code>)</li> <li>Cursor schliesen (<code>CLOSE</code>)</li> <li>Cursor freigeben (<code>DEALLOCATE</code>)</li> </ol> <p>SQL-Servern sind optimiert, um mit Mengen zu arbeiten. Daher sind Cursor langs\u00e4mer, als direkt Tabellen.</p> <p>Folgendermassen wird ein Cursor deklariert:</p> <pre><code>-- delcares a cursor emp_cursor. It can only be moved forward\nDECLARE emp_cursor CURSOR FAST_FORWARD FOR\n    SELECT emp_id, emp_name FROM Employee ORDER BY emp_id;\n</code></pre> <ul> <li><code>LOCAL</code>: nur innerhalb des Batches, </li> <li><code>GLOBAL</code>: bleibt erhalten</li> <li><code>STATIC</code>: mit Snapshot</li> <li><code>KEYSET</code>: Inhalt und Reihenfolge wird fixiert</li> <li><code>FAST_FORWARD</code> = <code>READ_ONLY</code> + <code>FORWARD_ONLY</code> (bessere Performance)</li> <li><code>SCROLL_LOCKS</code>: Datens\u00e4tze f\u00fcr nachfolgende Updates</li> </ul> <p>Das folgende \u00f6ffnet den Cursor:</p> <pre><code>OPEN emp_cursor\n</code></pre> <p>Das folgende braucht den Cursor:</p> <pre><code>DECLARE @emp_id INT\nDECLARE @emp_name varchar\n-- declares that the two variables are stored in @emp_id and @emp_name\nFETCH NEXT FROM emp_cursor INTO @emp_id, @emp_name \nPRINT 'Employee_ID Employee_Name'\nWHILE @@FETCH_STATUS = 0 -- while there are more rows\nBEGIN\n    PRINT @emp_id + ' ' + @emp_name\n    FETCH NEXT FROM emp_cursor INTO @emp_id, @emp_name\nEND\n</code></pre> <p><code>FETCH</code> hat folgenden Syntax:</p> <pre><code>FETCH\n    [ [ NEXT | PRIOR | FIRST | LAST\n        | ABSOLUTE { n | @nvar } | RELATIVE { n | @nvar } ]\n        FROM\n    ]\n{ { [ GLOBAL ] cursor_name } | @cursor_variable_name }\n[ INTO @variable_name [ ,...n ] ]\n</code></pre> <p>Das folgende schliesst und dealloziert den Cursor:</p> <pre><code>CLOSE emp_cursor;\nDEALLOCATE emp_cursor;\n</code></pre> <p>Das folgende ist ein kompletes Beispiel:</p> <pre><code>DECLARE @emp_id int, @emp_name varchar(20);\nDECLARE emp_cursor CURSOR FOR\n    SELECT emp_id,emp_name FROM Employee order by emp_id;\n\nOPEN emp_cursor\n\nFETCH NEXT FROM emp_cursor INTO @emp_id, @emp_name\nPRINT 'Employee_ID Employee_Name'\nWHILE @@FETCH_STATUS = 0\nBEGIN\n    PRINT @emp_id + ' ' + @emp_name\n    FETCH NEXT FROM emp_cursor INTO @emp_id,@emp_name\nEND\n\nCLOSE emp_cursor;\nDEALLOCATE emp_cursor;\n</code></pre>"},{"location":"24FS/DNET/03_SQL.html#transaktionen","title":"Transaktionen","text":"<p>Transaktionen stellen sicher, dass ACID (Atomic, Consistency, Isolation, Durability) eingehalten werden</p> <p></p> <p><code>DELAYED_DURABILITY = ON</code> ist gef\u00e4hrlich, da dies bedeutet, dass bei einem <code>COMMIT</code> die \u00c4nderungen nicht direkt ins Log geschrieben werden m\u00fcssen.</p>"},{"location":"24FS/DNET/03_SQL.html#acid","title":"ACID","text":"<ul> <li>Atomic   Entweder sind alle Instruktionen in einer Transaktion durchgef\u00fchrt oder alle schlagen fehl</li> <li>Consistency</li> <li>Isolation   Die Instruktionen wird so ausgef\u00fchrt, als w\u00e4re sie die Einzige (e.g. die Daten \u00e4ndern zwischen Abfragen nicht)</li> <li>Durability   Daten werden in ein Log geschrieben, dass selbst wenn die Festplate crashed, die DB wieder hergestellt weden kann.</li> </ul>"},{"location":"24FS/DNET/03_SQL.html#stored-procedure","title":"Stored Procedure","text":"<pre><code>CREATE [ OR ALTER ] { PROC | PROCEDURE } [schema_name.] procedure_name\n    [ { @parameter [ type_schema_name. ] data_type }\n    [ OUT | OUTPUT | [READONLY] ] [ ,...n ]\n    [ WITH &lt;procedure_option&gt; [ ,...n ] ]\n    [ FOR REPLICATION ]\n    AS { [ BEGIN ] sql_statement [;] [ ...n ] [ END ] }\n</code></pre> <p>Das folgende ist ein Beispiel:</p> <pre><code>CREATE PROC GetData\n    @NrOfRecords int -- input argument\nAS\nBEGIN\n    SELECT TOP(@NrOfRecords) EntityID, Lastname, FirstName FROM Person.Person OPTION (RECOMPILE);\n    SELECT TOP(@NrOfRecords) CustomerID, AccountNumber FROM Sales.Customer OPTION (RECOMPILE);\nEND;\n</code></pre> <p>Die Option <code>RECOMPILE</code> stellt sicher, dass der Ausf\u00fchrungsplan jedes Mal neu erstellt wird.</p> <p>Dies kann dann folgendermassen ausgef\u00fchrt werden:</p> <pre><code>EXECUTE GetData @NrOfRecords = 100;\n</code></pre>"},{"location":"24FS/DNET/03_SQL.html#funktionen","title":"Funktionen","text":"<pre><code>CREATE FUNCTION udfNetSale(\n    @quantity INT,\n    @list_price DEC(10,2),\n    @discount DEC(4,2))\nRETURNS DEC(10,2)\nAS\nBEGIN\n    RETURN @quantity * @list_price * (1 - @discount);\nEND;\n</code></pre>"},{"location":"24FS/DNET/03_SQL.html#trigger","title":"Trigger","text":"<pre><code>CREATE TRIGGER reminder1 ON Sales.Customer\nAFTER INSERT, UPDATE\nAS RAISERROR ('Notify Customer Relations', 16, 10);\n</code></pre> <p>Triggers stellen die konzeptionelle Tabellen <code>deleted</code> und <code>inserted</code> zuverf\u00fcgung, welche die gel\u00f6schte, bzw. eingef\u00fcgte Reihen beinhalten. Damit kann man z.B. mit einem Trigger eine Protokoll Tabelle schreiben.</p> <pre><code>CREATE TRIGGER reminder1 ON Sales.Customer\nAFTER INSERT, UPDATE\nAS INSERT INTO log_table SELECT * FROM inserted; -- or deleted would work as well\n</code></pre>"},{"location":"24FS/DNET/03_SQL.html#informationssicherheit-cia","title":"Informationssicherheit (CIA)","text":""},{"location":"24FS/DNET/03_SQL.html#vertraulichkeit","title":"Vertraulichkeit","text":""},{"location":"24FS/DNET/03_SQL.html#authentifizierung-und-rollenbasierte-zugriffssteuerung","title":"Authentifizierung und rollenbasierte Zugriffssteuerung","text":"<p>Authetifizierung in SQL ist so gel\u00f6st:</p> <p>Es gibt ein User, welchem die Rechte zugewiessen werden. Jeder User hat ein (oder mehrere) Logins, welche aus einem Username und Passwort bestehen. Ebenfalls ist es m\u00f6glich, dass das Windows Login oder LDAP verwendet wird.</p>"},{"location":"24FS/DNET/03_SQL.html#transparent-data-encryption","title":"Transparent Data Encryption","text":"<p>Es k\u00f6nnen verschiedene Teil der DB verschl\u00fcsselt werden (oder auch alles). Z.B. kann nur der Log, oder die gesammte DBSM. Achtung, auch das DB-Backup soll verschl\u00fcsselt werden.</p> <p></p>"},{"location":"24FS/DNET/03_SQL.html#verschlusselung-backup","title":"Verschl\u00fcsselung Backup","text":""},{"location":"24FS/DNET/03_SQL.html#always-encrypted","title":"Always Encrypted","text":"<p>Es kann eingerichtet werden, dass die Daten auf dem Client verschl\u00fcsselt werden. Damit kann selbst der DBA (oder Microsoft) die Daten lesen, da sie auf dem System immer verschl\u00fcsselt sind.</p> <p></p>"},{"location":"24FS/DNET/03_SQL.html#row-level-security-rls","title":"Row-Level Security (RLS)","text":"<p>Es k\u00f6nnen einzelne Reihen gesch\u00fctzt werden.</p> <p></p>"},{"location":"24FS/DNET/03_SQL.html#static-und-dynamic-data-masking-ddm","title":"Static und Dynamic Data Masking (DDM)","text":"<p>Es k\u00f6nnen gewisse Attribute maskiert werden. Dies kann entweder Dynamisch und jenach Nutzer passieren, oder statisch (also beim Kopieren).</p> <p></p>"},{"location":"24FS/DNET/03_SQL.html#sql-injection","title":"SQL Injection","text":""},{"location":"24FS/DNET/03_SQL.html#integritat","title":"Integrit\u00e4t","text":"<p>(Siehe 21HS/DB/05_Integrit\u00e4tsregeln.md)</p> <p></p> <p>Zus\u00e4tzlich hat mssql Server bei der Isolationsebene <code>READ COMMITTED</code> noch die Option <code>READ_COMMITED_SNAPSHOT ON|OFF</code>. </p> <p>Wenn <code>READ_COMMITTED_SNAPSHOT</code> auf <code>OFF</code> gesetzt ist, dann ben\u00fctzt die DB-Engine Lesesperren, um zu verhindern, dass andere Transaktionen Zeilen \u00e4ndern w\u00e4hrend die aktuelle Transaktion einen Lesevorgang ausf\u00fchrt. Dies heisst auch, dass andere Transaktionen blockiert werden, modifizierte Zeilen zu lesen, bis die aktuelle Transaktion abeghlossen ist. </p> <p>Wenn <code>READ_COMMITED_SNAPSHOT</code> auf <code>ON</code> gesetzt ist, dann brauch die DB-Engine die Zeilenversionierung, um jeder Anweisung eine transaktions-konsisteten Snapshot der Daten zu pr\u00e4sentieren.</p> <p>Diese Option kann mit <code>ALTER DATABASE &lt;name&gt; SET READ_COMMITTED_SNAPSHOT OFF|ON</code> ge\u00e4ndert werden.</p>"},{"location":"24FS/DNET/03_SQL.html#verfugbarkeit","title":"Verf\u00fcgbarkeit","text":"<p>(siehe DNET2_4_5 Folien)</p>"},{"location":"24FS/DNET/04_DNET%20Variants.html","title":".NET Variants","text":""},{"location":"24FS/DNET/04_DNET%20Variants.html#net-framework","title":".NET Framework","text":""},{"location":"24FS/DNET/04_DNET%20Variants.html#mono","title":"Mono","text":""},{"location":"24FS/DNET/04_DNET%20Variants.html#net-standard","title":".NET Standard","text":"<p>.NET Standard was try to specify a basic API that is supported on all .NET flavors. The most recent .NET Standard is 2.1, while 2.0 is the last version, which supports every flavor.</p>"},{"location":"24FS/DNET/04_DNET%20Variants.html#net-core-new-just-net","title":".NET Core (new just .NET)","text":"<p>.NET Core can run on all platform and is a subset of the \"full\" .NET version. It should be used for new projects. </p> <p>A problem when migrating from .NET Framework can occur when accessing Windows specific APIs (e.g. COM or registry).</p>"},{"location":"24FS/DNET/04_DNET%20Variants.html#uwp-universal-windows-platform","title":"UWP (Universal Windows Platform)","text":""},{"location":"24FS/DNET/04_DNET%20Variants.html#nuget","title":"NuGet","text":""},{"location":"24FS/DNET/05_Windows%20Communication%20Foundation.html","title":"Windows Communication Foundation (WCF)","text":"<p>WCF is a abstraction over multiple protocol. It enable interoperability to C#, but also Java (with SOAP). While services are rarely written, how to invoke a service can be expected. Additionally, contracts will come at the SEP.</p>"},{"location":"24FS/DNET/05_Windows%20Communication%20Foundation.html#how-to-design-enterprise-software","title":"How to design Enterprise Software","text":"<ol> <li>Separation of Concern    </li> <li>Assignment to Tier-\"Role\"    </li> <li>Separation of Shared Services    </li> </ol> <p>The following diagram shows a more fine-grain view onto the layers. The years are the average lifespan of the layer. This also shows where to focus effort. </p> <p></p>"},{"location":"24FS/DNET/05_Windows%20Communication%20Foundation.html#cap-theorem","title":"CAP Theorem","text":"<p>The CAP theorem says that of the three properties of a DB (consistency, partitioning, availability), two have to be picked.</p> <p>Finanical services require hard consistency, meaning that consistency is the most important property. On the other hand, companies like google or amazon are fine with eventual consistency.</p> <p></p>"},{"location":"24FS/DNET/05_Windows%20Communication%20Foundation.html#wcf","title":"WCF","text":"<p>WCF's preferred protocol is SOAP, but can also be run over https, TCP, etc. </p>"},{"location":"24FS/DNET/05_Windows%20Communication%20Foundation.html#hello-wcf","title":"Hello WCF","text":"<p>First an interface needs to be created, which defines the ServiceContract.</p> <pre><code>using CoreWCF;\nnamespace LibraryServiceSolution {\n    [ServiceContract]\n    interface ILibraryService {\n        [OperationContract]\n        Book? SearchBook(string bookName);\n\n        [OperationContract]\n        IList&lt;Book&gt; AllBooks();\n    }\n}\n</code></pre> <p>Similar to DTOs, a DataContract defines the data structure:</p> <pre><code>using System.ServiceModel;\n\nnamespace LibraryServiceSolution {\n    [DataContract]\n    pubilc class Book {\n        [DataMember]\n        public int ID {get; set; }\n\n        [DataMember]\n        public string? Name {get; set}\n    }\n}\n</code></pre> <p>Then a Service class is needed:</p> <pre><code>namespace LibraryServiceSolution {\n    public class LibraryService : ILibraryService\n    {\n        private List&lt;Book&gt; books;\n        public LibraryService() {\n            books = new List&lt;Book&gt;();\n            for (int i = 0; i &lt; 10; ++i) {\n                books.Add(new Book { ID = i, Name = \"Name \" + i });\n            }\n        }\n        public Book? SearchBook(string? bookName) {\n            return books.Find(w =&gt; w.Name == bookName);\n        }\n        public IList&lt;Book&gt; AllBooks() {\n            return books;\n        }\n    }\n}\n</code></pre> <p>To then host this server, we also need a ServiceHost class:</p> <pre><code>using CoreWCF;\nusing CoreWCF.Configuration;\nusing CoreWCF.Description;\nusing LibraryServiceSolution;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.WebHost.ConfigureKestrel((context, options) =&gt; {\n    options.AllowSynchronousIO = true;\n});\n// Add WSDL support\nbuilder.Services.AddServiceModelServices().AddServiceModelMetadata();\nbuilder.Services.AddSingleton&lt;IServiceBehavior, UseRequestHeadersForMetadataAddressBehavior&gt;();\nvar app = builder.Build();\napp.UseServiceModel(builder =&gt; {\n    builder.AddService&lt;LibraryService&gt;((serviceOptions) =&gt; { })\n        .AddServiceEndpoint&lt;LibraryService, ILibraryService&gt;(new BasicHttpBinding(),\n                                                             \"/LibraryService/basichttp\")\n        .AddServiceEndpoint&lt;LibraryService, ILibraryService&gt;(new WSHttpBinding(SecurityMode.Transport),\n                                                             \"/LibraryService/WSHttps\");\n});\nvar serviceMetadataBehavior = app.Services.GetRequiredService&lt;ServiceMetadataBehavior&gt;();\nserviceMetadataBehavior.HttpGetEnabled = true;\napp.Logger.LogInformation(\"Starting Library Solution ...\");\napp.Run();\n</code></pre> <p>Furthermore, in the <code>appsettings.json</code>, the following needs to be configured:</p> <pre><code>{\n    \"Urls\": \"http://localhost:5000;https://localhost:5001\",\n    \"Logging\": {\n        \"LogLevel\": {\n            \"Default\": \"Information\",\n            \"CoreWCF.Channels\": \"Warning\",\n            \"Microsoft.AspNetCore\": \"Warning\"\n        }\n    },\n    \"AllowedHosts\": \"*\"\n}\n</code></pre> <p>The service can be accessed via the browser. For example, in this case http://localhost:5000/LibraryService/basichttp</p>"},{"location":"24FS/DNET/05_Windows%20Communication%20Foundation.html#use-it-in-c-client-proxy","title":"Use it in C# (Client Proxy)","text":"<p>This can be used in .NET, a client proxy can be generated by VisualStudio. Those can then be used in code:</p> <pre><code>using ServiceReference1;\nvar client = new LibraryServiceClient(\n    LibraryServiceClient.EndpointConfiguration.WSHttpBinding_ILibraryService);\n\nvar book = await client.SearchBookAsync(\"Name 1\");\nConsole.WriteLine(book.ID+\" \"+book.Name);\n\nvar books = client.AllBooks();\nforeach (Book b in books) {\n    Console.WriteLine(b.Name);\n}\n</code></pre> <p>SOAP can also be used by Java. For this the <code>wsimport</code> command can be used to generate the client proxy.</p>"},{"location":"24FS/DNET/05_Windows%20Communication%20Foundation.html#contract-first-design","title":"Contract First Design","text":"<p>Contracts are written first. </p> <p>This allows you to concentrate on the format of the messages and the data types. This ensures interoperability and compatibility </p> <p>As such, for WCF, <code>interface</code>s should be used, instead of <code>class</code>.</p>"},{"location":"24FS/DNET/05_Windows%20Communication%20Foundation.html#the-three-contracts","title":"The three Contracts","text":"<p>The data contract contains the data:</p> <pre><code>using System.Runtime.Serialization;\n\n[DataContract(Name=\"PersonType\")]\npublic class Person {\n    [DataMember]\n    public string name;\n    [DataMember(Name=\"AgeProperty\")]\n    private int age;\n    [DataMember(IsRequired=false)] \n    float salary;\n}\n</code></pre> <p>The <code>IsRequired=false</code> allows to make non-breaking changes to the interface.</p> <p>Breaking changes can be done by using namespaces:</p> <pre><code>[DataContract NameSpace=\"http://www.zhaw/Service/1.0\"]\npublic class Car {\n    [DataMember]\n    public string Model;\n    [DataMember]\n    public int HorsePower;\n}\n</code></pre> <p>The service contract describes which functions can be invoked:</p> <pre><code>[ServiceContract]\n[DataContractFormat(\n    Style=OperationFormatStyle.Document)] //Or Rpc\npublic interface IOrderEntry {...}\n[ServiceContract]\n[XmlSerializerFormat(\n    Style=OperationFormatStyle.Document,\n    Use=OperationFormatUse.Literal)] //Or Encoded\npublic interface IOrderEntry {...}\n</code></pre> <p>Interfaces can be updated in the following way:</p> <pre><code>[ServiceContract NameSpace=\"http://www.zhaw/Service/1.0\"]\npublic interface IOrderEntry\n{\n    [OperationContract(IsOneWay = true)]\n    void PlaceOrder(PurchaseOrder order);\n}\n[ServiceContract]\npublic interface IExtendedOrderEntry : IOrderEntry\n{\n    [OperationContract]\n    PurchaseOrder GetOrder(String orderIdentifier);\n}\n</code></pre> <p>There is also a <code>FaultContract</code>, which gets used when an error or exception occur.</p> <pre><code>[DataContract]\nclass MyFault {\n    [DataMember]\n    public string Reason = null;\n}\n[ServiceContract]\npublic interface IOrderEntry {\n    [OperationContract]\n    [FaultContract(typeof(MyFault))]\n    PurchaseOrder GetOrder(String orderId);\n}\npublic class OrderEntry: IOrderEntry {\n    public PurchaseOrder GetOrder(string orderId) {\n        try{\u2026}\n        catch(Exception exception) {\n            MyFault theFault = new MyFault();\n            theFault.Reason = \"Some Reason\";\n            throw new FaultException&lt;MyFault&gt;(theFault);\n        }\n    }\n}\n</code></pre>"},{"location":"24FS/DNET/05_Windows%20Communication%20Foundation.html#container-managed-transaction","title":"Container Managed Transaction","text":"<pre><code>[ServiceContract]\npublic interface IMyContract\n{\n    [OperationContract]\n    [TransactionFlow(TransactionFlowOption.Required)]\n    bool Transfer1(Account from, Account to, decimal amount);\n    [OperationContract]\n    [TransactionFlow(TransactionFlowOption.NotAllowed)]\n    bool Transfer2(Account from, Account to, decimal amount);\n}\n</code></pre> <p>If <code>TransactinoFlow</code> is required, then a new transaction is tarted when calling the service. If another service is called from within the first service, the transaction context is passed on.</p>"},{"location":"24FS/DNET/05_Windows%20Communication%20Foundation.html#bindings","title":"Bindings","text":"<p>Bindings are a set of protocols that are guaranteed to work. There are multiple bindings. Only the follows are relevant:</p> <p></p> <p></p> <p></p>"},{"location":"24FS/DNET/06_ASP.NET.html","title":"ASP.NET","text":"<p>By default uses ASP.NET the web server Kestrel, but it can also be put behind a reverse proxy.</p>"},{"location":"24FS/DNET/06_ASP.NET.html#minimal-example","title":"Minimal Example","text":"<pre><code>WebApplicationBuilder builder = WebApplication.CreateBuilder(args);\nWebApplication app = builder.Build();\napp.MapGet(\"/\", () =&gt; \"Hello World!\");\napp.Run();\n</code></pre>"},{"location":"24FS/DNET/06_ASP.NET.html#configuration-builder","title":"Configuration (<code>Builder</code>)","text":"<p>The configuration is very flexible and ASP.NET can be configured from multiple sources which are merged when running.</p> <p>Logging is configured in <code>appsettings.{ENVIRONMENT}.json</code>, but can also be done via the <code>WebApplicationBuilder</code></p> <p>If additionall services should be activated, then this has to be done in the builder (e.g. Razor):</p> <pre><code>var builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddRazorPages();\nbuilder.Services.AddSingleton&lt;MyThingy&gt;();\n</code></pre>"},{"location":"24FS/DNET/06_ASP.NET.html#middleware","title":"Middleware","text":"<p>A middleware is also called a module and resembles a \"processing pipeline\".</p> <p></p> <p>Each middleware may process an input and generate an output. Alternatively, a middleware can delegate (pass) the request to the next middleware in the pipeline. </p> <pre><code>//TODO add code example\n</code></pre> <p>Middlewares can also have branches and conditionals:</p> <pre><code>//TODO add code example\n</code></pre> <p>A middleware can, of course, also use a logger:</p> <pre><code>//TODO add code example\n</code></pre> <p>While middlewares can be programmed directly like above, this isn't very reusable. As such, classes can act as middlewares. They can be registered with <code>builder.Use&lt;MyMiddleware&gt;();</code></p> <pre><code>//TODO add code example of custom middleware\n</code></pre>"},{"location":"24FS/DNET/06_ASP.NET.html#dependency-injection","title":"Dependency Injection","text":"<p>Pros:</p> <ul> <li>Higher flexibility</li> <li>Better Testability</li> </ul> <p>Cons:</p> <ul> <li>Complex Configuration</li> <li>Errors in Dependencies cannot be caught during compile time</li> <li>Tracing can be hard</li> </ul> <pre><code>//TODO add code example\n</code></pre> <p>Steps to inject a custom class:</p> <ol> <li>Create an interface (eg. <code>IMyDependency</code>)</li> <li>Implement the interface (e.g. <code>MyDependency</code>)</li> <li>Services are registered with <code>builder.Services.Add&lt;MyDependency&gt;()</code></li> <li>The service can now be used in the constructor. The system will instantiate it when necessary.</li> </ol> <pre><code>public interface IMyDependency {\n    Task WriteMessage(string msg);\n}\n\npublic class MyDependency : IMyDependency {\n    ...//TODO add example code\n}\n</code></pre> <p>There are also scoped dependencies, which are created per request.</p> <pre><code>//TODO add exampe\n</code></pre>"},{"location":"24FS/DNET/06_ASP.NET.html#mvc","title":"MVC","text":"<ul> <li> <p>Model   Performs the user action and retrieves results of queries</p> </li> <li> <p>View   Has very little or no code</p> </li> <li> <p>Controller</p> </li> </ul> <p>Routes the request, chooses the view and provides the view with a model</p> <pre><code>//TODO initialization code exampe\n</code></pre>"},{"location":"24FS/DNET/06_ASP.NET.html#controller","title":"Controller","text":"<p>The controller is a class which extends <code>Controller</code> and implements the routing.</p> <pre><code>//TODO add example\npublic class HelloWorldController : Controller {\n    public string Index() {\n        return \"This is my default action...\"\n    }\n    //TODO\n}\n</code></pre> <p>The model can be specified in the methods of the Controller for the model to be injected.</p>"},{"location":"24FS/DNET/06_ASP.NET.html#model","title":"Model","text":"<pre><code>//TODO\n</code></pre>"},{"location":"24FS/DNET/06_ASP.NET.html#view","title":"View","text":""},{"location":"24FS/DNET/06_ASP.NET.html#routing","title":"Routing","text":"<p>There are two ways to specify the routing: Convention-based routing and attribute routing.</p>"},{"location":"24FS/DNET/06_ASP.NET.html#convention-based-routing","title":"Convention-based Routing","text":"<p>Convention-based routing defines a pattern for an URL. This is also called central routing. </p> <p></p> <p>In the example above the default controller is <code>Home</code> and the default action (method) that is invoked is <code>Index</code>. Futhermore there is an optional parameter <code>id</code>.</p> <pre><code>app.MapControllerRoute(name: \"default\", pattern: \"{controller=Home}/{action=Index}/{id?}\")\n    //TODO complete example\n</code></pre> <p>Here are some examples:</p> <p></p> <p>The following shows some constraints and example. If the constraint fails, a <code>404</code> is returned.</p> <p></p>"},{"location":"24FS/DNET/06_ASP.NET.html#attribute-routing","title":"Attribute Routing","text":"<p>Routing can also be configured with attributes.</p> <pre><code>//TODO \n[Rout(\"api/[controller]\")]\npublic class ProductController : Controller {\n    [HttpGet(\"{id}\")]\n    ...\n}\n</code></pre>"},{"location":"24FS/DNET/06_ASP.NET.html#web-apisrest","title":"Web APIs/REST","text":""},{"location":"24FS/DNET/06_ASP.NET.html#grpcprotocol-buffer","title":"gRPC/Protocol Buffer","text":"<p>gRPC provides a language- and platform-neutral mechanism to specify and serialize data. To archive this, an IDL (interface design language) is provided. This IDL can be compiled to different languages.</p>"},{"location":"24FS/DNET/06_ASP.NET.html#idl","title":"IDL","text":"<pre><code>syntax=\"proto3\";\npackage tutorial;\n\nmessage Person {\n    string name = 1;\n    int32 id = 2;\n    string email = 3;\n\n    enum PhoneType {\n        MOBILE = 0;\n        HOME = 1;\n        WORK = 2;\n    }\n\n    message PhoneNumber {\n        string number = 1;\n        PhoneType type = 2;\n    }\n\n    repeated PhoneNumber hpone = 4;\n}\n</code></pre>"},{"location":"24FS/DNET/07_Razor-Blazor.html","title":"Razer - Blazor","text":""},{"location":"24FS/DNET/07_Razor-Blazor.html#mvvm","title":"MVVM","text":"<p>(https://stackoverflow.com/questions/667781/what-is-the-difference-between-mvc-and-mvvm)</p> <p></p> <ul> <li>Model   Is the data container and contains the business logic and data</li> <li>View   Implements displaying the data and user interactivity. Importantly, the view holds the active control</li> <li>ViewModel   TODO</li> </ul>"},{"location":"24FS/DNET/07_Razor-Blazor.html#razor","title":"Razor","text":"<p>Razor uses the same infastructure as the MVC part of ASP.NET. However, instead of MVC, it uses the MVVM model.</p>"},{"location":"24FS/DNET/07_Razor-Blazor.html#view-and-viewmodels","title":"View and ViewModels","text":"<pre><code>//FILE: IndexModel.cshtml\n@page\n@model IndexModel\n&lt;h2&gt;Separate page model&lt;/h2&gt;\n&lt;p&gt;\n    @Model.Message\n&lt;/p&gt;\n</code></pre> <p>By convention, for each <code>*.cshtml</code> file, a <code>*.cshtml.cs</code> file containg the <code>PageModel</code> should exist. Of course, since this is still ASP.NET, dependency injection is supported. The <code>PageModel</code> is by default per session.</p> <pre><code>//FILE: IndexModel.cshtml.cs\npublic class IndexModel : PageModel {\n    public string Message { get; private set; } = \"PageModel in C#\";\n    public void OnGet()\n    {\n        Message += $\" Server time is { DateTime.Now }\";\n    }\n}\n</code></pre> <p>The purpose of a <code>PageModel</code> is to provide seperation between the UI and the model. Methods which handle incoming requests, are invoked based on a naming scheme: <code>On(Get|Post|Put|Delete)[Async]</code></p> <p>If the <code>Async</code>-suffix is added, then the method can return a <code>Task</code>.</p>"},{"location":"24FS/DNET/07_Razor-Blazor.html#blazor","title":"Blazor","text":"<p>Blazor has a virtual DOM on the server, which is synchronized with the actual DOM of the browser. </p>"},{"location":"24FS/DNET/07_Razor-Blazor.html#blazor-component","title":"Blazor Component","text":"<p>A blazor component consists of a view and code.</p> <pre><code>&lt;div class=\"card\" style=\"width:22rem\"&gt;\n    &lt;div class=\"card-body\"&gt;\n        &lt;h3 class=\"card-title\"&gt;@Title&lt;/h3&gt;\n        &lt;p class=\"card-text\"&gt;@ChildContent&lt;/p&gt;\n        &lt;button @onclick=\"OnYes\"&gt;Yes!&lt;/button&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n@code {\n    [Parameter]\n    public RenderFragment? ChildContent { get; set; }\n    [Parameter]\n    public string? Title { get; set; }\n\n    private void OnYes()\n    {\n        Console.WriteLine(\n            \"Write to the console in C#! 'Yes' button selected.\");\n    }\n}\n</code></pre> <p>This is another example:</p> <pre><code>@page \"/counter\"\n&lt;PageTitle&gt;Counter&lt;/PageTitle&gt;\n&lt;h1&gt;Counter&lt;/h1&gt;\n&lt;p role=\"status\"&gt;Current count2: @currentCount2&lt;/p&gt;\n&lt;button class=\"btn btn-primary\" @onclick=\"IncrementCount2\"&gt;Click me&lt;/button&gt;\n\n@code {\n    private int currentCount = 0;\n    private void IncrementCount() {\n        currentCount++;\n    }\n}\n</code></pre> <p>The code part can also be moved to a separate partial class.</p> <p>Components can also include other components. In the example above, the first view is the index page, which includes the <code>Dialog</code>-component. The <code>Title</code> is a parameter thats passed to the component. Additionally, the inner content of the <code>Dialog</code> element is passed in as <code>ChildContent</code>. </p> <p></p> <p>One can use <code>@inject &lt;className&gt; &lt;nameInView</code> to inject an object with dependency injection. For example <code>@Inject WeatherForcastService ForcastService</code>. Then in the subsequent view, <code>ForcastService</code> can be used in the code or in the view part.</p>"},{"location":"24FS/DNET/08_ADO.NET.html","title":"ADO.NET","text":""},{"location":"24FS/DNET/08_ADO.NET.html#data-provider","title":"Data Provider","text":"<p>Ein Data Provider hat folgende Hauptelemente</p> <ol> <li><code>Connection</code>: Stellt eine Verbindung her</li> </ol> <pre><code>using System.Data.Sql; // abh\u00e4ngig von dem sepzifischen nuget packet\n\nSqlConnection connection = new SqlConnection(\"Data Source=(local);Initial Catalog=FlughafenDB; Integrated Secruity=true\");\nconnection.Open();\n// do work here\n// or use: using(connection) {connection.Open(); ...}\nconnection.Close();\n</code></pre> <p>Im hintergrund verwendet ADO.NET ein Connection-Pool.</p> <ol> <li> <p>Command: F\u00fchrt ein Befehl aus und exponiert Parameter und kann in einer Transaktion ausgef\u00fchrt werden    <pre><code>using (SqlCommand command = new SqlCommand(\n    \"INSERT INTO L (LNR, LName, Status, Stadt) VALUES (@LNR, @LName, @Status, @Stadt)\", connection))\n{\n    // CommandType.Text sends sql commands directly to the server\n // Alternatively, StoredProcedure calls a store procedure and \n // and TableDirect is not relevant\n    command.CommandType = CommandType.Text;\n    command.Parameters.AddWithValue(\"@LNR\", \"ZHAW\");\n    command.Parameters.AddWithValue(\"@LName\", \"Z\u00fcrcher FH\");\n    command.Parameters.AddWithValue(\"@Status\", 4);\n    command.Parameters.AddWithValue(\"@Stadt\", \"Winterthur\");\n    // Open the connection and execute the reader.\n    connection.Open();\n    // ExeuteNonQuery doesn't return a result    \n     // Alternatively, ExecuteScalar() returns a single vaule\n    // or ExecuteReader() returns a DataReader\n    int rowsAffected = command.ExecuteNonQuery();\n    connection.Close();\n}\n</code></pre></p> </li> <li> <p><code>DataReader</code>: liest von einer schreibgesch\u00fctzten Datenstrom</p> </li> </ol> <pre><code>using (SqlConnection connection = new SqlConnection(connectionString)) {\n    // Create the command and set its properties.\n    using (SqlCommand command = new SqlCommand())\n    {\n        command.Connection = connection;\n        command.CommandText = \"SalesByCategory\";\n        command.CommandType = CommandType.StoredProcedure;\n        // Add one input parameter and set its properties.\n        SqlParameter parameter = new SqlParameter();\n        parameter.ParameterName = \"@CategoryName\";\n        parameter.SqlDbType = SqlDbType.NVarChar;\n        parameter.Direction = ParameterDirection.Input;\n        parameter.Value = \"Category\";\n        // Add the parameter to the Parameters collection.\n        command.Parameters.Add(parameter);\n        // Open the connection and execute the reader.\n        connection.Open();\n        using (SqlDataReader reader = command.ExecuteReader()) {\n            if (reader.HasRows) {\n                while (reader.Read()) {\n                    Console.WriteLine(\"{0}: {1:C}\", reader[0], reader[1]);\n                }\n            }\n        }\n    }\n}\n</code></pre> <ol> <li><code>DataAdapter</code>: List eine Menge von Tabellen und f\u00fcllt diese in ein <code>DataSet</code> ab</li> </ol> <pre><code>// Create the data adapter and the select command.\nSqlDataAdapter customerAdapter = new SqlDataAdapter();\ncustomerAdapter.SelectCommand = \n    new SQLCommand(\"SELECT * FROM dbo.Customers\", connection);\n// Create the data set (holding the result).\nDataSet customerOrders = new DataSet();\n\n// Read the data from the database and output each record.\ncustomerAdapter.Fill(customerOrders, \"Customers\");\nforeach (DataRow customerRow in customerOrders.Tables[\"Customers\"].Rows)\n{\n Console.WriteLine(customerRow[\"CustomerID\"]);\n}\n</code></pre> <p><code>DataAdapter</code> hat 4 Command Objekte fields <code>SelectCommand</code>, <code>InsertCommand</code>, <code>UpdateCommand</code> und <code>DeleteCommand</code>.     Die <code>Fill()</code> funktion liest Daten. <code>Update()</code> \u00e4ndert Daten (e.g. insert, update und delete)</p> <pre><code>using (SqlConnection connection = new SqlConnection(connectionString)) {\n    // Create the data adapter and the select command.\n    SqlDataAdapter categoryAdpater = new SqlDataAdapter(\n        \"SELECT CategoryID, CategoryName FROM Categories\", connection);\n\n    // Create the update command.\n    categoryAdpater.UpdateCommand = new SqlCommand(\n        \"UPDATE Categories SET CategoryName = @CategoryName \" +\n        \"WHERE CategoryID = @CategoryID\", connection);\n\n    // Add the parameters for the UpdateCommand.\n    categoryAdpater.UpdateCommand.Parameters.Add(\n        \"@CategoryName\", SqlDbType.NVarChar, 15, \"CategoryName\");\n    SqlParameter parameter = categoryAdpater.UpdateCommand.Parameters.Add(\n        \"@CategoryID\", SqlDbType.Int);\n\n    parameter.SourceColumn = \"CategoryID\";\n    parameter.SourceVersion = DataRowVersion.Original;\n\n    // Load the data from the DB into the table of the dataset\n    DataTable categoryTable = new DataTable();\n    categoryAdpater.Fill(categoryTable);\n\n    // Change the value of the attribute CategoryName of the first row (in memory)\n    DataRow categoryRow = categoryTable.Rows[0];\n    categoryRow[\"CategoryName\"] = \"New Beverages\";\n\n    // Propagate all changes to the DB\n    categoryAdpater.Update(categoryTable);\n}\n</code></pre> <ol> <li>Transaction    Jeder Data Provider hat einie eigene <code>Transaction</code> Class.</li> </ol> <pre><code>// Start a local transaction.\nSqlTransaction sqlTransaction = connection.BeginTransaction();\n// Enlist a command in the current transaction.\nSqlCommand command = connection.CreateCommand();\ncommand.Transaction = sqlTransaction;\n// execute some commands...\n...\nIn welcher Transaktion wird\n// Commit the transaction.\nsqlTransaction.Commit();\n</code></pre> <p>Oder ein gr\u00f6sseres Beispiel:    <pre><code>using (SqlConnection connection = new SqlConnection(connectionString)) {\n    connection.Open();\n    // Start a local transaction.\n    SqlTransaction sqlTransaction = connection.BeginTransaction();\n    // Enlist a command in the current transaction.\n    SqlCommand command = connection.CreateCommand();\n    command.Transaction = sqlTransaction;\n    try {\n        // Execute two separate commands.\n        command.CommandText = \"INSERT INTO Production.ScrapReason (Name) VALUES ('Wrong size')\";\n        command.ExecuteNonQuery();\n        command.CommandText = \"INSERT INTO Production.ScrapReason (Name) VALUES ('Wrong color')\";\n        command.ExecuteNonQuery();\n        // Commit the transaction.\n        sqlTransaction.Commit();\n        Console.WriteLine(\"Both records were written to database.\");\n    }\n    catch (Exception ex) {\n        // Handle the exception if the transaction fails to commit.\n        Console.WriteLine(ex.Message);\n        try {\n            // Attempt to roll back the transaction.\n            sqlTransaction.Rollback();\n        }\n        catch (Exception exRollback) {\n            // Throws an InvalidOperationException if the connection is closed or\n            // the transaction has already been rolled back on the server.\n            Console.WriteLine(exRollback.Message);\n        }\n    }\n}\n</code></pre></p> <p>Oder mit using:    <pre><code>// Create the TransactionScope to execute the commands, guaranteeing\n// that all commands can commit or roll back as a single unit of work.\nusing (TransactionScope transactionScope = new TransactionScope()) {\n    using (SqlConnection connection = new SqlConnection(connectString)) {\n        // Opening the connection automatically enlists it in the TransactionScope\n        connection.Open();\n        ...\n        // Create the SqlCommand object.\n        SqlCommand command = new SqlCommand(commandText, connection);\n        ...\n    }\n    // The Complete method commits the transaction. \n    // If an exception has been thrown,\n    // complete is not called and the transaction is rolled back.\n    transactionScope.Complete();\n}\n</code></pre></p> <ol> <li>Distributed Transaction    Falls der SQL Server die Leitung der Verteilung \u00fcbernimmt, wird die Transaktion mit <code>BEGIN DISTRIBUTED TRANSACTION</code> begonnen.    Alternative kann die Transaktion \u00fcber C# verteilt werden:</li> </ol> <pre><code>// Create the TransactionScope to execute the commands, guaranteeing\n// that both commands can commit or roll back as a single unit of work.\nusing (TransactionScope scope = new TransactionScope()) {\n    using (SqlConnection connection1 = new SqlConnection(connectString1)) {\n        // Opening the connection automatically enlists it in the\n        // TransactionScope as a lightweight transaction.\n        connection1.Open();\n        // Create the SqlCommand object and execute the first command.\n        SqlCommand command1 = new SqlCommand(commandText1, connection1);\n        returnValue = command1.ExecuteNonQuery();\n        writer.WriteLine(\"Rows to be affected by command1: {0}\", returnValue);\n        // If you get here, this means that command1 succeeded. By nesting\n        // the using block for connection2 inside that of connection1, you\n        // conserve server and network resources as connection2 is opened\n        // only when there is a chance that the transaction can commit.\n        using (SqlConnection connection2 = new SqlConnection(connectString2)) {\n            // The transaction is escalated to a full distributed transaction when\n            // connection2 is opened.\n            connection2.Open();\n            // Execute the second command in the second database.\n            SqlCommand command2 = new SqlCommand(commandText2, connection2);\n            returnValue = command2.ExecuteNonQuery();\n            writer.WriteLine(\"Rows to be affected by command2: {0}\", returnValue);\n        }\n    }\n    // The Complete method commits the transaction. If an exception has \n    // been thrown, Complete is not called and the transaction is rolled back.\n    scope.Complete();\n}\n</code></pre> <ol> <li><code>CommandBuilder</code>    Der <code>CommandBuilder</code> kann anhand des Select Befehls die Insert, Update und Delete Befehle generieren.</li> </ol> <pre><code>// Assumes that connection is a valid SqlConnection object and already opened\nSqlDataAdapter adapter = \n    new SqlDataAdapter( \"SELECT * FROM dbo.Customers\", connection);\nadapter.Fill(dataSet, \"Customers\");\nSqlCommandBuilder builder = new SqlCommandBuilder(adapter);\n...\n// generate statements to modify the DataSet\nbuilder.GetUpdateCommand();\n</code></pre> <ol> <li> <p>ConnectionStringBuilder    <pre><code>SqlConnectionStringBuilder builder =\n    new SqlConnectionStringBuilder(\"server=(local);user id=ab;\" + \n     \"password=Winter1234;initial catalog=AdventureWorks\");\n// Now that the connection string has been parsed, you can work \n// with individual items.\nbuilder.Password = \"new@1Password\";\n// You can refer to connection keys using strings, as well.\nbuilder[\"Server\"] = \".\";\nbuilder[\"Connect Timeout\"] = 1000;\nbuilder[\"Trusted_Connection\"] = true;\nConsole.WriteLine(builder.ConnectionString);\n</code></pre></p> </li> <li> <p>Parameter    Dies macht SQL Befehle mehr Typ-sicher und effizienter (dader Build Befehl nicht neu gebaut werden muss).</p> </li> </ol> <pre><code>SqlCommand command = new SqlCommand(\"SELECT * FROM Authentication \" +\n                                    \"WHERE Username = @Username and Password = @Password\", connection);\ncommand.CommandType = CommandType.Text;\n// Create the first parameter and add it to the collection\nSqlParameter userName = new SqlParameter();\nuserName.ParameterName = \"@Username\";\nuserName.Value = txt1.Text;\ncommand.Parameters.Add(userName);\n// Create the second parameter and add it to the collection\nSqlParameter password = new SqlParameter();\npassword.ParameterName = \"@Password\";\npassword.Value = txt2.Text;\ncommand.Parameters.Add(password);\nSqlDataReader reader = command.ExecuteReader();\nif (reader.HasRows) {\n    Console.WriteLine(\"{0}\", reader[0]);\n}\nelse { errorlbl.Text = \"Incorrect username and password\"; }\n</code></pre> <ol> <li>DbException     Die Exception enthalt noch mehr Infos \u00fcber wo und was schief ging.</li> </ol>"},{"location":"24FS/DNET/08_ADO.NET.html#verwendung","title":"Verwendung","text":""},{"location":"24FS/DNET/08_ADO.NET.html#datareader","title":"<code>DataReader</code>","text":"<p>Erlaubt es read-only daten direkt abzurufen</p> <p></p> <pre><code>// This examples reads a data blob. Thus, it uses GetBytes\n\nSqlCommand command = new SqlCommand(\"SELECT pub_id, logo FROM pub_info\", connection);\n\nlong retval, startIndex = 0;\nstring pubID = \"\";\nint bufferSize = 100;\n// The BLOB byte[] buffer to be filled by GetBytes.\nbyte[] outByte = new byte[bufferSize];\nconnection.Open();\n\n// reader is created HERE\nSqlDataReader reader = command.ExecuteReader(CommandBehavior.SequentialAccess);\n\nwhile (reader.Read()) {\n    pubID = reader.GetString(0);\n    // Read bytes into outByte[] and retain the number of bytes returned\n    retval = reader.GetBytes(1, startIndex, outByte, 0, bufferSize);\n    // do something...\n    while (retval == bufferSize) {\n        startIndex += bufferSize;\n        retval = reader.GetBytes(1, startIndex, outByte, 0, bufferSize);\n        // do something...\n    }\n}\n</code></pre>"},{"location":"24FS/DNET/08_ADO.NET.html#dataset","title":"<code>DataSet</code>","text":"<p>DataSet's sind ein In-Memory-Cache. </p> <p>Ein Vorteil von <code>DataSet</code> ist:</p> <ul> <li>dass sie relative einfach ist</li> <li>Es gibt es auch in Core</li> </ul> <p>Nachteile:</p> <ul> <li>Das Lesen von der DB und das zur\u00fcck schreiben ist zeitlich getrennt. Daher kann w\u00e4hrendessen sie die DB ver\u00e4ndern. Beim Updaten muss zuerst \u00fcberpr\u00fcft werden, ob es kein Update gab. Dies muss manuell implementiert werden (z.B. ein Zeitstempel als Feld hinzuf\u00fcgen)</li> </ul> <p></p> <ul> <li>DataTable (.Tables):    Tabellen des Datasets. </li> <li>DataRow (.Rows):    Eigenschaften und Methoden zum Abrufen, zum Einf\u00fcgen, L\u00f6schen und Aktualisieren der Werte in der DataTable (nicht in der DB).</li> <li>DataColumn (.Columns):    Enth\u00e4lt die Spalten der Tabelle (Datentyp, Name, Defaultwert, \u2026).</li> <li>PrimaryKey (.PrimaryKey):    Liest oder setzt ein Array von Spalten, die als Prim\u00e4rschl\u00fcssel dienen.</li> <li>DataRelationCollection (.Relations):    Fremdschl\u00fcssel-Beziehungen der Tabellen, k\u00f6nnen automatisch nachgef\u00fchrt werden.</li> <li>Constraints (.Constraints):    Eine ConstraintCollection, die die Constraint-Objekten enth\u00e4lt</li> <li>ChildRelations (.ChildRelations):    Eine DataRelationCollection, die die untergeordneten Beziehungen f\u00fcr diese Tabelle enth\u00e4lt.</li> <li>ParentRelations (.ParentRelations):    Eine DataRelationCollection, die die \u00fcbergeordneten Beziehungen f\u00fcr diese Tabelle enth\u00e4lt.</li> <li>DataView (.DefaultView erzeugt View):    Ansichten einer DataTable. H\u00e4ufig in Daten-Binding verwendet (z.B. Sortierung, nach Zeilenstatus oder   Ausdruck filtern). (Das Equivalent zu Sql-Views)</li> <li>ExtendedProperties (.ExtendedProperties):   erm\u00f6glicht es, benutzerdefinierte Informationen zum DataSet, zur DataTable oder zur DataColumn zu speichern.</li> </ul> <p>Das folgende ist ein Beispiel:</p> <pre><code>// Create the data adapter and the select command.\nSqlDataAdapter customerAdapter = new SqlDataAdapter();\ncustomerAdapter.SelectCommand = \n    new SqlCommand(\"SELECT * FROM dbo.Customers;\" +\n                   \"SELECT * FROM dbo.Orders;\", connection);\n// Create the data set (holding the result).\nDataSet customerOrders = new DataSet();\n\n// Read the data from the database an output each record.\ncustomerAdapter.Fill(customerOrders);\nforeach (DataRow customerRow in customerOrders.Tables[\"Customers\"].Rows)\n{\n    Console.WriteLine(customerRow[\"CustomerID\"]);\n}\n</code></pre>"},{"location":"24FS/DNET/08_ADO.NET.html#change-management","title":"Change Management","text":"<p>Das folgende Diagramm zeigt, wie sich die DB \u00e4ndern l\u00e4sst:</p> <p>Wenn in C# \u00c4nderungen am DataSet erstellt wurden, m\u00fcssen diese zuerst akzeptiert werden, damit sie in der DB \u00fcbernommen werden. Alternative k\u00f6nnen die \u00c4nderungen r\u00fcckg\u00e4ngig gemacht werden.</p> <p></p> <p>Achtung! Update und AcceptChanges sind nicht in einer Transaktion!</p> <pre><code>// Read the data\nSqlDataAdapter adapter = new SqlDataAdapter(\"select * from customer\", connection);\nDataSet dataSet = new DataSet();\nadapter.Fill(dataSet);\nSqlCommandBuilder commandBuilder = new SqlCommandBuilder(adapter);\nwhile(true)\n{\n    // Modify the data in dataSet here.\n    ...\n    using (TransactionScope updateTransaction = new TransactionScope()) {\n        // Save changed data to DBMS.\n        adapter.Update(dataSet);\n        // Ensures that only future changes are stored in the database.\n        dataSet.AcceptChanges();\n    }\n}\n</code></pre> <p>Um die In-Memory-DB wieder zur\u00fcck zusetzen zu k\u00f6nnen, m\u00fcssen mehrere Versionen gespeichert werden. Mit <code>DataRowVersion</code> k\u00f6nnen auf die verschiedenen Version zugegriffen werden.</p> <p></p> <p>(<code>custTable</code> ist eine Instanz von <code>DataTable</code>)</p>"},{"location":"24FS/DNET/08_ADO.NET.html#dataview","title":"<code>DataView</code>","text":"<pre><code>// Build the View.\nDataView dataView = new DataView(dataTable);\ndataView.RowFiler = \"Name &lt;&gt; 'John' AND Salary &gt; AVG(Salary) AND \" \n    + \"City NOT IN ('Tokyo', 'Paris')\";\n\ndataView.Sort = \"Name ASC, Birthday DESC\";\nint rowIndex = dataView.Find(\"M\u00fcller\")\n</code></pre>"},{"location":"24FS/DNET/08_ADO.NET.html#datagridview","title":"<code>DataGridView</code>","text":"<pre><code>private DataGridView dataGridView = new DataGridView();\ndataGridView.AutoGenerateColumns = true;\ndataGridView.DataSource = dataSet; // auch mit DataTable m\u00f6glich\ndataGridView.DataMember = \"TableName\";\n</code></pre>"},{"location":"24FS/DNET/08_ADO.NET.html#orm-object-releationship-mapping","title":"ORM (Object Releationship Mapping)","text":"<p>Vorteile ORM:</p> <ul> <li>Programmiersprache selbst muss nicht erweitert werden</li> <li>RDBMS sind etabliert</li> </ul> <p>Nachteile ORM:</p> <ul> <li>schelchtere Performance</li> <li>Es k\u00f6nnen nicht alle Daten als Objekte dargestellt weden, da die DB oft zu gross ist. Dies kann problematisch werden wegen Fremdschl\u00fcssel</li> </ul> <p>Folgendermassen werden Konzepte gemappt:</p> OO-Modell ER-Modell Klassen Enitit\u00e4tsmengen / Relationen (Tabellen) Objekte Entit\u00e4ten / Tupel (Tabellenzeilen) Klassenattribut Entit\u00e4ts-Attribut (Tabellenspalte) Identit\u00e4t eines Objekts Prim\u00e4rschl\u00fcssel Objekt-Referenzen Fremdschl\u00fcssel-Prim\u00e4rschl\u00fcssel-Beziehung <p>Bez\u00fcglich Vererbung:</p> <p>SQL hat keine Vererbung, da es keine Methoden gibt. Allerdings gibt Spezialisierung/Generalisierung. Dies kann bewerkstelligt werden, in dem es mehrere Tabellen gibt, welche einen Prim\u00e4rschl\u00fcssel \"teilen\". </p> <p>Vererbungen k\u00f6nnen auf drei verschiedene M\u00f6glichkeiten abgebildet werden:</p> <ol> <li>Gesamte Vererbungshierarchie in einer Tabelle mit allen Attributen</li> <li>Je Klasse der Hierarchie eine Tabelle mit den Attributen der jeweilgen Klasse</li> <li>Je Klasse der Hierarchie eine Tabelle mit den Attributen der jeweiligen Klassen und allen \u00fcbergeordneten Klassen (Redundanz!)</li> </ol>"},{"location":"24FS/DNET/08_ADO.NET.html#linq-to-sql","title":"LINQ to SQL","text":"<p>Gibt es *nur in .NET Framework nicht</p> <p>LINQ to SQL wandelt jede Tabelle in ein .NET Objekt um (und umgekehrt). Es gibt zus\u00e4tzlich auch noch andere LINQ to (z.B. LINQ to DataSet, LINQ to XML, LINQ to Entities, LINQ to Objects)</p> <p>LINQ to SQL wandelt LINQ Expressions um in SQL Expressions.</p> <pre><code>// specifies which tables correlates to this class\n[Table(Name = \"Customers\")]\npublic class Customer {\n    // Specify CustomerID Attribute of Database.\n    private string _CustomerID;\n    [Column(IsPrimaryKey=true, Storage=\"_CustomerID\")]\n    public string CustomerID {\n        get { return this._CustomerID; }\n        set { this._CustomerID = value; }\n    }\n    // Specify City Attribute of Database.\n    private string _City;\n    [Column(Storage=\"_City\", DbType=\"NVarChar(15) NULL\")]\n    public string City {\n        get { return this._City; }\n        set { this._City=value; }\n    }\n}\n\n// Use a connection string to connect to the database\nDataContext db = new DataContext(@\"Server=(local)\\MSSQLSERVER2017;\" +\n                                 \"initial catalog=northwind;Integrated Security=SSPI;\");\n// Attach the log to show the generated SQL.\ndb.Log = Console.Out;\n// Get a typed table to run queries.\nTable&lt;Customer&gt; Customers = db.GetTable&lt;Customer&gt;();\n// Query for customers in London.\nIQueryable&lt;Customer&gt; custQuery =\n    from cust in Customers\n    where cust.City == \"London\"\n    select cust;\n\n// only here is data actually read from the DB\nforeach (Customer cust in custQuery) {\n    Console.WriteLine(\"ID={0}, City={1}\", cust.CustomerID, cust.City);\n}\n</code></pre> <p>Im folgende Beispiel wird ein Wert ver\u00e4ndert: <pre><code>// Query the database for the row to be updated.\nIQueryable&lt;Customer&gt; custQuery2 =\n    from cust in Customers\n    where cust.CustomerID == \"ALFKI\"\n    select cust;\n\nusing (var transaction = new TransactionScope())\n{\n    // Execute the query, and change the column values you want to change.\n    foreach (Customer cust in custQuery2) {\n        cust.City = \"Winterthur\";\n        // Insert any additional changes to column values.\n        ...\n    }\n    // Submit the changes to the database.\n    try {\n        db.SubmitChanges();\n    }\n    catch (Exception e) {\n        Console.WriteLine(e);\n        // Make some adjustments and try again.\n        ...\n    }\n}\n</code></pre></p>"},{"location":"24FS/DNET/08_ADO.NET.html#entity-framework","title":"Entity Framework","text":"<p>Es gibt drei variante, wie mit EF programmiert werden kann:</p> <ol> <li>Model-First Approach</li> <li>Code-First Approach</li> <li>Database-First Approach</li> </ol>"},{"location":"24FS/DNET/08_ADO.NET.html#database-first","title":"Database-First","text":"<p>Es wird zuerst die Tabellen erstellt. Aus dem werden die Domain-Klassen und das Visuelle-Modell erstellt.</p> <ul> <li>Vorteile:</li> <li>Kann f\u00fcr bestehende DB-Strukturen eingesetzt werden</li> <li>Risko des Datenverlusts wird minimiert</li> <li>Nachteile:</li> <li>Aufw\u00e4ndig und Fehleranf\u00e4llig f\u00fcr komplexe DB L\u00f6sungen</li> <li>Weniger Kontrolle \u00fcber den generierten Code</li> <li>\u00c4nderungen am Source-Code m\u00fcssen vermieden werden</li> </ul> <p></p>"},{"location":"24FS/DNET/08_ADO.NET.html#model-first-approach","title":"Model-First Approach","text":"<p>Zuerst wird das visuelle Modell erstellt, von diesem wird der Code und die DB erstellt.</p> <ul> <li>Vorteile:</li> <li>Datenmodel wird anwendungsneutral als Ganzes entwickelt</li> <li>\u00c4nderungen k\u00f6nnen am visuellen Modell durchgef\u00fchrt werden</li> <li>Acuh grosses Datenmodel ist gut \u00fcberschaubar</li> <li>Nachteil</li> <li>\u00c4nderungen am visuellen Model m\u00fcssen vorsichtig erfolgen, da es e.v. zu Datenverlust kommt</li> <li>\u00c4nderungen gibt auch \u00c4nderungen am Source Code</li> </ul> <p></p>"},{"location":"24FS/DNET/08_ADO.NET.html#code-first-approach","title":"Code-First Approach","text":"<p>Zuerst werden die Klassen erstellt und auf Basis von dem, wird die DB erstellt. Grafisches Modell gibt es keines mehr.</p> <ul> <li>Vorteile:</li> <li>Einfacheres Prototyping</li> <li>Geeigenet f\u00fcr kleine bis mittlere Anwendung</li> <li>Nachteile</li> <li>\u00c4nderungen an den Domain-Klassen m\u00fcssen vorsichtig erfolgen</li> <li>Nicht empfolen f\u00fcr daten-intensive Applikationen</li> <li>Erstellen von Datenbankobjekten ist komplex (z.B. Stored Procedures, Trigger).</li> <li>\u00c4nderungen in der DB werden nicht im Code abgebildet.</li> <li>Kein visuelles DB-Modell</li> </ul> <p></p> <p>Konventionen:</p> <p></p> C# type DB Type int int string nvarchar(max) decimal decimal(18,2) float real byte[] varbinary(max) datetime datetime bool bit byte tinyint short smallint long bigint double float char No mapping sbyte No mapping (throws exception) object No mapping <p>Attribute, um DB Features zu steuern:</p> <p></p> <p>Mit einem eigenen <code>DbContext</code> Klasse kann einfluss genommen werden auf den generierten SQL Code. Siehe Slides f\u00fcr Beispiele:</p>"},{"location":"24FS/DNET/08_ADO.NET.html#informationssicherheit","title":"Informationssicherheit","text":"<p>NIE <code>sp_executesql</code> verwenden.</p> <p>Fehlermeldungen sollten nicht an den Nutzer gegeben werden, da hier e.v. Username/Passwort steht oder andere Infos, welche f\u00fcr einen Angriff n\u00fctzlich sind.</p>"},{"location":"24FS/DNET/09_MAUI.html","title":"MAUI","text":"<p>UI Framework, welches unter IOS, Android, MacOS und Windows (nicht Linux).</p> <p></p>"},{"location":"24FS/DNET/09_MAUI.html#controls","title":"Controls","text":""},{"location":"24FS/DNET/09_MAUI.html#shell-app","title":"Shell App","text":""},{"location":"24FS/DNET/09_MAUI.html#pages","title":"Pages","text":"<p>Eine Anwendung besteht aus einner oder mehreren Pages und nimmt immer den gesamten Bildschirm ein.</p> <p>In Shell Apps k\u00f6nnen nur ContentPages vverwendet. Der Rest werden durch Shell Apps abgelst.</p>"},{"location":"24FS/DNET/09_MAUI.html#layouts","title":"Layouts","text":"<p>Werden verwendet um Controlls in visuellen Strukturen zusammenzustellen.</p> <ul> <li><code>AbsoluteLayout</code>   Positionen m\u00fcssen absolut angegeben werden</li> <li><code>BindableLayout</code></li> <li><code>FlexLayout</code>   Wie Flex Boxen</li> <li><code>Grid</code></li> <li><code>HorizontalStackLayout</code>/<code>VerticalStackLayout</code></li> <li><code>StackLayout</code>   Kann horizontal wie vertikal kinder anordnen. Es es wie <code>Horizontal-</code> und <code>VerticalStackLayout</code>. Es ist allerdings weniger perfomant. </li> </ul>"},{"location":"24FS/DNET/09_MAUI.html#views","title":"Views","text":"<p>Views sind die eigentlichen UI Elementen</p> <ul> <li>BlazorWebView   Kann eine Blazor App embedden</li> <li>Border   F\u00fcgt ein Ramen hinzu</li> <li>BoxView</li> <li>Frame</li> <li>GraphicView   Kann zeichnen</li> <li>Image</li> <li>Label   Single und Multi-line text</li> <li>Map   Es wird zus\u00e4tzlich noch ein Paket verlangt, da WinUI dies nicht unterst\u00fctzt.</li> <li>ScrollView</li> <li>Shapes</li> <li>WebView</li> <li>Button</li> <li>ImageButton</li> <li>RadioButton</li> <li>RefreshView   Erm\u00f6glicht pull-to-refresh </li> <li>SearchBar</li> <li>SwipeView</li> <li>CheckBox</li> <li>DatePicker   DAtum ohne Zeit</li> <li>Slider</li> <li>Stepper</li> <li>Switch</li> <li>TimePicker</li> <li>Editor   Edit multiline text</li> <li>Entry   Edit single-line text. Optional auch Passwort-Feld</li> <li>ActivityIndicator</li> <li>ProgressBar</li> <li>CarouselView</li> <li>CollectionView</li> <li>IndicatorView</li> <li>ListView (depricated, ben\u00fctz CollectionView)</li> <li>Picker   Wie Combobox</li> <li>TableView (depricated, ben\u00fctzt CollectionView)</li> <li>ContentView   Kann ben\u00fctzt werden um eigene Controlls zu bauen.</li> </ul> <p>Popups:</p> <ul> <li>DisplayAlert</li> <li>DisplayActionSheet</li> <li>DisplayPrompt</li> </ul> <p>Popups sind platform \u00fcbergreifend gleich. Allerdings ist das Style anderst.</p> <p>Auf Desktops kann noch eine Menu Bar erstellt werden.</p> <p>Styling kann mit XAML oder CSS gemacht werden.</p> <p>Ebenfalls sind Gestures unterst\u00fctzt. Konkret: Drag &amp; Drop, Pan, Pinch, Swipe and Tap</p>"},{"location":"24FS/DNET/09_MAUI.html#app-lifecycle","title":"App Lifecycle","text":"<ul> <li>Deactivated: Wenn ein anderes Fenster den Fokus erh\u00e4ltet (IOS/Android)</li> <li>Stopped: Der Benutzer wechselt zu einer anderen App oder zum Homescreen (IOS/Android)</li> </ul> <p>In der folgenden Tabelle steht, wie auf die nativen Events \u00fcbersetzt werden k\u00f6nnen.</p> <p></p>"},{"location":"24FS/DNET/09_MAUI.html#deployment","title":"Deployment","text":"<p>Auf Windows:</p> <p></p> <p>EXE funktioniert aktuell noch nicht super und ist recht gebastelt. Es soll MSIX verwendet werden</p> <p>Auf Android:</p> <p></p> <p>APK f\u00fcr side loading; AAB wird f\u00fcr Google Play Store verwendet</p> <p>Auf iOS:</p> <p></p> <p>AdHoc kann benutzt werden um die App zu testen. Limitiert auf 100 Personen / Jahr. Es braucht eine Kabel-Verbindung zu einem Mac. </p> <p>Auf macOS:</p> <p></p> <p>Kosten (vor EU's Digital Marketplace Act):</p> <p></p>"},{"location":"24FS/DNET/09_MAUI.html#beispiel-app","title":"Beispiel App","text":"<p><code>App</code> hat eine partielle Klasse, welche davor noch Initialisierungs Code ausf\u00fchrt</p> <p></p> <p>AppShell:</p> <p></p> <p>Im Resource Ordner k\u00f6nnen Resource, wie Fonts, Bilder, etc. gespeichert werden, welche von allen Platform genutzt werden k\u00f6nnen. Zus\u00e4tzlich muss noch die richige Build Action ausgew\u00e4hlt werden. </p> <p></p>"},{"location":"24FS/DNET/Pr%C3%BCfung.html","title":"Pr\u00fcfung","text":"<ul> <li>selten Code schreiben und lesen</li> <li>Zum Teil L\u00fcckentexte</li> <li>Meist multiple-Choice</li> </ul>"},{"location":"24FS/FUP/1_Introduction.html","title":"Introduction","text":""},{"location":"24FS/FUP/1_Introduction.html#what-is-functional-programming","title":"What is functional programming?","text":"<p>The following is not functional programming:</p> <pre><code>sum ( L ) {\n    l = length ( L )\n        i = 0\n        acc = 0\n        while ( i &lt; l ) {\n            acc = acc + L [ i ]\n                i = i + 1\n        }\n    return acc\n}\n</code></pre> <p>Imperative programming is when:</p> <ul> <li>it's based on states, transition and sequences</li> <li>imperative states </li> </ul> <p>Functional programming is:</p> <ul> <li>no states,</li> <li>close to the mathematical notation</li> <li>more declarative</li> <li>no mutable variables (at least in the conventional sense)</li> </ul> <p>Functional programming is a style of programming that emphasises the evaluation of expressions, rather than execution of commands. The expressions in these languages are formed by using functions to combine basic values. -Graham Hutton</p> <p>Functional languages often have the following:</p> <ul> <li>First class functions (\\(\\lambda\\)-terms, currying, partial application)</li> <li>Immutable data (and following from that: referential transparency, type safety)</li> <li>Highly developed type system (algebra data types, pattern matching, type inference)</li> <li>Recursion (and tail-call-optimisation)</li> </ul> <p>An other way to define functional programming, is with a function programming style:</p> <ul> <li>Avoid side effects and mutable states</li> <li>composable functions</li> <li>prefer higher-order function and recursion</li> </ul>"},{"location":"24FS/FUP/1_Introduction.html#referential-transparency","title":"Referential Transparency","text":"<p>Variables in functional programming languages, and by extension Haskell, have a fundamentally different semantic. Rather than meaning, that there is a value in the memory location where a variable is located, a variable in Haskell stays always the same. Because of this, assignments are time-independent.</p> <p>As such, a statement like <code>x = x + 1</code> doesn't make sense, since <code>x</code> cannot be modified.</p> <p>Another consequence of this, is that a function can't have side-effects (* except with <code>IO</code>). One big advantage of this, is that the result of a expression only depends on all arguments that occur in the expression. This aids readability. It also gives the compiler more flexibility when expressions are evaluated. This enables laziness.</p>"},{"location":"24FS/FUP/1_Introduction.html#type","title":"Type","text":"<p>There are multiple ways to define a type, but the following is one attempt:</p> <p>A type system is a tractable syntactic method of proving the absence of certain program behaviours by classifying phrases according to the kinds of values they compute. Benjamin Pierce, Types and Programming Languages</p> <p>A type system is usually specified by specifying a set of primitive types (e.g. <code>Int</code>, <code>Bool</code>), a syntax element that allows the programmer to assemble new types from other types and a type checker that checks if the types are consistent.</p>"},{"location":"24FS/FUP/1_Introduction.html#algebraic-data-types","title":"Algebraic Data Types","text":"<p>Haskell has algebraic data types.</p> <p>Product types can be built from tuples (e.g. <code>(Int, String)</code>) or records:</p> <pre><code>data Customer = Customer \n    { customerId :: Int\n    , name :: String\n    }\n</code></pre> <p>Sum types are built in the following way:</p> <pre><code>data Shape\n    = Rectangle Float Float\n    | Square Float\n    | Circle Float\n</code></pre>"},{"location":"24FS/FUP/1_Introduction.html#type-classes","title":"Type Classes","text":""},{"location":"24FS/FUP/1_Introduction.html#partial-function","title":"Partial Function","text":"<p>A partial function, oppose to a total function, is a function, where the not every input value is not defined. In Java, this is done with <code>null</code>  or exceptions. In Haskell, this is done with <code>data Maybe a = Just a | Nothing</code></p> <p>Another often used type is <code>data Either a b = Left a | Right b</code>. Usually is <code>Left a</code> the error case, and <code>Right b</code> the successful case. </p>"},{"location":"24FS/FUP/2_Recursion.html","title":"Recursion","text":""},{"location":"24FS/FUP/2_Recursion.html#what-is-recursion","title":"What is recursion?","text":"<p>Informally, a recursion is a formula which self-references itself.</p> <p>The following is a basic recursive function: $$ \\begin{align} f(0) &amp;= c \\ f(n+1) &amp;= G(f(n)) \\end{align} $$ This can also be views as an equation system, where the unknown term is \\(f\\) (\\(f\\) can be a function).</p> <p>This is the equivalent haskell code:</p> <pre><code>primRec :: (Integer -&gt; Integer) -&gt; Integer -&gt; Integer -&gt; Integer\nprimRec g c n\n    | n == 0 = c\n    | otherwise = g $ rec_ (n-1)\n    where\n        rec_ = primRec g c\n</code></pre>"},{"location":"24FS/FUP/2_Recursion.html#n1-or-n-1","title":"\\(n+1\\) or \\(n-1\\)","text":"<p>The following implements an exponential function: $$ 2^0 &amp;= 1\\ 2^{n} &amp;= 2 \\cdot 2^{(n - 1)} $$</p> <pre><code>exp2 0 = 1\nexp2 n = 2 * exp2 (n-1)\n\n{- this can also be defined with primRec from above -}\nexp2' = primRec ((*) 2) 1\n</code></pre> <p>However, we can also implment this in a more mathematical way: $$ 2^0 &amp;= 1\\ 2^{(n+1)} &amp;=2\\cdot 2^n $$</p> <pre><code>data Nat \n    = N\n    | S Nat\n    deriving (Show, Eq)\n\nexpN :: Nat -&gt; Nat\nexpN N = S N\nexpN (S n) = mulN (S (S N)) (expN n)\n</code></pre>"},{"location":"24FS/FUP/2_Recursion.html#types-of-recursions","title":"Types of Recursions","text":""},{"location":"24FS/FUP/2_Recursion.html#primitive-recursion","title":"Primitive Recursion","text":"\\[ \\begin{aligned} f(0, \\vec x) &amp;= c(\\vec x)\\\\ f(n+1, \\vec x) &amp;= G(f(n, \\vec x), n, \\vec x) \\end{aligned} \\] <p>This adds \\(\\vec x\\), representing additional parameters to the function. However, \\(\\vec x\\) cannot be modified by \\(G\\). Furthermore, \\(G\\) also has access to the current \\(n\\).</p> <p>This allows us to implement x to the power to y like the following:</p> <p></p> <p>In the case of the factorial function, the \\(n\\) parameter can be useful as well:</p> <p></p> <p>(G should be defined as \\(G(a, n) = n \\cdot a\\))</p> <p>However, this does not allow all recursive function. For example, a the fibonacci function requires access to both the last and the second last value.</p>"},{"location":"24FS/FUP/2_Recursion.html#recursive-value-recursion-wertverlaufsrekursion","title":"Recursive Value Recursion (\u201cWertverlaufsrekursion\u201d)","text":"<p>A recursive value recursion is similar to a primitive recursion, with the key difference that \\(G\\)\u200b can access all past values instead of just the last one.</p> <p>In theory, since finite sequences can be encoded as numbers, every recursive value recursion can be encoded as a primitive recursion.</p> <p></p> <p>The following shows an example in haskell:</p> <pre><code>valueRec :: ([Integer] -&gt; Integer) -&gt; Integer -&gt; Integer\nvalueRec g n = g [ valueRec g (n-i) | i &lt;- [1..n]]\n\nfib = valueRec g\n    where\n        g [] = 1\n        g [_] = 1\n        g (x:y:_) = x + y\n</code></pre>"},{"location":"24FS/FUP/2_Recursion.html#general-recursion-allgemeine-rekursion","title":"General Recursion (\"Allgemeine Rekursion\")","text":"<p>If the schemes from above are not followed</p>"},{"location":"24FS/FUP/2_Recursion.html#tail-recursion-endrekursion","title":"Tail Recursion (Endrekursion)","text":"<p>A function is tail-recursive, if the last expression in every branch is the recursive call. </p>"},{"location":"24FS/FUP/2_Recursion.html#accumulator-pattern","title":"Accumulator Pattern","text":"<pre><code>-- This is **not** tail recursive, because the last expression is (+)\nsum_ :: [Integer] -&gt; Integer\nsum [] = 0\nsum_ (x:xs) = x + (sum_ xs)\n\n-- This is recursive\nsumTR_ :: Integer -&gt; [Integer] -&gt; Integer\nsumTR_ acc [] = acc\nsumTR_ acc (x : xs) = sumTR_ (x + acc) xs\nsumTR = sumTR_ 0\n\n-- the following defines a factorial function, using the \"accumulator pattern\"\nfakTR :: Integer -&gt; Integer\nfakTR = fakTR_ 1\n    where\n        fakTR_ :: Integer -&gt; Integer -&gt; Integer\n        fakTR_ acc 0 = acc\n        fakTR_ acc n = fakTR_ (n * acc) (n - 1)\n\n-- the following is an power function\npow_ :: Integer -&gt; Integer -&gt; Integer\npow_ = powTR 1\n    where \n        powTR :: Integer -&gt; Integer -&gt; Integer -&gt; Integer\n        powTR acc _ 0 = acc\n        powTR acc b e = powTR (b * acc) b (e - 1)\n\n-- this is a second iteration that is slightly cleand up \n-- (b has been pulled out of powTR)\npow_ :: Integer -&gt; Integer -&gt; Integer\npow_ b = powTR 1\n    where \n        powTR :: Integer -&gt; Integer -&gt; Integer\n        powTR acc _ 0 = acc\n        powTR acc e = powTR (b * acc) (e - 1)\n</code></pre> <p>The following is an example, where a <code>Bool</code> is used as an accumulator:</p> <pre><code>isPalindrome :: String -&gt; Bool\nisPalindrome w\n    | l &lt; 2 = True\n    -- this is technically also a tail recursion, since &amp;&amp; short-circuits\n    | otherwise = w0 == wE &amp;&amp; isPalindrome w' \n    where\n        l = length w\n        w0 = head w\n        wE = last w\n        w' = tail $ init w -- w without the head or tail\n\nisPalindrome' :: String -&gt; Bool\nisPalindrome' = isPalindromeTR True\n\nisPalindromeTR :: Bool -&gt; String -&gt; Bool\nisPalindromeTR acc w\n    | l &lt; 2 = acc\n    | otherwise = isPalindromTR (acc &amp;&amp; w0 == wE) w'\n    where\n        l = length w\n        w0 = head w\n        wE = last w\n        w' = tail $ init w -- w without the head or tail\n</code></pre> <p>The fibonacci sequence needs two accumulator, since the last and second to last element has to be accessed.</p> <pre><code>fibs n \n    | n &lt; 2 = 1\n    | otherwise = fibs (n - 1) + fibs (n - 2)\n\n-- tail recursive\n-- fibs 1 1 n is the base case for acc1 and acc2\nfibsAcc acc1 acc2 n\n    | n &lt; 2 = acc1\n    | otherwise = fibAcc (acc1 + acc2) acc1 (n - 1)\n</code></pre>"},{"location":"24FS/FUP/2_Recursion.html#continuation-pattern","title":"Continuation Pattern","text":"<p>At times it can be easier to represent the work that still needs to be done as a parameter. This is the difference between the continuation pattern and  the accumulator pattern (where the computed value is represented as a parameter).</p> <pre><code>fakC :: Integer -&gt; Integer\nfakC = fakC_ ( const 1)\n    where\n        fakC_ f n\n        | n &lt; 1 = f n\n        | otherwise = fakC_ (\\ x -&gt; n * ( f x ) ) $ n - 1\n</code></pre> <p>The following examples show why it can advantageous to use the continuation pattern instead of the accumulator pattern. </p> <pre><code>myMap :: (a -&gt; b) -&gt; [a] -&gt; [b]\nmyMap f [] = []\nmyMap f (x : xs) = (f x) : (myMap f xs)\n\n-- with the accumulator pattern\nmyMap' (a -&gt; b) -&gt; [a] -&gt; [b]\nmyMap' f = myMapAcc []\n    myMapAcc :: [b] -&gt; [a] -&gt; [b]\n    myMapAcc acc [] = reverse acc -- the reverse is necessary since we add \n    myMapAcc acc (a:ax) = myMapAcc (f a : acc) ax\n\n-- with the continuation pattern\nmyMap' (a -&gt; b) -&gt; [a] -&gt; [b]\nmyMap' f = myMapCont id\n    myMapCont :: ([a] -&gt; [b]) -&gt; [a] -&gt; [b]\n    myMapCont cont [] = cont [] \n    myMapCont cont (a:ax) = myMapCont (\\list -&gt; cont (f x : list)) ax\n    -- We have more flexibility in the lambda expression, since cont is not a recursive\n    -- call\n</code></pre>"},{"location":"24FS/FUP/2_Recursion.html#fix-points","title":"Fix Points","text":"<p>A fix point of a function \\(F: X \\to Y\\) is where \\(F(x) = x\\). </p> <p>As an example, the function \\(id\\) has a fix point for every argument. More graphically, the fix point of is where the graph of \\(F\\)\u200b crosses the diagonal.</p> <pre><code>expF f x\n    | x == 0 = 1\n    | otherwise = 2 * f (x - 1) -- careful, expF is not recursive\n</code></pre> <p>A fix point function would be <code>expF h = h</code> . Importantly, \\(h\\) is a function and <code>expF h</code> is a partially applied function.</p> <p>The following is fix point for a function <code>f</code>. It is essentially a recursion with out a base case. If applied to <code>expF</code>, then the base case of <code>expF</code> can be used by <code>fix</code>.</p> <pre><code>fix :: (t -&gt; t) -&gt; t\nfix f = f (fix f)\n\n-- alternatively, the type can also be expressed as following, where t = t1 -&gt; t2\nfix' :: ((t1 -&gt; t2) -&gt; t1 -&gt; t2) -&gt; t1 -&gt; t2\nfix' f x = f (fix f) x\n</code></pre> <p>For example:</p> <pre><code>fix expF n -- this is equivalent to 2^n\nfix expF 3 -- returns 8\n</code></pre> <pre><code>fibs n \n    | n &lt; 2 = 1\n    | otherwise = fibs (n-1) + fibs (n-2)\n\n-- in the following example, every recursive call is replaced by `f`\n-- This then yields the \"Funktional\" of fibs\nfibF f n\n    | n &lt; 2 = 1\n    | otherwise = f (n-1) + f (n-2)\n\n-- to use fibF, it has to be applied to fix. This reintroduces the recursion\nfix fibF = fibs\n</code></pre> <p>Even if Haskell didn't support recursion and would only support the <code>fix</code> function as part of the standard library, we still could write recursive functions using the trick above and the <code>fix</code> function.</p> <p>The following shows why this works every time:</p> <p></p>"},{"location":"24FS/FUP/2_Recursion.html#memorisation","title":"Memorisation","text":"<p>Memorisation can be implemented using fix points and a functional. An issue which arises with recursive function, is that the recursive call won't be memorisation. However, a functional isn't recursive by itself. Rather it uses a function passed as a parameter. This allows writing a memonisation function which inject itself into the recursive call.</p>"},{"location":"24FS/FUP/2_Recursion.html#general-fold","title":"General Fold","text":"<p>To generalise a fold function for a custom type <code>T</code>, the following steps can be followed:</p> <ol> <li>Analyse the type signature of the constructors of <code>T</code></li> <li>Create function signatures for each constructor of <code>T</code>  with the same parameters as the constructor. Instances of <code>T</code> in the constructor should be rewritten to a type parameter. </li> <li>Write a fold function, which takes a function for each constructor with the respective signature and an instance of <code>T</code></li> </ol> <p>The  following examples shows how a general fold function can be generated for the <code>BTree</code> type.</p> <pre><code>data BTree a\n    = Node a (BTree a) (BTree a)\n    | Empty\n</code></pre> <p>To create a fold, analyse each constructor</p> <pre><code>Node a (BTree a) (BTree a) \n-- becomes\na -&gt; b -&gt; b -&gt; b\n\nEmpty\n-- becomes\nb\n</code></pre> <p>Then the fold function is</p> <pre><code>fold :: (a -&gt; b -&gt; b -&gt; b) -&gt; b -&gt; BTree a -&gt; b\n</code></pre>"},{"location":"24FS/FUP/3_Data%20Classes.html","title":"Data Classes","text":""},{"location":"24FS/FUP/3_Data%20Classes.html#semi-group","title":"Semi-Group","text":"<pre><code>class Semigroup a where\n    (&lt;&gt;) :: a -&gt; a -&gt; a\n</code></pre> <p>A semigroup is a data type which has a associative binary operation (like <code>+</code>). The operation of a semigroup should be associative (<code>(a &lt;&gt; b) &lt;&gt; c == a &lt;&gt; (b &lt;&gt; c)</code>).</p> <p>Every <code>Monoid</code> is a semigroup.</p>"},{"location":"24FS/FUP/3_Data%20Classes.html#monoid","title":"Monoid","text":"<p>Haskall defines a monoid in the following way:</p> <pre><code>class Semigroup a =&gt; Monoid a where\n   mempty :: a\n   mappend :: a -&gt; a -&gt; a\n   mconcat :: [a] -&gt; a\n</code></pre> <p><code>&lt;&gt; :: a -&gt; a -&gt; a</code> is an alias for <code>mappend</code></p> <p>A monoid is a thing which has two rules:</p> <ol> <li> <p>It has an identity value    In algebra for <code>+</code> the identity value is <code>0</code>, for multiplication it is <code>1</code>    $$    0 + a = a\\    1 \\cdot a = a    $$</p> </li> <li> <p>It is associative    $$    (a+b)+c=a+(b+c)\\    (a\\cdot b)\\cdot c=a\\cdot (b\\cdot c)    $$</p> </li> </ol> <p>Here are some examples for monoids:</p> <ul> <li>List/String: <code>[a]</code></li> </ul> <pre><code>[] ++ [1, 2, 3] == [1, 2, 3]\n([1, 2] ++ [3, 4]) ++ [5, 6] = [1, 2] ++ ([3, 4] ++ [5, 6])\n</code></pre> <ul> <li>Maybe: <code>Semigroup a =&gt; Maybe a</code></li> </ul> <pre><code>Just (Sum 3) `mappend` Nothing == Just (Sum 3)\nmempty :: Maybe (Sum Int) == Nothing\n</code></pre> <ul> <li>Numbers: <code>Num a =&gt; Sum a</code> / <code>Num a =&gt; Product a</code></li> </ul> <pre><code>Sum 3 `mappend` Sum 4 == 7\nmempty :: Sum Int = 0\nProduct 3 `mappend` Sum 2 == 6\nmempty :: Product Int = 0\n</code></pre> <ul> <li> <p>IO</p> </li> <li> <p>All/Any: </p> </li> </ul> <pre><code>-- implements &amp;&amp;\nmempty :: All == Any True\nAll True &lt;&gt; All False == All False\nAll True &lt;&gt; All True == All True\n-- implement ||\nmempty :: Any == Any False\nAny True &lt;&gt; Any False == Any True\nAny False &lt;&gt; Any False == Any False\n</code></pre>"},{"location":"24FS/FUP/3_Data%20Classes.html#dual-monoid","title":"Dual Monoid","text":"<p>The <code>Dual a</code> monoid will flip the order of the <code>mappend</code> (aka <code>&lt;&gt;</code>) operator. For this to work, <code>a</code> has to be a <code>Monoid</code> as well.</p> <pre><code>Dual \"hello\" &lt;&gt; Dual \" \" &lt;&gt; Dual \"world\" -- will return Dual \"world hello\"\ngetDual (Dual \"hello\" &lt;&gt; Dual \" \" &lt;&gt; Dual \"world\") -- will return \"world hello\"\nDual [4..6] &lt;&gt; Dual [1..3] -- will return Dual [1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"24FS/FUP/3_Data%20Classes.html#functor","title":"Functor","text":"<p>A <code>Functor</code> is a data type which can be mapped over.</p> <pre><code>class Functor f where\n    fmap :: (a -&gt; b) -&gt; f a -&gt; f b\n    (&lt;$) :: a -&gt; f b -&gt; f a\n</code></pre> <p><code>fmap</code> and <code>(&lt;$)</code> are the same function but with different argument ordering. They will map from <code>f a</code> to <code>f b</code>. <code>&lt;$&gt;</code> is a synonym of <code>fmap</code> but as a infix operator.</p> <p>A limitation of <code>Functor</code>s is when we want to use functions with multiple arguments, and multiple arguments are <code>Functors</code>. This limitation can be solved using <code>Applicative</code>s.</p> <pre><code>data Nat = Z | S Nat\npred :: Nat -&gt; Maybe Nat\npred = ...\n\n-- TODO finish example\n</code></pre>"},{"location":"24FS/FUP/3_Data%20Classes.html#laws","title":"Laws","text":"<p>A <code>Functor</code> should follow the following laws:</p> <ul> <li><code>fmap id = id</code> (identity)   Using the <code>id</code> function with <code>fmap</code> should return the unmodifies object</li> <li><code>fmap (f . g) == fmap f . fmap g</code> (composition)   It shouldn't matter if the mapping functions are composed together first and then mapped or the <code>fmap</code> are composed</li> </ul>"},{"location":"24FS/FUP/3_Data%20Classes.html#applicative","title":"Applicative","text":"<pre><code>class Applicative f where\n    {-# MINIMAL pure, ((&lt;*&gt;) | lift2A) #-}\n    pure :: a -&gt; f a\n    (&lt;*&gt;) :: f (a -&gt; b) -&gt; f a -&gt; f b\n    lift2A :: (a -&gt; b -&gt; c) -&gt; f a -&gt; f b -&gt; f c\n</code></pre> <p><code>Applicative</code>s are like <code>Functor</code> in that they apply a mapping function to a box value. With a <code>Applicative</code> the function is also a boxed value. This is useful to map functions with more than one argument to a boxed value. If <code>&lt;$&gt;</code> (aka <code>fmap</code>) is used to apply a value to a function with two parameters, you get the following: <code>(+) &lt;$&gt; Just 5 == Just (+5)</code>. This can be combined with <code>&lt;*&gt;</code> in the following way:</p> <pre><code>(+) &lt;$&gt; Just 5 &lt;*&gt; Just 3 -- will return Just 8\nlift2A (+) (Just 5) (Just 3) -- will return Just 8\n</code></pre> <p>An <code>Applicative</code> also defines the function <code>pure</code> which boxes a value. </p> <p>There are also some helper functions:</p> <ul> <li><code>(*&gt;) :: f a -&gt; f b -&gt; f b</code>   Discard the first argument (but still \"runs\" it) and only return the value of the second applicative</li> </ul> <pre><code>Just 3 *&gt; Just 5 -- will return Just 5\nNothing *&gt; Just 5 -- will return Nothing\nJust 3 *&gt; Nothing -- will return Nothing\n</code></pre> <ul> <li><code>&lt;* :: fa -&gt; fb -&gt; fa</code>   Discards the second argument (but still \"runs\" it) and only return the value of the first applicative</li> </ul> <pre><code>Just 3 &lt;* Just 5 -- will return Just 3\nNothing &lt;* Just 5 -- will return Nothing\nJust 3 &lt;* Nothing -- will return Nothing\n</code></pre> <ul> <li><code>liftA3 :: Applicative f =&gt; (a -&gt; b -&gt; c -&gt; d) -&gt; f a -&gt; f b -&gt; f c -&gt; f d</code>    Works the same as <code>liftA2</code> but accepts a function with three paramters.</li> </ul>"},{"location":"24FS/FUP/3_Data%20Classes.html#example","title":"Example","text":"<pre><code>data User = User { name :: String, email :: String, city :: String}\n\ntype Serialized = [(String, String)]\n\nlookup :: Eq a =&gt; a -&gt; [(a, b)] -&gt; Maybe b\n-- implementation...\n\nbuildUser1 :: Serialized -&gt; Maybe User\nbuildUser1 s = case lookup \"name\" s of\n    Nothing -&gt; Nothing\n    Just n -&gt; case lookup \"email\" s of\n        Nothing -&gt; Nothing\n        Just e -&gt; case lookup \"city\" s of\n            Nothing -&gt; Nothing\n            Just c -&gt; Just $ User n e c\n\nbuildUser2 :: Serialized -&gt; Maybe User\nbuildUser2 s = User &lt;$&gt; (lookup \"name\" s) &lt;*&gt; (lookup \"email\" s) &lt;*&gt; (lookup \"city \" s)\n</code></pre>"},{"location":"24FS/FUP/3_Data%20Classes.html#laws_1","title":"Laws","text":"<p>An <code>Applicative</code> should follow the following laws:</p> <ul> <li><code>pure id &lt;*&gt; vv = vv</code> (identity)</li> <li><code>pure (.) &lt;*&gt; f &lt;*&gt; g &lt;*&gt; x = f &lt;*&gt; (g &lt;*&gt; x)</code> (composition)</li> <li><code>pure f &lt;*&gt; pure v = pure (f v)</code> (homomorphism)</li> </ul>"},{"location":"24FS/FUP/3_Data%20Classes.html#monad","title":"Monad","text":"<pre><code>class Applicative m =&gt; Monad m where\n    {-# MINIMAL &gt;&gt;= #-}\n    (&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b\n    (&gt;&gt;) :: m a -&gt; m b -&gt; m b \n    return :: a -&gt; m a\n</code></pre> <p>A <code>Monad</code> is similar to an <code>Applicative</code> in that it also allows a boxed value to be mapped. The difference is, that the mapping function of a <code>Monad</code> returns a boxed value as a <code>Monad</code> itself. This can be used to return for example a <code>Nothing</code> instance, if the operation failed, leading to short-circuiting.</p> <p>The <code>&gt;&gt;=</code> operator gets used to chain Monads together. The mapping function gets the boxed value of the input <code>Monad</code> as a parameter. But this isn't always wanted (like with <code>putStrLn</code> which returns <code>IO ()</code>). In those cases <code>&gt;&gt;</code> can be used. <code>return</code> is often a synonym to <code>pure</code> of <code>Applicative</code></p> <pre><code>half :: Int -&gt; Maybe Int\nhalf x = if even x \n            then Just (x `div` 2)\n            else Nothing\n\nJust 3 &gt;&gt;= half -- will return Nothing\nJust 4 &gt;&gt;= half -- will return Just 2\nJust 4 &gt;&gt;= half &gt;&gt;= half -- will return Just 1\nJust 4 &gt;&gt;= half &gt;&gt;= half &gt;&gt;= half -- will return Nothing\n\nputStrLn \"hello\" &gt;&gt;= (\\_ -&gt; putStrLn \"world\")\nputStrLn \"hello\" &gt;&gt; putStrLn \"world\"\n-- both print:\n-- hello\n-- world\n</code></pre>"},{"location":"24FS/FUP/3_Data%20Classes.html#monad-transformer","title":"Monad Transformer","text":"<pre><code>class (forall m. Monad m =&gt; Monad (t m)) =&gt; MonadTrans t where\n    lift :: Monad m =&gt; m a -&gt; t m a\n</code></pre> <p>A monad transformer enhances a \"base monad\" <code>m</code> with some functionality. For example the <code>ExceptT</code> type enhances a monad with the <code>Either</code> monad allowing it to short-circuit in case of an error.</p> <p>The <code>lift</code> method can be used to access the base monad.</p> <pre><code>addIfPositive :: Int -&gt; ExceptT String (State Int) Int\naddIfPositive i = do\n  n &lt;- lift get\n  if n &gt;= 0\n    then lift (put $ n + 1) &gt;&gt; lift get\n    else throwE $ (show n) ++ \" is negative\"\n</code></pre> <p>In the example above <code>addIfPositive</code> will only add the given <code>Int</code> to the internal state if the internal state is positive else an error message is produced and the operation stops (aka. short-circuits). <code>lift get</code> is used to access the state in the do-Block.</p> <p>Monads are usually defined with their monad transformer. The <code>Except</code> monad for example is defined as <code>type Except e a = ExceptT e (Identity a)</code></p>"},{"location":"24FS/FUP/3_Data%20Classes.html#foldable","title":"Foldable","text":"<pre><code>class Foldable t where\n    {-# MINIMAL foldMap | foldr #-}\n\n    foldMap :: Monoid m =&gt; (a -&gt; m) -&gt; t a -&gt; m\n    foldMap f = foldr (mappend . f) mempty\n\n    foldr :: (a -&gt; b -&gt; b) -&gt; b -&gt; t a -&gt; b\n    foldr f z t = appEndo (foldMap (Endo #. f) t) z\n\n    -- and a number of optional methods\n</code></pre> <p>A <code>Foldable</code> is a container type which allows to access its elements in a well-defined order. To instance a <code>Foldable</code> either <code>foldMap</code> or <code>foldr</code> has to be defined, but there are more optional methods.</p> <p>Here are some of the useful methods, which can be used with a <code>Foldable</code> structure:</p> <ul> <li><code>foldMap :: (Foldable t, Monoid m) =&gt; (a -&gt; m) -&gt; t a -&gt; m</code>   With <code>foldMap</code> a <code>Foldable</code> structure can be folded. For this, the type contained in the <code>Foldable</code> needs to be an instance of <code>Monoid</code></li> </ul> <pre><code>foldMap Product [1..4] -- will return 24\nfoldMap Sum [1..4] -- will return 10\n</code></pre> <ul> <li> <p><code>length :: Foldable t =&gt; t a -&gt; Int</code>   Returns the length of a foldable structure</p> </li> <li> <p><code>toList :: Foldable t =&gt; t a -&gt; [a]</code>   Will flatten the <code>Foldable</code> to a list</p> </li> <li> <p><code>traverse_ :: (Foldable t, Applicative f) =&gt; (a -&gt; f b) -&gt; t a -&gt; f ()</code> / <code>for_ :: (Foldable t, Applicative f) =&gt; t a -&gt; (a -&gt; f b) -&gt; f ()</code>   Allows to execute an <code>Applicative</code> for every element. This could be a side-effect. Both <code>traverse_</code> and <code>for_</code> do the same thing, but have their arguments flipped</p> </li> </ul> <pre><code>traverse_ (putStrLn . show) [1..3]\nfor_ [1..3] (putStrLn . show)\n-- both will print:\n-- 1\n-- 2\n-- 3\n</code></pre> <ul> <li><code>sequenceA_ :: (Foldable t, Applicative f) =&gt; t (f a) -&gt; f ()</code> <code>sequenceA_</code> will execute each <code>Applicative</code> in the <code>Foldable</code> and throw the result away</li> </ul> <pre><code>sequenceA_ [putStrLn \"hello\", putStrLn \"world\"]\n-- will print:\n-- hello\n-- world\n</code></pre> <ul> <li><code>null :: Foldable t =&gt; t a -&gt; Bool</code> <code>null</code> checks if the given <code>Foldable</code> is empty</li> </ul> <pre><code>null [] -- will return True\nnull [1..4] -- will return False\n</code></pre>"},{"location":"24FS/FUP/3_Data%20Classes.html#traversable","title":"Traversable","text":"<pre><code>class (Functor t, Foldable t) =&gt; Traversable t where\n    {-# MINIMAL traverse | sequenceA #-}\n\n    traverse :: Applicative f =&gt; (a -&gt; f b) -&gt; t a -&gt; f (t b)\n    traverse f = sequenceA . fmap f\n\n    sequenceA :: Applicative f =&gt; t (f a) -&gt; f (t a)\n    sequenceA = traverse id\n\n    mapM :: Monad m =&gt; (a -&gt; m b) -&gt; t a -&gt; m (t b)\n    mapM = traverse\n\n    sequence :: Monad m =&gt; t (m a) -&gt; m (t a)\n    sequence = sequenceA\n</code></pre> <p>An instance of a <code>Traversable</code> allows a data structure to work easily with <code>Applicative</code>s and <code>Monad</code>s</p> <p>The <code>sequenceA</code> function takes a <code>Foldable</code>, which has <code>Applicative</code>s nested (like <code>[Just 1, Just 2, Nothing]</code>). <code>traverse</code> on the other hand takes a <code>Foldable</code> of elements and a mapping function, which will map the elements to <code>Applicative</code> resulting in a <code>Foldable</code> which has <code>Applicative</code> nested. </p> <p>Example: <code>[1, 2, 3]</code> with the mapping function <code>Just</code> will result in <code>[Just 1, Just 2, Just 3]</code> which would be an valid input for <code>sequenceA</code>.</p> <p>Here are some useful methods, which can be used with a <code>Traversable</code> structure:</p> <ul> <li><code>traverse :: (Traversable t, Applicative f) =&gt; (a -&gt; f b) -&gt; t a -&gt; f (t b)</code> <code>traverse</code> will apply the given function to every element of the <code>Traversale</code> structure and execute the returned <code>Applicative</code>. The results are returned wrapped in the <code>Applicative</code></li> </ul> <pre><code>traverse print [1, 2] -- has the type :: IO [()]\n-- will print:\n-- 1\n-- 2\n-- and will return IO [(), ()]\ntraverse Sum [1, 2] -- will return Sum [1, 2]\n</code></pre> <ul> <li><code>sequenceA :: (Traversable t, Applicative f) =&gt; t (f a) -&gt; f (t a)</code> <code>sequenceA</code> executes all <code>Applicative</code>s in a <code>Traversable</code> structure and wraps them in the <code>Applicative</code></li> </ul> <pre><code>sequenceA [print \"hello\", print \"world\"] -- has the type :: IO [()]\n-- will print:\n-- hello\n-- world\n-- and will return IO [(), ()]\nsequenceA [Sum 1, Sum 5] -- will return Sum [1, 5]\nsequenceA [(+3),(*2),(+6)] :: Num a =&gt; a -&gt; [a]\nsequenceA [(+3),(*2),(+6)] 2 -- will return [5, 4, 8] \n</code></pre> <ul> <li> <p><code>mapM :: Monad m =&gt; (a -&gt; m b) -&gt; t a -&gt; m (t b)</code>   An alias for <code>traverse</code> which exists because <code>Applicative</code> wasn't always a super class of <code>Monad</code></p> </li> <li> <p><code>sequence :: Monad m =&gt; t (m a) -&gt; m (t a)</code></p> </li> </ul> <p>An alias for <code>sequenceA</code> which exists because <code>Applicative</code> wasn't always a super class of <code>Monad</code></p>"},{"location":"24FS/FUP/4_DSL.html","title":"DSL","text":"<p>DSL = Domain Specific Language</p> <p>EDSL = Embedded Domain Specific Language</p> <p>While a DSL has its own compiler/interpreter, an EDSL is embedded within another language. Thus the EDSL uses the a subset of the syntax of the host language.</p>"},{"location":"24FS/FUP/4_DSL.html#shallow-embedding","title":"Shallow Embedding","text":"<p>Shallow embedding is when the EDSL reuses the semantics of the host language.</p> <pre><code>type Exp = Int\n\nplus  :: Exp -&gt; Exp -&gt; Exp\ntimes :: Exp -&gt; Exp -&gt; Exp\nconst :: Int        -&gt; Exp\n</code></pre> <p>The example above defines an EDSL for doing math in Haskell and reuses Haskells semantics of Integer for this.</p>"},{"location":"24FS/FUP/4_DSL.html#deep-embedding","title":"Deep Embedding","text":"<p>Deep embedding is when defining a data type and forming an AST through the data type. The syntax and semantics are separated.</p> <pre><code>data Exp\n    = Const Int\n    | Add Exp Exp\n    | Mul Exp Exp\n    | Div Exp Exp\n\nsEval :: Exp -&gt; Int\nEval e = case e of\n    Const x -&gt; x\n    Add e1 e2 -&gt; sEval e1 + sEval e2\n    Mul e1 e2 -&gt; sEval e1 * sEval e2\n    Div e1 e2 -&gt; sEval e1 `div ` sEval e2\n</code></pre>"},{"location":"24FS/FUP/5_Lambda%20Calculus.html","title":"Lambda Calculus","text":"<p>Lambda calculus is an alternative way to model turning machines.</p> <p>Definitions:</p> <ul> <li>Variables: Denoted by ordinary lower case letters: \\(x, y, f, g, ...\\)</li> <li>Abstractons: Denoted as \\(\\lambda \\langle var\\rangle.\\langle body \\rangle\\) (e.g. \\((\\lambda x.x)\\) is the identity function)</li> <li>Applications: \\(AB\\), where \\(A\\) and \\(B\\) is a term (similar to Haskell's <code>f a</code>, where <code>f</code> is a function)</li> <li>Terms: a term is constructed using the items above</li> </ul> <p>A variable is bound, if it is enclosed by a lambda and the lambda binds the term. On the other side, a free variable isn't defined by a lambda.</p> <p>More formal, it can be defined by introducing a function \\(free(A)\\), which returns a set of the free variables of the term \\(A\\):</p> <ul> <li>\\(free(A)=\\{\\}\\), if \\(A\\) is a constant</li> <li>\\(free(A)=\\{A\\}\\), if \\(A\\) is a variable</li> <li>\\(free(B C) = free(A) \\cup free(B)\\), given \\(A\\) and \\(B\\) is a term</li> <li>\\(free(\\lambda x.B)=free(B) \\setminus \\{x\\}\\)</li> </ul> <p>A \\(\\lambda\\)\u200b\u200b term with no free variables are called combinator</p> <p>The following are examples how associty works:</p> <ul> <li><code>A B C = ((A B) C)</code></li> <li><code>\\x.A B C = \\x.((A B) C)</code> </li> <li><code>\\x y.A B \\u.A = \\x y.((A B)(\\u.A)</code></li> </ul> <p>An interesting note, is that part of the reason why conditionals work, is because lambda calculus uses call-by-name semantics. In languages, like Python or Scheme, this won't work, since these languages will evaluate all parameters before calling the function.</p>"},{"location":"24FS/FUP/5_Lambda%20Calculus.html#reductions","title":"Reductions","text":"<p>There are three ways to manipulate a term:</p> <ul> <li>\\(\\alpha\\)\u200b-conversion</li> <li>\\(\\beta\\)-reduction</li> <li>\\(\\eta\\)-reduction (eta-reduction) / \\(\\delta\\)-reduction</li> </ul> <p>Lambda calculus uses normal-order \"calls\" functions, meaning that parameters are not evaluated before applying them to a function. Compare this with the applicative-order, where the parameters are evaluated before calling the function. This is the order \"normal\" programming languages use.</p> <p>Reductions are done until no more reductions \\(\\beta\\)-reductions are possible. This form is called \\(\\beta\\)-normal form.</p> <p>One important note: Reducing doesn't necessarily mean that term becomes smaller.</p> <p>The following is an example of how to calculate with reductions:</p> <p></p>"},{"location":"24FS/FUP/5_Lambda%20Calculus.html#alpha-conversion","title":"\\(\\alpha\\)\u200b-conversion","text":"<p>The \\(\\alpha\\)-conversion says that terms can be renamed: $$ \\lambda x.A \\Rightarrow_\\alpha \\lambda y.A[x:=y] $$</p>"},{"location":"24FS/FUP/5_Lambda%20Calculus.html#beta-reduction","title":"\\(\\beta\\)-reduction","text":"\\[ (\\lambda x.A B) \\Rightarrow_\\beta A[x:= B] \\] <p>However, this is only allowed, if during this process no free variable is bound. For example, the following wouldn't be valid: $$ \\begin{align}</p> <p>\\end{align} $$ The following is an example: $$ \\begin{align} \\DeclareMathOperator{\\add}{add} &amp; (((\\lambda fgx.(f (g x)) (\\add 3)) (\\add 2)) 0) \\ = &amp; (((\\lambda gx.(f (g x)) [f := (\\add 3)] (\\add 2)) 0) = (((\\lambda gx.((\\add 3) (g x))) (\\add 2)) 0) \\  = &amp; ((\\lambda x.((\\add 3) (g x)) [g := (\\add 2)]) 0) = ((\\lambda x.((\\add 3) ((\\add 2) x))) 0) \\  = &amp; ((\\add 3) ((\\add 2) x) 0 [x := 0]) = ((\\add 3) ((\\add 2) 0) \\  \\end{align} $$</p>"},{"location":"24FS/FUP/5_Lambda%20Calculus.html#eta-reductiondelta-reduction","title":"\\(\\eta\\)-reduction/\\(\\delta\\)-reduction","text":"\\[ (\\lambda x.A x) \\Rightarrow_\\eta A \\text{, given that } \\{x\\} \\notin free(A) \\]"},{"location":"24FS/FUP/5_Lambda%20Calculus.html#reducuction-strategies","title":"Reducuction-Strategies","text":"<ul> <li>Normal Order Reduction (\"von aussen nach innen\")   The term is evaluated from left to right. This is basically lazy-evaluation.</li> <li>Applicative Order Reduction (\"von innen nach aussen\")   The most inner term is evaluated first. This is equivalent to strict evaluation.</li> </ul> \\[ (\\lambda x.y)(\\lambda x.(x x) \\lambda x.(x x)) \\] <p>The term above can be solved, if reduced with the normal reduction . If reduced with the applicative order reduction, then this fails.</p> <p>However, independent of which reduction strategies was chosen, if there is a result, it will be equivalent. The only difference between the reduction strategies is that it might not complete.</p>"},{"location":"24FS/FUP/5_Lambda%20Calculus.html#examples","title":"Examples","text":""},{"location":"24FS/FUP/5_Lambda%20Calculus.html#while-true","title":"While-True","text":"\\[ \\lambda x.(x x) \\lambda x.(x x) \\] <p>The term above is a fix-point and when reduced will yield the same term again.</p>"},{"location":"24FS/FUP/5_Lambda%20Calculus.html#y-combinator","title":"Y-Combinator","text":"\\[ Y :\\equiv \\lambda f.(\\lambda x.(f (x x)) \\lambda x.(f (x x))) \\] <p>The term above is the Y-combinator, which enables recursions in the \\(\\lambda\\)-calculus.</p> <p></p> <p>Note: the Y-combinator only works with the normal order reduction (lazy-evaluation).</p>"},{"location":"24FS/FUP/6_FUP%20In%20Modern%20Languages.html","title":"FUP in Modern Languages","text":""},{"location":"24FS/FUP/SEP.html","title":"SEP","text":"<ul> <li>multiple choice</li> <li>Coding (approx 3 coding files)</li> <li>make function end-recursive</li> <li>data structures (e.g. <code>NonEmptyList</code>)</li> <li>functors/applicative/monads</li> <li>lambda calculus</li> <li>90 minutes</li> <li>codepilot/ChatCPT are not allowed</li> <li>unless specifically asked, efficiency or end recursion is not required</li> </ul>"},{"location":"24FS/HANA/01_Einf%C3%BChrung.html","title":"Einf\u00fchrung","text":""},{"location":"24FS/HANA/01_Einf%C3%BChrung.html#partielle-ableitung","title":"Partielle Ableitung","text":"<p>Um die Funktion \\(z=f(x, y) = 2x^2 + 5 y\\) abzuleiten, kann nach \\(x\\) und \\(y\\) separat abgeleitet werden: $$ \\begin{align} \\text{nach }x: \\frac{\\partial f}{\\partial x} &amp;= 4x + 0 \\ \\text{nach }y: \\frac{\\partial f}{\\partial y} &amp;= 0 + 5 \\ \\end{align} $$ Diese Ableitung kann folgendermassen visualisiert werden:</p> <p></p>"},{"location":"24FS/HANA/01_Einf%C3%BChrung.html#jacobi-matrix","title":"Jacobi-Matrix","text":"<p>F\u00fcr die Funktion \\(f: \\mathbb R^n \\to \\mathbb R^m\\) mit \\(\\vec y = f(\\vec x)=\\begin{pmatrix}y_1=f_1(\\vec x) \\\\ y_2 = f_2(\\vec x)\\\\ ... \\\\ y_m=f_m(\\vec x)\\end{pmatrix}\\) und \\(\\vec x = (x_1, x_2, ..., x_n)^T\\) ist die Jacobi-Matrix das folgende: $$ Df(x)=\\begin{pmatrix} \\frac{\\partial f_1}{\\partial x_1}(\\vec x) &amp; \\frac{\\partial f_1}{\\partial x_2}(\\vec x) &amp; ... &amp; \\frac{\\partial f_1}{\\partial x_n}(\\vec x) \\</p> <p>\\frac{\\partial f_2}{\\partial x_1}(\\vec x) &amp; \\frac{\\partial f_2}{\\partial x_2}(\\vec x) &amp; ... &amp; \\frac{\\partial f_2}{\\partial x_n}(\\vec x) \\</p> <p>... &amp; ... &amp; ... &amp; ... \\ \\frac{\\partial f_m}{\\partial x_1}(\\vec x) &amp; \\frac{\\partial f_m}{\\partial x_2}(\\vec x) &amp; ... &amp; \\frac{\\partial f_m}{\\partial x_n}(\\vec x) \\ \\end{pmatrix} $$ In dieser Matrix ist in einer Reihe alle m\u00f6glichen partiellen Ableitungen f\u00fcr \\(f_1(\\vec x)\\)</p>"},{"location":"24FS/HANA/01_Einf%C3%BChrung.html#nobla-operator","title":"Nobla-Operator","text":"\\[ \\grad = \\begin{pmatrix} \\frac{\\part}{\\part x_1}\\\\ \\vdots\\\\ \\frac\\part{\\part x_n} \\end{pmatrix} = \\mathrm{grad} f(\\vec{x}) \\]"},{"location":"24FS/HANA/01_Einf%C3%BChrung.html#differentialoperatoren","title":"Differentialoperatoren","text":""},{"location":"24FS/HANA/01_Einf%C3%BChrung.html#laplace","title":"Laplace","text":"\\[ \\Delta u(\\vec x) = \\grad \\cdot \\grad u(x) = \\mathrm{div}(\\grad u(x)) \\]"},{"location":"24FS/HANA/01_Einf%C3%BChrung.html#gradient","title":"Gradient","text":"<p>Sei \\(f: D \\subset \\R^n \\to \\R\\) differenzierbar, dann heisst  $$ \\mathbf{grad} f(\\vec x)=\\grad f(\\vec x)^T= \\begin{pmatrix} \\partial_{x_1} f(\\vec x) \\ \\vdots\\ \\partial_{x_n}f(\\vec x) \\end{pmatrix} $$ der Gradient von \\(f\\).</p>"},{"location":"24FS/HANA/01_Einf%C3%BChrung.html#divergenz","title":"Divergenz","text":"\\[ \\mathrm{div} f(\\vec x) = \\grad \\cdot f(\\vec x) = \\frac{\\part f_1}{\\part x_1}(\\vec x) +\\dots+\\frac{\\part f_n}{\\part x_n}(\\vec x) \\] <p>Folgendes ist ein Beispiel: $$ \\vec F : \\Omega \\sub \\R^u \\to \\R^u &amp; \\vec F(\\vec x)= \\begin{pmatrix} F_1(\\vec x)\\ \\vdots\\ F_n(\\vec x) \\end{pmatrix} \\  \\mathrm{div} \\vec F(\\vec x) = \\part_{x_1}F_1(\\vec x) + \\dots + \\part_{x_n}F_n(\\vec x) \\ \\begin{align} \\mathrm{div}(\\grad \\vec F(\\vec x))\\ &amp; = \\part_{x_1}F_1(\\vec x) + \\dots + \\part_{x_n}F_n(\\vec x) \\ &amp;= \\part_{x_1}\\part_{x_1}F_1(\\vec x)  +\\part_{x_2}\\part_{x_2}F_1(\\vec x) + \\dots + \\part_{x_n}\\part_{x_n}F_n(\\vec x) \\ &amp;= \\part_{x_1^2}F_1(\\vec x) + \\dots + \\part_{x_n^2}F_n(\\vec x)  \\end{align} $$ Wenn die Divergenz </p> <ul> <li>positiv ist, dann steigt etwas (z.B. Raum wird w\u00e4rmer)</li> <li>\\(=0\\) ist, dann bleibt sie gleich,</li> <li>negative ist, dann sinkt etwas (z.B. Raum wird k\u00e4lter)</li> </ul>"},{"location":"24FS/HANA/01_Einf%C3%BChrung.html#rotation-curl-in-englisch","title":"Rotation (curl in Englisch)","text":"\\[ W: \\Omega \\subset \\R^3 \\to \\R^3\\\\ \\grad \\times W = \\mathrm{rot } W = \\begin{vmatrix} \\vec e_1 &amp; \\vec e_2 &amp; \\vec e_3 \\\\ \\part x_1 &amp; \\part x_2 &amp; \\part x_3 \\\\ W_1 &amp; W_2 &amp; W_3 \\end{vmatrix} = \\begin{pmatrix} \\part_{x_2} W_3 - \\part_{x_3}W_2 \\\\ \\part_{x_3} W_1 - \\part_{x_1}W_3 \\\\ \\part_{x_1} W_2 - \\part_{x_2}W_1 \\\\ \\end{pmatrix} \\]"},{"location":"24FS/HANA/01_Einf%C3%BChrung.html#satz-von-gauss","title":"Satz von Gauss","text":"\\[ \\int_\\Omega \\mathrm{div } \\vec F \\mathrm\\, dV = \\int_{\\part\\Omega}\\vec F \\cdot \\vec n \\, \\mathrm ds \\] <p>Der linke Teil stellt ein abgeschlossenes Gebiet, der rechte Teil ist die Oberfl\u00e4che von \\(\\Omega\\). </p>"},{"location":"24FS/HANA/01_Einf%C3%BChrung.html#fem","title":"FEM","text":"<ol> <li>Multiplikation mit Testfunktion \\(v(x)\\)</li> <li>Partiel integrieren    \\(v(0)=v(1)=0\\) gilt immer da es in den Funktionesraum \\(V\\) so eingebaut wird</li> </ol>"},{"location":"24FS/HANA/01_Einf%C3%BChrung.html#extremum-infimum","title":"Extremum &amp; Infimum","text":"<p>Wenn eine Menge als \\(]a, b[=(a, b) \\in \\R\\) definiert ist, dann gibt es kein minimum und maximum. Anstelle, gibt es ein das Extremum (max) und das Infimum (min), welche angen\u00e4hert werden aber nie getroffen werden. $$ \\sup_{x\\in]a,b[\\in \\R}=b \\ \\inf_{x\\in]a, b[\\in \\R}=a $$</p>"},{"location":"24FS/VC2/1_Texture%20and%20Color.html","title":"Texture and Color","text":""},{"location":"24FS/VC2/1_Texture%20and%20Color.html#stages-of-rendering","title":"Stages of Rendering","text":"<p>The vertex processing calculates the lighting on each vertex (emissive + ambient + diffuse + specular = output vertex colour). Furthermore, this step includes the vertex shader.</p> <p>After this step, viewing transformation transforms the world coordinates into the camera space.</p> <p>Then, the primitive generation step assembles the primitives and if there is a geometry shader, new primitives can be generated by it.</p> <p>This is followed by the projection transformation, which transforms the coordinates from the camera space into the clip space, where the coordinates go from \\(1\\) to \\(-1\\) on both axis. Furthermore, a frustum box (?) is used.</p> <p>In the clipping/culling stage, primitives outside of the camera's view frustum are removed (clipping) and triangles facing away from the camera are removed as well (back-face culling).</p> <p>When doing viewport transformation, the coordinates are transformed from the clip space into the window space. However, the z-values are retained for testing.</p> <p>In the rasterisation stage, the geometry is converted into fragments (pixels). The colour of the vertex is interpolated over the fragment. Each fragment has an RGB-value and a depth-value (z-buffer).</p> <p>When processing the fragment, the fragment shader is run and things like texturing and fog are applied to the image.</p> <p>Finally, the image is displayed or rendered to a buffer.</p> <p></p>"},{"location":"24FS/VC2/1_Texture%20and%20Color.html#texture-mapping","title":"Texture Mapping","text":"<p>The following to commands tell OpenGL how to map a flat image to a 3D face. These two calls represent a pair of coordinates.</p> <pre><code>glTexCoord2d(s, t); // the coordinate on the image\nglVertex3d(x, y, z); // the coordinate on in 3D\n</code></pre> <p></p> <p>When the image is mapped to the 3D surface, and points on the image are sampled to map over to the surface, it can happen that aliasing starts to occurr. This can be reduced by interpolating.</p> <p></p> <p>A second problem starts occurring when mapping a texture to a tilted plane and linear interpolation is used. Therefor, linear interpolation is not used for the interpolation of textures.</p> <p></p> <p></p>"},{"location":"24FS/VC2/1_Texture%20and%20Color.html#wrap-mode","title":"Wrap Mode","text":"<pre><code>gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP)\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT)\n</code></pre>"},{"location":"24FS/VC2/1_Texture%20and%20Color.html#light","title":"Light","text":""},{"location":"24FS/VC2/1_Texture%20and%20Color.html#texture-filter","title":"Texture Filter","text":"<p>(texel = texture pixel)</p> <p></p> <p>There are two situations: The pixel maps to an area less than one texel (the texel is smaller than the pixel and is enlarged), in which case magnification is used.</p> <p>Secondly, the pixel can map to an area larger than the texel (the texel is bigger than the pixel and is shrunk), in which case minification is used.</p> <p>There are two kind of filters used for both magnification and minification:</p> <ul> <li>nearest: The texel with the coordinates nearest to the centre of the pixel is used. However, this can result in aliasing artefacts</li> <li>linear: a weighted linear average of an area of 2x2 texels around the centre of the pixel is used.</li> </ul> <p>When choosing the wrong filter, it can lead to the following effects:</p> <p></p>"},{"location":"24FS/VC2/1_Texture%20and%20Color.html#mip-maps","title":"MIP Maps","text":"<p>MIP maps (multum in parvo / many things in a small place) are multiple textures of the same thing with the different resolution. The different level of details (LOD) are used depending how far the texture is away. This prevents the alaising from having too detailed textures, while also avoiding having muddy textures. </p> <p></p> <pre><code>// loads a texture for a given mip map level\nvoid glTexImage2D(GL_TEXTURE_2D, GLint level, \n                  GLint components, GLsizei width, GLsizei height, \n                  GLint border, GLenum format, GLenum type, \n                  const GLvoid *pixels);\n\n// builds the actual mip map\nvoid gluBuild2DMipMaps();\n\n// afterwards, OpenGL figures out which mipmap level should be used\n</code></pre>"},{"location":"24FS/VC2/1_Texture%20and%20Color.html#textures-in-threejs","title":"Textures in Three.js","text":"<pre><code>var texture2 = THREE.ImageUtils.loadTexture(\"assets/wood.jpg\");\ntexture2.wrapS = texture2.wrapT = THREE.RepeatWrapping;\ntexture2.repeat.set(6, 4);\nvar woodMat = new THREE.MeshPhongMaterial( { color: 0xffffff, map: texture2 } );\nvar box4 = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1), woodMat);\n// mipmap is true by default\ntexture2.generateMipmaps = true;\n</code></pre>"},{"location":"24FS/VC2/1_Texture%20and%20Color.html#uv-mapping","title":"UV Mapping","text":"<p>\\(U\\) and \\(V\\) denotes the axes of the 2D texture, while \\(X\\), \\(Y\\) and \\(Z\\) denote the axes of the 3D object in the model space. A UV map maps an image to a 3D object.</p>"},{"location":"24FS/VC2/1_Texture%20and%20Color.html#environment-mapping","title":"Environment Mapping","text":"<p>This is the process of rendering the environment of an object onto itself. This will make the object shiny. An environment is a texture, which has been built before-hand. There are two kinds: Cube Maps and Sphere Maps</p>"},{"location":"24FS/VC2/1_Texture%20and%20Color.html#cube-map","title":"Cube Map","text":"<p>The cube map is rendered as a cube around the object. Than rays from the centre of the objects are shot and the colour of the first object they hit is the colour that pixel of the object becomes.</p> <p></p> <p>This represents a typical layout of a cube map:</p> <p></p>"},{"location":"24FS/VC2/1_Texture%20and%20Color.html#sphere-map","title":"Sphere Map","text":"<p>A sphere map represents the reflection of an object from a specific view. However, a sphere map is simpler than an cube map, since it only consists of one texture. But this comes with the disadvantages of being view dependent and distorting.</p> <p></p> <p></p>"},{"location":"24FS/VC2/1_Texture%20and%20Color.html#bump-mapping","title":"Bump Mapping","text":"<p>A bump map is a texture which modulates the surface normal (the normal vectors which are used for the shader calculation).</p> <p></p> <p>Instead of using the smooth line \\(p\\), the modified version \\(p'\\) is used. The </p> <p></p> <pre><code>Vertex Color = emission + globalAmbient \n    + sum(attenuation * spotlight * \n          [lightAmbient +  max {L.N, 0} * diffuse) + (max {H.N, 0} ^ shininess)*specular])\n</code></pre> <p></p> <p>The following is a bump map:</p> <p></p> <p>The z-axis modulation is defined by blue-channel, the y-axis by the green channel and the x-axis by the red channel.</p> <p></p>"},{"location":"24FS/VC2/1_Texture%20and%20Color.html#shadow-map","title":"Shadow Map","text":"<p>A shadow map is being rendered as a second pass from the view from each light source. As such, a scene with lights is rendered in multiple passes. First from the view of all the lights, then from the regular view.</p> <p></p> <p>The idea behind rendering lights using a shadow map is that, for each light the scene rendered from its view. The resulting depth map will contain the distance to the nearest object from the light. From the depth map, the shadow map is created. When rendering from the camera's point of view, the distance of the light source of every fragment is calculated. If the distance is greater than the value in the shadow map, there is an object between the fragment and the respective light, and thus, the fragment is in shadow. Otherwise, the fragment is lit.</p> <p></p> <p>The following graphics shows the complete process:</p> <p></p>"},{"location":"24FS/VC2/1_Texture%20and%20Color.html#raytracing","title":"Raytracing","text":""},{"location":"24FS/VC2/1_Texture%20and%20Color.html#local-illumination-model","title":"Local illumination model","text":"<p>Light reflected by a surface (and therefore its colour) is dependent only on the surface itself and the direct light sources</p> <p></p>"},{"location":"24FS/VC2/1_Texture%20and%20Color.html#global-illumination-model","title":"Global illumination model","text":"<p>Light reflected by a surface is dependent on the surface itself, the direct light sources, and light which is reflected by the other surfaces on the environment towards the current surface</p> <p></p> <p>In this model, the camera shoots a ray for each pixel into the scene. The color of the pixel is determined by whatever the pixel hits. </p> <p>To add shadows to this model, when hitting a surface, a ray is shot to the light source. If the rays hits anything in between, that point on the surface is in a shadow. These rays are called secondary rays.</p> <p>The same trick can be used to add reflection. When hitting an object, secondary rays are shot into the environment, calculating the contribution to the colour of the pixel. If done recursively, a very realistic image can be generated. However, it is also compute intensive.</p> <p>To stop the recursion, a stop criteria is used:</p> <ul> <li>Rays do not hit any objects</li> <li>Maximal tree depth is reached</li> <li>Ray contribution is neglibible</li> </ul>"},{"location":"24FS/VC2/1_Texture%20and%20Color.html#radiosity","title":"Radiosity","text":"<p>While ray-tracing renders reflections and refractions well, it misses colour bleed. However, this can be added by calculating the radiosity emitted by light hitting surfaces. Radiosity consists of two components: </p> <ol> <li>Energy emitted by the surface itself (for example a light source)</li> <li>Energy reflected from other surfaces</li> </ol> <p>Radiosity is calculated by applying a finite element methods.</p> <p>Since calculating the radiosity is very expensive, it's usually calcualted in a lower resolution. This is then interpolated.</p> <p></p>"},{"location":"24FS/VC2/1_Texture%20and%20Color.html#physical-based-rendering-pbr","title":"Physical Based Rendering (PBR)","text":"<p>PBR emulates the interaction between light and materials. It differs from traditional rendering models, as it doesn't have to resort to tricks to create a realistic looking image.</p> <p>A material has to following properties:</p> <ul> <li>Albedo   The color of an object's diffuse light</li> <li>Metalness   How strong light reflects</li> <li>Roughness</li> </ul>"},{"location":"24FS/VC2/2_3D%20Interaction.html","title":"3D Interaction","text":""},{"location":"24FS/VC2/2_3D%20Interaction.html#interaction-within-the-graphics-pipeline","title":"Interaction within the Graphics Pipeline","text":"<p>When we want to interact with  something in our world, we have to reverse the graphics pipeline. There are a few ways to map the  interaction in 2D into the 3D space:</p> <ul> <li>Restrict to one axis of the coordinate system (X, Y, or Z)</li> <li>Restrict to orthogonal planes of the coordinate system (XY, XZ, YZ, ...)   </li> <li>Restrict to a projection plane of the camera   </li> <li>Restrict to an axis or plane of the local object coordinate system</li> </ul>"},{"location":"24FS/VC2/2_3D%20Interaction.html#euler-rotation-vs-quaternions","title":"Euler Rotation vs Quaternions","text":"<p>An rotation can be decomposed into an rotation around each axis. These rotations are called Euler angles. $$ R(\\theta)=R_z(\\theta_z)\\cdot R_y(\\theta_y)\\cdot R_x(\\theta_x) $$</p>"},{"location":"24FS/VC2/2_3D%20Interaction.html#gimble-lock","title":"Gimble Lock","text":"<p>A problem with euler angles is that a gimble lock, where each rotation axis is aligned, can occurr. It's not clearly defined, how to get out of the lock. </p> <p></p>"},{"location":"24FS/VC2/2_3D%20Interaction.html#flip-problem","title":"Flip Problem","text":"<p>The flip problem occurs when one wants to calculate the angle with which they look at the north star (or any other external point)</p> <p></p> <p>However, if one stands directly under neath the north star, what is the angle? It is not defined. This is called the flip problem.</p> <p></p>"},{"location":"24FS/VC2/2_3D%20Interaction.html#comparison","title":"Comparison","text":""},{"location":"24FS/VC2/2_3D%20Interaction.html#camera-navigation","title":"Camera Navigation","text":"<p>See in VC2_02_3D_Interaction.pdf slide</p>"},{"location":"24FS/VC2/2_3D%20Interaction.html#object-picking-in-3d","title":"Object Picking in 3D","text":"<p>A ray is shot from the camera through the 2D view screen into the scene.</p> <p></p> <p>Additionally, to check if a ray hits a triangle, the ray needs to be transformed into the local coordinate system of the triangle. This can become expensive, if a large scene tree is being used. This can be some what optimised by first checking if a bounding box is hit, and only then check if the ray intersected with the polygon triangles.</p> <p></p> <p>This can be done as follows in THREE.js:</p> <pre><code>const projector = new THREE.Projector();\nconst raycaster = new THREE.Raycaster();\nconst mouseVector = new THREE.Vector3();\nmouseVector.x = (event.clientX / window.innerWidth) * 2 - 1;\nmouseVector.y =-(event.clientY / window.innerHeight) * 2 + 1;\nmouseVector.z = 0.5;\nprojector.unprojectVector(mouseVector, camera);\nraycaster.set(camera.position, mouseVector.sub(camera.position).normalize());\nconst intersects = raycaster.intersectObjects(scene.children, true);\n</code></pre>"},{"location":"24FS/VC2/2_3D%20Interaction.html#dragging-object-in-3d","title":"Dragging Object in 3D","text":"<p>When dragging an object in 3D there are multiple approaches on how to implement this:</p> <ul> <li>If the object is on the ground, clip the object to the ground and translate it on the other axes</li> <li>Translate along the x, y or z axis depending what fits best with the camera direction</li> <li>Translate the object along a temporary plane orthogonal to the viewing direction</li> </ul>"},{"location":"24FS/VC2/2_3D%20Interaction.html#text-in-3d","title":"Text in 3D","text":"<p>Text can be shown in different ways:</p> <ul> <li>As a label   </li> <li>As a tooltip   </li> <li>As UI elements   </li> </ul>"},{"location":"24FS/VC2/3_VR.html","title":"VR","text":"<p>VR is a computer simulation to generate a realistic 3D virtual world. Therefore interactivity, immersion and presence (it looks and behaves like the real deal) is important.</p> <p>People employ the use of VR for:</p> <ul> <li>the real thing is too dangerous</li> <li>the real thing doesn't exist</li> <li>The simulated objective is difficult or expensive to train in real life (e.g. surgery)</li> <li>The simulated object is not accessible (e.g. virtual autopsy table)</li> </ul> <p>The following senses contribute the most to the perception of a human:</p> <ul> <li>Sight 70% (Visual Interface)</li> <li>Hearing 20% (Auditory Interface)</li> <li>Smelling 5% (Olfactory Interface)</li> <li>Touching 4%  (Haptics Interface)</li> <li>Taste (Gustatory Interface)</li> <li>Balance (Vestibular Interfaces)</li> <li>Body Awareness (Locomotion Interface)</li> <li>Temperature</li> <li>Pain</li> </ul>"},{"location":"24FS/VC2/3_VR.html#the-reality-virtuality-continuum","title":"The Reality-Virtuality Continuum","text":""},{"location":"24FS/VC2/3_VR.html#glossary","title":"Glossary","text":"<ul> <li> <p>Physical Reality   Resides in local, physical world (here and now)</p> </li> <li> <p>Cyberspace   A location that exists only in the mind of users and allows geographically distant people to interact with each other</p> </li> <li> <p>Synthetic Environment   = VR, AR, Telepresence</p> </li> <li> <p>Telepresence   Interact with a physically real, remote environment from the first person perspective</p> </li> <li> <p>Teleoperation   Remotely operate a device</p> </li> </ul>"},{"location":"24FS/VC2/3_VR.html#input","title":"Input","text":"<p>Fuse Buttons are one option of interactivity </p> <p>Often time Motion Tracking is used. Alternatively, Gesture Recognition is implemented.</p> <p>The body can be tracked with electromagnetic tracking .</p> <p></p> <p>More modern headsets use optical tracking.</p>"},{"location":"24FS/VC2/4_Animation.html","title":"Animation","text":"<p>The goal should be to refresh around 60 fps.</p> <p>With three.js, one should use <code>requestAnimFrame</code> which instructs the browser to render the next frame, when it has resources available. This triggers a buffer swap. This is used to prevent tearing, since when we write to a buffer while simultaneously rendering it, we get tearing.</p> <p>To actually animate there are multiple techniques: </p> <ul> <li>Hard-coding the transformation</li> <li>Key frames</li> <li>Scripts (event-based or defining constraints)</li> <li>Physic simulation</li> <li>Particle system</li> <li>Motion capturing</li> </ul>"},{"location":"24FS/VC2/4_Animation.html#animation-in-films","title":"Animation in Films","text":"<ul> <li>Story is documented in a script</li> <li>Storyboard   Lays out the action scenes with representative frames and a small description</li> <li>Key frames (or extremes)</li> <li>Inbetweens</li> <li>...</li> </ul>"},{"location":"24FS/VC2/4_Animation.html#john-lassaters-rules-of-animation","title":"John Lassater\u2018s rules of animation:","text":"<ol> <li>Squash and stretch</li> <li>Timing</li> <li>Anticipation</li> <li>Staging</li> <li>Follow through and overlapping action</li> <li>Straight ahead action and pose-to-pose action</li> <li>Slow in and slow out</li> <li>Arcs</li> <li>Exaggeration</li> <li>Secondary action</li> <li>Appeal</li> </ol>"},{"location":"24FS/VC2/4_Animation.html#animation-principles","title":"Animation Principles","text":""},{"location":"24FS/VC2/4_Animation.html#squash-and-stretch","title":"Squash and Stretch","text":"<p>Squashing and stretching an object can help defining its rigidity and mass. Furthermore, it can help avoid strobing in fast movement</p>"},{"location":"24FS/VC2/4_Animation.html#timing","title":"Timing","text":"<p>How actions are spaced can be used to convey the mass and size of an object and the personality of a character.</p> <p>If a charcacter accelerates slower, it appears heavier. The reverse is true has well.</p>"},{"location":"24FS/VC2/4_Animation.html#anticipation","title":"Anticipation","text":"<p>An action is subdivided into three parts: Preparation, the action itself and its termination. The anticipation prepares the action and indicates to the viewer that something is going to happen.</p>"},{"location":"24FS/VC2/4_Animation.html#staging","title":"Staging","text":"<p>Staging is the presentation of an idea so it is unmistakably clear</p>"},{"location":"24FS/VC2/4_Animation.html#follow-through-and-overlapping-action","title":"Follow-through and Overlapping Action","text":"<p>The termination of an action is named follow-through (e.g. the hand continuing after the ball has been released). On the other hand, actions often overlap and thus the follow-through sometimes sets up the next action.</p>"},{"location":"24FS/VC2/4_Animation.html#slow-in-and-slow-out","title":"Slow-in and Slow-out","text":"<p>Movements are typically slow-in and slow-out.</p> <p></p> <p></p> <p>An slow-in slow out curve can be modelled with the following formula: $$ s(t) = \\frac 1 2 \\sin( \\pi\\cdot t- \\frac \\pi 2)+1 $$ This will create a curve like this:</p> <p></p> <p>Generally speaking, discontinuity in position and velocity should be avoided.</p>"},{"location":"24FS/VC2/4_Animation.html#arcs","title":"Arcs","text":"<p>Things rarely move straight in the reality. As such, arcs should be considered when animating humans.</p>"},{"location":"24FS/VC2/4_Animation.html#exaggeration-and-secondary-action","title":"Exaggeration and Secondary Action","text":"<p>Exaggeration in animation means accentuating</p> <p>Secondary actions are actions resulting directly from another one</p>"},{"location":"24FS/VC2/4_Animation.html#forward-inverse-kinematics","title":"Forward &amp; Inverse Kinematics","text":"<p>With forward kinematics, each joint is animated manually.</p> <p>With inverse kinematic, one defines the movement at the end points and the computer computes the angles required at each joint. </p> <p>Additionally, a skeleton can be modelled with adds constraints.</p>"},{"location":"24FS/VC2/4_Animation.html#deformation","title":"Deformation","text":""},{"location":"24FS/VC2/4_Animation.html#physics-simulation","title":"Physics Simulation","text":""},{"location":"24FS/VC2/5_OpenGL.html","title":"OpenGL","text":"<pre><code>glBegin(GL_POLYGON);\n    glVertex2i(200, 200);\n    glVertex2i(300, 200);\n    glVertex2i(300, 300);\nglEnd();\n</code></pre> <p>Instead of <code>glVertex2i</code>, the any combination of <code>glVertex[234][isfd]</code> could have been used, where <code>[234]</code> stands for 2D, 3D and 4D and <code>[isfd]</code> stands for integer, short, float and double.</p> <p>To draw a red line, the following code is necessary:</p> <pre><code>glClearColor(1.0,1.0,1.0,0.0);  // Background color\nglMatrixMode(GL_PROJECTION);    // Set transformation\nglLoadIdentity();               // Load trans. matrix\ngluOrtho2D(0, 200, 0, 150);     // Set cam projection\nglClear(GL_COLOR_BUFFER_BIT);   // Clear background\nglColor3f(1.0, 0.0, 0.0);       // Set color to red\n\nglBegin(GL_LINES);              // Draw line\n    glVertex2i(180, 15);        // - first point\n    glVertex2i(10, 145);        // - second point\nglEnd();                        // Ready with line\n\nglFlush();                      // Send\n</code></pre> <p>Setting attributes can change how primitives are drawn (e.g. color, width, style, etc). The current value is always maintaned and it can be changed with a function. Some attributes need to be enabled with <code>glEnable(...)</code>. </p> <p>For example, the following draws a line with the attribute <code>GL_LINE_STIPPLE</code> enabled:</p> <pre><code>glLineWidth(2);\nglEnable(GL_LINE_STIPPLE);\nglLineStipple(repeatfactor, pattern);\n// draw stippled lines\n...\nglDisable(GL_LINE_STIPPLE);\n</code></pre>"},{"location":"24FS/VC2/5_OpenGL.html#opengl-primitives","title":"OpenGL Primitives","text":"Name Example <code>GL_POINTS</code> <code>GL_LINES</code> <code>GL_LINE_STRIP</code> <code>GL_LINE_LOOP</code> <code>GL_TRIANGLES</code> <code>GL_TRIANGLE_STRIP</code> <code>GL_POLYGON</code> <code>GL_TRIANGLE_FAN</code> <code>GL_QUADS</code> <code>GL_QUADS_STRIP</code> <p>OpenGL can only draw polygons that are simple, convex and flat:</p> <ul> <li>simple: edges cannot cross   </li> <li>convex:   </li> <li>flat: all vertices must be in the same plane</li> </ul>"},{"location":"24FS/VC2/5_OpenGL.html#efficiency","title":"Efficiency","text":"<p>To reduce the number of functions, vertices can be passed as an array</p> <p>There are also techniques to send data to the GPU once and store it there. Display lists are collections of OpenGL commands which can be referenced later. This is useful for static geometries/scenes. In modern OpenGL this concept is called Vertex Buffer Object.</p>"},{"location":"24FS/VC2/5_OpenGL.html#gl-glu-glut","title":"GL, GLU, GLUT","text":"<ul> <li>GL: OpenGL functions</li> <li>GLU: OpenGL Utility library</li> <li>GLUT: OpenGL Utility Toolkit library (very old)</li> </ul>"},{"location":"24FS/VC2/5_OpenGL.html#examples","title":"Examples","text":"<pre><code>// === Setup Viewing Transformation ===\nglViewport(0, 0, 500, 500); // Select part of window\n\nglMatrixMode(GL_PROJECTION);// Set projection matrix\nglLoadIdentity();           // Load identity matrix\nglFrustum(-1.0, 1.0, -1.0, 1.0, 4.0, 20.0);\n\nglMatrixMode(GL_MODELVIEW); // Set camera matrix\nglLoadIdentity();\ngluLookAt(3.0, 6.0, 5.0,    // - eye point\n          1.0, 0.0, 0.0,    // - center point\n          0.0, 0.0, 1.0);   // - up axis\n\n// === Set Window Background Color &amp; Drawing Color ===\n// Clear background\nglClearColor(1.0,1.0,1.0,0.0);// Background color\nglClear(GL_COLOR_BUFFER_BIT); // Clear background\n\n// Set drawing color\nglColor3f(0.0, 0.0, 0.0);\n\n// === Draw geometry ===\n// Draw two rectangular boxes\nglutWireCube(1.0);\n// unit box around origin\nglTranslatef(2.0, 0.0, 0.0); // move in x-direction\nglRotatef(30.0, 0.0, 0.0, 1.0); // rotate 30 degrees\n// around z-axis\nglScalef(1.0, 1.0, 2.0);\n// scale in z-direction\nglutWireCube(1.0); // translated, rotated, scaled box\n</code></pre>"},{"location":"24FS/VC2/5_OpenGL.html#pyopengl-example","title":"PyOpenGL Example","text":"<p>The code below produces the following spinning rectangle:</p> <p></p> <pre><code>spin = 0.0\ndef display():\n    glClear(GL_COLOR_BUFFER_BIT)\n    glPushMatrix()\n    glRotatef(spin, 0.0, 0.0, 1.0)\n    glColor3f(0.0, 1.0, 1.0)\n    glRectf(-3.0, -3.0, 3.0, 3.0)\n    glPopMatrix()\n    glutSwapBuffers()\n\ndef spinDisplay():\n    global spin\n    spin = spin + 2.0\n    if (spin &gt; 360.0):\n        spin = spin - 360.0\n    glutPostRedisplay()\n\ndef init():\n    glClearColor(0.0, 0.0, 0.0, 0.0)\n    glShadeModel(GL_FLAT)\n\ndef reshape(w, h):\n    glViewport(0, 0, w, h)\n    glMatrixMode(GL_PROJECTION)\n    glLoadIdentity()\n    glOrtho(-5.0, 5.0, -5.0, 5.0, -1.0, 1.0)\n    glMatrixMode(GL_MODELVIEW)\n    glLoadIdentity()\n</code></pre>"},{"location":"24FS/VC2/5_OpenGL.html#obj-file-format","title":"OBJ File Format","text":"<p>Simple format used to store geometry. Its content is encoded in ASCII.</p> <ul> <li><code>v</code> stores a vertex on the line</li> <li><code>vn</code> stores the normal vertex</li> <li><code>vt</code> stores texture coordinates</li> <li><code>f</code>  Creates a face from the given indices specified in the format <code>vertex//normal</code></li> </ul> <pre><code>// simple plane\nv 1.000000 0.000000 -1.000000\nv 1.000000 0.000000 1.000000\nv -1.000000 0.000000 1.000000\nv -1.000000 0.000000 -1.000000\nvn 0.000000 1.000000 0.000000\nusemtl (null)\ns off\nf 1//1 4//1 3//1\nf 1//1 3//1 2//1\n</code></pre>"},{"location":"24FS/VC2/6_Shader.html","title":"Shader","text":"<p>In modern OpenGL (OpenGL 3) the shader is split in vertex shader and fragment shader. The vertex shader operates on the 3D structure, where as the fragment shader is after rasterising and thus operates on a 2D image.</p> <p></p> <p>(In old OpenGL there used to be a Texture and Lighting stage, instead of the vertex and fragment shader)</p>"},{"location":"24FS/VC2/6_Shader.html#basic-shader","title":"Basic Shader","text":"<p>To actually render the sphere in the image above, the following vertex shader is necessary:</p> <pre><code>// Configuration\n#version 300 es\n#extension all : warn\n\nprecision highp float;\n// Shader parameters\nuniform mat4 projectionMatrix;\nuniform mat4 modelViewMatrix;\n\n// Streaming input\nin vec4 position;\nvoid main(void) {\n    // Transform vertex position to screen space\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n</code></pre> <p>Additionally is the following fragement shader necessary:</p> <pre><code>// Configuration\n#version 300 es\n#extension all : warn\nprecision highp float;\n// Static colour passed by user\nuniform vec4 colour;\nvoid main(void) {\n    gl_FragColor = vec4(colour.r, colour.g, colour.b, 1.0);\n}\n</code></pre>"},{"location":"24FS/VC2/6_Shader.html#basic-math","title":"Basic Math","text":"<p>There are multiple coordinate spaces:</p> Space Explanation Matrix Object Space Relative to the object <code>normalMatrix</code> (3x3 matrix) for normal vectors, <code>modelMatrix</code> (4x4 matrix) for position matrix to world space World Space Relative to the world View Space Relative to the camera <code>modelViewMatrix</code> to convert position from object space to view space Projection Space The screen coordinate system <code>projectionMatrix</code> to convert from the view space to the screen coordinates <p>In Three.js the following values are defined</p> What Type Explanation <code>normalMatrix</code> <code>mat3</code> Converts normal vectors from object space to world space <code>modelMatrix</code> <code>mat4</code> Converts position vectors from object space to world space <code>modelViewMatrix</code> <code>mat4</code> Converts position vectors from object space to view space. <code>normal</code> <code>vec3</code> The normal vector <code>position</code> <code>vec3</code> the current position <code>uv</code> <code>vec2</code>? The current texture coordinate of the current vertex"},{"location":"24FS/VC2/6_Shader.html#barycentric-coordinates","title":"Barycentric Coordinates","text":"<p>Barycentric coordinates are  a way to specify a position in a triangle.</p> <p>A position consists of three weights \\(A\\), \\(B\\) and \\(C\\): $$ A + B + C = 1 $$ To get the position of \\(\\begin{pmatrix}A \\\\ B \\\\ C\\end{pmatrix}\\), the following can be done: $$ P = A \\cdot P_1 + B\\cdot P_2 + C\\cdot P_3 $$ where \\(P_i\\), are the corners of the triangle.</p>"},{"location":"24FS/VC2/6_Shader.html#shaderes-in-threejs","title":"Shaderes in Three.js","text":"<p>A shader can be defined in the following way:</p> <pre><code>let mat = new THREE.ShaderMaterial({\n    // uniforms/variables \n    uniforms: {\n        color: { value: new THREE.Vector4( 0.8, 0.2, 0.8, 1.0 ) }\n    },\n\n    // the actual source code of the vertex and fragement shader\n    vertexShader: document.getElementById('passthroughVS').textContent,\n    fragmentShader: document.getElementById('passthroughFS').textContent\n})\n</code></pre> <pre><code>// Static colour passed by user\nuniform vec4 colour;\n\nvoid main(void) {\n    pc_fragColor = vec4(colour.g, colour.r+colour.b, colour.g, 1.0);\n}\n</code></pre> <p>If we wanted to shader the sphere, like so:</p> <p></p> <p>We have to define the following vertex shader:</p> <pre><code>// Define the outputs of the vertex shader\n// these outputs are passed to the fragment shader\nout vec2 texCoords;\n\nvoid main(void) {\n    // Pass texture coordinates down to fragment shader\n    // \u2018uv\u2019 is predefined by three.js\n    texCoords = uv;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n</code></pre> <p>And the following fragment shader:</p> <pre><code>in vec2 texCoords;\n// Texture map with albedo values\nuniform sampler2D albedoMap;\n\nvoid main(void)\n{\n    // Read the colour value from \u2018albedoMap\u2019 at coordinates \u2018texCoords\u2019\n    vec4 textureColour = texture2D(albedoMap, texCoords);\n\n    // Write the texture colour to the output\n    pc_fragColor = textureColour\n}\n</code></pre> <p>In Three.js, the shader is defined in the following way:</p> <pre><code>let earthAlbedoMap = new THREE.TextureLoader().load('assets/earthmap.jpg');\nlet mat = new THREE.ShaderMaterial({\n    uniforms: {\n        albedoMap: { value: earthAlbedoMap }\n    },\n    vertexShader: document.getElementById('passthroughVS').textContent,\n    fragmentShader: document.getElementById('passthroughFS').textContent\n});\n</code></pre>"},{"location":"24FS/VC2/6_Shader.html#light_posdata-types","title":"light_posData Types","text":"<p>The following numerical types exist:</p> <pre><code>float, vec2, vec3, vec4\nint, ivec2, ivec3, ivec4\nuint, uvec2, uvec3, uvec4\nmatn, matnxm, where n, m are 2, 3, or 4\n</code></pre> <p>Importantly, glsl allows accessing the components of vectors:</p> <pre><code>// Write x and w component of dst from y component of src\ndst.xw = src.yy;\n</code></pre> <p>The following texture data types exist:</p> <pre><code>gsampler1D, gsampler2D, gsampler3D, gsamplerCube, gsampler2DRect\ngsampler1DArray, gsampler2DArray, gsamplerCubeArray\ngsamplerBuffer, gsampler2DMS, gsampler2DMSArray \n</code></pre>"},{"location":"24FS/VC2/6_Shader.html#in-out","title":"In &amp; Out","text":""},{"location":"24FS/VC2/6_Shader.html#uniforms","title":"Uniforms","text":"<p>Uniforms are variables that are set by the host and are the same for the entire execution of the shader. Uniforms can be primitive types, constant data buffers, variable sized buffers, read/write images, image sampling and more.</p>"},{"location":"24FS/VC2/6_Shader.html#lighting-with-shaders","title":"Lighting with Shaders","text":"<p>The following important variable are important: <code>V</code>, the direction of the camera, <code>R</code>, the vector of the reflection, <code>N</code>, the normal vector, and <code>L</code> the direction of the light.</p> <p>The following shader is the vertex shader to calculate spot light lighting for objects.</p> <pre><code>out vec4 positionVS;\nout vec3 normalVS;\n\nvoid main(void)\n{\n    // Transform the normal to view space and pass to the fragment shader\n    normalVS = normalMatrix * normal;\n    // Transform the vertex to view space\n    positionVS = modelViewMatrix * vec4(position, 1.0);\n    // Vertex in Screen Space\n    gl_Position = projectionMatrix * positionVS;\n}\n</code></pre> <p>And the following fragment shading:</p> <pre><code>in vec4 positionVS;\nin vec3 normalVS;\n\nuniform vec3 lightPosVS;\n\nvoid main(void) {\n    // Account for linear interpolation\n    vec3 normalVS2 = normalize(normalVS);\n    // Position of the vertex in view space\n    vec4 posVS = modelViewMatrix * vec4(position, 1.0);\n    // Direction from the vertex to the eye in view space\n    vec3 eyeDirVS = -normalize(posVS.xyz);\n    vec3 ambientColour = ambient * ambientLightColor;\n    vec3 diffuseColour = vec3(0.0);\n    vec3 specularColour = vec3(0.0);\n\n    for (int i = 0; i &lt; MAX_POINT_LIGHTS; i++) {\n        // Position of the light in view space\n        vec4 lightPosVS = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n        // Light direction from the current vertex to the light\n        vec3 lightDirVS = normalize(lightPosVS.xyz - posVS.xyz);\n        // Distance to the light\n        float lightDist = length(lightPosVS.xyz - posVS.xyz);\n        // Calculate attenuation\n        float attenuation = 1.0 / (1.0 + (lightDist * pointLightDistance[i]));\n        // Coefficient for diffuse illumination\n        float lambertTerm = dot(lightDirVS, normalVS2);\n        // Only compute light if the vertex is visible\n        if (lambertTerm &gt; 0.0)         {\n            // Compute the diffuse light term\n            diffuseColour += pointLightColor[i] * diffuse * lambertTerm * attenuation;\n            // Compute the specular light term\n            vec3 R = reflect(lightDirVS, normalVS2);\n            float specular = pow( max(dot(R, eyeDirVS), 0.0), shininess);\n            specularColour += pointLightColor[i] * specular * attenuation;\n        }\n    }\n\n    // Assign final colour\n    vertexColour = emissive + ambientColour + diffuseColour + specularColour;\n    // Pass the texture coordinates to the fragment shader\n    textureCoords = uv;\n    // Vertex in Screen Space\n    gl_Position = projectionMatrix * posVS;\n}\n</code></pre> <p>This kind of shading is called Phong shading.</p>"},{"location":"24FS/VC2/6_Shader.html#morth-target-animation-keyframes","title":"Morth-target Animation (Keyframes)","text":"<p>The following uniforms are necessary:</p> <pre><code>uniform sampler2DArray morphTargetsTexture;\nuniform ivec2 morphTargetsTextureSize;\n\nuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n</code></pre> <p>The following shader defines the actual implementation of morph-target animation.</p> <pre><code>vec4 getMorph(in int vertexIndex, in int morphTargetIndex)\n{\n    int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE;\n    int y = texelIndex / morphTargetsTextureSize.x;\n    int x = texelIndex - y * morphTargetsTextureSize.x;\n    ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n    return texelFetch( morphTargetsTexture, morphUV, 0 );\n}\n\nvec3 morphed = position;\nfor (int i = 0; i &lt; MORPHTARGETS_COUNT; i++) {\n    if (morphTargetInfluences[ i ] != 0.0)\n        morphed += getMorph(gl_VertexID, i, 0).xyz * morphTargetInfluences[i];\n}\n</code></pre>"},{"location":"24FS/VC2/6_Shader.html#geometry-instancing","title":"Geometry Instancing","text":"<p>Geometry instancing is a technique where </p>"},{"location":"24FS/VC2/6_Shader.html#environment-reflections","title":"Environment Reflections","text":"<p>To render </p>"},{"location":"24FS/VC2/6_Shader.html#derivatives-and-surface-normal","title":"Derivatives and Surface-Normal","text":"<p>The <code>dFdx</code> and <code>dFdy</code> function return the derivative of the position. The cross product will return the surface normal.</p> <pre><code>vec3 normal = normalize( cross(dFdx(pos), dFdy(pos)) );\n</code></pre>"},{"location":"24FS/VC2/6_Shader.html#glow-effect","title":"Glow-Effect","text":"<p>If just the emmisive and reflective parts are added the result above is produced. This doesn't really look like glowing.</p> <p></p> <p>This can be solved by first blurring the reflective part and then adding it.</p>"},{"location":"24FS/VC2/6_Shader.html#linear-blur-filter","title":"Linear Blur Filter","text":"<p>A linear blur filter, takes the current position and the neighbouring pixel and averages them.</p> <p></p> <p>This can be done in the following way:</p> <pre><code>vec2 uv = \u2026\nvec2 offset = vec2(1) / sizeOfTexture;\nvec4 sum = vec4(0);\nfor (int y = -1; y &lt; 2; y++)\n{\n    for (int x = -1; x &lt; 2; x++)\n    {\n        sum += texture2D(tex, uv + vec2(x, y) * offset);\n    }\n}\nreturn sum / 9;\n</code></pre>"},{"location":"24FS/VC2/6_Shader.html#optimized-linear-blur-filter","title":"Optimized Linear Blur Filter","text":"<p>OpenGL can be configured to already average pixels to gether:</p> <pre><code>vec2 uv = \u2026\nvec2 offset = vec2(0.5) / sizeOfTexture;\nvec4 sum = vec4(0);\nfor (int y = -1; y &lt; 2; y += 2)\n{\n    for (int x = -1; x &lt; 2; x += 2)\n    {\n        sum += texture2D(tex, uv + vec2(x, y) * offset);\n    }\n}\nreturn sum / 4;\n</code></pre>"},{"location":"24FS/VC2/6_Shader.html#gaussian-blur","title":"Gaussian Blur","text":"<p>A way to improve the quality of the blur is to use a higher weight for the centeral pixel. The gaussian blur uses a gauss distribution to get the weights.</p> <p></p> <pre><code>vec2 uv = \u2026\nvec2 offset = vec2(1) / sizeOfTexture;\nvec4 sum = vec4(0);\nfor (int y = -1; y &lt; 2; y++)\n{\n    for (int x = -1; x &lt; 2; x++)\n    {\n        sum += weight(x, y) * texture2D(tex, uv + vec2(x, y) * offset);\n    }\n}\nreturn sum;\n</code></pre>"},{"location":"24FS/VC2/6_Shader.html#separable-gaussian-blur","title":"Separable Gaussian Blur","text":"<p>One optimisation that can be made is to process the x and y dimensions independently: $$ \\frac 1 {16} \\begin{bmatrix} 1 &amp; 2 &amp; 1 \\ 2 &amp; 4 &amp; 2 \\ 1 &amp; 2 &amp; 2 \\end{bmatrix}  =  \\frac 1 {4} \\begin{bmatrix} 1 \\ 2 \\ 1 \\ \\end{bmatrix} \\cross \\frac 1 {4}\\begin{bmatrix} 1 &amp; 2 &amp; 1 \\end{bmatrix} $$</p>"},{"location":"24FS/VC2/6_Shader.html#separable-gaussian-blur-with-tmu-optimization","title":"Separable Gaussian Blur with TMU Optimization","text":""},{"location":"24FS/VC2/6_Shader.html#particle-animation","title":"Particle Animation","text":"<p>We can use a float image (<code>GL_FLOAT</code>) as an input buffer to the fragment shader</p> <p>With WebGL2 TODO</p>"},{"location":"24FS/VC2/6_Shader.html#deferred-shadingrendering","title":"Deferred Shading/Rendering","text":"<p>The idea is to split the rendering of the geometry and lighting. This is called deferred shading, since we defere the shading.</p> <p>We now define three texture outs, one for the position, one for the normals and one for the color value, in this case the albedo value.</p> <p></p> <p>In a first pass, we render the gemoetry and store the relevant information in the three textures.</p> <pre><code>// vertex shader\nin vec3 position; attribute vec3 normal; attribute vec3 colour;\nout vec3 vWorldPosition; varying vec3 vNormal; varying vec3 vColour;\nvoid main(void)\n{\n    vWorldPosition = position;\n    vNormal = normal;\n    vColour = colour;\n}\n\n// fragment shader\nin vec3 vWorldPosition;\nin vec3 vNormal;\nin vec3 vColour;\nvoid main(void)\n{\n    gl_FragData[0].xyz = vWorldPosition.xyz;\n    gl_FragData[1].xyz = normalize(vNormal);\n    gl_FragData[2].rgb = vColour;\n}\n</code></pre> <p>In a second pass, :</p> <pre><code>uniform LightUniforms {\n    mat4 mvp;\n    vec4 position;\n    vec4 color;\n} uLight;\n\nuniform vec3 uEyePosition;\nuniform sampler2D uPositionBuffer;\nuniform sampler2D uNormalBuffer;\nuniform sampler2D uColourBuffer;\nout vec4 fragColor;\n\nvoid main(void)\n{\n    ivec2 fragCoord = ivec2(gl_FragCoord.xy);\n    vec3 position = texelFetch(uPositionBuffer, fragCoord, 0).xyz;\n    vec3 normal = normalize(texelFetch(uNormalBuffer, fragCoord, 0).xyz);\n    vec4 albedo = texelFetch(uColourBuffer, fragCoord, 0);\n\n    vec3 eyeDirection = normalize(uEyePosition - position);\n    vec3 lightVec = uLight.position.xyz - position;\n    float att = 1.0 - length(lightVec);\n    vec3 lightDirection = normalize(lightVec);\n    vec3 refl = reflect(-lightDirection, normal);\n    float nDotL = max(dot(lightDirection, normal), 0.0);\n    float ambient = 0.1;\n    vec3 diffuse = nDotL * uLight.color.rgb;\n    vec3 specular = pow(max(dot(refl, eyeDirection), 0.0), 20.0) * uLight.color.rgb;\n\n    fragColor = vec4(att * (ambient + diffuse + specular) * baseColor.rgb, baseColor.a);\n}\n</code></pre> <p>The following diagram shows how the game Kill Zone implemented this concept:</p> <p></p> <p>One disadvantage of this model is, that the same lighting model is used for every scene. This means that every variation needs to be modeled with this. This makes it more memory hungry since not every variable might be used in every scene.</p>"},{"location":"24FS/VC2/6_Shader.html#geometry-shader","title":"Geometry Shader","text":"<p>The geometry shader is executed after the vertex shader, but is run once per geometry (e.g. if points are being rendered, once per point; or if triangles are being rendered, once per triangle). It is used to generate geometry.</p> <p>Two applications are:</p> <ul> <li>Render billboards   First render a point where the billboard should be generated. Afterwards, with the geometry shader, expand the point to a billboard   </li> <li>Render Hair/Furr   Render a mesh normally and then as a point cloud. Each point is then expanded   </li> <li>Single-pass Cubemap rendering</li> </ul> <pre><code>//Example of a geometry shader\n</code></pre> <p>Geometry shaders were designed for simple algorithms and generating geometry is extremely costly. </p>"},{"location":"24FS/VC2/6_Shader.html#tessellation-shader","title":"Tessellation Shader","text":"<p>Tessellation shaders were introduced around 2012. </p> <p>A tessellation shader renders a patch, which consists of a number of points.</p> <p></p> <p>A tessellation shader can be used to generate new geometry:</p> <p></p> <p>Tessellation is often used for terrain and fur. However, tessellation shaders are not supported on Apple hardware. Furthermore, these applications can more and more be replaced by compute shaders.</p>"},{"location":"24FS/VC2/6_Shader.html#next-generation-api","title":"Next-Generation API","text":"<p>OpenGL was designed for CPUs with few cores and multi-threading is very expensive. Furthermore, the API itself is too flexible, which then has to be made sense of by the driver.</p> <p>The idea of the new APIs is to make the driver leaner and give control to the programmer.</p> <p></p> <p>Vulkan minimizes the work required for the driver:</p> <ul> <li>No object life-time management</li> <li>No usage tracking</li> <li>Pre-recorded command buffers</li> </ul> <p>Vulkan also doesn't do state validation. Instead the programmer has to do that them self.</p> <p>Vulkan is cross-platform, except on MacOS.</p> <p></p>"},{"location":"24FS/VC2/Math.html","title":"Math","text":""},{"location":"24FS/VC2/Computer%20Vision/3D%20Reconstruction%20Pipeline.html","title":"3D Reconstruction Pipeline (Structure from Motion)","text":"<p>The following is the basic workflow to recover 3D data:</p> <p></p> <p>The algorithm below assumes that the structure is static.</p>"},{"location":"24FS/VC2/Computer%20Vision/3D%20Reconstruction%20Pipeline.html#structure-from-motion-sfm-vs-simultaneous-localisation-and-mapping-slam","title":"Structure from Motion (SfM) vs Simultaneous Localisation And Mapping (SLAM)","text":""},{"location":"24FS/VC2/Computer%20Vision/3D%20Reconstruction%20Pipeline.html#get-point-correspondences","title":"Get Point Correspondences","text":"<p>When talking about still images, one usually talks about structure from motion. On the other hand, when taking about finding correspondences in a video, this is called SLAM. However, both use the same basic algorithm.</p>"},{"location":"24FS/VC2/Computer%20Vision/3D%20Reconstruction%20Pipeline.html#finding-camera-position","title":"Finding Camera Position","text":"<p>To get the camera position, the foundation matrix \\(F\\) needs to be recovered. See Intro/Stereo to see the details.</p> <p></p> <p>The steps are \\(F \\to E \\to R,T\\) to get the rotation matrix \\(R\\) and the translation matrix \\(T\\) of the camera.</p>"},{"location":"24FS/VC2/Computer%20Vision/3D%20Reconstruction%20Pipeline.html#scene-structure-triangulation","title":"Scene Structure: Triangulation","text":"<p>TODO</p> <p>In praxis, usually there will not be a point that satifies both contraints, since there is noise. This is solved by using a direct linear transform, which performs a least square problem.</p>"},{"location":"24FS/VC2/Computer%20Vision/3D%20Reconstruction%20Pipeline.html#sequential-structure-from-motion","title":"Sequential Structure from Motion","text":""},{"location":"24FS/VC2/Computer%20Vision/Intro.html","title":"RectifyIntro","text":"<p>Pr\u00fcfung:</p> <p>Mischung zwischen K-Prime Fragen und offene Frage. </p> <p>Es wird eine grosse Aufgabe (f\u00fcr den zweiten Teil und vermutlich auch f\u00fcr den ersten Teil) geben, bei welche man ein Problem gekommt (z.B. man bekommt ein Bild von einem Sudoku und muss etwas anaylsieren und das beschreiben)</p> <p>Philip Ackermann macht auch gerne Fragen, bei welchen man Code analysieren muss.</p> <p></p> <p></p> <p>There are multiple way to recover the 3D information. A big distinction is made between active, where something is sent out and then measured (e.g. LIDAR, part of FaceID, ...), and passive, where information is only measured. </p> <p>Passiv-unidirectional are techniques, where only one image is involved.</p> <p>The following is an example from Shape from X: </p> <p>Shape from focus is when the focus of an image changes and from this change, one can recover 3D information.</p>"},{"location":"24FS/VC2/Computer%20Vision/Intro.html#displaying-3d","title":"Displaying 3D","text":"<p>To see images in 3D, we need to show two different pictures to each eye. This can be done with primitive 3D glasses. VR headset work in the same way.</p>"},{"location":"24FS/VC2/Computer%20Vision/Intro.html#3d-to-2d","title":"3D to 2D","text":"<p>The world coordinate system spans the entire world/scene. The coordinate system is centred on the camera and might be transformed and rotated.</p> <p>After projecting the world to a surface, the image plane coordinate system describes where something is after the projection. This later gets rasterized, yielding the digitised pixel coordinate system.</p> <p>See the following to play around with this: http://ksimek.github.io/perspective_camera_toy.html</p>"},{"location":"24FS/VC2/Computer%20Vision/Intro.html#extrinsic-camera-parameters","title":"Extrinsic Camera Parameters","text":"<p>The following equation transforms coordinates into the camera coordinate system. $$ P_C = R(P_W - T) $$ Where \\(P_C\\) is the position in the camera coordinate system, \\(R\\) is the rotation to align \\(P_C\\) with the axis and \\(T\\) to translate \\(P_C\\) to align with the origin.</p> <p>In the following, \\(r\\) is the rotation matrix and \\(tX\\) is the translation. $$ \\begin{pmatrix}     X\\     Y\\     Z\\     1 \\end{pmatrix} \\approx \\begin{pmatrix}     r_{11} &amp; r_{12} &amp; r_{12} &amp; 0 \\     r_{21} &amp; r_{22} &amp; r_{22} &amp; 0 \\     r_{31} &amp; r_{32} &amp; r_{32} &amp; 0 \\     0 &amp; 0 &amp; 0 &amp; 1 \\end{pmatrix}</p> \\[\\begin{pmatrix}     1 &amp; 0 &amp; 0 &amp; -tx \\\\     0 &amp; 1 &amp; 0 &amp; -ty \\\\     0 &amp; 0 &amp; 1 &amp; -tz \\\\     0 &amp; 0 &amp; 0 &amp; 1 \\end{pmatrix}\\] <p>\\begin{pmatrix}     U\\     V\\     W\\     1 \\end{pmatrix} $$</p>"},{"location":"24FS/VC2/Computer%20Vision/Intro.html#intrinsic-camera-parameters","title":"Intrinsic Camera Parameters","text":"<p>Contains: </p> <ul> <li>focal length</li> <li>axis skew</li> </ul> <p>(rotation is handled by the extrinsic camera matrix)</p> <p></p> <p>The dot symbolises the centre of the coordinate system. \\(f\\) is the focal length, or put simple, the distance between the image plane and the camera position. Through the inequality</p> <p></p> <p>To calculate from the camera coordinate system to the image plane coordinate system. $$ \\begin{pmatrix}     x\\     y\\     1 \\end{pmatrix} \\approx</p> \\[\\begin{pmatrix}     f_x &amp; 0 &amp; 0 &amp; 0 \\\\     0 &amp; f_y &amp; 0 &amp; 0 \\\\     0 &amp; 0 &amp; 1 &amp; 0\\\\ \\end{pmatrix}\\] <p>\\begin{pmatrix}     X\\     Y\\     Z\\     1 \\end{pmatrix} $$ In order to get a \\(1\\) in the \\(z\\) position of the result, the vector needs to be homginzed. To do this, one needs to divide by \\(z\\)\u200b, giving us the same formula as above.</p> <p>Some more information: http://ksimek.github.io/2013/08/13/intrinsic/</p>"},{"location":"24FS/VC2/Computer%20Vision/Intro.html#rasterize","title":"Rasterize","text":"<p>$$ \\begin{pmatrix}     u\\     v\\     1 \\end{pmatrix} \\approx</p> \\[\\begin{pmatrix}     a_{11} &amp; a_{12} &amp; a_{13} \\\\     a_{21} &amp; a_{22} &amp; a_{23} \\\\     0 &amp; 0 &amp; 1 \\end{pmatrix}\\] \\[\\begin{pmatrix}     x\\\\     y\\\\     1\\\\ \\end{pmatrix}\\] <p>= \\begin{pmatrix}     \\frac 1 {s_x} &amp; 0 &amp; o_x \\     0 &amp; \\frac 1 {s_y} &amp; o_y \\     0 &amp; 0 &amp; 1 \\end{pmatrix}</p> <p>\\begin{pmatrix}     x\\     y\\     1\\ \\end{pmatrix} $$</p> <p></p>"},{"location":"24FS/VC2/Computer%20Vision/Intro.html#put-it-together","title":"Put it together","text":"<p>$$</p> <p>$$</p> <p>$$ \\begin{align} \\begin{pmatrix}     u\\     v\\     1 \\end{pmatrix} &amp;\\approx</p> \\[\\begin{pmatrix}     a_{11} &amp; a_{12} &amp; a_{13} \\\\     a_{21} &amp; a_{22} &amp; a_{23} \\\\     0 &amp; 0 &amp; 1 \\end{pmatrix} \\begin{pmatrix}     f &amp; 0 &amp; 0 &amp; 0 \\\\     0 &amp; f &amp; 0 &amp; 0 \\\\     0 &amp; 0 &amp; 1 &amp; 0\\\\ \\end{pmatrix} \\begin{pmatrix}     r_{11} &amp; r_{12} &amp; r_{12} &amp; 0 \\\\     r_{21} &amp; r_{22} &amp; r_{22} &amp; 0 \\\\     r_{31} &amp; r_{32} &amp; r_{32} &amp; 0 \\\\     0 &amp; 0 &amp; 0 &amp; 1 \\end{pmatrix}\\] \\[\\begin{pmatrix}     1 &amp; 0 &amp; 0 &amp; -tx \\\\     0 &amp; 1 &amp; 0 &amp; -ty \\\\     0 &amp; 0 &amp; 1 &amp; -tz \\\\     0 &amp; 0 &amp; 0 &amp; 1 \\end{pmatrix}\\] <p>\\begin{pmatrix}     U\\     V\\     W\\     1 \\end{pmatrix} \\ &amp;= \\begin{pmatrix}     \\frac f {s_x} &amp; 0 &amp; o_x &amp; 0 \\     0 &amp; \\frac f {s_y} &amp; o_y &amp; 0 \\     0 &amp; 0 &amp; 1 &amp; 0\\ \\end{pmatrix} \\begin{pmatrix}     r_{11} &amp; r_{12} &amp; r_{12} &amp; -t_x \\     r_{21} &amp; r_{22} &amp; r_{22} &amp; -t_y \\     r_{31} &amp; r_{32} &amp; r_{32} &amp; -t_z \\     0 &amp; 0 &amp; 0 &amp; 1 \\end{pmatrix} \\begin{pmatrix}     U\\     V\\     W\\     1 \\end{pmatrix} \\ &amp;= K \\cdot [R \\mid T] \\cdot P \\end{align} $$</p> <p></p>"},{"location":"24FS/VC2/Computer%20Vision/Intro.html#camera-calibration","title":"Camera Calibration","text":""},{"location":"24FS/VC2/Computer%20Vision/Intro.html#radiometric","title":"Radiometric","text":"<p>There are artifacts, like vignetting and \"hot\" pixel (pixel has always current) &amp; dead pixel (pixel doesn't built up current).</p> <p></p> <p>To compensate, record a completely white image and a completely black image. Then average them together. $$ \\frac{I-B}{W}\\cdot mean(W) $$</p> <p></p> <p>(I is the actual image, B the black image, W the white image)</p>"},{"location":"24FS/VC2/Computer%20Vision/Intro.html#geometric","title":"Geometric","text":"<p>The goal is to find the intrinsic and extrinsic parameters (e.g. camera position, brennweite/focal length, ...)</p> <p></p> <p>The goal is to find points in the checker board in the camera view. This is done for multiple images. As one can seen, this done on a sub-pixel level.</p> <p></p> <p>Importantly, the focal length is a pixel value and not in milimeter. To get the actual unit, we need data about the sensor. $$ \\begin{align} sensorSize &amp;= 16mm^2=4.5mm \\cdot 3.5mm\\ \\frac f {s_x} &amp;= 600px \\ \\Rightarrow f&amp;=600px \\cdot \\frac{w_{sensor}}{w_{pixel}} \\ &amp; = 600 px \\cdot \\frac{4.5mm}{640px} \\approx 4.2mm \\end{align} $$ First, the equations are simplified, to ensure that all points are on a plane:</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>The above is named direct linear transform (DLT) (https://www.baeldung.com/cs/direct-linear-transform)</p> <p>In conclusion, we need at least 4 points per plane and 3 different views of a plane.</p>"},{"location":"24FS/VC2/Computer%20Vision/Intro.html#marker-tracking","title":"Marker Tracking","text":"<p>Marker tracking can be done in the same way as the calibration with the cheker board. We can get \\(H\\) again, and since we know \\(K\\) from the calibration, we can calculate \\(K^{-1}\\cdot H=[r_1, r_2, t]\\). To get \\(r_3 = r_1 \\times r_2\\) (since \\(r_r\\) is vertically on the \\(r_1\\) and \\(r_2\\)\u200b).</p> <p>The following shows the typical marker tracking pipeline.</p> <p> </p> <p>Since the approach with homography jitters a lot, most tracking system use a perspective-\\(n\\)-point (PnP) algorithm. This needs four 2d-3d correspaondences. </p>"},{"location":"24FS/VC2/Computer%20Vision/Intro.html#stereo","title":"Stereo","text":"<p>With stereo, an algorithm takes two pictures and calculates a depth map. The 2.5D image shows where each pixel, according to the depth map, is in room. However, it is not 3D, since one cannot move around and see the back of the model.</p> <p></p> <p>The model is as seen in the diagram above. The left camera is at \\((0, 0, 0)\\) where as the camera B is transformed on one axis by \\(B\\).</p> <p>The following matrix is for the left cam. The left cam is at the origin.</p> <p></p> <p>The right cam is the same as the left cam, but shifted by \\(-B\\)</p> <p></p> <p>These two equations can be used to solve for the depth for a given point in the scene.</p> <p></p> <p></p>"},{"location":"24FS/VC2/Computer%20Vision/Intro.html#accuracy-and-baseline","title":"Accuracy and Baseline","text":"<p>When the distance between the two cameras or the focal length  is small, then there is a bigger overlap in what both camera see. However the accuracy far away decreases. On the other hand, if the cameras are far from each other and the baseline is big, or the focal length is long, then the accuracy is better, but the cameras have less of an overlap decreasing the area where points overlap.</p> <p>The human eyes are at a distance of about 6cm and are able to see in 3D for 10m.</p>"},{"location":"24FS/VC2/Computer%20Vision/Intro.html#find-matches","title":"Find matches","text":"<p>To find a match, one has to find a match on the same line. This reduces the problem space to a 2D line.</p> <p>Since this line is important, it is named epipolar line. </p> <p>Depending where on the line the point has been found, the depth changes accordingly.</p> <p>For accurate tracking with this methods, it is important that the images are accurate and that the horizontal axis is the same. This is because the algorithm scans only the epipolar line for matches and won't find any if the epipolar lines don't match up between the two images. </p> <p>One requires at least 4 good points to be able to recover 3D data.</p> <p></p> <p>One approach is to take a patch, and do normalised cross correlation on the epipolar line. The score is shown in the diagram. Where the score peeks, there is our match.</p> <p></p> <p>The left rectangle is black, because only one camera can see it. Similarly, The smaller rectangle in the middle can only be seen from one camera, since they have a slightly different perspective.</p>"},{"location":"24FS/VC2/Computer%20Vision/Intro.html#general-case","title":"General Case","text":"<p>The assumption is that the cameras are calibrated and as such the intrinsic and extrinsic cameras are known.</p> <p></p> <p>The epipolar plane between where the point \\(P\\) could be and the two camera. Where the epipolar plane cuts through the camera, there is the epipolar line. Importantly, the epipolar line isn't necessarily horizontal.</p> <p></p> <p></p> <p>(\\(E\\) is a 3x3 matrix, and \\(p_r\\) and \\(p_l\\) are 3D vectors)</p> <p></p> <p></p> <p>Therefore, the fundamental matrix is used for uncalibrated cameras, while the essential matrix is used for calibrated cameras. Another difference is the number of degrees of freedom (DoF). \\(\\mathrm{F}\\) has 7 DoF, while \\(\\mathrm{E}\\) has 5 DoF since it considers the cameras\u2019 intrinsic parameters.</p> <p>In the example below, the epipolar lines are drawn in green:</p> <p></p> <p>One needs 8 pairs of corresponding points to compute \\(F\\) linearly, using the 8-point method. If one is working with calibrated cameras, the 5-point algorithm can be used, which only requires 5 pairs of points. Since there might by many mismatches, \\(F\\) is often found via RANSAC.</p> <p>Another approach is to use three camera. This gives us trifocal tensor.</p> <p>https://www.baeldung.com/cs/fundamental-matrix-vs-essential-matrix</p>"},{"location":"24FS/VC2/Computer%20Vision/Markerless.html","title":"Markerless","text":""},{"location":"24FS/VC2/Computer%20Vision/Markerless.html#marker-vs-markerless-tracking","title":"Marker vs Markerless Tracking","text":""},{"location":"24FS/VC2/Computer%20Vision/Markerless.html#scale-invariant-feature-transform-sift","title":"Scale Invariant Feature Transform (SIFT)","text":"<p>To do markerless tracking, one needs a template in advance (in this example the basmati rice). The algorithm then finds  points of interest. </p> <p>Interests points should be of quality, stable and robust with respect to perspective distortions, illuminations, etc. Additionally, since there are a lot of points, if part of the template is occluded, the algorithm can still resolve its position in an image, since there are still enough points of interest.</p> <p>These points of interest are then found in the image and matched.</p> <p>For SIFT to work well, the template needs to be distinctive</p> <p> </p>"},{"location":"24FS/VC2/Computer%20Vision/Markerless.html#feature-detection","title":"Feature Detection","text":"<p>To find points, a laplacian of gaussian kernel can be slided over the image and record where it fits. This finds bright spots, surrounded by a dark surrounding. There are multiple ways, how to do this quickly. </p> <p>Because of this, SIFT is scale invariant, as the scale can change and the filter will still find the same spots.</p> <p></p> <p>To find the rotation, every vector is summed together and find overall main rotation. The vector field avoid is not temporal, rather it is how the grayscale image changes from left to right, and top to bottom.</p> <p></p> <p>The position can be described by splitting the gradient in four quadrants and binning each quadrant with 8 bins. This gives us 128 dim descriptors, that describe the position.</p>"},{"location":"24FS/VC2/Computer%20Vision/Markerless.html#feature-matching","title":"Feature Matching","text":"<p>Feature matching is finding a point of interest of the template in the image. For this, the algorithm needs to find the closest matching 128 dim descriptor from above.</p> <p>An algorithm needs to find the nearest neighbour in the the descriptor space (not the image space). </p> <p>To reduce noise, the ratio between the first nearest neighbour and the second nearest neighbour needs to be big enough.</p> <p>Feature matching is made difficult by the shear amount of outliers. This can be reduced by Random Sampling Consensus (RANSAC). In the example below, a line is used as a model. However, for feature matching a plane is used. More concretely, the equations (homography) from Intro can as a model.</p>"},{"location":"24FS/VC2/Computer%20Vision/Markerless.html#random-sampling-consensus-ransac","title":"Random Sampling Consensus (RANSAC)","text":"<p>The input are: </p> <ul> <li>a set of data points \\(U\\)</li> <li>a function which computes the models parameters given some sample \\(S \\sub U\\)\u200b</li> <li>a cost function for a single point in \\(U\\)</li> </ul> <p></p> <p>In the third step, the algorithm checks how accurate the thesis created by (2) is. </p> <p>This is done multiple times, and the model with the most inliers is chosen.  </p> <p>a)</p> <ol> <li>Zuerst muss Feature Detection (e.g. mit SIFT) auf den einzelnen Bildern durch gef\u00fchrt werden</li> <li>Danach muss die Essential-Matrix und Fundamental-Matrix errechnet werden.  Damit kann die Kamera Position und Rotation berechnet werden</li> <li>Wenn die Position und Rotatioon der Cameras bekannt ist, kann nun die Tiefe  der Punkte berechnet werden und eine Punkte Wolke daraus erechnet  werden.</li> <li>Bundle Adjust ist der Schritt, in welchem weitere Bilder ben\u00fctzt werden, um die Punktewolke zu verbesseren </li> <li>Nun kann eine Dense Point Cloud erechnet werdne</li> <li>Mit dieser kann im letzten Schritt die Fl\u00e4chen wieder hergestellt werden</li> </ol> <p>b) </p> <p>Um die Essential-Matrix zu bekommen muss zuerst die Fundamental-Matrix  gescht\u00e4tz werden. Daf\u00fcr wird meistens der RANSAC algorithmus verwendet.  Es gibt auch die 8-Point methode, allerdings, da die Features  automatisch aus zwei Bildern extrahiert wurden, gibt es meistens viel  Noise. RANAC kann mit dem gut umgehen. </p> <p>Wenn die Fundamental Matrix bekannt ist, kann mit hilfe der  Kallibrierungsdaten der Kamera die Essential-Matrix berechnet werden ().</p> <p>Danach kann die Essential-Matrix als E=R * S decomposed werden, wobei R eine Rotations-Matrix ist und S die Position enthaltet.</p> <p>Folgendes ist die Definition von S.</p> <p></p>"},{"location":"24FS/VC2/Computer%20Vision/NeRFs%20%26%20Gaussian%20Splats.html","title":"NeRFS (Neural Radiant Fields)","text":"<p>With NeRFS, the scene is encoded in a neural network.</p> <p>Importantly, NeRFS still calculate the fundamental matrix, since the camera position needs to be known.</p>"},{"location":"24FS/VC2/Computer%20Vision/NeRFs%20%26%20Gaussian%20Splats.html#volumetric-rendering","title":"Volumetric Rendering","text":"<p>http://www.youtube.com/watch?v=JuH79E8rdKc&amp;t=9 </p> <p></p> <p>At each point on the line, the neural network is sampled. All of these points are averaged together. </p> <p>To train the neural network, the loss function is defined as the difference between the averaged coloured and the actual colour.</p> <p>One advantage is, that such a model can model things like highlights of a material or the transparency of a material. In the previous methods, each point could only have one colour. </p> <p>A disadvantage of NeRF is that is really slow and doesn't handle unconstrained views well.</p> <p>A NeRFS neural network should be overfitted, since it should not generalise to other viewes, but return the same views again.</p> <p>A NeRFS neural network should be overfitted, since it should not generalise to other viewes, but return the same views again.</p>"},{"location":"24FS/VC2/Computer%20Vision/NeRFs%20%26%20Gaussian%20Splats.html#gaussian-splats","title":"Gaussian Splats","text":"<p>http://www.youtube.com/watch?v=VkIJbpdTujE&amp;t=80</p> <p></p> <p>In comparison to NeRFs, gaussian splatting uses a eliphtical shape instead of dots. This has the advantage that we know how to render this with our current technology stack fast.</p> <p>Initially, a point cloud is taken and each point is diffused into an ellipsoid. This marks the initial model. Then, gradient descent is used to optimise the the model.</p>"},{"location":"24FS/VC2/Computer%20Vision/Pose%20Tracking.html","title":"Pose Tracking","text":""},{"location":"24FS/VC2/Computer%20Vision/Pose%20Tracking.html#decision-tree-forest","title":"Decision Tree Forest","text":"<p>Using Decision Forests are quick and the resulting algorithm works well. The Kinect, for example, does the same thing.</p>"},{"location":"24FS/VC2/Computer%20Vision/Pose%20Tracking.html#top-down","title":"Top Down","text":"<p>When doing it top down, first bounding boxes of people are found. Then, in those bounding boxes, the poses are detected. </p> <p>However, this approach is slow and has problems with occluded body parts.</p>"},{"location":"24FS/VC2/Computer%20Vision/Pose%20Tracking.html#bottom-up","title":"Bottom Up","text":"<p>In this approach, first the joints are detected. Then, holistically, the joints can be connected.</p> <p>This is a lot quicker and is the approach which is used today. Furthermore, the bottom up approach has less issues with occluded body parts.</p>"},{"location":"Allgemein/Architecture/Functional%20Programming.html","title":"Functional Programming","text":""},{"location":"Allgemein/Architecture/Functional%20Programming.html#parse-dont-validate","title":"Parse, don't validate","text":"<p>source: https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/</p> <p>The basic premise of this pattern to parse the input of a system once when it enters the system into a data structure, rather than validating it over and over again. Put differently, when parsing, the information that the input is valid is stored in the data structure, while with validating, the original data structure isn't changed. Rather, the program checks that the data is valid. But this gained information isn't stored in the type system, effectively throwing it away. However, for this to work, the data structure must be as restrictive as possible. </p>"},{"location":"Allgemein/Architecture/Functional%20Programming.html#pushing-responsibility-up-and-down-the-call-chain","title":"Pushing Responsibility up and down the Call-Chain","text":"<p>source: https://www.parsonsmatt.org/2017/10/11/type_safety_back_and_forth.html</p> <p>One can also think of pushing parsing up and down the information chain. When we think of a function which returns the head of a list. The most simple type signature (<code>head :: [a] -&gt; a</code>) is not total, meaning if we pass an empty list to this head, it will fail with an runtime error. To make this more safe, we can change the signature to <code>head :: [a] -&gt; Maybe a</code>. This second version passes the responsibility of dealing with the case of the empty list down stream to the callee. However, we can also push this responsibility up stream by accepting more restrictive parameter types. For example, the signature can be changed as following: <code>head :: NonEmptyList a -&gt; a</code>. Now the caller is required to first check if the list is non-empty (or the caller already gets a non-empty list). </p> <p>Pushed to the extreme, this leads to \"Parse, don't validate\"-pattern, since we parse the input into a data structure, which disallows any invariants.</p>"},{"location":"Allgemein/Architecture/Functional%20Programming.html#fake-parser","title":"Fake Parser","text":"<p>Sometimes the type system doesn't allow us to encode certain restrictions. For example an integer which cannot be zero. We can fake our way there by creating a new type which wraps an int and only allows constructing if the int is non-zero. Therefore, if get such a <code>NonZeroInt</code>, we know it cannot be zero since there is no way to construct such instance:</p> <pre><code>newtype NonZeroInt = NonZeroInt Int\n\nparseInt :: Int -&gt; Maybe NonZeroInt\n</code></pre>"},{"location":"Allgemein/Haskell/Data%20Classes.html","title":"Data Classes","text":""},{"location":"Allgemein/Haskell/Data%20Classes.html#semi-group","title":"Semi-Group","text":"<pre><code>class Semigroup a where\n    (&lt;&gt;) :: a -&gt; a -&gt; a\n</code></pre> <p>A semigroup is a data type which has a associative binary operation (like <code>+</code>). The operation of a semigroup should be associative (<code>(a &lt;&gt; b) &lt;&gt; c == a &lt;&gt; (b &lt;&gt; c)</code>).</p> <p>Every <code>Monoid</code> is a semigroup.</p>"},{"location":"Allgemein/Haskell/Data%20Classes.html#monoid","title":"Monoid","text":"<p>Haskall defines a monoid in the following way:</p> <pre><code>class Semigroup a =&gt; Monoid a where\n   mempty :: a\n   mappend :: a -&gt; a -&gt; a\n   mconcat :: [a] -&gt; a\n</code></pre> <p><code>&lt;&gt; :: a -&gt; a -&gt; a</code> is an alias for <code>mappend</code></p> <p>A monoid is a thing which has two rules:</p> <ol> <li> <p>It has an identity value    In algebra for <code>+</code> the identity value is <code>0</code>, for multiplication it is <code>1</code>    $$    0 + a = a\\    1 \\cdot a = a    $$</p> </li> <li> <p>It is associative    $$    (a+b)+c=a+(b+c)\\    (a\\cdot b)\\cdot c=a\\cdot (b\\cdot c)    $$</p> </li> </ol> <p>Here are some examples for monoids:</p> <ul> <li>List/String: <code>[a]</code></li> </ul> <pre><code>[] ++ [1, 2, 3] == [1, 2, 3]\n([1, 2] ++ [3, 4]) ++ [5, 6] = [1, 2] ++ ([3, 4] ++ [5, 6])\n</code></pre> <ul> <li>Maybe: <code>Semigroup a =&gt; Maybe a</code></li> </ul> <pre><code>Just (Sum 3) `mappend` Nothing == Just (Sum 3)\nmempty :: Maybe (Sum Int) == Nothing\n</code></pre> <ul> <li>Numbers: <code>Num a =&gt; Sum a</code> / <code>Num a =&gt; Product a</code></li> </ul> <pre><code>Sum 3 `mappend` Sum 4 == 7\nmempty :: Sum Int = 0\nProduct 3 `mappend` Sum 2 == 6\nmempty :: Product Int = 0\n</code></pre> <ul> <li> <p>IO</p> </li> <li> <p>All/Any: </p> </li> </ul> <pre><code>-- implements &amp;&amp;\nmempty :: All == Any True\nAll True &lt;&gt; All False == All False\nAll True &lt;&gt; All True == All True\n-- implement ||\nmempty :: Any == Any False\nAny True &lt;&gt; Any False == Any True\nAny False &lt;&gt; Any False == Any False\n</code></pre>"},{"location":"Allgemein/Haskell/Data%20Classes.html#dual-monoid","title":"Dual Monoid","text":"<p>The <code>Dual a</code> monoid will flip the order of the <code>mappend</code> (aka <code>&lt;&gt;</code>) operator. For this to work, <code>a</code> has to be a <code>Monoid</code> as well.</p> <pre><code>Dual \"hello\" &lt;&gt; Dual \" \" &lt;&gt; Dual \"world\" -- will return Dual \"world hello\"\ngetDual (Dual \"hello\" &lt;&gt; Dual \" \" &lt;&gt; Dual \"world\") -- will return \"world hello\"\nDual [4..6] &lt;&gt; Dual [1..3] -- will return Dual [1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"Allgemein/Haskell/Data%20Classes.html#functor","title":"Functor","text":"<p>A <code>Functor</code> is a data type which can be mapped over.</p> <pre><code>class Functor f where\n    fmap :: (a -&gt; b) -&gt; f a -&gt; f b\n    (&lt;$) :: a -&gt; f b -&gt; f a\n</code></pre> <p><code>fmap</code> and <code>(&lt;$)</code> are the same function but with diffrent argument ordering. They will map from <code>f a</code> to <code>f b</code>. <code>&lt;$&gt;</code> is a synonym of <code>fmap</code> but as a infix operator.</p>"},{"location":"Allgemein/Haskell/Data%20Classes.html#laws","title":"Laws","text":"<p>A <code>Functor</code> should follow the following laws:</p> <ul> <li><code>fmap id = id</code>   Using the <code>id</code> function with <code>fmap</code> should return the unmodifies object</li> <li><code>fmap (f . g) == fmap f . fmap g</code>   It shouldn't matter if the mapping functions are composed together first and then mapped or the <code>fmap</code> are composed</li> </ul>"},{"location":"Allgemein/Haskell/Data%20Classes.html#applicative","title":"Applicative","text":"<pre><code>class Applicative f where\n    {-# MINIMAL pure, ((&lt;*&gt;) | lift2A) #-}\n    pure :: a -&gt; f a\n    (&lt;*&gt;) :: f (a -&gt; b) -&gt; f a -&gt; f b\n    lift2A :: (a -&gt; b -&gt; c) -&gt; f a -&gt; f b -&gt; f c\n</code></pre> <p><code>Applicative</code>s are like <code>Functor</code> in that they apply a mapping function to a box value. With a <code>Applicative</code> the function is also a boxed value. This is useful to map functions with more than one argument to a boxed value. If <code>&lt;$&gt;</code> (aka <code>fmap</code>) is used to apply a value to a function with two parameters, you get the following: <code>(+) &lt;$&gt; Just 5 == Just (+5)</code>. This can be combined with <code>&lt;*&gt;</code> in the following way:</p> <pre><code>(+) &lt;$&gt; Just 5 &lt;*&gt; Just 3 -- will return Just 8\nlift2A (+) (Just 5) (Just 3) -- will return Just 8\n</code></pre> <p>An <code>Applicative</code> also defines the function <code>pure</code> which boxes a value. </p> <p>There are also some helper functions:</p> <ul> <li><code>(*&gt;) :: f a -&gt; f b -&gt; f b</code>   Discard the first argument (but still \"runs\" it) and only return the value of the second applicative</li> </ul> <pre><code>Just 3 *&gt; Just 5 -- will return Just 5\nNothing *&gt; Just 5 -- will return Nothing\nJust 3 *&gt; Nothing -- will return Nothing\n</code></pre> <ul> <li><code>&lt;* :: fa -&gt; fb -&gt; fa</code>   Discards the second argument (but still \"runs\" it) and only return the value of the first applicative</li> </ul> <pre><code>Just 3 &lt;* Just 5 -- will return Just 3\nNothing &lt;* Just 5 -- will return Nothing\nJust 3 &lt;* Nothing -- will return Nothing\n</code></pre> <ul> <li><code>liftA3 :: Applicative f =&gt; (a -&gt; b -&gt; c -&gt; d) -&gt; f a -&gt; f b -&gt; f c -&gt; f d</code>    Works the same as <code>liftA2</code> but accepts a function with three paramters.</li> </ul>"},{"location":"Allgemein/Haskell/Data%20Classes.html#monad","title":"Monad","text":"<pre><code>class Applicative m =&gt; Monad m where\n    (&gt;&gt;=) :: forall a b. m a -&gt; (a -&gt; m b) -&gt; m b\n    (&gt;&gt;) :: forall a b. m a -&gt; m b -&gt; m b \n    return :: a -&gt; m a\n</code></pre> <p>A <code>Monad</code> is similar to an <code>Applicative</code> in that it also allows a boxed value to be mapped. The difference is, that the mapping function of a <code>Monad</code> returns a boxed value as a <code>Monad</code> itself. This can be used to return for example a <code>Nothing</code> instance, if the operation failed, leading to short-circuiting.</p> <p>The <code>&gt;&gt;=</code> operator gets used to chain Monads together. The mapping function gets the boxed value of the input <code>Monad</code> as a parameter. But this isn't always wanted (like with <code>putStrLn</code> which returns <code>IO ()</code>). In those cases <code>&gt;&gt;</code> can be used. <code>return</code> is often a synonym to <code>pure</code> of <code>Applicative</code></p> <pre><code>half :: Int -&gt; Maybe Int\nhalf x = if even x \n            then Just (x `div` 2)\n            else Nothing\n\nJust 3 &gt;&gt;= half -- will return Nothing\nJust 4 &gt;&gt;= half -- will return Just 2\nJust 4 &gt;&gt;= half &gt;&gt;= half -- will return Just 1\nJust 4 &gt;&gt;= half &gt;&gt;= half &gt;&gt;= half -- will return Nothing\n\nputStrLn \"hello\" &gt;&gt;= (\\_ -&gt; putStrLn \"world\")\nputStrLn \"hello\" &gt;&gt; putStrLn \"world\"\n-- both print:\n-- hello\n-- world\n</code></pre>"},{"location":"Allgemein/Haskell/Data%20Classes.html#monad-transformer","title":"Monad Transformer","text":"<pre><code>class (forall m. Monad m =&gt; Monad (t m)) =&gt; MonadTrans t where\n    lift :: Monad m =&gt; m a -&gt; t m a\n</code></pre> <p>A monad transformer enhances a \"base monad\" <code>m</code> with some functionality. For example the <code>ExceptT</code> type enhances a monad with the <code>Either</code> monad allowing it to short-circuit in case of an error.</p> <p>The <code>lift</code> method can be used to access the base monad.</p> <pre><code>addIfPositive :: Int -&gt; ExceptT String (State Int) Int\naddIfPositive i = do\n  n &lt;- lift get\n  if n &gt;= 0\n    then lift (put $ n + 1) &gt;&gt; lift get\n    else throwE $ (show n) ++ \" is negative\"\n</code></pre> <p>In the example above <code>addIfPositive</code> will only add the given <code>Int</code> to the internal state if the internal state is positive else an error message is produced and the operation stops (aka. short-circuits). <code>lift get</code> is used to access the state in the do-Block.</p> <p>Monads are usually defined with their monad transformer. The <code>Except</code> monad for example is defined as <code>type Except e a = ExceptT e (Identity a)</code></p>"},{"location":"Allgemein/Haskell/Data%20Classes.html#foldable","title":"Foldable","text":"<pre><code>class Foldable t where\n    {-# MINIMAL foldMap | foldr #-}\n\n    foldMap :: Monoid m =&gt; (a -&gt; m) -&gt; t a -&gt; m\n    foldMap f = foldr (mappend . f) mempty\n\n    foldr :: (a -&gt; b -&gt; b) -&gt; b -&gt; t a -&gt; b\n    foldr f z t = appEndo (foldMap (Endo #. f) t) z\n\n    -- and a number of optional methods\n</code></pre> <p>A <code>Foldable</code> is a container type which allows to access its elements in a well-defined order. To instance a <code>Foldable</code> either <code>foldMap</code> or <code>foldr</code> has to be defined, but there are more optional methods.</p> <p>Here are some of the useful methods, which can be used with a <code>Foldable</code> structure:</p> <ul> <li><code>foldMap :: (Foldable t, Monoid m) =&gt; (a -&gt; m) -&gt; t a -&gt; m</code>   With <code>foldMap</code> a <code>Foldable</code> structure can be folded. For this, the type contained in the <code>Foldable</code> needs to be an instance of <code>Monoid</code></li> </ul> <pre><code>foldMap Product [1..4] -- will return 24\nfoldMap Sum [1..4] -- will return 10\n</code></pre> <ul> <li> <p><code>length :: Foldable t =&gt; t a -&gt; Int</code>   Returns the length of a foldable structure</p> </li> <li> <p><code>toList :: Foldable t =&gt; t a -&gt; [a]</code>   Will flatten the <code>Foldable</code> to a list</p> </li> <li> <p><code>traverse_ :: (Foldable t, Applicative f) =&gt; (a -&gt; f b) -&gt; t a -&gt; f ()</code> / <code>for_ :: (Foldable t, Applicative f) =&gt; t a -&gt; (a -&gt; f b) -&gt; f ()</code>   Allows to execute an <code>Applicative</code> for every element. This could be a side-effect. Both <code>traverse_</code> and <code>for_</code> do the same thing, but have their arguments flipped</p> </li> </ul> <pre><code>traverse_ (putStrLn . show) [1..3]\nfor_ [1..3] (putStrLn . show)\n-- both will print:\n-- 1\n-- 2\n-- 3\n</code></pre> <ul> <li><code>sequenceA_ :: (Foldable t, Applicative f) =&gt; t (f a) -&gt; f ()</code> <code>sequenceA_</code> will execute each <code>Applicative</code> in the <code>Foldable</code> and throw the result away</li> </ul> <pre><code>sequenceA_ [putStrLn \"hello\", putStrLn \"world\"]\n-- will print:\n-- hello\n-- world\n</code></pre> <ul> <li><code>null :: Foldable t =&gt; t a -&gt; Bool</code> <code>null</code> checks if the given <code>Foldable</code> is empty</li> </ul> <pre><code>null [] -- will return True\nnull [1..4] -- will return False\n</code></pre>"},{"location":"Allgemein/Haskell/Data%20Classes.html#traversable","title":"Traversable","text":"<pre><code>class (Functor t, Foldable t) =&gt; Traversable t where\n    {-# MINIMAL traverse | sequenceA #-}\n\n    traverse :: Applicative f =&gt; (a -&gt; f b) -&gt; t a -&gt; f (t b)\n    traverse f = sequenceA . fmap f\n\n    sequenceA :: Applicative f =&gt; t (f a) -&gt; f (t a)\n    sequenceA = traverse id\n\n    mapM :: Monad m =&gt; (a -&gt; m b) -&gt; t a -&gt; m (t b)\n    mapM = traverse\n\n    sequence :: Monad m =&gt; t (m a) -&gt; m (t a)\n    sequence = sequenceA\n</code></pre> <p>An instance of a <code>Traversable</code> alows a data structure to work easily with <code>Applicative</code>s and <code>Monad</code>s</p> <p>The <code>sequenceA</code> function takes a <code>Foldable</code>, which has <code>Applicative</code>s nested (like <code>[Just 1, Just 2, Nothing]</code>). <code>traverse</code> on the other hand takes a <code>Foldable</code> of elements and a mapping function, which will map the elements to <code>Applicative</code> resulting in a <code>Foldable</code> which has <code>Applicative</code> nested. </p> <p>Example: <code>[1, 2, 3]</code> with the mapping function <code>Just</code> will result in <code>[Just 1, Just 2, Just 3]</code> which would be an valid input for <code>sequenceA</code>.</p> <p>Here are some useful methods, which can be used with a <code>Traversable</code> structure:</p> <ul> <li><code>traverse :: (Traversable t, Applicative f) =&gt; (a -&gt; f b) -&gt; t a -&gt; f (t b)</code> <code>traverse</code> will apply the given function to every element of the <code>Traversale</code> structure and execute the returned <code>Applicative</code>. The results are returned wrapped in the <code>Applicative</code></li> </ul> <pre><code>traverse print [1, 2] -- has the type :: IO [()]\n-- will print:\n-- 1\n-- 2\n-- and will return IO [(), ()]\ntraverse Sum [1, 2] -- will return Sum [1, 2]\n</code></pre> <ul> <li><code>sequenceA :: (Traversable t, Applicative f) =&gt; t (f a) -&gt; f (t a)</code> <code>sequenceA</code> executes all <code>Applicative</code>s in a <code>Traversable</code> structure and wraps them in the <code>Applicative</code></li> </ul> <pre><code>sequenceA [print \"hello\", print \"world\"] -- has the type :: IO [()]\n-- will print:\n-- hello\n-- world\n-- and will return IO [(), ()]\nsequenceA [Sum 1, Sum 5] -- will return Sum [1, 5]\nsequenceA [(+3),(*2),(+6)] :: Num a =&gt; a -&gt; [a]\nsequenceA [(+3),(*2),(+6)] 2 -- will return [5, 4, 8] \n</code></pre> <ul> <li> <p><code>mapM :: Monad m =&gt; (a -&gt; m b) -&gt; t a -&gt; m (t b)</code>   An alias for <code>traverse</code> which exists because <code>Applicative</code> wasn't always a super class of <code>Monad</code></p> </li> <li> <p><code>sequence :: Monad m =&gt; t (m a) -&gt; m (t a)</code></p> </li> </ul> <p>An alias for <code>sequenceA</code> which exists because <code>Applicative</code> wasn't always a super class of <code>Monad</code></p>"},{"location":"Allgemein/Haskell/Optics.html","title":"Optics","text":""},{"location":"Allgemein/Haskell/Optics.html#capabilities","title":"Capabilities","text":"<p>In the following table the capabilities of each optics is shown.</p> Lens Traversal Fold Get Single Many Many Set/Modify Single Many Nope Traverse Single Many Nope"},{"location":"Allgemein/Haskell/Optics.html#operators","title":"Operators","text":"<p>There is a general patterns applied to most operators in the Optics library. This means that the name of an operator can usually be guessed.</p> Symbol Explenation Example <code>^</code> Denotes that the action views/gets something <code>^.</code> <code>.</code> Denotes the absence of any other modifiers <code>^.</code> <code>%</code> Denotes an actinon which modifies using a function <code>%~</code> <code>~</code> Denotes that this action updates/sets something <code>%~</code>, <code>.~</code> <code>&lt;</code> A prefix for update/set actions, which will return the altered value as well as the whole structure <code>&lt;+~</code> <code>&lt;&lt;</code> A prefix for update/set action, which will return the old value <code>&lt;&lt;+~</code>"},{"location":"Allgemein/Haskell/Optics.html#lenses","title":"Lenses","text":"<p>A lens abstracts the getter and setter into one value. A lens can focus a single type and always returns a type (so a lens can't return <code>a</code> from <code>Either a b</code>, because the type could also be <code>b</code>).</p> <p>Their are two types of lenses:</p> <ul> <li>Simple lens: <code>Lens' s a</code>, where <code>s</code> is the structure and <code>a</code> is the focus type.    This lens always returns the same type as it gets and it can be created with <code>makeLenses</code></li> <li>Polymorphic Lens: <code>Lens s t a b</code>, where <code>s</code> is the input structure, <code>t</code> the output structure, <code>a</code> the input focus and <code>b</code> the output focus.   This type of lenses can change the types of the structure and focus.</li> </ul> <pre><code>data Settings a = Settings {\n        _path :: String, \n        _object :: a\n    } derving (Show)\n\npath :: Lens' Settings a\npath = lens getter setter\n    where\n        getter :: Settings a -&gt; String\n        getter = _path\n        setter :: Settings a -&gt; String -&gt; Settings a\n        setter oldSettings newPath = oldSettings{ _path = newPath }\n\nobject :: Lens (Settings a) -&gt; (Settings b) -&gt; a -&gt; b\nobject = lens getter setter\n    where\n        getter :: Settings a -&gt; a\n        getter = _object\n        setter :: Settings a -&gt; b -&gt; Settings b\n        setter oldSettings newObj = oldSettings{ _object = newObj }\n</code></pre>"},{"location":"Allgemein/Haskell/Optics.html#lens-laws","title":"Lens Laws","text":"<ol> <li>You get back what you set (set-get)    When you set something, you always get the same thing back</li> </ol> <pre><code>view myLens (set myLens newValue structure) == newValue\n</code></pre> <ol> <li>Setting back what you got doesn't do anything (get-set)    When you set what <code>view</code> returned to you, than nothing changes</li> </ol> <pre><code>set myLens (view myLens structure) structure == structure\n</code></pre> <ol> <li>Setting twice is the same as setting once (set-set)    Setting multiple times the same value does always do the same thing</li> </ol> <pre><code>set myLens diffrentValue (set myLens diffrentValue structure) == set myLens diffrentValue structure\n</code></pre>"},{"location":"Allgemein/Haskell/Optics.html#virtual-fields","title":"Virtual Fields","text":"<p>Lenses can be used to provide an abstraction layer above the actual data structure. Virtual Fields can be created by writing custom lens getters and setter. The getter and setter can apply a function to convert the field. </p> <p>This can also be done later, when the underlying data structure changes but the public API shouldn't change.</p>"},{"location":"Allgemein/Haskell/Optics.html#lenses-operators","title":"Lenses &amp; Operators","text":"<p>The following operators can be used with lenses:</p> <ul> <li><code>view :: Lens' s a -&gt; s -&gt; a</code>   Returns the value which the given lens focuses on</li> <li><code>set :: Lens s t a b -&gt; b -&gt; s -&gt; t</code> or <code>set :: Lens' s a -&gt; a -&gt; s -&gt; s</code>   Sets the value of the focus of a lens</li> <li><code>over :: Lens s t a b -&gt; (a -&gt; b) -&gt; s -&gt; t</code> or <code>over :: Lens' s a -&gt; (a -&gt; a) -&gt; s -&gt; s</code>   Fetches the focused value, applies the given function and then uses set t set the focused value</li> </ul> <p>There are infix operator which are synonyms to the operators above:</p> Operator Action Type <code>^.</code> flipped view <code>s -&gt; Lens' s a -&gt; a</code> <code>.~</code> set <code>Lens s t a b -&gt; b -&gt; s -&gt; t</code> <code>%~</code> over <code>Lens s t a b -&gt; (a -&gt; b) -&gt; s -&gt; t</code> <p>Some common lenses are :</p> <ul> <li><code>_1 :: Lens (a, other) (b, other) a b</code>   Sets the focus on the first element of a tuple</li> <li><code>_2 :: Lens (other, a) (other, b) a b</code>   Sets the focus on the second element of a tuple</li> </ul> <pre><code>data Payload = Payload\n  { _weightKilos :: Int,\n    _cargo :: String\n  }\n  deriving (Show)\n\nmakeLenses ''Payload\n\ndata Ship = Ship {_payload :: Payload}\n  deriving (Show)\n\nmakeLenses ''Ship\n\nserenity :: Ship\nserenity = Ship (Payload 5000 \"Livestock\")\n\n-- get\n&gt;&gt;&gt; view payload . cargo serenity\n-- &gt; \"Livestock\"\n&gt;&gt;&gt; serenity ^. payload . cargo \n-- &gt; \"Livestock\"\n\n-- set\n&gt;&gt;&gt; set (payload . cargo) \"Medicine\" serenity\n&gt;&gt;&gt; serenity &amp; payload . cargo .~ \"Medicine\"\n&gt;&gt;&gt; serenity \n        &amp; payload . cargo .~ \"Chocolate\"\n        &amp; payload . weightKilos .~ 2310\n\n-- over\n&gt;&gt;&gt; serenity \n        &amp; payload . weightKilos .% subtract 1000\n        &amp; payload . cargo .~ \"Chocolate\"\n</code></pre>"},{"location":"Allgemein/Haskell/Optics.html#composing-lenses","title":"Composing Lenses","text":"<p>Lenses compose very easily.  Imagin each lens being a domino which can be fitted together if the types match. From the expression below, we'll get <code>address :: Lens' Person StreetAddress</code>. The <code>Address</code> type is \"hidden\" in the composition. </p> <p>At the the right end of a domino line, we can use an action to do something, like modifying the focused value. </p> <p>Here an actual Example: <pre><code>wave :: Wool -&gt; Sweater\nweave Wool = Sweater\n\ngameState :: (Player, Item Wool)\ngameState = (Player Item Wool 5)\n\n-- crafts a sweater\ngameState' :: (Player, Item Sweater)\ngameState' = over (_2 . material ) weave gameState\n</code></pre></p>"},{"location":"Allgemein/Haskell/Optics.html#folds","title":"Folds","text":"<p>A fold is like a query and can:</p> <ul> <li>focus on multiple things</li> <li>can only get, not set data</li> </ul> <p>A fold has the data type <code>Fold s a</code>, where the <code>s</code> is the structure on which the query runs and <code>a</code> is the return value. A fold returns zero or more from <code>a</code></p> <p>A fold, like a lens, doesn't contain data. It is an \"operation\" which knows how to extract zero or more elements from an type.</p> <p>We can create a custom <code>Fold</code> with the function <code>folding :: Foldable f =&gt; (s -&gt; f a) -&gt; Fold s a</code>, which takes as an argument a function which transforms the type <code>s</code> into a folding type <code>a</code>. </p> <pre><code>data ShipCrew = ShipCrew \n    { _captain :: String,\n    , _conscripts :: [String]\n    } deriving (Show)\nmakeLenses ''ShipCrew\n\ncollectCrewMembers :: ShipCrew -&gt; [String]\ncollectCrewMembers crew = (_captain crew) : _conscripts crew\n\ncrewMembers :: Fold ShipCrew String\ncrewMembers = folding collectCrewMembers\n</code></pre>"},{"location":"Allgemein/Haskell/Optics.html#operators_1","title":"Operators","text":"<ul> <li><code>folded : Foldable f =&gt; Fold (f a)</code>   With <code>folded</code> an instance of <code>Foldable</code> like a list can be converted into a <code>Fold</code>. </li> </ul> <p>A lens can be used to focus in on an element of a fold. This works because every lens has a getter to focus on one element exactly. This fits into the definition of a fold which needs to focus on zero or more elements. <pre><code>data CartItem = \n    CartItem { _name :: String\n             , _count :: Int}\nmakeLenses ''CarItem\n\ncart :: [CartItem]\ncart = [CartItem \"Black Shirt\" 3, CarItem \"Water Bottle\" 2]\n\n-- get a list of all items\ncart ^.. folded -- will return [CartItem \"Black Shirt\" 3, CarItem \"Water Bottle\" 2]\ntoListOf folded cart -- the same as above\n\ncart ^.. folded . name -- [\"Black Shirt\", \"Water Bottle\"]\ntoListOf (folded . name) cart -- the same as above\n</code></pre></p> <ul> <li><code>to :: (s -&gt; a) -&gt; Fold s a</code>   Creates a fold which maps from the type <code>s</code> to the folded type <code>a</code>. This function maps 1-to-1. Because of this, it couldn't be used to extract values from <code>Maybe</code>. If a 1-to-many relationship is needed, <code>folding</code> can be used</li> </ul> <pre><code>newtype Name = Name { getName :: String } deriving (Show)\nName \"Hi\" ^. to getName -- will return \"Hi\"\nName \"hello world\" ^. to getName . to (fmap toUpper) -- will return \"HELLO WORLD\"\n(ShipCrew \"Captain Tom\" [\"Franz\", \"Max\"]) ^.. crewMembers . to (fmap toUpper) -- will return [\"CAPTAIN TOM\", \"FRANZ\", \"MAX\"]\n</code></pre> <ul> <li><code>backwards :: Fold s a -&gt; Fold s a</code>   Reverses the elements of a fold</li> </ul> <pre><code>[1, 2, 3] ^.. backwards folded -- will return [3, 2, 1]\n[(1, 2), (3, 4)] ^.. backwards (folded . both) -- will return [4, 3, 2, 1]\n[(1, 2), (3, 4)] ^.. backwards folded . both -- will return [3, 4, 1, 2]\n</code></pre> <ul> <li><code>only :: Eq a =&gt; a -&gt; Prism' a ()</code>    A helper fold operator which can simplify to <code>only :: Eq a =&gt; a -&gt; Fold a ()</code>. It return <code>()</code> only if the input is equal to the given <code>a</code></li> </ul> <pre><code>1 ^? only 1 -- will return Just ()\n2 ^? only 1 -\n</code></pre>"},{"location":"Allgemein/Haskell/Optics.html#actions","title":"Actions","text":"<ul> <li> <p><code>toListOf :: Fold s a -&gt; s -&gt; [a]</code>/<code>(^..) :: s -&gt; Fold s a -&gt; [a]</code>   To use a fold on data the function <code>toListOf</code> can be used. This will take a <code>Fold</code> and a <code>Foldable</code> structure and extracts <code>[a]</code> out of it. A synonym is <code>(^..) :: s -&gt; Fold s a -&gt; [a]</code></p> </li> <li> <p><code>elemOf :: Eq a =&gt; Fold s a -&gt; a -&gt; s -&gt; Bool</code>   Checks if the given <code>a</code> is in the <code>Fold</code></p> </li> </ul> <pre><code>elemOf folded 3 [1..4] -- will return True\nelemOf folded 99 [1..4] -- will return False\n</code></pre> <ul> <li><code>anyOf :: Fold s a -&gt; (a -&gt; Bool) -&gt; s -&gt; Bool</code>   Checks if the predicates returns true for at least one element</li> </ul> <pre><code>anyOf folded even [1..4] -- will return True\nanyOf folded (&gt;100) [1..4] -- will return False\n</code></pre> <ul> <li><code>allOf :: Fold s a -&gt; (a -&gt; Bool) -&gt; s -&gt; Bool</code>   Check if the predicates returns true for all elements</li> </ul> <pre><code>allOf folded even [1..4] -- will return False\nallOf folded (&lt;10) [1..4] -- will return True\n</code></pre> <ul> <li><code>findOf :: Fold s a -&gt; (a -&gt; Bool) -&gt; s -&gt; Maybe a</code>   Tries to find an element for which the predicate returns true</li> </ul> <pre><code>findOf folded even [1..4] -- will return Just 2\nfindOf folded (&gt;10) [1..4] -- will return Nothing\n</code></pre> <ul> <li><code>has :: Fold s a -&gt; s -&gt; Bool</code>   Checks if there is at least one element</li> </ul> <pre><code>has folded [] -- will return False\nhas folded [1..4] -- will return True\n</code></pre> <ul> <li><code>hasn't :: Fold s a -&gt; s -&gt; Bool</code>   Checks if there are no elements</li> </ul> <pre><code>hasn't folded [] -- will return True\nhasn't folded [1..4] -- will return False\n</code></pre> <ul> <li><code>lengthOf :: Fold s a -&gt; s -&gt; Int</code>   Returns how many elements there are</li> </ul> <pre><code>lengthOf folded [1, 2, 3, 4] -- will return 4\n</code></pre> <ul> <li><code>sumOf :: Num n =&gt; Fold s n -&gt; s -&gt; n</code> / <code>productOf :: Num n =&gt; Fold s n -&gt; s -&gt; n</code>   Calculates the sum/product of all elements</li> </ul> <pre><code>sumfOf folded [1..4] -- will return 10\nproductOf folded [1..4] -- will return 24\n</code></pre> <ul> <li><code>firstOf :: Fold s a -&gt; s -&gt; Maybe a</code> / <code>preview :: Fold s a -&gt; s -&gt; Maybe a</code> / <code>( ^?) :: s -&gt; Fold s a -&gt; Maybe a</code> / <code>lastOf :: Fold s a -&gt; s -&gt; Maybe a</code> <code>firstOf</code>, <code>preview</code> and <code>(^?)</code> return the first element; <code>lastOf</code> returns the last element</li> </ul> <pre><code>firstOf folded [] -- will return Nothing\nfirstOf folded [1..4] -- will return Just 1\npreview folded [1..4] -- will return Just 1\n[1..4] ^? folded -- will return Just 1\nlastOf folded [1..4] -- will return Just 4\n</code></pre> <ul> <li><code>minimumOf :: Ord a =&gt; Fold s a -&gt; s -&gt; Maybe a</code> / <code>maximumOf :: Ord a =&gt; Fold s a -&gt; s -&gt; Maybe a</code>   Returns the minimum or maximum of the elements</li> </ul> <pre><code>minimumOf folded [1..4] -- will return Just 1\nmaximumOf folded [1..4] -- will return Just 4\nminimumOf folded [] -- will return Nothing\nmaximumOf folded [] -- will return Nothing\n</code></pre> <ul> <li><code>maximumByOf :: Fold s a -&gt; (a -&gt; a -&gt; Ordering) -&gt; s -&gt; Maybe a</code> / <code>minimumOf :: Fold s a -&gt; (a -&gt; a -&gt; Ordering) -&gt; s -&gt; Maybe a</code>   These function return the \"largest\" or \"smallest\" element determinted by the function <code>(a -&gt; a -&gt; Ordering)</code></li> </ul> <pre><code>data Person = Person { _name :: String, _age :: Int} deriving (Show)\nmaximumByOf (folded) (comparing _age) [Person \"Seb\" 22, Person \"Marie\" 33] -- will return Person \"Marie\" 33\nminimumByOf (folded) (comparing _age) [Person \"Seb\" 22, Person \"Marie\" 33] -- will return Person \"Seb\" 22\n</code></pre> <ul> <li><code>traverseOf_ :: Functor f =&gt; Fold s a -&gt; (a -&gt; f r) -&gt; s -&gt; f ()</code> / <code>forOf_ :: Functor f =&gt; Fold s a -&gt; s -&gt; (a -&gt; f r) -&gt; f ()</code> <code>traverseOf_</code> and <code>forOf_</code> are used to execute side effects with elements and are the optic equivalents of <code>traverse_</code> and <code>for_</code></li> </ul> <pre><code>data Person = Person {_name :: String, _age :: Int} deriving (Show)\npersons = [Person \"Seb\" 22, Person \"Ann\", 34]\n\nshowPerson :: Person -&gt; String\nshowPerson p = _name p &lt;&gt; \": \" &lt;&gt; show (age p)\n\ntraverseOf_ (folded . to showPerson) putStrLn persons \n-- will return:\n-- Seb: 22\n-- Ann: 34\n\n-- example from Optics By Example / page \n&gt;&gt;&gt; import Control.Monad.State\n&gt;&gt;&gt; execState (traverseOf_ folded (modify . const (+1)) tvShows) 0\n2\n</code></pre> <ul> <li> <p><code>foldOf :: Monoid a =&gt; Fold s a -&gt; s -&gt; a</code> / <code>foldMapOf :: Monoid r =&gt; Fold s a -&gt; (a -&gt; r) -&gt; s -&gt; r</code> <code>foldOf</code> and <code>foldMapOf</code> are function which allows the use of Monoids with folds.</p> </li> <li> <p><code>foldByOf :: Fold s a -&gt; (a -&gt; a -&gt; a) -&gt; a -&gt; s -&gt; a</code> / <code>foldMapByOf :: Fold s a -&gt; (r -&gt; r -&gt; r) -&gt; r -&gt; (a -&gt; r) -&gt; s -&gt; r</code> <code>foldByOf</code> and <code>foldMapByOf</code> are similar to <code>foldOf</code> and <code>foldMapOf</code>, but allow the callee to specifiy the append function and identity value.</p> </li> </ul> <pre><code>tvShows = [(\"How I Met Your Mother\", \"Josh Radnor\"), (\"How I Met Your Mother\", \"Alyson Hannigan\"), (\"Buffy the Vampire Slayer\", \"Alyson Hannigan\")]\n\nfoldMapByOf (folded . _2) (M.unionWith (+)) mempty (\\n -&gt; M.singleton n 1) tvShows\n-- will return [(\"Alyson Hannigan\",2),(\"Josh Radnor\",1)]\n</code></pre> <ul> <li><code>foldrOf :: Fold s a -&gt; (a -&gt; r -&gt; r) -&gt; r -&gt; s -&gt; r</code> / <code>foldlOf :: Fold s a -&gt; (r -&gt; a -&gt; r) -&gt; r -&gt; s -&gt; r</code> <code>foldrOf</code> and <code>foldlOf</code> are functions which are like <code>foldOf</code> and <code>foldMapOf</code>, but the identity value and append function can be set by parameters. They are the equivalence of <code>foldr</code> and <code>foldl</code>.</li> </ul>"},{"location":"Allgemein/Haskell/Optics.html#concat-existing-folds","title":"Concat existing <code>Fold</code>s","text":"<p>Already existing folds (and lenses) can be combined to one big <code>Fold</code> if the types match. </p> <p>Here's an alternative implementation of <code>crewMembers</code></p> <pre><code>crewMembers :: Fold ShipCrew String\ncrewMembers = folding (\\s -&gt; s ^.. captain\n                          &lt;&gt; s ^.. conscripts . folded)\n</code></pre>"},{"location":"Allgemein/Haskell/Optics.html#traversal","title":"Traversal","text":"<p>A traversal can, like a fold, get zero or more elements but also set zero or more elements. Because of this, lenses and folds are valid traversal but not all traversals are lenses and folds.</p> <p>The type <code>Traversal s t a b</code> has the following generics:</p> <ul> <li><code>s</code> - the structure before the action</li> <li><code>t</code> - the structure after the action</li> <li><code>a</code> - the focus before the action</li> <li><code>b</code> - the focus after the action</li> </ul> <p>Wenn the type of the focus is changed by a setting operation the operation has to convert all elements. An operation which only focuses on part of the traversal can't change the type of the focus.</p> <p>Like with lenses, there is also a simple traversal: <code>Traversal' s a</code>, where the generic mean:</p> <ul> <li><code>s</code> - the structure before and after the action</li> <li><code>a</code> - the focus before and after the action</li> </ul>"},{"location":"Allgemein/Haskell/Optics.html#actions_1","title":"Actions","text":"<p>When actions are used as a setter, then all values are changed, which would be returned with a getter. With these kind of action only part of the traversal can be updated. This also means that the focused type can't c</p> <pre><code>[1, 2, 3, 4, 5] &amp; taking 3 traversed *~ 10 -- will return [10, 20, 30, 4, 5]\n[1, 2, 3, 4, 5] &amp; dropping 3 traversed *~ 10 -- will return [1, 2, 3, 40, 50]\n[1..5] &amp; traversed . filtered even *~ 10 -- will return [1, 20, 3, 40, 5]\n</code></pre> <ul> <li> <p><code>traversed :: Traversable f =&gt; IndexedTraversal Int (f a) (f b) a b</code>   Creates a <code>Traversal</code> which will focus on every element in the data structure. It is more powerfull than <code>folded</code>, but can be used with less types. </p> </li> <li> <p><code>both: Bitraversable r =&gt; Traversal (r a a) (r b b) a b</code> <code>both</code> can be simplified to <code>both: Bitraversable r =&gt; Fold (r a a) a</code> and creates a <code>Fold</code> for a tuple with the same types (<code>(String, Int)</code>  wouldn't be valid). But only the last two item of a tuple are actually traversed. </p> </li> </ul> <pre><code>(\"hello\", \"wolrd\") ^.. both -- will return  [\"hello\", \"world\"]\n(\"hi\") ^.. both -- will return [\"hi\"]\n(\"hi\", \"hello\", \"world\") ^.. both -- will return [\"hello\", \"world\"]\n</code></pre> <ul> <li><code>each :: Each s t a b =&gt; Traversal s t a b</code> <code>each</code> can be simplified to <code>each :: Each s s a a =&gt; Fold s a</code>. It does almost the same thing as <code>both</code>, but over an arbitrary sized tuple. </li> </ul> <pre><code>(\"hi\", \"hello\", \"world\") ^.. each -- will return [\"hi\", \"hello\", \"world\"]\n</code></pre> <ul> <li><code>filtered :: (Choice p, Applicative f) =&gt; (a -&gt; Bool) -&gt; Optic' p f a a</code>   Filters a fold (or other optics) and can simplify to <code>filtered :: (s -&gt; Bool) -&gt; Fold s s</code></li> </ul> <pre><code>[1..10] ^.. folded . filtered even -- will return [2,4,6,8,10]\n</code></pre> <ul> <li> <p><code>filteredBy :: Fold s a -&gt; IndexedTraversal' a s s</code>   An alternative to <code>filtered</code> which uses a fold as the predicate. The type signature above is simplified.on</p> </li> <li> <p><code>taking :: (Conjoined p, Applicative f) =&gt; Int -&gt; Traversing p f s t a a -&gt; Over p f s t a a</code>    This method is the equivalent to <code>take</code> with traversals and folds.    </p> </li> <li> <p><code>dropping :: (Conjoined p, Applicative f) =&gt; Int -&gt; Over p (Control.Lens.Internal.Indexed.Indexing f) s t a a  -&gt;  ver p f s t a a</code>   This method is the fold / traversal equivalent to <code>drop</code></p> </li> </ul> <pre><code>[1..] ^.. taking 5 folded -- will return [1, 2, 3, 4, 5]\n[[1, 2, 3], [10, 20, 30], [100, 200, 300]] ^.. folded . taking 2 folded -- will return [1, 2, 10, 20, 100, 200]\n</code></pre> <p>High-Order actions apply, like other actions, two an element of a fold, not to the fold itself. The following graphic shows the code <code>(\"Albus\", \"Dumbledore\") ^.. both . taking 3 folded</code></p> <p></p> <ul> <li> <p><code>takingWhile :: (a -&gt; Bool) -&gt; Fold s a -&gt; Fold s a</code>   The traversal/folding equivalent to <code>takeWhile</code>. It accepts a predicate and will return element as long as the predicate returns true</p> </li> <li> <p><code>droppingWhile :: (a -&gt; Bool) -&gt; Fold s a -&gt; Fold s a</code>   The traversal/folding equivalent to <code>dropWhile</code>. It will \"drop\" elements from fold elements until predicate returns false</p> </li> </ul> <pre><code>[1..]  ^.. takingWhile (&lt; 5) folded -- will return [1, 2, 3, 4]\n[1..10] ^.. droppingWhile (&lt; 5) folded -- will return [5, 6, 7, 8, 9, 10]\n</code></pre> <ul> <li> <p><code>worded :: Applicative f =&gt; IndexedLensLike' Int f String String</code>   Simplifies to <code>worded :: Traversal' String String</code> and will focus on each word in the string</p> </li> <li> <p><code>lined :: Applicative f =&gt; IndexedLensLike' Int f String String</code>   Simplifies to <code>lined :: Traversal' String String</code> and will focus on each line in the string</p> </li> </ul> <pre><code>\"Hello world\" ^.. worded -- will return [\"Hello\", \"world\"]\n\"Hello\\n How are you?\" ^.. lined -- will return [\"Hello\",\" How are you?\"]\n\"Hello world\" &amp; worded %~ \\s -&gt; \"*\" ++ s ++ \"*\" -- will return \"*Hello* *world*\"\n</code></pre> <ul> <li><code>beside :: Traversal s t a b -&gt; Traversal s' t' a b -&gt; Traversal (s,s') (t,t') a b</code></li> </ul> <p><code>beside</code> applies a the first traversal to the first element of the tuple and the second traversal to the second tuple element. </p> <pre><code>(\"hi\", \"moin\") ^.. beside (to length) (to $ const 200) -- will return (2, 200)\n(\"hello\", (2, \"moin\")) ^.. beside id _2 -- will return (\"hello\", \"moin\")\n (\"hello\", (2, \"moin\")) &amp; beside id _2 %~ (++ \"!\") -- will return (\"hello!\", (2, \"moin!\"))\n</code></pre> <ul> <li><code>element :: Traversable f =&gt; Int -&gt; Traversal' (f a) a</code>   Focuses on the element with the given index</li> </ul> <pre><code>[0..4] ^? element 2 -- will return Just 2\n[0..4] ^? element 20 -- will return Nothing\n[0..4] &amp; element 2 *~ 10 -- will return [0, 1, 20, 3, 4]\n</code></pre>"},{"location":"Allgemein/Haskell/Optics.html#operators_2","title":"Operators","text":"<p>The operator <code>over</code> (aka. <code>%~</code>) and <code>set</code> (aka.<code>.~</code>), which are known from lenses, can also be used with traversals.</p> <pre><code>(\"hello\", \"moin\") &amp; both %~ (++ \"!\") -- will return (\"hello!\", \"moin!\")\nover both (++ \"!\") (\"hello\", \"moin\")  -- will return (\"hello!\", \"moin!\")\n(\"hello\", \"moin\") &amp; both %~ length -- will return (5, 4)\n\n(\"hello\", \"moin\") &amp; both .~ \"good morning\" -- will return (\"good morning\", \"good morning\")\nset both \"good morning\" (\"hello\", \"moin\") -- will return (\"good morning\", \"good morning\")\n</code></pre> <p>Effects can be run on <code>Traversals</code>  with the method <code>traverseOf :: LensLike f s t a b -&gt; (a -&gt; f b) -&gt; s -&gt; f t</code> which can be spezialized to <code>traverseOf :: Traversal s t a b -&gt; (a -&gt; f b) -&gt; s -&gt; f</code>. <code>traverseOf</code> works like <code>traverse</code> but with <code>Traversable</code>s</p> <pre><code>traverseOf both readMaybe (\"1\", \"2\") :: Maybe (Int, Int) -- will return (1, 2)\ntraverseOf both readMaybe (\"hello\", \"2\") :: Maybe (Int, Int) -- will return Nothing\n\ntraverseOf each readMaybe [\"1\", \"2\"] :: Maybe [Int] -- will return Just [1, 2]\ntraverse readMaybe [\"1\", \"2\"] :: Maybe [Int] -- will return Just []\n</code></pre>"},{"location":"Allgemein/Haskell/Optics.html#each","title":"Each","text":""},{"location":"Allgemein/IP/IP.html","title":"IP","text":""},{"location":"Allgemein/IP/IP.html#anfoderuungen","title":"Anfoderuungen","text":"<ul> <li>20 ECT-Credits (im 2. und 3. Studienjahr f\u00fcr Vollzeitstudium)</li> <li>Wenn an IP angemeldet, wird man automatisch f\u00fcr die notwendigen englische Module eingetragen (Hier eine Liste von Modulen auf Englisch: https://intra.zhaw.ch/fileadmin/user_upload/80_Dept/T_School_of_Engineering/International/International_Profil/Intranet_Angebot_Module_in_Englisch_IP.pdf)</li> <li>ein extra Modul: Intercultural Communication and Management</li> <li>Am Ende des Studiums ben\u00f6tigt man ein C1</li> </ul> <p>Deadline der Anmeldung f\u00fcr IP ist das 2. Semester</p> <p>Deadline f\u00fcr Anmeldung f\u00fcr Auslandsemester.  Einige Unis wollen ein Zertifikat (zum Teil sogar ein C1). Das TOEFL  iBT mehr als 95 Punkte Englisch Zertifikat ist empfohlen.</p> <p>Link zu Intranet IP: https://intra.zhaw.ch/departemente/school-of-engineering/internationaler-austausch/internationales-profil-ip/</p>"},{"location":"Allgemein/IP/Meeting%20Student.html","title":"Meeting Student","text":""},{"location":"Allgemein/IP/Visa.html","title":"Visa","text":"<p>The total sum of the bank accounts need be at least US$9205.</p> <p>For the visa, you usually need to physically go to the embassy.</p>"},{"location":"Allgemein/IP/Visa.html#health-insurance","title":"Health Insurance","text":""},{"location":"Allgemein/Musik/Tonleitern.html","title":"Tonleitern","text":"\\[ \\newcommand{\\g}[]{1} \\newcommand{\\h}[]{\\frac 1 2} \\newcommand{\\gh}[]{\\frac 3 2} \\]"},{"location":"Allgemein/Musik/Tonleitern.html#dur-tonleiter","title":"Dur-Tonleiter","text":"<p>Die Dur-Tonleiter hat folgendes Muster: \\(\\g - \\g - \\h - \\g - \\g - \\g -\\h\\)</p> <p></p>"},{"location":"Allgemein/Musik/Tonleitern.html#moll-tonleitern","title":"Moll-Tonleitern","text":"<p>Es gibt drei verschiedene Moll-Tonleitern: das parallele,  harmonische und melodische Moll.</p> <p>In der folgenden Tabelle sind die drei Tonleitern direkt verglichen:</p> Name Muster Beispiel Paralleles Moll \\(\\g - \\h - \\g - \\g - \\h - \\g - \\g\\) \\(C \\to D \\to E\\flat \\to F \\to G \\to Ab \\to B\\flat \\to C\\) Melodisches Moll \\(\\g - \\h - \\g - \\g - \\g -\\g -\\h\\) \\(C \\to D \\to E\\flat \\to F \\to G \\to A \\to H \\to C\\) Harmonisches Moll \\(\\g - \\h - \\g -\\g - \\h - \\gh - \\h\\) \\(C \\to D \\to E\\flat \\to F \\to G \\to A\\flat \\to H \\to C\\) <p>Wie man sieht, sind bis zu der Quinte alle Moll-Tonleitern gleich. Dass heisst, erst wenn einer dieser T\u00f6ne gespielt wird, kann unterschieden werden, welche Tonleiter wirklich gespielt wird.</p>"},{"location":"Allgemein/Musik/Tonleitern.html#paralleles-mollaolisch","title":"Paralleles Moll/\u00c4olisch","text":"<p>Das parallele Moll enth\u00e4lt die selben T\u00f6ne, wie die Dur-Tonleiter, aber um sechs T\u00f6ne gegen oben verschoben. Das Muster ist daher: \\(\\g - \\h - \\g - \\g - \\h - \\g - \\g\\)</p> <p>Aus der Tonleiter \\(C \\to D \\to E \\to F\\to G \\to A \\to H \\to C\\) wird \\(A \\to H \\to C \\to D \\to E\\to F \\to G \\to A\\) E Ein weiteres Beispiel w\u00e4re: \\(C \\to D \\to E\\flat \\to F \\to G \\to Ab \\to B\\flat \\to C\\)</p> <p>Es wird auch \u00c4olisch genannt, da es die 6. Stufe von einer Dur-Tonleiter ist.</p>"},{"location":"Allgemein/Musik/Tonleitern.html#melodisches-moll","title":"Melodisches Moll","text":"<p>Das melodische Moll hat das Muster: \\(\\g - \\h - \\g - \\g - \\g -\\g -\\h\\)</p> <p>Da das melodische Moll ein Halb-Ton von 7. zum 8. Ton hat, m\u00f6chte der 7. Ton sich auf den 8. Ton aufl\u00f6sen. </p> <p>Ein Beispiel w\u00e4re: \\(C \\to D \\to E\\flat \\to F \\to G \\to A \\to H \\to C\\)</p>"},{"location":"Allgemein/Musik/Tonleitern.html#harmonisches-moll","title":"Harmonisches Moll","text":"<p>Die dritte Moll Tonleiter ist das harmonische Moll. Diese funktioniert \u00e4hnlich zum melodischen Moll, hat aber ein \\(\\gh\\)-Abstand: \\(\\g - \\h - \\g -\\g - \\h - \\gh - \\h\\)</p> <p>Ein Beispiel w\u00e4re: \\(C \\to D \\to E\\flat \\to F \\to G \\to A\\flat \\to H \\to C\\)</p>"},{"location":"Allgemein/Nothelfer/Nothelfer.html","title":"Nothelfer","text":""},{"location":"Allgemein/Nothelfer/Nothelfer.html#lagebeurteilung","title":"Lagebeurteilung","text":""},{"location":"Allgemein/Nothelfer/Nothelfer.html#beurteilungsfragen","title":"Beurteilungsfragen","text":"<ul> <li>Wie zeigt sich die Situation?</li> <li>Wer ist betroffen?</li> <li>Wie viele Patienten sind vorhanden?</li> <li>Welcher Patient scheint in Lebensbedrohung zu sein?</li> <li>Wie viele Helfer stehen zur Verf\u00fcgung, mit welchem K\u00f6nnen, welcher Qualifikation?</li> <li>Welche Massnahme m\u00fcssen in welcher Reihenfolge und Dringlichkeit erledigt werden?</li> <li>Wie sollen die Arbeiten verteilt werden?</li> </ul>"},{"location":"Allgemein/Nothelfer/Nothelfer.html#sichern","title":"Sichern","text":"<p>Zuerst soll entweder den Patienten an eine sichere Stelle verlagert werden oder die Umfallstelle muss gesichert werden (Pannendreiecke, Warnblinker, ...). Auf der Autobahn wird der Patienten meisten verschoben werden m\u00fcssen, sonst kann meistens der Verkehr gewarnt und umgeleitet werden.</p>"},{"location":"Allgemein/Nothelfer/Nothelfer.html#retten","title":"Retten","text":"<p>Wenn Patient im Fahrzeug ist:</p> <ol> <li>Patienten ansprechen</li> <li>Wenn ansprechbar, anleiten, den Kopf nicht zu bewegen</li> <li>Wenn nicht Ansprechbar: </li> <li>T\u00fcre vorsichtig \u00f6ffenen</li> <li>Nochmals deutlicher ansprechen</li> <li>Gurt l\u00f6sen </li> <li>Person in richtig T\u00fcre drehen und heraus ziehen</li> </ol> <p>Ein Helm kann folgendermassen abgenommen werden:(Es braucht zwei Nothelfer):</p> <p></p>"},{"location":"Allgemein/Nothelfer/Nothelfer.html#notruf","title":"Notruf","text":"Organistation Nr Erkl\u00e4rung Polizei 117 bei Verkehrsunf\u00e4llen, Verbrechen. Feuerwehr 118 bei Br\u00e4nden, Versch\u00fcttungen, eingeklemmten  Personen, Explosionsgefahr, Giftstoffen, Bergungen. Sanit\u00e4t 144 bei verletzten oder kranken Personen. Rega 1414 bei schwer zug\u00e4nglichen, z.B. gebirgigen Notfallstellen oder bei  Schwerverletzten. Normalerweise wird die Rettungsflugwacht Rega durch  die Polizei oder Sanit\u00e4t aufgeboten. Tox Info Suisse 145 Auskunftsnummer bei Vergiftungsvorf\u00e4llen ohne vorliegende lebensbedrohliche St\u00f6rung. Allgemeiner Europ\u00e4ischer Notruf 112 diese vereinheitlichte Notrufnummer gilt auch in den meisten anderen  europ\u00e4ischen Staaten. In der Schweiz wird die Direktwahl der  Notrufnummern der Polizei,  Sanit\u00e4t oder Feuerwehr zurzeit noch  bevorzugt, da sie meist schneller funktioniert. <p>Folgendes sollte an die Notrufzentrale \u00fcbetragen werden:</p> <ul> <li>Wo ist es passiert?</li> <li>Wer ruft an?</li> <li>Was ist passiert?</li> <li>Wie viel Personen sind betroffen?</li> <li>Welche Art von Verletzung liegt vor?</li> </ul>"},{"location":"Allgemein/Nothelfer/Nothelfer.html#verhalten-im-verkehr","title":"Verhalten im Verkehr","text":"<p>F\u00fcr die Sicherung einer Unfallsstelle sollte folgendes getan werden:</p> <ul> <li>Warnblinker und Abblendlichter eingeschaltet werden</li> <li>Warnweste tragen</li> <li>Pannendreicke (50m innerorts, 100m bei schnellem Verkehr)</li> <li>Weitere Personen lenken oder stoppen den Verkehr</li> </ul> <p></p> <p>Wenn keine Person sich verletzt hat und die Unfallstelle fotografisch festgehalten wurde, kann sie ger\u00e4umt werden. Wenn nur ein Blechschaden vorliegt, gen\u00fcgt das Ausf\u00fcllen eines Unfallprotokolls</p> <p>Wenn der Unfall auf der Autobahn geschah, ist es zu gef\u00e4hrlich die Unfallstelle zu sichern und sollte daher m\u00f6glichst schnell ger\u00e4umt werden. Daf\u00fcr muss folgendes getan werden:</p> <ul> <li>Auf dem Pannenstreifen parkieren mit Warnblinker</li> <li>Auf dem Pannenstreifen dem Verkehr mit Warnweste und Pannendreieck entgegen laufen </li> <li>Unfall stelle mit einem Pannendreieck min. 100m von dem Unfall entfernt</li> <li>Danach sollte die Verletzten aus der Gefahrenzone genommen werden und Nothilfe geleistet werden</li> </ul> <p>Wenn dies in einem Tunnel passiert, muss folgendes getan werden:</p> <ul> <li>Fahrzeug versuchen auf einen Pannenstreifen oder Pannenbucht fahren mit Warnblinker eingeschaltet</li> <li>Motor abschalten und Schl\u00fcssel stecken lassen</li> </ul>"},{"location":"Allgemein/Nothelfer/Nothelfer.html#patientenversorgung","title":"Patientenversorgung","text":""},{"location":"Allgemein/Nothelfer/Nothelfer.html#wirbelsaulen-bruch","title":"Wirbels\u00e4ulen Bruch","text":"<p>Symptome:</p> <ul> <li>Analyse des Umfallhergangs</li> <li>Schmerz\u00e4usserung des Patienten im Bereich des R\u00fcckens oder Beckens</li> <li>Empfindungsst\u00f6rungen oder g\u00e4nzliche Gef\u00fchlslosigkeit in Beinen oder Armen</li> <li>unkontrollierter Stuhl oder Harnabgang</li> </ul> <p>Wenn diese Symptome zutrefen, soll folgendes bei ansprechbaren Patienten getan werden:</p> <ul> <li>keine Lagever\u00e4nderungen</li> <li>Kopf stabilisieren</li> <li>Patient auffordern, sich nicht zu bewegen</li> </ul> <p>Wenn der Patient bewusstlos ist, soll nach dem \u00fcblichen Vorgehen vorgegangen werden (Lagenwechsel notwendig, wegen Erstickungsgefahr). Den Patienten mit mehreren Helfern kordiniert stabilisieren/st\u00fctzen bei den Lagenwechseln.</p> <p>Eine m\u00f6glich gebrochene Wirbels\u00e4ule ist den lebenserhaltenden Massnahmen, wie Herzmassage oder Bewusstlosigkeit unterzuordnen!!!!</p>"},{"location":"Allgemein/Nothelfer/Nothelfer.html#bewusstlosigkeit-erkennen","title":"Bewusstlosigkeit erkennen","text":"<p>Wenn ein Patient bei Ansprechen, leicht kneifen oder leichtes r\u00fctteln (nicht zu fest R\u00fctteln) keine Reaktion zeigt, ist er Bewusstlos. Wenn eine Person bewusstlos ist, muss sie in folgende Lage gebracht werden. </p>"},{"location":"Allgemein/Nothelfer/Nothelfer.html#atmung","title":"Atmung","text":"<p>Es muss kontrolliert werden, ob die Person atmet. Entscheide innerhalb von 10 Sekunden, ob die Atmung normal, abnormal oder nicht vorhanden ist. Das bestimmen, sollte mit mehreren Sinnen getan werden (Sehen, h\u00f6ren, f\u00fchlen) Wenn Zweifel bestehen, ob die Atmung normal ist, dann soll sich so verhalten werden, als ob sie nicht normal ist.  </p> <p>Nach einem Kreislaufstillstand kann es sein, dass ein Patient vereinzelt langsame oder ger\u00e4uschvolle Atemz\u00fcge macht. Es ist trotzdem eine Herz-Lungen-Wiederbelebung notwenig.</p> <p>Wenn der Patient bei bewusst sein ist, soll die Atmung trotzdem \u00fcberpr\u00fcft werden. Ein Patient bei bewusst sein, kann auch mitteilen, ob er dabei Schmerzen empfindet.</p>"},{"location":"Allgemein/Nothelfer/Nothelfer.html#blutung-stillen","title":"Blutung stillen","text":"<p>Wenn eine starke Blutung erkennbar ist, soll diese mit einem Fingerdruck auf die zuf\u00fchrende Arterie an Beinen oder Armen gestillt werden. Wenn m\u00f6glich soll ein Druckverband gemacht werden.  Den Patient soll zudem auf den R\u00fccken gelegt werden. Dadurch wird der Kreislauf beruhigt, was das Blut langsamer fliessen l\u00e4sst.</p> <p>Bei starken \u00e4usseren Wunden soll zuerst die Kleidung entfernt werden, damit das Ausmasse der Wunde sichtbar wird. Fremdk\u00f6rper in der Wunde lassen. Bei einem K\u00f6rperteil, wie der Arm oder Bein, soll es hoch gelagert werden, um den Blutfluss zu verringern.</p> <p>Um die Blutung zu stillen, kann entweder die Hand oder einnen sauberen Gegenstand direkt auf die Wunde gedr\u00fcckt werden.</p> <p>Es muss speditiv gearbeitet werden, wenn der Patient bewusstlos ist.</p> <p>Sich selbst unbedingt mit Handschuhen vor AIDS und Hepatitis sch\u00fctzen</p>"},{"location":"Allgemein/Nothelfer/Nothelfer.html#innere-blutungen","title":"Innere Blutungen","text":"<p>Symptome f\u00fcr innere Blutungen sind:</p> <ul> <li>blasse Hautfarbe</li> <li>kalte, nasse Haut</li> <li>teilweise teilnahmslos oder unruhig oder aggressiv</li> <li>schneller aber schwacher Puls</li> <li>schnelle Atmung</li> <li>Verschlechterung des Allgemeinzustandes</li> </ul> <p>Bei diesen Symptomen sofort 144 anrufen. Unn\u00f6tige Patienten-Bewegungen vermeiden. Patienten flach lagern und sicherstellen, dass der Patient nicht erfriert.</p>"},{"location":"Allgemein/Nothelfer/Nothelfer.html#bewusstlosen-lagerung","title":"Bewusstlosen-Lagerung","text":"<ol> <li>Neben dem Patienten auf Bauchh\u00f6he knien    </li> <li>Lege den n\u00e4heren Arm im rechten Winkel hin    </li> <li>Das entferntere Bein soll aufgestellt werden und den Fuss soll seitlich, eng am anderen Knie platziert weden    </li> <li>Der entfernte Arm soll auf den Bauch gelegt werden    </li> <li>Die bewusstlose Person an der Schulter und Knie vorsichtig drehen    </li> <li>Das angewinkelte Bein stabilisiert die Seitenlage    </li> <li>Der obere Arm soll angewinkelt werden und oberhalb des unteren Arms platziert werden    </li> <li>Den Kopf soll nach hinten gelegt werden und das Mund gegebenenfalls ge\u00f6ffnet werden    </li> <li>Endlage    </li> </ol>"},{"location":"Allgemein/Nothelfer/Nothelfer.html#herz-kreislauf-stillstand","title":"Herz-Kreislauf-Stillstand","text":"<p>Wenn der Patient bewusstlos ist und nicht atmet, wird es (vermutlich) einen Herz-Kreislauf-Stillstand sein. </p> <p>Eine Herzrhythmusst\u00f6rung kann durch Herzerkrankung, Bluthochdruck, Herzklappenfehler, Elektrounf\u00e4lle, Medikamenteneinfluss oder \u00fcberm\u00e4ssigen Alkoholkonsum ausgel\u00f6st werden.</p> <p></p>"},{"location":"Allgemein/Nothelfer/Nothelfer.html#herzinfarktes","title":"Herzinfarktes","text":"<p>Folgende Punkte sind Symptome, welche auf einen Herzinfarkt hinzeigen</p> <ul> <li>heftiger Druck in der Brust</li> <li>klemmenden, beengende oder brennende Schmerzen in der Brust (Dauern l\u00e4nger als 15 min). Oft verbunden mit Atemnot oder Todesangst</li> <li>Ausstrahlung des Schmerzen gegen beide Schultern, Arme, den Hals, Unterkiefer oder Oberbauch</li> <li>ev. blasse, fahle Gesichtsfarbe</li> <li>ev. \u00dcbelkeit, Schw\u00e4che, Schweissausbruch</li> <li>ev. Atemnot, unregelm\u00e4ssiger Puls</li> <li>ev. Bauchschmerzen</li> </ul> <p>Fogelde Punkte sind wichtig:</p> <ul> <li>Ruhe bewahren und Hektik und Anstrengung vermeiden</li> <li>Notruf anrufen</li> <li>Lagerung nach Wunsch</li> <li>Einengende Kleidung entfernen</li> </ul> <p>Wenn der Patient bewusstlos ist, dann:</p> <ul> <li>Notruf 144 ausl\u00f6sen</li> <li>Defibrilator organisieren und ben\u00fctzten</li> <li>Herz-Lungen-Wiederbelebung durchf\u00fchren</li> </ul>"},{"location":"Allgemein/Nothelfer/Nothelfer.html#hirnschlag","title":"Hirnschlag","text":"<p>Symptome:</p> <ul> <li> <p>Pl\u00f6tzliche Schw\u00e4che, L\u00e4hmung oder Gef\u00fchlsst\u00f6rung, meistens auf einer K\u00f6rperseite</p> </li> <li> <p>Pl\u00f6tzliche Blindheit auf einem Auge oder Sehen von Doppelbildern</p> </li> <li> <p>Pl\u00f6tzliche Sprechst\u00f6rungen oder Schwierigkeiten, Gesprochenes zu verstehen</p> </li> <li> <p>Pl\u00f6tzlich auftretende, sehr heftige Kopfschmerzen</p> </li> <li> <p>FAST (Face, Arm, Speech, Time) Regel</p> </li> </ul> <p></p> <ul> <li>Face: Die Person soll l\u00e4cheln. Steht der Mund schief oder h\u00e4ngen die Mundwinkel einseitig herunter?</li> <li>Arm: Die Person soll beide Arme horizontal nach vorne strecken und die Daumen nach oben drehen. H\u00e4ngt oder f\u00e4llt einer der Arme herunter?</li> <li>Speech: Die Person soll sprechen: Ist die Sprache undeutlich oder schwer verst\u00e4ndlich?</li> <li>Time: Jede Minute z\u00e4hlt. Bei einer Behandlung innerhalb von 3h stehen die Chancen auf Genesung gut.</li> </ul> <p>Bei Symptomen umbedingt 144 w\u00e4hlen und die Person flach auf den R\u00fccken legen</p>"},{"location":"Allgemein/Nothelfer/Nothelfer.html#herzmassage","title":"Herzmassage","text":"<p>Der Patient muss in der R\u00fcckenlage auf einem festen Untergrund liegen. Der Brustkorb muss frei sein. Die H\u00e4nde sollen \u00fcbereinander auf der unteren H\u00e4lfte des Brustbeins gelegt werden.</p> <p></p> <p>Bei Erwachsenen soll 30 Mal in Folge kr\u00e4ftig, senkrecht im Tempo 100-120 pro Minute 5-6 cm nieder gedr\u00fcckt werden (ca. 2x pro Sekunde). Danach soll die Brustkorb komplett entlastet werden.</p> <p>Nach 30 St\u00f6ssen, sollen 2 schnelle Atemst\u00f6sse durch Mund oder Nase ein geblasen werden. Ein Atemstoss, soll ca. 1 Sekunde dauern. </p> <p>Dies soll solange gemacht werden, bis Fachhilfe eintrifft oder ein Defibrillator die Anweisung dazu gibt.</p> <p></p>"},{"location":"Allgemein/Nothelfer/Nothelfer.html#aed-einsetzten","title":"AED einsetzten","text":"<ol> <li>Defibrillator enschalten</li> <li>Klebeelektroden entnehmen und beide Elektroden am Brustkorb des Patienten anbringen (gem\u00e4ss Bild auf Ger\u00e4t)</li> <li>Herzmassage und Beatmung dabei durch Nothelfer weiterf\u00fchren</li> <li>Bei Aufforderung durch das Ger\u00e4t, Abstand nehmen und ev. Knopf zum Ausl\u00f6sen des Schocks dr\u00fccken</li> <li>Weiter Herzmassage und Beatmung durchf\u00fchren</li> </ol>"},{"location":"Allgemein/Nothelfer/Nothelfer.html#verbrennungen","title":"Verbrennungen","text":"<p>Wenn mehr als 15% bei einem Erwachsenen oder 10% bei einem Kind verbrannt ist, kann dies Lebensbedrohlich sein. Als Faustregel kann die Hand inklusive Finger als 1% angesehen werden.</p> <p>Verbrennungen ab dem 2. Grade (Blasenbildung, schmerzhaft) oder 3. Grade (Verkohlung, schmerzlos, da Nervenenden zerst\u00f6rt sind) m\u00fcssen von einem Arzt behandelt werden.</p> <p>Flammen l\u00f6schen und Kleider entfernen, wenn sie nicht mit der Haut verklebt sind. Ringe, G\u00fcrtel, Schuhe, etc, an betroffenen K\u00f6rperteilen entfernen, da diese anschwellen k\u00f6nnen.</p> <p>Br\u00e4nde sollen f\u00fcr ca. 15-20 Minuten mit lauwarmen Wassern (20\u00b0C) gek\u00fchlt werden. Eis und kaltes Wasser sollten vermieden werden. Zus\u00e4tzlich darauf achten, dass der Patient nicht ausk\u00fchlt.</p> <p>Es k\u00f6nnte eine Rauchvergiftung bei einem Brandvorliegen. In diesem Fall sollte einen Arzt darauf schauen.</p>"},{"location":"Allgemein/PROG/2_OOP_Takeaways.html","title":"OOP Takeaways","text":""},{"location":"Allgemein/PROG/2_OOP_Takeaways.html#wieso-getters-und-setters","title":"Wieso Getters und Setters","text":"<p>Getters und Setters haben mehrere Vorteile:</p> <ul> <li> <p>Validation  kann sehr einfach eingebaut werden, auch im Nachteil</p> </li> <li> <p>Die interne Struktur kann \u00e4ndern, ohne dass sich die \u00f6ffentliche Schnittstelle \u00e4ndern muss</p> </li> <li> <p>es ist Konvention</p> </li> </ul>"},{"location":"Allgemein/PROG/2_OOP_Takeaways.html#demeters-law","title":"Demeters Law","text":"<p>(source: Law of Demeter - Wikipedia)</p> <p>Das Law of Demeter besagt folgendes:</p> <ul> <li> <p>Jede Einheit sollte nur limitiertes Wissen \u00fcber andere Einheiten haben</p> </li> <li> <p>Eine Einheit spricht nur mit seinen Freunden, nicht Fremde.</p> </li> </ul> <p>Zum einen f\u00fchrt dies dazu Klassen nur so viel wiessen, wie umbedingt n\u00f6tig, aber auch zu kleinen Schnittstellen. Anstatt <code>a.getB().getName()</code> w\u00fcrde man die Methode <code>a.getBName()</code> erstellen, welche den Aufruf weiter delegiert. Man sollte also nicht durch andere Methoden \"durch greiffen\"</p> <p>Formaler: </p> <p>Eine Methode <code>m</code> auf dem Objekt <code>a</code>, solte nur auf folgendes zugreiffen:</p> <ul> <li> <p><code>a</code> selbst </p> </li> <li> <p><code>m</code>'s Parameter</p> </li> <li> <p>Lokale Variabeln von <code>m</code></p> </li> <li> <p>Attribute von <code>a</code></p> </li> </ul> <p>Folgendes sollte vermiden werden: <code>a.m().n()</code></p>"},{"location":"Allgemein/PROG/2_OOP_Takeaways.html#vorteile","title":"Vorteile","text":"<p>Die Vorteile von Demeters Law sind, dass es zu Relationen kommt, welche nicht auf interne Strukturen anderen Objekte abh\u00e4ngig sind. Dies kommt davon, dass Aufrufe delegiert werden und somit auch abstrahiert.</p>"},{"location":"Allgemein/PROG/2_OOP_Takeaways.html#nachteile","title":"Nachteile","text":"<p>Es gibt duplizierten Code, da man zum Teil delegieren muss. </p> <p>Wenn man Demeters Law auf der Klassenebenen anwendet, kann es zu grossen Schnittstellen f\u00fchren, da man eine Klasse um delegierende Methoden erweitern. Wenn man ein Attribute wie <code>a.b().c()</code> ben\u00f6tigt, anstatt <code>a.c()</code> zu hinzuf\u00fcgen, kann man sich auch \u00fcberlegen der Klasse ein Attribute <code>c</code> hinzuzuf\u00fcgen. Damit die Koh\u00e4sion nicht alzufest leidet, k\u00f6nnen auch Methoden umbenannt werden, so dass sie besser zur Klasse passen (Spieler delegiert das Inventar zu einer Rucksackklasse. Die Methode <code>addItem(Item)</code> k\u00f6nnte zu <code>pickUpItem(Item</code> umbenannt werden, was wieder gut zu <code>Player</code> passen w\u00fcrde)</p>"},{"location":"Allgemein/PROG/2_OOP_Takeaways.html#kohasion","title":"Koh\u00e4sion","text":"<p>Koh\u00e4sion beschreibt, wie gut eine Methode oder Klasse eine logische Aufgabe oder Einheit abdeckt. </p> <p>Als Beispiel: Wenn eine <code>Calculator</code> Klasse die Methoden <code>add(int, int)</code>, <code>sub(int, int)</code>, <code>showGui(int)</code> hat, dann hat sie eine tiefe Koh\u00e4sion, da <code>showGui(int)</code> wenig mit der Calculator Klasse zu tun hat.</p> <p>Als Hilfe kann man sich immer Fragen: Gibt es ein passenden Klassennamen f\u00fcr diese Klasse?</p> <p>Der Vorteil von einer hohen Koh\u00e4sion ist, dass eine Klasse oder Methode wiederverwendbarer wird, da sie nur etwas macht und es so wahrscheinlicher ist, dass dieselbe Klasse oder Methode mehrmals verwendet werden kann.</p>"},{"location":"Allgemein/PROG/2_OOP_Takeaways.html#koppelung","title":"Koppelung","text":"<p>Koppelung beschreibt, wie fest Klassen abh\u00e4ngig von einander sind. Grunds\u00e4tzlich ist eine tiefere Koppelung besser, da so \u00c4nderungen sich nicht durch die ganze Codebasee ziehen. Daf\u00fcr m\u00f6chte man m\u00f6glichst kleine Schnittstellen, da so die Abh\u00e4ngigkeitsm\u00f6glichkeiten von einer Klasse reduziert werden.</p> <p>Der Vorteil von einer loser Kopplung ist, dass sich \u00c4nderungen an einer einzelnen Klasse einfacher durchf\u00fchren lassen, da diese \u00c4nderungen mehr lokale Auswirkungen haben anstatt globale.</p>"},{"location":"Allgemein/PROG/2_OOP_Takeaways.html#polymorphie","title":"Polymorphie","text":""},{"location":"Allgemein/PROG/3_Patterns.html","title":"Patterns","text":""},{"location":"Allgemein/PROG/3_Patterns.html#strategy-pattern","title":"Strategy Pattern","text":"<p>Beim Strategy Pattern wird ein Algorithmus in eine Strategy-Klasse extrahiert. Dies erleichtert es, einen Algorithmus mit einem anderen zu wechseln.</p> <p>Im folgenden Beispiel wird eine Hirachie einer Ente gezeigt. Dabei hat Ente verschiedene Methoden, welche von verschiedenen Entenarten \u00fcberschrieben werden k\u00f6nnen. </p> <p>Ein Problem, dass bei einer solchen Hirarchie entstehen kann, ist dass es reduntante Implementationen von einzelnen Methoden geben kann. Als Beispiel: Die Stockente und die Reiherente k\u00f6nnen beide fliegen, w\u00e4hrend die Gummiente und Dekoente nicht fliegen k\u00f6nnen. Zwei der Klasse m\u00fcssen immer <code>fliegen()</code> \u00fcberschreiben.</p> <p></p> <p>Als Alternative kann hier das Strategy-Pattern genutzt werden. Nun hat die Ente-Klasse Referenzen zu Strategy-Implementationen, welche entscheiden, ob eine Ente fliegen oder nicht fliegen kann. So kann duplizierter Code verhindert werden</p> <p></p>"},{"location":"Allgemein/PROG/3_Patterns.html#mvc","title":"MVC","text":"<p>Model: Contains the data with the domain logic, but it has to be independent from the View-Classes.</p> <p>View: The UI components which render the data. The view doesn't call the model directly (usually), but it knows about the types of the model (for example via generics).</p> <p>Controller: The glue between the model and the UI. It listens to events from the UI and calls the model accordingly</p> <p></p>"},{"location":"Allgemein/PROG/3_Patterns.html#decorator","title":"Decorator","text":"<p>A problem which can occur with inheritance is that the amount of classes can explode. Imagine having a Beverage interface which defines a few methods for accessing information. Now for every different beverage type we have to create a new class and implement the methods. Is there a combination with sugar, sure, let\u2019s make another class out of it.</p> <p></p> <p>The \u201c-WithSugar\u201d and \u201c-WithMilk\u201d class could be omitted by using inheritance but not every beverage has the option of milk or sugar (FruitTee or MilkCoffee comes to mind).</p> <p>A solution to this problem is this:</p> <p></p> <p>Every type of beverage still has its own class but instead of having a \u201c-WithMilk\u201d and \u201c-WithSugar\u201d class for every type, there is now a WithSugar and a WithMilk class which extends of the Decorator. Every Decorator has a beverage and its goal is to add information to this beverage. You might also notice that the decorator itself is a beverage. </p> <p>This allows this: </p> <pre><code>Beverage tee = new WithSugar(new WithMilk(new BlackTee())); \ntee.cost(); // this returns the cost of the black tee and the WithSugar and WithMilk add their own cost\n</code></pre> <p>What happens here is that the tee object consists of a WithSugar object, which has a WithMilk object as its beverage and the WithSugar object will add the price to the returns value of the WithMilk.cost() method. The same thing happens with the WitthMilk and the BlackTee object.</p>"},{"location":"Allgemein/PROG/4_Testing.html","title":"Testing","text":""},{"location":"Allgemein/PROG/4_Testing.html#aquivalenzklassen","title":"\u00c4quivalenzklassen","text":"<p>In einer \u00c4quivalenzklassen sind alle m\u00f6glichen Eingabewerte, welche vom Programm gleich verarbeitet werden.</p> <p>Dabei gibt es g\u00fcltige \u00c4quivalenzklassen, welche Werte beinhalten, welche vom Programm verarbeitet werden sollen und es gibt Ung\u00fcltige \u00c4quivalenzklassen, welche vom Programm erkannt und korrekt behandelt werden sollen (Exception, Return-Value, ...)</p> <p>Regeln, wenn \u00c4quivalenzklassen gebildet werden:</p> <ul> <li>Wenn g\u00fcltige Eingabewerte ein zusammenh\u00e4ngender Wertebereich bilden, so muss eine g\u00fcltige \u00c4quivalenzklasse und zwei ung\u00fcltige \u00c4quivalenzklassen gebildet werden</li> <li>Wenn Eingabewerte eine Bedinung erf\u00fcllen m\u00fcssen (mit dem Buchstaben ' A' starten), dann muss eine g\u00fcltige und eine ung\u00fcltige \u00c4quivalenzklasse gebildet werden.</li> </ul> <p>Aus diesen \u00c4quivalenzklassen k\u00f6nnen nun Testf\u00e4lle abgeileit werden. Dabei kann folgendes beachtet werden:</p> <ul> <li>Ein Testfall darf mehrere g\u00fcltige \u00c4quivalenzklassen abdecken</li> <li>Ein Testfall f\u00fcr ung\u00fcltige \u00c4quivalenzklassen sollte nur einen ung\u00fcltigen Wert enhalten</li> <li>Grenzwerte sollten ber\u00fccksichtigt werden</li> </ul>"},{"location":"Allgemein/PROG/4_Testing.html#first-regeln","title":"FIRST-Regeln","text":""},{"location":"Allgemein/PROG/4_Testing.html#definition-of-testing","title":"Definition of Testing","text":"<p>Testing is the process of executing a programm with the intent of finding errors.</p>"},{"location":"Allgemein/PROG/4_Testing.html#principles-of-testing","title":"Principles of Testing","text":"<ol> <li>Specification of Input and Output    For each test case the input and the expected output should be specified.</li> <li>Separation of Creation and Testing    The developer of the code shouldn't write the test for their code.</li> <li>Completeness of Tests    Code should always be tested for valid inputs and invalid tests. The natural tendency is to test only the valid inputs.</li> <li>Testing is an investement    Test cases are reused</li> <li>Error Cluster    If an error is found in a section of code,  the probability of more errors increases. Error-prone Sections should be well tested.</li> </ol>"},{"location":"Allgemein/PROG/4_Testing.html#mock-testing","title":"Mock Testing","text":"<p>Mock testing is used when a class with dependencies should be tested. The dependencies can be mocked that it implements the minimal of behaviour to function. This allows to only test the class under testing and not its dependencies.</p>"},{"location":"Allgemein/PROG/4_Testing.html#different-mocking-types","title":"Different Mocking Types","text":"<p>There are different type of mock classes.</p> <p></p>"},{"location":"Allgemein/PROG/4_Testing.html#dummy","title":"Dummy","text":"<p>Dummies are objects which are never used. They fill parameter lists of methods, if those methods would throw NullPointerExceptions otherwise.</p>"},{"location":"Allgemein/PROG/4_Testing.html#stubs","title":"Stubs","text":"<p>A stub is the minimal implementation of an interface. Void method usually don't do anything and methods with a return value will usually return a hard coded value.</p> <p>Here is an example.</p> <pre><code>public class EmailStub implements EmailServer {\n    public void sendMail(String mailTextt) {\n        // do nothing\n    }\n\n    public String receiveMail() {\n        return \"Mail received\"; // a hard coded value\n    }\n}\n</code></pre> <p>An <code>EmailDummy</code> would return <code>null</code> in <code>receiveMail()</code> because it is just a dummy.</p>"},{"location":"Allgemein/PROG/4_Testing.html#spies","title":"Spies","text":"<p>Spies are similar to stubs, but record which members were invoked. This information can be checked in unit tests.</p>"},{"location":"Allgemein/PROG/4_Testing.html#fakes","title":"Fakes","text":"<p>A fake will implement a class similar to the production class but with shortcuts (e.g. an in-memory database)</p>"},{"location":"Allgemein/PROG/4_Testing.html#mock","title":"Mock","text":"<p>A test double which implements the functions in away which we expect for the test. Depending on how they are implemented, they can function as a dummy, stub, spy or a fake.</p> <p>Mock testing is usually split in multiple phases: </p> <ol> <li>Create: The mock object is created</li> <li>Specify: The expected behaviour is specified</li> <li>Use: The mock object is used in a normal unit test</li> <li>Verify behaviour: The mock object is verified</li> </ol> <pre><code>public class OrderInteractionTester extends MockObjectTestCase {\n    private static String TALISKER = \"Talisker\";\n    public void testFillingRemovesInventoryIfInStock() {\n        // configuration\n        Order order = new Order(TALISKER, 50);\n        Mock warehouseMock = new Mock(Warehouse.class);\n        // expectations\n        warehouseMock\n            .expects(once())\n            .method(\"hasInventory\")\n            .with(eq(TALISKER),eq(50))\n            .will(returnValue(true));\n        warehouseMock\n            .expects(once())\n            .method(\"remove\")\n            .with(eq(TALISKER), eq(50))\n            .after(\"hasInventory\");\n        //exercise\n        order.fill((Warehouse)warehouseMock.proxy());\n        //verify\n        warehouseMock.verify();\n        //verify expected behavior\n        assertTrue(order.isFilled()); //verify state\n    }\n}\n</code></pre>"},{"location":"Allgemein/PROG/4_Testing.html#blacking-box-vs-white-box-testing","title":"Blacking-Box vs White-Box Testing","text":"<p>In black-box testing (or state testing), only the public interface is known. No assumptions is done about the internal implementaiton. Usually stubbing can be used.</p> <p>In white-box testing (or behaviour testing) the inner working of the class is known and tested. Here, usually mocking can be used.</p>"},{"location":"Allgemein/PROG/4_Testing.html#mockito","title":"Mockito","text":""},{"location":"Allgemein/PROG/4_Testing.html#create-a-mock","title":"Create a Mock","text":"<p>Either the method <code>mock(Class&lt;?&gt; clazz)</code> is used or the annotation <code>@Mock</code> for which <code>MockitoAnnotations.openMocks()</code> needs to be called in the setu</p> <pre><code>void testHalf(@Mock Half mockedHalf2) {\n    Half mockedHalf = mock(Half.class);\n}\n</code></pre>"},{"location":"Allgemein/PROG/4_Testing.html#mock-behaviour","title":"Mock Behaviour","text":"<p>To mock the return value of methods, the <code>when(&lt;method&gt;).thenReturn(&lt;value1&gt;).thenReturn(&lt;value2&gt;)</code> pattern can be used. When the returned value should have a bit more logic than a constant value, the <code>thenAnswer(Answer&lt;T&gt;)</code> method can be used (see example below).</p> <p>To mock an exception throwing method, the <code>doThrow(&lt;exception&gt;).when(&lt;mockObj&gt;).&lt;method&gt;(&lt;args&gt;)</code> pattern needs to be used. The method must support throwing the exception in case of an checked-exception.</p> <p>There are multiple matchers available, which can match an argument of a mocked method:</p> <ul> <li>Any-matchers: <code>anyInt()</code>, <code>anyString()</code>, <code>any(Class&lt;?&gt; clazz)</code>, ...</li> <li>String-matchers: <code>startsWith(String)</code>,  <code>endsWith(String)</code>, <code>contains(String)</code>, ...</li> <li>Object-matchers: <code>isNull()</code>, <code>isNotNull()</code>, ...</li> <li>Compare-matchvers: <code>eq(T obj)</code>, ...</li> <li>Custom-matchers: <code>argThat()...</code>, <code>intThat(...)</code>, ...</li> </ul> <pre><code>Person mock = mock(Person.class);\n\n// mock return values\nwhen(mock.getName()).thenReturn(\"Hans\").thenReturn(\"Max\");\ndoReturn(10).doReturn(20).when(mock).getAge();\nwhen(mock.getMessage(anyString())).thenAnswer((InvocationOnMock invocation) -&gt; \"hello world\");\n\n// mock exception throwing\ndoThrow(new IllegalArgumentException()).when(mock).setAge(-1);\n</code></pre> <p>When an method isn't mocked, then a value is still returned based on the return value:</p> <ul> <li>The return value is an primitive: The \"zero\"-primitive is returned</li> <li>The return value is a primitive wrapper class: Then the \"zero\"-primitive of the wrapper class is returned</li> <li>The return value is a collection: The return value is an empty collection</li> <li>For the toString() method an description of the mock is returned</li> <li>For <code>Comparable#compareTo(T other)</code> returns zero if the references are equal, else a non-zero value</li> <li>Else: <code>null</code> is returned.</li> </ul>"},{"location":"Allgemein/PROG/4_Testing.html#verify-behaviour","title":"Verify Behaviour","text":"<p>Mockito can verify that a method was invoked. For this, the pattern <code>verify(&lt;mock&gt;).&lt;method&gt;(&lt;args&gt;)</code> can be used. With an additional argument of verify, further conditions can be specified. With <code>verify(&lt;mock&gt;, never()).&lt;method&gt;(&lt;args&gt;)</code> can be checked that the method was never invoked. Other condition includes <code>never()</code>, <code>times(int)</code>, <code>atLeastOnce()</code>, <code>atLeast(int)</code>, <code>atMost(int)</code>, <code>timeout(int milliseconds)</code> (that the method is invoked in the given timeout). These conditions can be combined like <code>timeout(10).times(2)</code></p> <p>Mockito can also verify the order in which methods were called. For this a <code>InOrder</code> object can be created with <code>inOrder(&lt;mockObj&gt;)</code>. On the <code>InOrder</code> object, the <code>verify(...)</code> method can be used.</p> <pre><code>verify(mockedHalf).contractAtrium();\nverify(mockedHalf, times(2)).isAtrioventricularValveOpen();\nverify(mockedList, never()).add(\"ZHAW\");\n\nInOrder inOrder = inOrder(singleMock);\n// Verify the order\ninOrder.verify(singleMock).add(\"second\"); \ninOrder.verify(singleMock).add(\"first\");\n</code></pre>"},{"location":"Allgemein/PROG/4_Testing.html#spies_1","title":"Spies","text":"<p>A spy object is created based on a \"real\" object. All methods are delegated to this object, but the behaviour of methods can be selectively changed (similar with mocks) and it can verify than methods were called. It can be created with <code>spy(Object obj)</code> and can be used like a mock. Similar to <code>@Mock</code> the <code>@Spy</code> annotation can be used instead of <code>spy(...)</code> (<code>MockitoAnnotations.openMocks()</code> needs to be called in the setup method).</p> <pre><code>List list = new LinkedList();\n// create a spy on the real object instance\nList spy = spy(list);\n// stub the size() method\nwhen(spy.size()).thenReturn(100);\n// add() is not stubbed. So it will use the real method\nspy.add(\"one\"); spy.add(\"two\");\nassertEquals(\"one\", spy.get(0));\nassertEquals(100, spy.size());\n</code></pre>"},{"location":"Allgemein/PROG/5_Threads.html","title":"Threads","text":""},{"location":"Allgemein/PROG/5_Threads.html#share-data-between-multiple-threads","title":"Share Data between Multiple Threads","text":""},{"location":"Allgemein/PROG/5_Threads.html#atomic","title":"Atomic","text":"<p>Use the atomic</p>"},{"location":"Allgemein/PROG/5_Threads.html#synchronized","title":"Synchronized","text":"<pre><code>class Account {\n    private int balance;\n    public synchronized void transferAmount1(int amount) {\n        this.balance += amaount;\n    }\n\n    public void transferAmount2(int amount) {\n        synchronized(this) {\n            this.balance += amaount;\n        }\n    }\n\n    public synchronized static staticLock1() {\n        //do stuff\n    }\n    public static staticLock1() {\n        synchronized(Amount.class) {\n            // do stuff\n        }\n    } \n}\n</code></pre> <p>Never call an other synchronized method which uses a different object. This can cause a dead lock.</p>"},{"location":"Allgemein/PROG/5_Threads.html#monitor","title":"Monitor","text":"<p>A Java object can be used as a locked. </p> <pre><code>class FooBar {\n    private Object monitor;\n\n    public void test() {\n        synchronized(monitor) {\n            // waits for the monitor to be called with monitor.notify() or monitor.notifyAll()\n            monitor.wait();\n        }\n    }\n}\n</code></pre> <p><code>Object.wait()</code> blocks until <code>Object.notify()</code> or <code>Object.notifyAll()</code> is invoked on the same monitor object. <code>notify()</code> only wakes up one waiting Thread while <code>notifyAll()</code> will wake up all waiting threads.</p> <p><code>wait()</code> releases the monitor object. </p>"},{"location":"Allgemein/PROG/5_Threads.html#types-of-synchronization","title":"Types of Synchronization","text":""},{"location":"Allgemein/PROG/5_Threads.html#mutual-exclusion","title":"Mutual Exclusion","text":"<p>Mutual Exclusion means that only only thread can access a shared resource at a time. This usually means, that a section of code needs to be locked (eg. with synchronize) until the thread is done with that code.</p>"},{"location":"Allgemein/PROG/5_Threads.html#conditional-synchronization","title":"Conditional Synchronization","text":"<p>Conditional synchronization is needed when one thread waits for an event to happen in another thread. This is basicly the Producer-Consumer \"Pattern\".</p>"},{"location":"Allgemein/PROG/5_Threads.html#producer-consumer","title":"Producer-Consumer","text":"<p>The producer produces some data which can be consumed by the consumer. The consumer tries to access the resource. If it is already ready, then it can just continue. If not it will <code>wait()</code> for the producer to <code>notify()</code> its monitor after which it can access the resource.</p> <p>The producer thread might needs to throttle itself to avoid loosing results when no consumer can consume them.</p> <p></p> <p>Here is an example for a consumer-producer example: The <code>while</code> loop is necessary because when the thread calls <code>wait()</code> it releases the monitor the synchronize block and an other thread can enter the synchronize block and call <code>wait()</code>.</p> <p></p>"},{"location":"Allgemein/PROG/5_Threads.html#synchronized-queue","title":"Synchronized Queue","text":"<p>With a queue the problem of the consumer and producer can be abstracted into a separate class to make it less brittle. Implementing the following becomes trivial:</p> <ul> <li>The producer fills the queue with data</li> <li>The consumer retrieves the data from the queue if available</li> <li>The consumer waits only if the queue is empty</li> <li>The producer waits when the queue is full</li> </ul>"},{"location":"Allgemein/PROG/5_Threads.html#locks-and-condit","title":"Locks and Condit","text":""},{"location":"Allgemein/PROG/5_Threads.html#problems-of-lack-of-synchronization","title":"Problems of lack of Synchronization","text":""},{"location":"Allgemein/PROG/5_Threads.html#lost-update","title":"Lost Update","text":"<p>A lost update happens when an write/update was overridden by another thread.</p> <p></p>"},{"location":"Allgemein/PROG/5_Threads.html#dead-locks","title":"Dead Locks","text":"<p>TODO: Definition</p>"},{"location":"Allgemein/PROG/5_Threads.html#how-to-avoid-dead-locks","title":"How to avoid Dead Locks","text":"<p>Generally avoiding shared resources will avoid dead locks as well. This however isn't always possible.  TODO</p>"},{"location":"Allgemein/PROG/5_Threads.html#dining-philosophers","title":"Dining Philosophers","text":"<p>There are 5 Philosophers. Each philosophers can either eat or think. For eating a philosopher needs two forks, but there are only 5 forks in total, so not everybody can eat at the same time.</p> <p></p> <p>A naive solution would first let the philosophers take the right and then the left fork. This would result in everybody holding a fork in the right hand and waiting for a fork to be available resulting in a dead lock.</p> <p></p> <p>To prevent this cyclic waiting condition the abstract can be change to always take and release two forks as one atomic action. The situation above should never happen.</p> <p>A second solution is to change the behavior of one philosopher to first take the left and then the right fork.</p> <p></p>"},{"location":"Allgemein/PROG/6_IO.html","title":"IO","text":""},{"location":"Allgemein/PROG/6_IO.html#serializing","title":"Serializing","text":"<p>In order for an object to be serializable in needs to implement the marker interface <code>Serializable</code>.</p> <p></p> <p>Fields can be marked with transient (<code>private transient Date someDate;</code>) if they shouldn't be serialized. This can be usefull for serializing classes which contain unserializable classes (like dates, file descriptor, network sockets or db connections).</p> <pre><code>Employee harry = new Employee(\"Dirty Harry\", 50000, LocalDate.of(1967, 3, 11));\nManager boss = new Manager(\"Walter Smith\", 80000, LocalDate.of(1950, 12, 4)); // Manager is extending Employee\nboss.setAssistant(harry); \n\n// Save (serialize) two objects to the file empolyee.dat\ntry (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(\"employee.dat\"))) {\n    // objects are written in the given order to the file\n    out.writeObject(harry); // write object Dirty Harry\n    out.writeObject(boss); // write object Walter Smith\n    out.writeInt(12); // write value of primitive type int\n}\n// Load (deserialize) two objects from the file employee.dat\ntry (ObjectInputStream in = new ObjectInputStream(new FileInputStream(\"employee.dat\"))) {\n    // number and order of reading the objects must match, also the type must be compatible (match or super class)\n    Employee e1 = (Employee) in.readObject(); // object for Dirty Harry\n    Employee e2 = (Employee) in.readObject(); // object for Walter Smith\n    // e2.getClass().getName() would return type Manager\n    int count = in.readInt(); // read primitive type int\n}\n</code></pre>"},{"location":"Allgemein/PROG/6_IO.html#io-streams","title":"IO Streams","text":"<p>A byte stream can be converted to a char stream with <code>InputStreamReader</code> and <code>OutputStreamWriter</code> respectively.</p> <p></p> <p><code>InputStream</code>  and <code>Readers</code> usually allow to skip a number of bytes/chars with <code>skip(long n)</code>. However, <code>OutputStream</code>s  and <code>Writer</code>s don't allow removing or inserting into a file, only appending (<code>FileOutputStream(File file, boolean append)</code>) or replacing is supported.</p>"},{"location":"Allgemein/PROG/6_IO.html#randomaccessfile","title":"RandomAccessFile","text":"<p>Allows reading from anywhere in the file, not just skipping bytes like an <code>InputStream</code>. This can be done with the <code>seek(long pos)</code> or the <code>skipBytes(long n)</code> methods.</p> <pre><code>// create file and write some data into it\nFile f = new File(\"randomaccessfile.txt\");\ntry (BufferedWriter bw = new BufferedWriter(new FileWriter(f,true))) {\n    for(int i=2; i&lt;=10; i++) { \n        if( i%2 == 0) { \n            bw.write(Integer.toString(i)); bw.newLine(); \n        } \n    }\n}\ntry (RandomAccessFile randomFile = new RandomAccessFile(f,\"rw\")) { // read-write mode\n    for(int i=1; i&lt;=5; i++){\n        randomFile.seek(randomFile.length()); // set file pointer to end of file (EOF)\n        randomFile.writeBytes(Integer.toString(i)); // append \"1\",\"2\",\"3\",\"4\",\"5\" at EOF\n    }\n}\ntry (RandomAccessFile randomFile = new RandomAccessFile(f, \"r\")) { // read-only mode\n    int i = (int) randomFile.length(); // get length of file in bytes\n    System.out.println(\"Length: \" + i);\n    randomFile.seek(i-3); // set file pointer to EOF-3 bytes\n    for(int ct = 0; ct &lt; 3; ct++){\n        byte b = randomFile.readByte(); // read byte(s)\n        System.out.println((char)b);\n    }\n}\n</code></pre>"},{"location":"Allgemein/PROG/6_IO.html#charset","title":"Charset","text":"<p>An instance of <code>Charset</code> can be either obtained by <code>Charset.forName(&lt;name&gt;)</code>, <code>Charset.getDefaultCharset()</code> or <code>Charset.getAvailableCharsets()</code>. Alternatively <code>StandardCharsets.UTF_8</code> can be used.</p>"},{"location":"Allgemein/PROG/6_IO.html#logger","title":"Logger","text":"<p>Each <code>Logger</code> instance has a list of <code>Handlers</code>. A <code>Handler</code> can be used by multiple <code>Loggers</code> and handles the storing of the logging messages (like writing it to a file, or displaying in the console). Both the <code>Logger</code> and the <code>Handler</code> have a Level. And each will only forward messages which have a level higher than their configured level. </p> <p>The possible levels are: <code>SEVERE(1000)</code>, <code>WARNING(900)</code>, <code>INFO(800)</code>, <code>CONFIG(700)</code>, <code>FINE(500)</code>, <code>FINER(400)</code>, <code>FINEST(300)</code>.</p> <p></p> <p>The following properties file is an example logging configuration.</p> <pre><code>## configure handlers\njava.util.logging.ConsoleHandler.level = ALL\n## File handler configuration\n## see https://docs.oracle.com/en/java/javase/11/docs/api/java.logging/java/util/logging/FileHandler.html\njava.util.logging.FileHandler.level = ALL\n# %g = generation number, %u = unique number to resolve conflicts\njava.util.logging.FileHandler.pattern = log-%g-%u.log\n# use SimpleFormatter instead of default XMLFormatter\njava.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter\njava.util.logging.FileHandler.encoding = UTF-8\n# max log file size in byte before switching to next generation (=1kB); 0 = unlimited\njava.util.logging.FileHandler.limit = 1024\n# max number of generations (%g) before overwriting (5 -&gt; 0..4)\njava.util.logging.FileHandler.count = 5\njava.util.logging.FileHandler.append = true\n## configure Formatter (see SimpleFormatter documentation)\njava.util.logging.SimpleFormatter.format = [%1$tc] %4$s: %5$s {%2$s}%6$s%n\n## configure default log level (for all loggers, if not overwritten below)\n.level = INFO\n## configure root logger \"\"\nhandlers = java.util.logging.ConsoleHandler\nlevel = INFO\n## Application specific logger configuration\n# loggers starting with \"ch.zhaw.prog2.io\" -&gt; write to console and file and do not forward to parent handlers\nch.zhaw.prog2.io.level = FINE\nch.zhaw.prog2.io.handlers = java.util.logging.FileHandler, java.util.logging.ConsoleHandler\nch.zhaw.prog2.io.useParentHandlers = false\n# logger for class ch.zhaw.prog2.io.LogConfiguration\nch.zhaw.prog2.io.LogConfiguration.level = FINEST\n</code></pre> <p>A log configuration can be loaded anytime and all already existing loggers will be updated.</p> <pre><code>InputStream logConfig = this.getClass().getClassLoader().getResourceAsStream(\"log.properties\");\nLogManager.getLogManager().readConfiguration(logConfig);\n</code></pre>"},{"location":"Allgemein/PROG/7_Streams.html","title":"Streams","text":""},{"location":"Allgemein/PROG/7_Streams.html#create-streams","title":"Create Streams","text":""}]}